   1              		.file	"rprintf.c"
   2              		.text
   3              	.Ltext0:
   4              		.cfi_sections	.debug_frame
   5              		.align	2
   7              	myputchar:
   8              	.LFB1:
   9              		.file 1 "../Library/rprintf/rprintf.c"
   1:../Library/rprintf/rprintf.c **** //#########################################################################
   2:../Library/rprintf/rprintf.c **** // printf.c
   3:../Library/rprintf/rprintf.c **** //
   4:../Library/rprintf/rprintf.c **** // *** printf() based on sprintf() from gcctest9.c Volker Oth
   5:../Library/rprintf/rprintf.c **** //
   6:../Library/rprintf/rprintf.c **** // *** Changes made by Holger Klabunde
   7:../Library/rprintf/rprintf.c **** // Now takes format strings from FLASH (was into RAM ! before)
   8:../Library/rprintf/rprintf.c **** // Fixed bug for %i, %I. u_val was used before it had the right value
   9:../Library/rprintf/rprintf.c **** // Added %d, %D (is same as %i, %I)
  10:../Library/rprintf/rprintf.c **** // Support for long variables %li, %ld, %Lu, %LX ....
  11:../Library/rprintf/rprintf.c **** // %x, %X now gives upper case hex characters A,B,C,D,E,F
  12:../Library/rprintf/rprintf.c **** // Output can be redirected in a single function: myputchar()
  13:../Library/rprintf/rprintf.c **** // Make printf() smaller by commenting out a few #defines
  14:../Library/rprintf/rprintf.c **** // Added some SPACE and ZERO padding %02x or % 3u up to 9 characters
  15:../Library/rprintf/rprintf.c **** //
  16:../Library/rprintf/rprintf.c **** // Todo:
  17:../Library/rprintf/rprintf.c **** // %f, %F for floating point numbers
  18:../Library/rprintf/rprintf.c **** //
  19:../Library/rprintf/rprintf.c **** // *** Changes made by Martin Thomas for the efsl debug output:
  20:../Library/rprintf/rprintf.c **** // - removed AVR "progmem"
  21:../Library/rprintf/rprintf.c **** // - added function pointer for "putchar"
  22:../Library/rprintf/rprintf.c **** // - devopen function
  23:../Library/rprintf/rprintf.c **** //
  24:../Library/rprintf/rprintf.c **** //#########################################################################
  25:../Library/rprintf/rprintf.c **** 
  26:../Library/rprintf/rprintf.c **** #include <stdarg.h>
  27:../Library/rprintf/rprintf.c **** #include <string.h>
  28:../Library/rprintf/rprintf.c **** #include "rprintf.h"
  29:../Library/rprintf/rprintf.c **** 
  30:../Library/rprintf/rprintf.c **** #define SCRATCH 12  //32Bits go up to 4GB + 1 Byte for \0
  31:../Library/rprintf/rprintf.c **** 
  32:../Library/rprintf/rprintf.c **** //Spare some program space by making a comment of all not used format flag lines
  33:../Library/rprintf/rprintf.c **** #define USE_LONG    // %lx, %Lu and so on, else only 16 bit integer is allowed
  34:../Library/rprintf/rprintf.c **** //#define USE_OCTAL // %o, %O Octal output. Who needs this ?
  35:../Library/rprintf/rprintf.c **** #define USE_STRING      // %s, %S Strings as parameters
  36:../Library/rprintf/rprintf.c **** #define USE_CHAR    // %c, %C Chars as parameters
  37:../Library/rprintf/rprintf.c **** #define USE_INTEGER // %i, %I Remove this format flag. %d, %D does the same
  38:../Library/rprintf/rprintf.c **** #define USE_HEX     // %x, %X Hexadezimal output
  39:../Library/rprintf/rprintf.c **** #define USE_UPPERHEX    // %x, %X outputs A,B,C... else a,b,c...
  40:../Library/rprintf/rprintf.c **** #ifndef USE_HEX
  41:../Library/rprintf/rprintf.c ****     #undef USE_UPPERHEX    // ;)
  42:../Library/rprintf/rprintf.c **** #endif
  43:../Library/rprintf/rprintf.c **** #define USE_UPPER   // uncommenting this removes %C,%D,%I,%O,%S,%U,%X and %L..
  44:../Library/rprintf/rprintf.c **** // only lowercase format flags are used
  45:../Library/rprintf/rprintf.c **** #define PADDING         //SPACE and ZERO padding
  46:../Library/rprintf/rprintf.c **** 
  47:../Library/rprintf/rprintf.c **** 
  48:../Library/rprintf/rprintf.c **** static int (*putcharfunc)(int c);
  49:../Library/rprintf/rprintf.c **** 
  50:../Library/rprintf/rprintf.c **** void rprintf_devopen( int(*put)(int) )
  51:../Library/rprintf/rprintf.c **** {
  52:../Library/rprintf/rprintf.c ****     putcharfunc = put;
  53:../Library/rprintf/rprintf.c **** }
  54:../Library/rprintf/rprintf.c **** 
  55:../Library/rprintf/rprintf.c **** static void myputchar(unsigned char c)
  56:../Library/rprintf/rprintf.c **** {
  10              		.loc 1 56 0
  11              		.cfi_startproc
  12              		@ Function supports interworking.
  13              		@ args = 0, pretend = 0, frame = 0
  14              		@ frame_needed = 0, uses_anonymous_args = 0
  15              	.LVL0:
  57:../Library/rprintf/rprintf.c ****     if(c == '\n') putcharfunc('\r');
  16              		.loc 1 57 0
  17 0000 0A0050E3 		cmp	r0, #10
  56:../Library/rprintf/rprintf.c **** {
  18              		.loc 1 56 0
  19 0004 30402DE9 		stmfd	sp!, {r4, r5, lr}
  20              	.LCFI0:
  21              		.cfi_def_cfa_offset 12
  22              		.cfi_offset 14, -4
  23              		.cfi_offset 5, -8
  24              		.cfi_offset 4, -12
  56:../Library/rprintf/rprintf.c **** {
  25              		.loc 1 56 0
  26 0008 0050A0E1 		mov	r5, r0
  27 000c 24409FE5 		ldr	r4, .L3
  28              		.loc 1 57 0
  29              		.loc 1 57 0 is_stmt 0 discriminator 1
  30 0010 0D00A003 		moveq	r0, #13
  31              	.LVL1:
  32 0014 00C09405 		ldreq	ip, [r4, #0]
  33 0018 0FE0A001 		moveq	lr, pc
  34 001c 1CFF2F01 		bxeq	ip
  35              	.L2:
  58:../Library/rprintf/rprintf.c ****     putcharfunc(c);
  36              		.loc 1 58 0 is_stmt 1
  37 0020 0500A0E1 		mov	r0, r5
  38 0024 00C094E5 		ldr	ip, [r4, #0]
  39 0028 0FE0A0E1 		mov	lr, pc
  40 002c 1CFF2FE1 		bx	ip
  59:../Library/rprintf/rprintf.c **** }
  41              		.loc 1 59 0
  42 0030 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
  43 0034 1EFF2FE1 		bx	lr
  44              	.L4:
  45              		.align	2
  46              	.L3:
  47 0038 00000000 		.word	.LANCHOR0
  48              		.cfi_endproc
  49              	.LFE1:
  51              		.align	2
  52              		.global	rprintf_devopen
  54              	rprintf_devopen:
  55              	.LFB0:
  51:../Library/rprintf/rprintf.c **** {
  56              		.loc 1 51 0
  57              		.cfi_startproc
  58              		@ Function supports interworking.
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              		@ link register save eliminated.
  62              	.LVL2:
  52:../Library/rprintf/rprintf.c ****     putcharfunc = put;
  63              		.loc 1 52 0
  64 003c 04309FE5 		ldr	r3, .L6
  65 0040 000083E5 		str	r0, [r3, #0]
  53:../Library/rprintf/rprintf.c **** }
  66              		.loc 1 53 0
  67 0044 1EFF2FE1 		bx	lr
  68              	.L7:
  69              		.align	2
  70              	.L6:
  71 0048 00000000 		.word	.LANCHOR0
  72              		.cfi_endproc
  73              	.LFE0:
  75              		.global	__umodsi3
  76              		.global	__udivsi3
  77              		.align	2
  78              		.global	rprintf
  80              	rprintf:
  81              	.LFB2:
  60:../Library/rprintf/rprintf.c **** 
  61:../Library/rprintf/rprintf.c **** void rprintf(char const *format, ...)
  62:../Library/rprintf/rprintf.c **** {
  82              		.loc 1 62 0
  83              		.cfi_startproc
  84              		@ Function supports interworking.
  85              		@ args = 4, pretend = 16, frame = 16
  86              		@ frame_needed = 0, uses_anonymous_args = 1
  87              	.LVL3:
  88 004c 0F002DE9 		stmfd	sp!, {r0, r1, r2, r3}
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 16
  91              		.cfi_offset 3, -4
  92              		.cfi_offset 2, -8
  93              		.cfi_offset 1, -12
  94              		.cfi_offset 0, -16
  95 0050 FF4F2DE9 		stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  96              	.LCFI2:
  97              		.cfi_def_cfa_offset 68
  98              		.cfi_offset 14, -20
  99              		.cfi_offset 11, -24
 100              		.cfi_offset 10, -28
 101              		.cfi_offset 9, -32
 102              		.cfi_offset 8, -36
 103              		.cfi_offset 7, -40
 104              		.cfi_offset 6, -44
 105              		.cfi_offset 5, -48
 106              		.cfi_offset 4, -52
 107              		.cfi_offset 3, -56
 108              		.cfi_offset 2, -60
 109              		.cfi_offset 1, -64
 110              		.cfi_offset 0, -68
  63:../Library/rprintf/rprintf.c ****     unsigned char scratch[SCRATCH];
  64:../Library/rprintf/rprintf.c ****     unsigned char format_flag;
  65:../Library/rprintf/rprintf.c ****     unsigned short base;
  66:../Library/rprintf/rprintf.c ****     unsigned char *ptr;
  67:../Library/rprintf/rprintf.c ****     unsigned char issigned=0;
  68:../Library/rprintf/rprintf.c ****     va_list ap;
  69:../Library/rprintf/rprintf.c **** 
  70:../Library/rprintf/rprintf.c ****     #ifdef USE_LONG
  71:../Library/rprintf/rprintf.c ****         // #warning "use long"
  72:../Library/rprintf/rprintf.c ****         unsigned char islong=0;
  73:../Library/rprintf/rprintf.c ****         unsigned long u_val=0;
  74:../Library/rprintf/rprintf.c ****         long s_val=0;
  75:../Library/rprintf/rprintf.c ****     #else
  76:../Library/rprintf/rprintf.c ****         unsigned int u_val=0;
  77:../Library/rprintf/rprintf.c ****         int s_val=0;
  78:../Library/rprintf/rprintf.c ****     #endif
  79:../Library/rprintf/rprintf.c **** 
  80:../Library/rprintf/rprintf.c ****     unsigned char fill;
  81:../Library/rprintf/rprintf.c ****     unsigned char width;
  82:../Library/rprintf/rprintf.c **** 
  83:../Library/rprintf/rprintf.c ****     va_start (ap, format);
 111              		.loc 1 83 0
 112 0054 38308DE2 		add	r3, sp, #56
  62:../Library/rprintf/rprintf.c **** {
 113              		.loc 1 62 0
 114 0058 34409DE5 		ldr	r4, [sp, #52]
 115              		.loc 1 83 0
 116 005c 0C308DE5 		str	r3, [sp, #12]
  84:../Library/rprintf/rprintf.c ****     for (;;)
  85:../Library/rprintf/rprintf.c ****     {
  86:../Library/rprintf/rprintf.c **** 		//delay_ms(1); //Added for VCOM testing - without it, rprintf will overrun the VCOM buffer causin
  87:../Library/rprintf/rprintf.c **** 		
  88:../Library/rprintf/rprintf.c ****         while ((format_flag = *(format++)) != '%')
  89:../Library/rprintf/rprintf.c ****         {      // Until '%' or '\0'
  90:../Library/rprintf/rprintf.c ****             if (!format_flag){va_end (ap); return;}
  91:../Library/rprintf/rprintf.c ****                 myputchar(format_flag);
  92:../Library/rprintf/rprintf.c ****         }
  93:../Library/rprintf/rprintf.c **** 
  94:../Library/rprintf/rprintf.c ****         issigned=0; //default unsigned
  95:../Library/rprintf/rprintf.c ****         base = 10;
  96:../Library/rprintf/rprintf.c **** 
  97:../Library/rprintf/rprintf.c ****         format_flag = *format++; //get char after '%'
  98:../Library/rprintf/rprintf.c **** 
  99:../Library/rprintf/rprintf.c ****         #ifdef PADDING
 100:../Library/rprintf/rprintf.c ****             width=0; //no formatting
 101:../Library/rprintf/rprintf.c ****             fill=0;  //no formatting
 102:../Library/rprintf/rprintf.c ****             if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
 103:../Library/rprintf/rprintf.c ****             {
 104:../Library/rprintf/rprintf.c ****                 fill=format_flag;
 105:../Library/rprintf/rprintf.c ****                 format_flag = *format++; //get char after padding char
 106:../Library/rprintf/rprintf.c ****                 if(format_flag>='0' && format_flag<='9')
 107:../Library/rprintf/rprintf.c ****                 {
 108:../Library/rprintf/rprintf.c ****                     width=format_flag-'0';
 109:../Library/rprintf/rprintf.c ****                     format_flag = *format++; //get char after width char
 110:../Library/rprintf/rprintf.c ****                 }
 111:../Library/rprintf/rprintf.c ****             }
 112:../Library/rprintf/rprintf.c ****         #endif
 113:../Library/rprintf/rprintf.c **** 
 114:../Library/rprintf/rprintf.c ****         #ifdef USE_LONG
 115:../Library/rprintf/rprintf.c ****             islong=0; //default int value
 116:../Library/rprintf/rprintf.c ****             #ifdef USE_UPPER
 117:../Library/rprintf/rprintf.c ****             if(format_flag=='l' || format_flag=='L') //Long value
 118:../Library/rprintf/rprintf.c ****             #else
 119:../Library/rprintf/rprintf.c ****             if(format_flag=='l') //Long value
 120:../Library/rprintf/rprintf.c ****             #endif
 121:../Library/rprintf/rprintf.c ****         {
 122:../Library/rprintf/rprintf.c ****             islong=1;
 123:../Library/rprintf/rprintf.c ****             format_flag = *format++; //get char after 'l' or 'L'
 124:../Library/rprintf/rprintf.c ****         }
 125:../Library/rprintf/rprintf.c ****         #endif
 126:../Library/rprintf/rprintf.c **** 
 127:../Library/rprintf/rprintf.c ****         switch (format_flag)
 128:../Library/rprintf/rprintf.c ****         {
 129:../Library/rprintf/rprintf.c ****             #ifdef USE_CHAR
 130:../Library/rprintf/rprintf.c ****                 case 'c':
 131:../Library/rprintf/rprintf.c ****                     #ifdef USE_UPPER
 132:../Library/rprintf/rprintf.c ****                     case 'C':
 133:../Library/rprintf/rprintf.c ****                 #endif
 134:../Library/rprintf/rprintf.c ****                 format_flag = va_arg(ap,int);
 135:../Library/rprintf/rprintf.c ****                 // no break -> run into default
 136:../Library/rprintf/rprintf.c ****             #endif
 137:../Library/rprintf/rprintf.c **** 
 138:../Library/rprintf/rprintf.c ****             default:
 139:../Library/rprintf/rprintf.c ****                 myputchar(format_flag);
 140:../Library/rprintf/rprintf.c ****                 continue;
 141:../Library/rprintf/rprintf.c **** 
 142:../Library/rprintf/rprintf.c ****                 #ifdef USE_STRING
 143:../Library/rprintf/rprintf.c ****                     #ifdef USE_UPPER
 144:../Library/rprintf/rprintf.c ****                     case 'S':
 145:../Library/rprintf/rprintf.c ****                 #endif
 146:../Library/rprintf/rprintf.c ****                 case 's':
 147:../Library/rprintf/rprintf.c ****                 ptr = (unsigned char*)va_arg(ap,char *);
 148:../Library/rprintf/rprintf.c ****                 while(*ptr) { myputchar(*ptr); ptr++; }
 149:../Library/rprintf/rprintf.c ****                     continue;
 150:../Library/rprintf/rprintf.c ****                 #endif
 151:../Library/rprintf/rprintf.c **** 
 152:../Library/rprintf/rprintf.c ****                 #ifdef USE_OCTAL
 153:../Library/rprintf/rprintf.c ****                     case 'o':
 154:../Library/rprintf/rprintf.c ****                     #ifdef USE_UPPER
 155:../Library/rprintf/rprintf.c ****                     case 'O':
 156:../Library/rprintf/rprintf.c ****                 #endif
 157:../Library/rprintf/rprintf.c ****                 base = 8;
 158:../Library/rprintf/rprintf.c ****                 myputchar('0');
 159:../Library/rprintf/rprintf.c ****                 goto CONVERSION_LOOP;
 160:../Library/rprintf/rprintf.c ****                 #endif
 161:../Library/rprintf/rprintf.c **** 
 162:../Library/rprintf/rprintf.c ****                 #ifdef USE_INTEGER //don't use %i, is same as %d
 163:../Library/rprintf/rprintf.c ****                     case 'i':
 164:../Library/rprintf/rprintf.c ****                     #ifdef USE_UPPER
 165:../Library/rprintf/rprintf.c ****                     case 'I':
 166:../Library/rprintf/rprintf.c ****                 #endif
 167:../Library/rprintf/rprintf.c ****                 #endif
 168:../Library/rprintf/rprintf.c ****                 case 'd':
 169:../Library/rprintf/rprintf.c ****                 #ifdef USE_UPPER
 170:../Library/rprintf/rprintf.c ****                     case 'D':
 171:../Library/rprintf/rprintf.c ****                 #endif
 172:../Library/rprintf/rprintf.c ****                 issigned=1;
 173:../Library/rprintf/rprintf.c ****                 // no break -> run into next case
 174:../Library/rprintf/rprintf.c ****             case 'u':
 175:../Library/rprintf/rprintf.c ****                 #ifdef USE_UPPER
 176:../Library/rprintf/rprintf.c ****                     case 'U':
 177:../Library/rprintf/rprintf.c ****                 #endif
 178:../Library/rprintf/rprintf.c **** 
 179:../Library/rprintf/rprintf.c ****                 //don't insert some case below this if USE_HEX is undefined !
 180:../Library/rprintf/rprintf.c ****                 //or put       goto CONVERSION_LOOP;  before next case.
 181:../Library/rprintf/rprintf.c ****                 #ifdef USE_HEX
 182:../Library/rprintf/rprintf.c ****                     goto CONVERSION_LOOP;
 183:../Library/rprintf/rprintf.c ****                     case 'x':
 184:../Library/rprintf/rprintf.c ****                     #ifdef USE_UPPER
 185:../Library/rprintf/rprintf.c ****                     case 'X':
 186:../Library/rprintf/rprintf.c ****                 #endif
 187:../Library/rprintf/rprintf.c ****                 base = 16;
 188:../Library/rprintf/rprintf.c ****                 #endif
 189:../Library/rprintf/rprintf.c **** 
 190:../Library/rprintf/rprintf.c ****                 CONVERSION_LOOP:
 191:../Library/rprintf/rprintf.c **** 
 192:../Library/rprintf/rprintf.c ****                 if(issigned) //Signed types
 193:../Library/rprintf/rprintf.c ****                 {
 194:../Library/rprintf/rprintf.c ****                     #ifdef USE_LONG
 195:../Library/rprintf/rprintf.c ****                         if(islong) { s_val = va_arg(ap,long); }
 196:../Library/rprintf/rprintf.c ****                             else { s_val = va_arg(ap,int); }
 197:../Library/rprintf/rprintf.c ****                         #else
 198:../Library/rprintf/rprintf.c ****                         s_val = va_arg(ap,int);
 199:../Library/rprintf/rprintf.c ****                     #endif
 200:../Library/rprintf/rprintf.c **** 
 201:../Library/rprintf/rprintf.c ****                     if(s_val < 0) //Value negativ ?
 202:../Library/rprintf/rprintf.c ****                     {
 203:../Library/rprintf/rprintf.c ****                         s_val = - s_val; //Make it positiv
 204:../Library/rprintf/rprintf.c ****                         myputchar('-');    //Output sign
 205:../Library/rprintf/rprintf.c ****                     }
 206:../Library/rprintf/rprintf.c **** 
 207:../Library/rprintf/rprintf.c ****                     u_val = (unsigned long)s_val;
 208:../Library/rprintf/rprintf.c ****                 }
 209:../Library/rprintf/rprintf.c ****                 else //Unsigned types
 210:../Library/rprintf/rprintf.c ****                 {
 211:../Library/rprintf/rprintf.c ****                     #ifdef USE_LONG
 212:../Library/rprintf/rprintf.c ****                         if(islong) { u_val = va_arg(ap,unsigned long); }
 213:../Library/rprintf/rprintf.c ****                             else { u_val = va_arg(ap,unsigned int); }
 214:../Library/rprintf/rprintf.c ****                         #else
 215:../Library/rprintf/rprintf.c ****                         u_val = va_arg(ap,unsigned int);
 216:../Library/rprintf/rprintf.c ****                     #endif
 217:../Library/rprintf/rprintf.c ****                 }
 218:../Library/rprintf/rprintf.c **** 
 219:../Library/rprintf/rprintf.c ****                 ptr = scratch + SCRATCH;
 220:../Library/rprintf/rprintf.c ****                 *--ptr = 0;
 117              		.loc 1 220 0
 118 0060 00B0A0E3 		mov	fp, #0
 119 0064 030000EA 		b	.L44
 120              	.LVL4:
 121              	.L11:
  90:../Library/rprintf/rprintf.c ****             if (!format_flag){va_end (ap); return;}
 122              		.loc 1 90 0
 123 0068 000050E3 		cmp	r0, #0
 124 006c 7E00000A 		beq	.L45
  88:../Library/rprintf/rprintf.c ****         while ((format_flag = *(format++)) != '%')
 125              		.loc 1 88 0
 126 0070 014084E2 		add	r4, r4, #1
 127              	.LVL5:
 128              	.L47:
  91:../Library/rprintf/rprintf.c ****                 myputchar(format_flag);
 129              		.loc 1 91 0
 130 0074 E1FFFFEB 		bl	myputchar
 131              	.L44:
 132              	.LVL6:
  88:../Library/rprintf/rprintf.c ****         while ((format_flag = *(format++)) != '%')
 133              		.loc 1 88 0 discriminator 1
 134 0078 0000D4E5 		ldrb	r0, [r4, #0]	@ zero_extendqisi2
 135              	.LVL7:
 136 007c 250050E3 		cmp	r0, #37
 137 0080 F8FFFF1A 		bne	.L11
 138              	.LVL8:
  97:../Library/rprintf/rprintf.c ****         format_flag = *format++; //get char after '%'
 139              		.loc 1 97 0
 140 0084 0100D4E5 		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 141              	.LVL9:
 102:../Library/rprintf/rprintf.c ****             if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
 142              		.loc 1 102 0
 143 0088 300050E3 		cmp	r0, #48
 144 008c 20005013 		cmpne	r0, #32
 145 0090 0050A013 		movne	r5, #0
 146 0094 0150A003 		moveq	r5, #1
  97:../Library/rprintf/rprintf.c ****         format_flag = *format++; //get char after '%'
 147              		.loc 1 97 0
 148 0098 02408412 		addne	r4, r4, #2
 149              	.LVL10:
 101:../Library/rprintf/rprintf.c ****             fill=0;  //no formatting
 150              		.loc 1 101 0
 151 009c 0580A011 		movne	r8, r5
 102:../Library/rprintf/rprintf.c ****             if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
 152              		.loc 1 102 0
 153 00a0 0B00001A 		bne	.L13
 154              	.LVL11:
 105:../Library/rprintf/rprintf.c ****                 format_flag = *format++; //get char after padding char
 155              		.loc 1 105 0
 156 00a4 0230D4E5 		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 157              	.LVL12:
 106:../Library/rprintf/rprintf.c ****                 if(format_flag>='0' && format_flag<='9')
 158              		.loc 1 106 0
 159 00a8 305043E2 		sub	r5, r3, #48
 160 00ac FF5005E2 		and	r5, r5, #255
 161 00b0 090055E3 		cmp	r5, #9
 109:../Library/rprintf/rprintf.c ****                     format_flag = *format++; //get char after width char
 162              		.loc 1 109 0
 163 00b4 0330D495 		ldrlsb	r3, [r4, #3]	@ zero_extendqisi2
 164              	.LVL13:
  97:../Library/rprintf/rprintf.c ****         format_flag = *format++; //get char after '%'
 165              		.loc 1 97 0
 166 00b8 0080A081 		movhi	r8, r0
 167 00bc 0080A091 		movls	r8, r0
 105:../Library/rprintf/rprintf.c ****                 format_flag = *format++; //get char after padding char
 168              		.loc 1 105 0
 169 00c0 03408482 		addhi	r4, r4, #3
 170              	.LVL14:
 171 00c4 0300A081 		movhi	r0, r3
 172              	.LVL15:
 100:../Library/rprintf/rprintf.c ****             width=0; //no formatting
 173              		.loc 1 100 0
 174 00c8 0050A083 		movhi	r5, #0
 175              	.LVL16:
 109:../Library/rprintf/rprintf.c ****                     format_flag = *format++; //get char after width char
 176              		.loc 1 109 0
 177 00cc 04408492 		addls	r4, r4, #4
 178              	.LVL17:
 179 00d0 0300A091 		movls	r0, r3
 180              	.LVL18:
 181              	.L13:
 117:../Library/rprintf/rprintf.c ****             if(format_flag=='l' || format_flag=='L') //Long value
 182              		.loc 1 117 0
 183 00d4 6C0050E3 		cmp	r0, #108
 184 00d8 4C005013 		cmpne	r0, #76
 185              	.LVL19:
 123:../Library/rprintf/rprintf.c ****             format_flag = *format++; //get char after 'l' or 'L'
 186              		.loc 1 123 0
 187 00dc 0100D404 		ldreqb	r0, [r4], #1	@ zero_extendqisi2
 188              	.LVL20:
 127:../Library/rprintf/rprintf.c ****         switch (format_flag)
 189              		.loc 1 127 0
 190 00e0 580050E3 		cmp	r0, #88
 191 00e4 5A00000A 		beq	.L42
 192 00e8 0B00008A 		bhi	.L22
 193 00ec 490050E3 		cmp	r0, #73
 194 00f0 2700000A 		beq	.L18
 195 00f4 0300008A 		bhi	.L23
 196 00f8 430050E3 		cmp	r0, #67
 197 00fc 1500000A 		beq	.L17
 198 0100 440050E3 		cmp	r0, #68
 199 0104 0A0000EA 		b	.L49
 200              	.L23:
 201 0108 530050E3 		cmp	r0, #83
 202 010c 1600000A 		beq	.L19
 203 0110 550050E3 		cmp	r0, #85
 204 0114 D6FFFF1A 		bne	.L47
 205 0118 4B0000EA 		b	.L20
 206              	.L22:
 207 011c 690050E3 		cmp	r0, #105
 208 0120 1B00000A 		beq	.L18
 209 0124 0400008A 		bhi	.L24
 210 0128 630050E3 		cmp	r0, #99
 211 012c 0900000A 		beq	.L17
 212 0130 640050E3 		cmp	r0, #100
 213              	.L49:
 214 0134 CEFFFF1A 		bne	.L47
 215 0138 150000EA 		b	.L18
 216              	.L24:
 217 013c 750050E3 		cmp	r0, #117
 218 0140 4100000A 		beq	.L20
 219 0144 780050E3 		cmp	r0, #120
 220 0148 4100000A 		beq	.L42
 221 014c 730050E3 		cmp	r0, #115
 222 0150 C7FFFF1A 		bne	.L47
 223 0154 040000EA 		b	.L19
 224              	.L17:
 134:../Library/rprintf/rprintf.c ****                 format_flag = va_arg(ap,int);
 225              		.loc 1 134 0
 226 0158 0C309DE5 		ldr	r3, [sp, #12]
 227 015c 042083E2 		add	r2, r3, #4
 228 0160 0C208DE5 		str	r2, [sp, #12]
 229 0164 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 230              	.LVL21:
 231 0168 C1FFFFEA 		b	.L47
 232              	.L19:
 147:../Library/rprintf/rprintf.c ****                 ptr = (unsigned char*)va_arg(ap,char *);
 233              		.loc 1 147 0
 234 016c 0C309DE5 		ldr	r3, [sp, #12]
 235 0170 042083E2 		add	r2, r3, #4
 236 0174 0C208DE5 		str	r2, [sp, #12]
 237              	.LVL22:
 238 0178 005093E5 		ldr	r5, [r3, #0]
 239              	.LVL23:
 148:../Library/rprintf/rprintf.c ****                 while(*ptr) { myputchar(*ptr); ptr++; }
 240              		.loc 1 148 0
 241 017c 000000EA 		b	.L26
 242              	.LVL24:
 243              	.L27:
 148:../Library/rprintf/rprintf.c ****                 while(*ptr) { myputchar(*ptr); ptr++; }
 244              		.loc 1 148 0 is_stmt 0 discriminator 2
 245 0180 9EFFFFEB 		bl	myputchar
 246              	.L26:
 148:../Library/rprintf/rprintf.c ****                 while(*ptr) { myputchar(*ptr); ptr++; }
 247              		.loc 1 148 0 discriminator 1
 248 0184 0100D5E4 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 249 0188 000050E3 		cmp	r0, #0
 250 018c FBFFFF1A 		bne	.L27
 251 0190 B8FFFFEA 		b	.L44
 252              	.LVL25:
 253              	.L18:
 254 0194 0C309DE5 		ldr	r3, [sp, #12]
 195:../Library/rprintf/rprintf.c ****                         if(islong) { s_val = va_arg(ap,long); }
 255              		.loc 1 195 0 is_stmt 1
 256 0198 042083E2 		add	r2, r3, #4
 257 019c 0C208DE5 		str	r2, [sp, #12]
 258 01a0 006093E5 		ldr	r6, [r3, #0]
 259              	.LVL26:
 201:../Library/rprintf/rprintf.c ****                     if(s_val < 0) //Value negativ ?
 260              		.loc 1 201 0
 261 01a4 000056E3 		cmp	r6, #0
 204:../Library/rprintf/rprintf.c ****                         myputchar('-');    //Output sign
 262              		.loc 1 204 0
 263 01a8 2D00A0B3 		movlt	r0, #45
 264              	.LVL27:
 203:../Library/rprintf/rprintf.c ****                         s_val = - s_val; //Make it positiv
 265              		.loc 1 203 0
 266 01ac 006066B2 		rsblt	r6, r6, #0
 267              	.LVL28:
 204:../Library/rprintf/rprintf.c ****                         myputchar('-');    //Output sign
 268              		.loc 1 204 0
 269 01b0 92FFFFBB 		bllt	myputchar
 270              	.L30:
 271              	.LVL29:
  95:../Library/rprintf/rprintf.c ****         base = 10;
 272              		.loc 1 95 0
 273 01b4 0A70A0E3 		mov	r7, #10
 274              	.LVL30:
 275              	.L31:
 276              		.loc 1 220 0
 277 01b8 0BB0CDE5 		strb	fp, [sp, #11]
 278 01bc 0AA08DE2 		add	sl, sp, #10
 279              	.LVL31:
 280              	.L34:
 281              	.LBB2:
 221:../Library/rprintf/rprintf.c ****                 do
 222:../Library/rprintf/rprintf.c ****                 {
 223:../Library/rprintf/rprintf.c ****                     char ch = u_val % base + '0';
 282              		.loc 1 223 0
 283 01c0 0600A0E1 		mov	r0, r6
 284 01c4 0710A0E1 		mov	r1, r7
 285 01c8 FEFFFFEB 		bl	__umodsi3
 286 01cc FF0000E2 		and	r0, r0, #255
 287 01d0 303080E2 		add	r3, r0, #48
 288 01d4 FF3003E2 		and	r3, r3, #255
 289              	.LVL32:
 224:../Library/rprintf/rprintf.c ****                     #ifdef USE_HEX
 225:../Library/rprintf/rprintf.c ****                         if (ch > '9')
 290              		.loc 1 225 0
 291 01d8 390053E3 		cmp	r3, #57
 292              	.LVL33:
 226:../Library/rprintf/rprintf.c ****                         {
 227:../Library/rprintf/rprintf.c ****                             ch += 'a' - '9' - 1;
 228:../Library/rprintf/rprintf.c ****                             #ifdef USE_UPPERHEX
 229:../Library/rprintf/rprintf.c ****                             ch-=0x20;
 293              		.loc 1 229 0
 294 01dc 37308082 		addhi	r3, r0, #55
 295 01e0 FF300382 		andhi	r3, r3, #255
 296              	.LVL34:
 230:../Library/rprintf/rprintf.c ****                         #endif
 231:../Library/rprintf/rprintf.c ****                     }
 232:../Library/rprintf/rprintf.c ****                     #endif
 233:../Library/rprintf/rprintf.c ****                     *--ptr = ch;
 234:../Library/rprintf/rprintf.c ****                     u_val /= base;
 297              		.loc 1 234 0
 298 01e4 0600A0E1 		mov	r0, r6
 299 01e8 0710A0E1 		mov	r1, r7
 233:../Library/rprintf/rprintf.c ****                     *--ptr = ch;
 300              		.loc 1 233 0
 301 01ec 0A90A0E1 		mov	r9, sl
 302              	.LVL35:
 303 01f0 01304AE4 		strb	r3, [sl], #-1
 304              	.LVL36:
 305              		.loc 1 234 0
 306 01f4 FEFFFFEB 		bl	__udivsi3
 307              	.LVL37:
 235:../Library/rprintf/rprintf.c **** 
 236:../Library/rprintf/rprintf.c ****                     #ifdef PADDING
 237:../Library/rprintf/rprintf.c ****                         if(width) width--; //calculate number of padding chars
 308              		.loc 1 237 0
 309 01f8 000055E3 		cmp	r5, #0
 310 01fc 01504512 		subne	r5, r5, #1
 311              	.LVL38:
 312 0200 FF500512 		andne	r5, r5, #255
 313              	.LBE2:
 238:../Library/rprintf/rprintf.c ****                     #endif
 239:../Library/rprintf/rprintf.c ****                 }
 240:../Library/rprintf/rprintf.c ****                 while (u_val);
 314              		.loc 1 240 0
 315 0204 000050E3 		cmp	r0, #0
 316              	.LBB3:
 234:../Library/rprintf/rprintf.c ****                     u_val /= base;
 317              		.loc 1 234 0
 318 0208 0060A0E1 		mov	r6, r0
 319              	.LVL39:
 320              	.LBE3:
 321              		.loc 1 240 0
 322 020c EBFFFF1A 		bne	.L34
 323 0210 0520A0E1 		mov	r2, r5
 324 0214 0930A0E1 		mov	r3, r9
 325 0218 020000EA 		b	.L35
 326              	.LVL40:
 327              	.L36:
 241:../Library/rprintf/rprintf.c **** 
 242:../Library/rprintf/rprintf.c ****                 #ifdef PADDING
 243:../Library/rprintf/rprintf.c ****                     while(width--) *--ptr = fill; //insert padding chars
 328              		.loc 1 243 0 discriminator 2
 329 021c 015045E2 		sub	r5, r5, #1
 330 0220 018063E5 		strb	r8, [r3, #-1]!
 331 0224 FF5005E2 		and	r5, r5, #255
 332              	.L35:
 333              		.loc 1 243 0 is_stmt 0 discriminator 1
 334 0228 000055E3 		cmp	r5, #0
 335 022c FAFFFF1A 		bne	.L36
 336              		.loc 1 243 0
 337 0230 099062E0 		rsb	r9, r2, r9
 338 0234 000000EA 		b	.L37
 339              	.LVL41:
 340              	.L38:
 244:../Library/rprintf/rprintf.c ****                 #endif
 245:../Library/rprintf/rprintf.c **** 
 246:../Library/rprintf/rprintf.c ****                 while(*ptr) { myputchar(*ptr); ptr++; }
 341              		.loc 1 246 0 is_stmt 1 discriminator 2
 342 0238 70FFFFEB 		bl	myputchar
 343              	.L37:
 344              		.loc 1 246 0 is_stmt 0 discriminator 1
 345 023c 0100D9E4 		ldrb	r0, [r9], #1	@ zero_extendqisi2
 346 0240 000050E3 		cmp	r0, #0
 347 0244 FBFFFF1A 		bne	.L38
 348 0248 8AFFFFEA 		b	.L44
 349              	.LVL42:
 350              	.L20:
  95:../Library/rprintf/rprintf.c ****         base = 10;
 351              		.loc 1 95 0 is_stmt 1
 352 024c 0A70A0E3 		mov	r7, #10
 353 0250 000000EA 		b	.L21
 354              	.L42:
 187:../Library/rprintf/rprintf.c ****                 base = 16;
 355              		.loc 1 187 0
 356 0254 1070A0E3 		mov	r7, #16
 357              	.L21:
 358              	.LVL43:
 359 0258 0C309DE5 		ldr	r3, [sp, #12]
 213:../Library/rprintf/rprintf.c ****                             else { u_val = va_arg(ap,unsigned int); }
 360              		.loc 1 213 0
 361 025c 042083E2 		add	r2, r3, #4
 362 0260 0C208DE5 		str	r2, [sp, #12]
 363 0264 006093E5 		ldr	r6, [r3, #0]
 364              	.LVL44:
 365 0268 D2FFFFEA 		b	.L31
 366              	.LVL45:
 367              	.L45:
 247:../Library/rprintf/rprintf.c ****                     }
 248:../Library/rprintf/rprintf.c ****         }
 249:../Library/rprintf/rprintf.c ****     }
 368              		.loc 1 249 0
 369 026c FF4FBDE8 		ldmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 370 0270 10D08DE2 		add	sp, sp, #16
 371 0274 1EFF2FE1 		bx	lr
 372              		.cfi_endproc
 373              	.LFE2:
 375              		.bss
 376              		.align	2
 377              		.set	.LANCHOR0,. + 0
 380              	putcharfunc:
 381 0000 00000000 		.space	4
 382              		.text
 383              	.Letext0:
 384              		.file 2 "/opt/local/lib/gcc/arm-elf/4.6.1/include/stdarg.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rprintf.c
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:5      .text:0000000000000000 $a
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:7      .text:0000000000000000 myputchar
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:47     .text:0000000000000038 $d
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:51     .text:000000000000003c $a
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:54     .text:000000000000003c rprintf_devopen
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:71     .text:0000000000000048 $d
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:77     .text:000000000000004c $a
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:80     .text:000000000000004c rprintf
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:376    .bss:0000000000000000 $d
/var/folders/vb/2fcwf0x52qn_fy1j7_hx1lpr0000gn/T//ccZf5gg3.s:380    .bss:0000000000000000 putcharfunc
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__umodsi3
__udivsi3
