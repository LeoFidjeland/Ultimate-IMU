
main.elf:     filformat elf32-littlearm

Sektioner:
Idx Namn          Storlek   VMA       LMA       Filoffs   Just
  0 .text         00016a78  00010000  00010000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ctors        0000001c  00026a78  00026a78  0001ea78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data         0000095c  40000000  00026a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000bb0  4000095c  000273f0  0002095c  2**2
                  ALLOC
  4 .stack        00001400  40001600  40001600  00020960  2**4
                  CONTENTS
  5 .comment      00000011  00000000  00000000  00021d60  2**0
                  CONTENTS, READONLY
  6 .ARM.attributes 00000010  00000000  00000000  00021d71  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cc8  00000000  00000000  00021d88  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001bedf  00000000  00000000  00022a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007146  00000000  00000000  0003e92f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c296  00000000  00000000  00045a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000026a4  00000000  00000000  00051d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004d0e  00000000  00000000  000543b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012dfb  00000000  00000000  000590be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009b0  00000000  00000000  0006bec0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00010000 <__Vectors>:

// Exception Vectors
// Mapped to Address 0.
// Absolute addressing mode must be used.

__Vectors:        LDR     PC,Reset_Addr         
   10000:	e59ff018 	ldr	pc, [pc, #24]	; 10020 <Reset_Addr>
                LDR     PC,Undef_Addr
   10004:	e59ff018 	ldr	pc, [pc, #24]	; 10024 <Undef_Addr>
                LDR     PC,SWI_Addr
   10008:	e59ff018 	ldr	pc, [pc, #24]	; 10028 <SWI_Addr>
                LDR     PC,PAbt_Addr
   1000c:	e59ff018 	ldr	pc, [pc, #24]	; 1002c <PAbt_Addr>
                LDR     PC,DAbt_Addr
   10010:	e59ff018 	ldr	pc, [pc, #24]	; 10030 <DAbt_Addr>
                NOP                            /* Reserved Vector */
   10014:	e1a00000 	nop			; (mov r0, r0)
//                LDR     PC,IRQ_Addr
//                LDR     PC,[PC, #-0x0FF0]      /* Vector from VicVectAddr */
                LDR     PC,IRQ_Wrapper_Addr
   10018:	e59ff018 	ldr	pc, [pc, #24]	; 10038 <IRQ_Wrapper_Addr>
                LDR     PC,FIQ_Addr
   1001c:	e59ff018 	ldr	pc, [pc, #24]	; 1003c <FIQ_Addr>

00010020 <Reset_Addr>:
   10020:	00010098 	.word	0x00010098

00010024 <Undef_Addr>:
   10024:	00010040 	.word	0x00010040

00010028 <SWI_Addr>:
   10028:	00000000 	.word	0x00000000

0001002c <PAbt_Addr>:
   1002c:	00010044 	.word	0x00010044

00010030 <DAbt_Addr>:
   10030:	00010048 	.word	0x00010048
   10034:	00000000 	.word	0x00000000

00010038 <IRQ_Wrapper_Addr>:
   10038:	00010050 	.word	0x00010050

0001003c <FIQ_Addr>:
   1003c:	0001004c 	.word	0x0001004c

00010040 <Undef_Handler>:
                  .word     0                      /* Reserved Address */
// IRQ_Addr:         .word     __IRQ_Handler
IRQ_Wrapper_Addr: .word    __IRQ_Wrapper
FIQ_Addr:         .word     FIQ_Handler

Undef_Handler:  B       Undef_Handler
   10040:	eafffffe 	b	10040 <Undef_Handler>

00010044 <PAbt_Handler>:
/* SWI_Handler:    B       SWI_Handler */
PAbt_Handler:   B       PAbt_Handler
   10044:	eafffffe 	b	10044 <PAbt_Handler>

00010048 <DAbt_Handler>:
DAbt_Handler:   B       DAbt_Handler
   10048:	eafffffe 	b	10048 <DAbt_Handler>

0001004c <FIQ_Handler>:
/* IRQ_Handler:    B       IRQ_Handler */
FIQ_Handler:    B       FIQ_Handler
   1004c:	eafffffe 	b	1004c <FIQ_Handler>

00010050 <__IRQ_Wrapper>:
        .global __IRQ_Wrapper
        .func   __IRQ_Wrapper
__IRQ_Wrapper:
/*- Manage Exception Entry  */
/*- Adjust and save LR_irq in IRQ stack  */
            sub         lr, lr, #4
   10050:	e24ee004 	sub	lr, lr, #4
            stmfd       sp!, {lr}
   10054:	e92d4000 	push	{lr}

/*- Save SPSR need to be saved for nested interrupt */
            mrs         r14, SPSR
   10058:	e14fe000 	mrs	lr, SPSR
            stmfd       sp!, {r14}
   1005c:	e92d4000 	push	{lr}

/*- Save and r0 in IRQ stack  */
            stmfd       sp!, {r0}
   10060:	e92d0001 	push	{r0}

/*- Write in the IVR to support Protect Mode  */
/*- No effect in Normal Mode  */
/*- De-assert the NIRQ and clear the source in Protect Mode */
/* R14 = LR */
            ldr         r14, =VIC_base_addr
   10064:	e59fe028 	ldr	lr, [pc, #40]	; 10094 <__IRQ_Wrapper+0x44>
            ldr         r0 , [r14, #VIC_vect_offs]
   10068:	e59e0030 	ldr	r0, [lr, #48]	; 0x30
            /*str         r14, [r14, #VIC_vect_offs]*/

/*- Enable Interrupt and Switch in Supervisor Mode */
            msr         CPSR_c, #Mode_SVC
   1006c:	e321f013 	msr	CPSR_c, #19

/*- Save scratch/used registers and LR in User Stack */
            /*stmfd       sp!, { r1-r3, r12, r14}*/
            stmfd       sp!, { r1-r12, r14 }
   10070:	e92d5ffe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Branch to the routine pointed by the VIC-Vector-Address  */
            mov         r14, pc
   10074:	e1a0e00f 	mov	lr, pc
            bx          r0
   10078:	e12fff10 	bx	r0
/*- Restore scratch/used registers and LR from User Stack*/
            /* ldmia       sp!, { r1-r3, r12, r14} */
            ldmia       sp!, { r1-r12, r14 }
   1007c:	e8bd5ffe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

/*- Disable Interrupt and switch back in IRQ mode */
            msr         CPSR_c, #I_Bit | Mode_IRQ
   10080:	e321f092 	msr	CPSR_c, #146	; 0x92
            ldr         r14, =VIC_base_addr
            str         r14, [r14, #VIC_vect_offs]
#endif

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r0}
   10084:	e8bd0001 	pop	{r0}

/*- Restore SPSR_irq and r0 from IRQ stack */
            ldmia       sp!, {r14}
   10088:	e8bd4000 	pop	{lr}
            msr         SPSR_cxsf, r14
   1008c:	e16ff00e 	msr	SPSR_fsxc, lr

/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
            ldmia       sp!, {pc}^
   10090:	e8fd8000 	ldm	sp!, {pc}^
   10094:	fffff000 	.word	0xfffff000

00010098 <__startup>:
.endif
                STR     R1, [R0]
.endif

// Setup Stack for each mode
                LDR     R0, =Top_Stack
   10098:	e59f00c8 	ldr	r0, [pc, #200]	; 10168 <__exit_THUMB+0x4>

// Enter Undefined Instruction Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_UND|I_Bit|F_Bit
   1009c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
                MOV     SP, R0
   100a0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #UND_Stack_Size
   100a4:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter Abort Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_ABT|I_Bit|F_Bit
   100a8:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
                MOV     SP, R0
   100ac:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #ABT_Stack_Size
   100b0:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter FIQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_FIQ|I_Bit|F_Bit
   100b4:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
                MOV     SP, R0
   100b8:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #FIQ_Stack_Size
   100bc:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter IRQ Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_IRQ|I_Bit|F_Bit
   100c0:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
                MOV     SP, R0
   100c4:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #IRQ_Stack_Size
   100c8:	e2400c02 	sub	r0, r0, #512	; 0x200

// Enter Supervisor Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SVC|I_Bit|F_Bit
   100cc:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
                MOV     SP, R0
   100d0:	e1a0d000 	mov	sp, r0
                SUB     R0, R0, #SVC_Stack_Size
   100d4:	e2400080 	sub	r0, r0, #128	; 0x80

// Enter User Mode and set its Stack Pointer
                MSR     CPSR_c, #Mode_SYS /* Interrupts enabled */
   100d8:	e321f01f 	msr	CPSR_c, #31
//				MSR     CPSR_c, #Mode_USR|I_Bit|F_Bit /* Interrupts disabled */
                MOV     SP, R0
   100dc:	e1a0d000 	mov	sp, r0


.if (RAM_MODE==0)
/* Relocate .data section (Copy from ROM to RAM) */
                LDR     R1, =_etext 
   100e0:	e59f1084 	ldr	r1, [pc, #132]	; 1016c <__exit_THUMB+0x8>
                LDR     R2, =_data 
   100e4:	e59f2084 	ldr	r2, [pc, #132]	; 10170 <__exit_THUMB+0xc>
                LDR     R3, =_edata 
   100e8:	e59f3084 	ldr	r3, [pc, #132]	; 10174 <__exit_THUMB+0x10>
                CMP     R2, R3
   100ec:	e1520003 	cmp	r2, r3
                BEQ     DataIsEmpty
   100f0:	0a000003 	beq	10104 <DataIsEmpty>

000100f4 <LoopRel>:
LoopRel:        CMP     R2, R3 
   100f4:	e1520003 	cmp	r2, r3
                LDRLO   R0, [R1], #4 
   100f8:	34910004 	ldrcc	r0, [r1], #4
                STRLO   R0, [R2], #4 
   100fc:	34820004 	strcc	r0, [r2], #4
                BLO     LoopRel 
   10100:	3afffffb 	bcc	100f4 <LoopRel>

00010104 <DataIsEmpty>:
DataIsEmpty:
.endif
 
/* Clear .bss section (Zero init) */
                MOV     R0, #0 
   10104:	e3a00000 	mov	r0, #0
                LDR     R1, =__bss_start__ 
   10108:	e59f1068 	ldr	r1, [pc, #104]	; 10178 <__exit_THUMB+0x14>
                LDR     R2, =__bss_end__ 
   1010c:	e59f2068 	ldr	r2, [pc, #104]	; 1017c <__exit_THUMB+0x18>
                CMP     R1,R2
   10110:	e1510002 	cmp	r1, r2
                BEQ     BSSIsEmpty
   10114:	0a000002 	beq	10124 <BSSIsEmpty>

00010118 <LoopZI>:
LoopZI:         CMP     R1, R2 
   10118:	e1510002 	cmp	r1, r2
                STRLO   R0, [R1], #4 
   1011c:	34810004 	strcc	r0, [r1], #4
                BLO     LoopZI 
   10120:	3afffffc 	bcc	10118 <LoopZI>

00010124 <BSSIsEmpty>:
BSSIsEmpty:


// call C++ constructors of global objects
		LDR 	r0, =__ctors_start__
   10124:	e59f0054 	ldr	r0, [pc, #84]	; 10180 <__exit_THUMB+0x1c>
		LDR 	r1, =__ctors_end__
   10128:	e59f1054 	ldr	r1, [pc, #84]	; 10184 <__exit_THUMB+0x20>

0001012c <ctor_loop>:
ctor_loop:
		CMP 	r0, r1
   1012c:	e1500001 	cmp	r0, r1
		BEQ 	ctor_end
   10130:	0a000005 	beq	1014c <ctor_end>
		LDR 	r2, [r0], #4
   10134:	e4902004 	ldr	r2, [r0], #4
		STMFD 	sp!, {r0-r1}
   10138:	e92d0003 	push	{r0, r1}
		MOV 	lr, pc
   1013c:	e1a0e00f 	mov	lr, pc
		MOV 	pc, r2
   10140:	e1a0f002 	mov	pc, r2
		LDMFD 	sp!, {r0-r1}
   10144:	e8bd0003 	pop	{r0, r1}
		B 		ctor_loop
   10148:	eafffff7 	b	1012c <ctor_loop>

0001014c <ctor_end>:
ctor_end:

// Enter the C code
                //LDR     R0,=INIT
                LDR     R0,=main
   1014c:	e59f0034 	ldr	r0, [pc, #52]	; 10188 <__exit_THUMB+0x24>
                TST     R0,#1             // Bit-0 set: main is Thumb
   10150:	e3100001 	tst	r0, #1
                LDREQ   LR,=__exit_ARM    // ARM Mode
   10154:	059fe030 	ldreq	lr, [pc, #48]	; 1018c <__exit_THUMB+0x28>
                LDRNE   LR,=__exit_THUMB  // Thumb Mode
   10158:	159fe030 	ldrne	lr, [pc, #48]	; 10190 <__exit_THUMB+0x2c>
                BX      R0
   1015c:	e12fff10 	bx	r0

00010160 <__exit_ARM>:

.arm
.global __exit_ARM
.func __exit_ARM
__exit_ARM:
                B       __exit_ARM
   10160:	eafffffe 	b	10160 <__exit_ARM>

00010164 <__exit_THUMB>:

.thumb
.global __exit_THUMB
.func __exit_THUMB
__exit_THUMB:
                B       __exit_THUMB
   10164:	e7fe      	b.n	10164 <__exit_THUMB>
   10166:	0000      	.short	0x0000
   10168:	40002a00 	.word	0x40002a00
   1016c:	00026a94 	.word	0x00026a94
   10170:	40000000 	.word	0x40000000
   10174:	4000095c 	.word	0x4000095c
   10178:	4000095c 	.word	0x4000095c
   1017c:	4000150c 	.word	0x4000150c
   10180:	00026a78 	.word	0x00026a78
   10184:	00026a94 	.word	0x00026a94
   10188:	00014dd0 	.word	0x00014dd0
   1018c:	00010160 	.word	0x00010160
   10190:	00010164 	.word	0x00010164

00010194 <_read_r>:
		uart0Putch(c);
	}
*/
//	return len - i;
	return 0;
}
   10194:	e3a00000 	mov	r0, #0
   10198:	e12fff1e 	bx	lr

0001019c <_write_r>:
		if (*p == '\n' ) uart0Putch('\r');
		uart0Putch(*p++);
	}
*/
	return len;
}
   1019c:	e1a00003 	mov	r0, r3
   101a0:	e12fff1e 	bx	lr

000101a4 <_close_r>:
int _close_r(
    struct _reent *r, 
    int file)
{
	return 0;
}
   101a4:	e3a00000 	mov	r0, #0
   101a8:	e12fff1e 	bx	lr

000101ac <_lseek_r>:
    int file, 
    _off_t ptr, 
    int dir)
{
	return (_off_t)0;	/*  Always indicate we are at file beginning.	*/
}
   101ac:	e3a00000 	mov	r0, #0
   101b0:	e12fff1e 	bx	lr

000101b4 <_fstat_r>:
    struct _reent *r, 
    int file, 
    struct stat *st)
{
	/*  Always set as character device.				*/
	st->st_mode = S_IFCHR;	
   101b4:	e3a03a02 	mov	r3, #8192	; 0x2000
   101b8:	e5823004 	str	r3, [r2, #4]
		/* assigned to strong type with implicit 	*/
		/* signed/unsigned conversion.  Required by 	*/
		/* newlib.					*/

	return 0;
}
   101bc:	e3a00000 	mov	r0, #0
   101c0:	e12fff1e 	bx	lr

000101c4 <isatty>:
int isatty(int file); /* avoid warning */

int isatty(int file)
{
	return 1;
}
   101c4:	e3a00001 	mov	r0, #1
   101c8:	e12fff1e 	bx	lr

000101cc <_sbrk_r>:
    struct _reent *_s_r, 
    ptrdiff_t nbytes)
{
	char  *base;		/*  errno should be set to  ENOMEM on error	*/

	if (!heap_ptr) {	/*  Initialize if first time through.		*/
   101cc:	e59f301c 	ldr	r3, [pc, #28]	; 101f0 <_sbrk_r+0x24>
   101d0:	e5932000 	ldr	r2, [r3]
   101d4:	e3520000 	cmp	r2, #0
		heap_ptr = end;
   101d8:	059f2014 	ldreq	r2, [pc, #20]	; 101f4 <_sbrk_r+0x28>
   101dc:	05832000 	streq	r2, [r3]
	}
	base = heap_ptr;	/*  Point to end of heap.			*/
   101e0:	e5930000 	ldr	r0, [r3]
	heap_ptr += nbytes;	/*  Increase heap.				*/
   101e4:	e0801001 	add	r1, r0, r1
   101e8:	e5831000 	str	r1, [r3]
	
	return base;		/*  Return pointer to start of new heap area.	*/
}
   101ec:	e12fff1e 	bx	lr
   101f0:	4000095c 	.word	0x4000095c
   101f4:	40002a00 	.word	0x40002a00

000101f8 <myputchar>:
    putcharfunc = put;
}

static void myputchar(unsigned char c)
{
    if(c == '\n') putcharfunc('\r');
   101f8:	e350000a 	cmp	r0, #10
{
    putcharfunc = put;
}

static void myputchar(unsigned char c)
{
   101fc:	e92d4030 	push	{r4, r5, lr}
   10200:	e1a05000 	mov	r5, r0
   10204:	e59f4024 	ldr	r4, [pc, #36]	; 10230 <myputchar+0x38>
    if(c == '\n') putcharfunc('\r');
   10208:	03a0000d 	moveq	r0, #13
   1020c:	0594c000 	ldreq	ip, [r4]
   10210:	01a0e00f 	moveq	lr, pc
   10214:	012fff1c 	bxeq	ip
    putcharfunc(c);
   10218:	e1a00005 	mov	r0, r5
   1021c:	e594c000 	ldr	ip, [r4]
   10220:	e1a0e00f 	mov	lr, pc
   10224:	e12fff1c 	bx	ip
}
   10228:	e8bd4030 	pop	{r4, r5, lr}
   1022c:	e12fff1e 	bx	lr
   10230:	40000960 	.word	0x40000960

00010234 <rprintf_devopen>:

static int (*putcharfunc)(int c);

void rprintf_devopen( int(*put)(int) )
{
    putcharfunc = put;
   10234:	e59f3004 	ldr	r3, [pc, #4]	; 10240 <rprintf_devopen+0xc>
   10238:	e5830000 	str	r0, [r3]
}
   1023c:	e12fff1e 	bx	lr
   10240:	40000960 	.word	0x40000960

00010244 <rprintf>:
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
{
   10244:	e92d000f 	push	{r0, r1, r2, r3}
   10248:	e92d4fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   1024c:	e28d3038 	add	r3, sp, #56	; 0x38
    if(c == '\n') putcharfunc('\r');
    putcharfunc(c);
}

void rprintf(char const *format, ...)
{
   10250:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    #endif

    unsigned char fill;
    unsigned char width;

    va_start (ap, format);
   10254:	e58d300c 	str	r3, [sp, #12]
                        u_val = va_arg(ap,unsigned int);
                    #endif
                }

                ptr = scratch + SCRATCH;
                *--ptr = 0;
   10258:	e3a0b000 	mov	fp, #0
   1025c:	ea000003 	b	10270 <rprintf+0x2c>
    {
		//delay_ms(1); //Added for VCOM testing - without it, rprintf will overrun the VCOM buffer causing it to crash
		
        while ((format_flag = *(format++)) != '%')
        {      // Until '%' or '\0'
            if (!format_flag){va_end (ap); return;}
   10260:	e3500000 	cmp	r0, #0
   10264:	0a00007e 	beq	10464 <rprintf+0x220>
    va_start (ap, format);
    for (;;)
    {
		//delay_ms(1); //Added for VCOM testing - without it, rprintf will overrun the VCOM buffer causing it to crash
		
        while ((format_flag = *(format++)) != '%')
   10268:	e2844001 	add	r4, r4, #1
        {      // Until '%' or '\0'
            if (!format_flag){va_end (ap); return;}
                myputchar(format_flag);
   1026c:	ebffffe1 	bl	101f8 <myputchar>
    va_start (ap, format);
    for (;;)
    {
		//delay_ms(1); //Added for VCOM testing - without it, rprintf will overrun the VCOM buffer causing it to crash
		
        while ((format_flag = *(format++)) != '%')
   10270:	e5d40000 	ldrb	r0, [r4]
   10274:	e3500025 	cmp	r0, #37	; 0x25
   10278:	1afffff8 	bne	10260 <rprintf+0x1c>
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   1027c:	e5d40001 	ldrb	r0, [r4, #1]

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
   10280:	e3500030 	cmp	r0, #48	; 0x30
   10284:	13500020 	cmpne	r0, #32
   10288:	13a05000 	movne	r5, #0
   1028c:	03a05001 	moveq	r5, #1
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   10290:	12844002 	addne	r4, r4, #2

        #ifdef PADDING
            width=0; //no formatting
            fill=0;  //no formatting
   10294:	11a08005 	movne	r8, r5
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
   10298:	1a00000b 	bne	102cc <rprintf+0x88>
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   1029c:	e5d43002 	ldrb	r3, [r4, #2]
                if(format_flag>='0' && format_flag<='9')
   102a0:	e2435030 	sub	r5, r3, #48	; 0x30
   102a4:	e20550ff 	and	r5, r5, #255	; 0xff
   102a8:	e3550009 	cmp	r5, #9
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   102ac:	95d43003 	ldrbls	r3, [r4, #3]
        }

        issigned=0; //default unsigned
        base = 10;

        format_flag = *format++; //get char after '%'
   102b0:	81a08000 	movhi	r8, r0
   102b4:	91a08000 	movls	r8, r0
            width=0; //no formatting
            fill=0;  //no formatting
            if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
            {
                fill=format_flag;
                format_flag = *format++; //get char after padding char
   102b8:	82844003 	addhi	r4, r4, #3
   102bc:	81a00003 	movhi	r0, r3
        base = 10;

        format_flag = *format++; //get char after '%'

        #ifdef PADDING
            width=0; //no formatting
   102c0:	83a05000 	movhi	r5, #0
                fill=format_flag;
                format_flag = *format++; //get char after padding char
                if(format_flag>='0' && format_flag<='9')
                {
                    width=format_flag-'0';
                    format_flag = *format++; //get char after width char
   102c4:	92844004 	addls	r4, r4, #4
   102c8:	91a00003 	movls	r0, r3
        #endif

        #ifdef USE_LONG
            islong=0; //default int value
            #ifdef USE_UPPER
            if(format_flag=='l' || format_flag=='L') //Long value
   102cc:	e350006c 	cmp	r0, #108	; 0x6c
   102d0:	1350004c 	cmpne	r0, #76	; 0x4c
            #else
            if(format_flag=='l') //Long value
            #endif
        {
            islong=1;
            format_flag = *format++; //get char after 'l' or 'L'
   102d4:	04d40001 	ldrbeq	r0, [r4], #1
        }
        #endif

        switch (format_flag)
   102d8:	e3500058 	cmp	r0, #88	; 0x58
   102dc:	0a00005a 	beq	1044c <rprintf+0x208>
   102e0:	8a00000b 	bhi	10314 <rprintf+0xd0>
   102e4:	e3500049 	cmp	r0, #73	; 0x49
   102e8:	0a000027 	beq	1038c <rprintf+0x148>
   102ec:	8a000003 	bhi	10300 <rprintf+0xbc>
   102f0:	e3500043 	cmp	r0, #67	; 0x43
   102f4:	0a000015 	beq	10350 <rprintf+0x10c>
   102f8:	e3500044 	cmp	r0, #68	; 0x44
   102fc:	ea00000a 	b	1032c <rprintf+0xe8>
   10300:	e3500053 	cmp	r0, #83	; 0x53
   10304:	0a000016 	beq	10364 <rprintf+0x120>
   10308:	e3500055 	cmp	r0, #85	; 0x55
   1030c:	1affffd6 	bne	1026c <rprintf+0x28>
   10310:	ea00004b 	b	10444 <rprintf+0x200>
   10314:	e3500069 	cmp	r0, #105	; 0x69
   10318:	0a00001b 	beq	1038c <rprintf+0x148>
   1031c:	8a000004 	bhi	10334 <rprintf+0xf0>
   10320:	e3500063 	cmp	r0, #99	; 0x63
   10324:	0a000009 	beq	10350 <rprintf+0x10c>
   10328:	e3500064 	cmp	r0, #100	; 0x64
   1032c:	1affffce 	bne	1026c <rprintf+0x28>
   10330:	ea000015 	b	1038c <rprintf+0x148>
   10334:	e3500075 	cmp	r0, #117	; 0x75
   10338:	0a000041 	beq	10444 <rprintf+0x200>
   1033c:	e3500078 	cmp	r0, #120	; 0x78
   10340:	0a000041 	beq	1044c <rprintf+0x208>
   10344:	e3500073 	cmp	r0, #115	; 0x73
   10348:	1affffc7 	bne	1026c <rprintf+0x28>
   1034c:	ea000004 	b	10364 <rprintf+0x120>
            #ifdef USE_CHAR
                case 'c':
                    #ifdef USE_UPPER
                    case 'C':
                #endif
                format_flag = va_arg(ap,int);
   10350:	e59d300c 	ldr	r3, [sp, #12]
   10354:	e2832004 	add	r2, r3, #4
   10358:	e58d200c 	str	r2, [sp, #12]
   1035c:	e5d30000 	ldrb	r0, [r3]
   10360:	eaffffc1 	b	1026c <rprintf+0x28>
                #ifdef USE_STRING
                    #ifdef USE_UPPER
                    case 'S':
                #endif
                case 's':
                ptr = (unsigned char*)va_arg(ap,char *);
   10364:	e59d300c 	ldr	r3, [sp, #12]
   10368:	e2832004 	add	r2, r3, #4
   1036c:	e58d200c 	str	r2, [sp, #12]
   10370:	e5935000 	ldr	r5, [r3]
                while(*ptr) { myputchar(*ptr); ptr++; }
   10374:	ea000000 	b	1037c <rprintf+0x138>
   10378:	ebffff9e 	bl	101f8 <myputchar>
   1037c:	e4d50001 	ldrb	r0, [r5], #1
   10380:	e3500000 	cmp	r0, #0
   10384:	1afffffb 	bne	10378 <rprintf+0x134>
   10388:	eaffffb8 	b	10270 <rprintf+0x2c>
   1038c:	e59d300c 	ldr	r3, [sp, #12]
                CONVERSION_LOOP:

                if(issigned) //Signed types
                {
                    #ifdef USE_LONG
                        if(islong) { s_val = va_arg(ap,long); }
   10390:	e2832004 	add	r2, r3, #4
   10394:	e58d200c 	str	r2, [sp, #12]
   10398:	e5936000 	ldr	r6, [r3]
                            else { s_val = va_arg(ap,int); }
                        #else
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
   1039c:	e3560000 	cmp	r6, #0
                    {
                        s_val = - s_val; //Make it positiv
                        myputchar('-');    //Output sign
   103a0:	b3a0002d 	movlt	r0, #45	; 0x2d
                        s_val = va_arg(ap,int);
                    #endif

                    if(s_val < 0) //Value negativ ?
                    {
                        s_val = - s_val; //Make it positiv
   103a4:	b2666000 	rsblt	r6, r6, #0
                        myputchar('-');    //Output sign
   103a8:	bbffff92 	bllt	101f8 <myputchar>
            if (!format_flag){va_end (ap); return;}
                myputchar(format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   103ac:	e3a0700a 	mov	r7, #10
                        u_val = va_arg(ap,unsigned int);
                    #endif
                }

                ptr = scratch + SCRATCH;
                *--ptr = 0;
   103b0:	e5cdb00b 	strb	fp, [sp, #11]
   103b4:	e28da00a 	add	sl, sp, #10
                do
                {
                    char ch = u_val % base + '0';
   103b8:	e1a00006 	mov	r0, r6
   103bc:	e1a01007 	mov	r1, r7
   103c0:	eb005095 	bl	2461c <__umodsi3>
   103c4:	e20000ff 	and	r0, r0, #255	; 0xff
   103c8:	e2803030 	add	r3, r0, #48	; 0x30
   103cc:	e20330ff 	and	r3, r3, #255	; 0xff
                    #ifdef USE_HEX
                        if (ch > '9')
   103d0:	e3530039 	cmp	r3, #57	; 0x39
                        {
                            ch += 'a' - '9' - 1;
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
   103d4:	82803037 	addhi	r3, r0, #55	; 0x37
   103d8:	820330ff 	andhi	r3, r3, #255	; 0xff
                        #endif
                    }
                    #endif
                    *--ptr = ch;
                    u_val /= base;
   103dc:	e1a00006 	mov	r0, r6
   103e0:	e1a01007 	mov	r1, r7
                            #ifdef USE_UPPERHEX
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
   103e4:	e1a0900a 	mov	r9, sl
   103e8:	e44a3001 	strb	r3, [sl], #-1
                    u_val /= base;
   103ec:	eb004ff2 	bl	243bc <__aeabi_uidiv>

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
   103f0:	e3550000 	cmp	r5, #0
   103f4:	12455001 	subne	r5, r5, #1
   103f8:	120550ff 	andne	r5, r5, #255	; 0xff
                    #endif
                }
                while (u_val);
   103fc:	e3500000 	cmp	r0, #0
                            ch-=0x20;
                        #endif
                    }
                    #endif
                    *--ptr = ch;
                    u_val /= base;
   10400:	e1a06000 	mov	r6, r0

                    #ifdef PADDING
                        if(width) width--; //calculate number of padding chars
                    #endif
                }
                while (u_val);
   10404:	1affffeb 	bne	103b8 <rprintf+0x174>
   10408:	e1a02005 	mov	r2, r5
   1040c:	e1a03009 	mov	r3, r9
   10410:	ea000002 	b	10420 <rprintf+0x1dc>

                #ifdef PADDING
                    while(width--) *--ptr = fill; //insert padding chars
   10414:	e2455001 	sub	r5, r5, #1
   10418:	e5638001 	strb	r8, [r3, #-1]!
   1041c:	e20550ff 	and	r5, r5, #255	; 0xff
   10420:	e3550000 	cmp	r5, #0
   10424:	1afffffa 	bne	10414 <rprintf+0x1d0>
   10428:	e0629009 	rsb	r9, r2, r9
   1042c:	ea000000 	b	10434 <rprintf+0x1f0>
                #endif

                while(*ptr) { myputchar(*ptr); ptr++; }
   10430:	ebffff70 	bl	101f8 <myputchar>
   10434:	e4d90001 	ldrb	r0, [r9], #1
   10438:	e3500000 	cmp	r0, #0
   1043c:	1afffffb 	bne	10430 <rprintf+0x1ec>
   10440:	eaffff8a 	b	10270 <rprintf+0x2c>
            if (!format_flag){va_end (ap); return;}
                myputchar(format_flag);
        }

        issigned=0; //default unsigned
        base = 10;
   10444:	e3a0700a 	mov	r7, #10
   10448:	ea000000 	b	10450 <rprintf+0x20c>
                    goto CONVERSION_LOOP;
                    case 'x':
                    #ifdef USE_UPPER
                    case 'X':
                #endif
                base = 16;
   1044c:	e3a07010 	mov	r7, #16
   10450:	e59d300c 	ldr	r3, [sp, #12]
                }
                else //Unsigned types
                {
                    #ifdef USE_LONG
                        if(islong) { u_val = va_arg(ap,unsigned long); }
                            else { u_val = va_arg(ap,unsigned int); }
   10454:	e2832004 	add	r2, r3, #4
   10458:	e58d200c 	str	r2, [sp, #12]
   1045c:	e5936000 	ldr	r6, [r3]
   10460:	eaffffd2 	b	103b0 <rprintf+0x16c>
                #endif

                while(*ptr) { myputchar(*ptr); ptr++; }
                    }
        }
    }
   10464:	e8bd4fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10468:	e28dd010 	add	sp, sp, #16
   1046c:	e12fff1e 	bx	lr

00010470 <init_serial0>:
/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= 0x00000005;                  /* Enable RxD0 and TxD0              */
   10470:	e59f3044 	ldr	r3, [pc, #68]	; 104bc <init_serial0+0x4c>
   10474:	e5932000 	ldr	r2, [r3]

#define CR     0x0D

/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
   10478:	e92d4010 	push	{r4, lr}
    unsigned long Fdiv;

    PINSEL0 |= 0x00000005;                  /* Enable RxD0 and TxD0              */
   1047c:	e3822005 	orr	r2, r2, #5
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   10480:	e59f4038 	ldr	r4, [pc, #56]	; 104c0 <init_serial0+0x50>
/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= 0x00000005;                  /* Enable RxD0 and TxD0              */
   10484:	e5832000 	str	r2, [r3]
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   10488:	e3a03083 	mov	r3, #131	; 0x83

#define CR     0x0D

/* Initialize Serial Interface UART0 */
void init_serial0 ( unsigned long baudrate )
{
   1048c:	e1a01000 	mov	r1, r0
    unsigned long Fdiv;

    PINSEL0 |= 0x00000005;                  /* Enable RxD0 and TxD0              */
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   10490:	e584300c 	str	r3, [r4, #12]
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
   10494:	e59f0028 	ldr	r0, [pc, #40]	; 104c4 <init_serial0+0x54>
   10498:	eb004fc7 	bl	243bc <__aeabi_uidiv>
	U0DLM = Fdiv / 256;
   1049c:	e1a03420 	lsr	r3, r0, #8
   104a0:	e5843004 	str	r3, [r4, #4]
    U0DLL = Fdiv % 256;
   104a4:	e20000ff 	and	r0, r0, #255	; 0xff
    U0LCR = 0x03;                           /* DLAB = 0                         */
   104a8:	e3a03003 	mov	r3, #3

    PINSEL0 |= 0x00000005;                  /* Enable RxD0 and TxD0              */
    U0LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
	U0DLM = Fdiv / 256;
    U0DLL = Fdiv % 256;
   104ac:	e5840000 	str	r0, [r4]
    U0LCR = 0x03;                           /* DLAB = 0                         */
   104b0:	e584300c 	str	r3, [r4, #12]
}
   104b4:	e8bd4010 	pop	{r4, lr}
   104b8:	e12fff1e 	bx	lr
   104bc:	e002c000 	.word	0xe002c000
   104c0:	e000c000 	.word	0xe000c000
   104c4:	00393870 	.word	0x00393870

000104c8 <init_serial1>:
/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   104c8:	e59f3044 	ldr	r3, [pc, #68]	; 10514 <init_serial1+0x4c>
   104cc:	e5932000 	ldr	r2, [r3]
    U0LCR = 0x03;                           /* DLAB = 0                         */
}

/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
   104d0:	e92d4010 	push	{r4, lr}
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   104d4:	e3822805 	orr	r2, r2, #327680	; 0x50000
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   104d8:	e59f4038 	ldr	r4, [pc, #56]	; 10518 <init_serial1+0x50>
/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
   104dc:	e5832000 	str	r2, [r3]
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   104e0:	e3a03083 	mov	r3, #131	; 0x83
    U0LCR = 0x03;                           /* DLAB = 0                         */
}

/* Initialize Serial Interface UART0 */
void init_serial1 ( unsigned long baudrate )
{
   104e4:	e1a01000 	mov	r1, r0
    unsigned long Fdiv;

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
   104e8:	e584300c 	str	r3, [r4, #12]
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
   104ec:	e59f0028 	ldr	r0, [pc, #40]	; 1051c <init_serial1+0x54>
   104f0:	eb004fb1 	bl	243bc <__aeabi_uidiv>
    U1DLM = Fdiv / 256;
   104f4:	e1a03420 	lsr	r3, r0, #8
   104f8:	e5843004 	str	r3, [r4, #4]
    U1DLL = Fdiv % 256;
   104fc:	e20000ff 	and	r0, r0, #255	; 0xff
    U1LCR = 0x03;                           /* DLAB = 0                         */
   10500:	e3a03003 	mov	r3, #3

    PINSEL0 |= (1<<16) | (1<<18);         /* Enable RxD1 and TxD1              */
    U1LCR = 0x83;                          /* 8 bits, no Parity, 1 Stop bit     */
    Fdiv = ( Fcclk / 16 ) / baudrate ;     /* baud rate                        */
    U1DLM = Fdiv / 256;
    U1DLL = Fdiv % 256;
   10504:	e5840000 	str	r0, [r4]
    U1LCR = 0x03;                           /* DLAB = 0                         */
   10508:	e584300c 	str	r3, [r4, #12]
}
   1050c:	e8bd4010 	pop	{r4, lr}
   10510:	e12fff1e 	bx	lr
   10514:	e002c000 	.word	0xe002c000
   10518:	e0010000 	.word	0xe0010000
   1051c:	00393870 	.word	0x00393870

00010520 <putchar_serial0>:

/* Write character to Serial Port 0 with \n -> \r\n  */
int putchar_serial0 (int ch)
{
    if (ch == '\n')
   10520:	e350000a 	cmp	r0, #10
   10524:	e59f3030 	ldr	r3, [pc, #48]	; 1055c <putchar_serial0+0x3c>
   10528:	1a000005 	bne	10544 <putchar_serial0+0x24>
    {
        while (!(U0LSR & 0x20));
   1052c:	e5932014 	ldr	r2, [r3, #20]
   10530:	e3120020 	tst	r2, #32
   10534:	0afffffc 	beq	1052c <putchar_serial0+0xc>
        U0THR = CR;                  /* output CR */
   10538:	e59f201c 	ldr	r2, [pc, #28]	; 1055c <putchar_serial0+0x3c>
   1053c:	e3a0100d 	mov	r1, #13
   10540:	e5821000 	str	r1, [r2]
    }
    while (!(U0LSR & 0x20));
   10544:	e5932014 	ldr	r2, [r3, #20]
   10548:	e3120020 	tst	r2, #32
   1054c:	0afffffc 	beq	10544 <putchar_serial0+0x24>
    return (U0THR = ch);
   10550:	e59f3004 	ldr	r3, [pc, #4]	; 1055c <putchar_serial0+0x3c>
   10554:	e5830000 	str	r0, [r3]
}
   10558:	e12fff1e 	bx	lr
   1055c:	e000c000 	.word	0xe000c000

00010560 <putc_serial0>:

/* Write character to Serial Port 0 without \n -> \r\n  */
int putc_serial0 (int ch)
{
    while (!(U0LSR & 0x20));
   10560:	e59f3014 	ldr	r3, [pc, #20]	; 1057c <putc_serial0+0x1c>
   10564:	e5932014 	ldr	r2, [r3, #20]
   10568:	e3120020 	tst	r2, #32
   1056c:	0afffffc 	beq	10564 <putc_serial0+0x4>
    return (U0THR = ch);
   10570:	e59f3004 	ldr	r3, [pc, #4]	; 1057c <putc_serial0+0x1c>
   10574:	e5830000 	str	r0, [r3]
}
   10578:	e12fff1e 	bx	lr
   1057c:	e000c000 	.word	0xe000c000

00010580 <putc_serial1>:

/* Write character to Serial Port 1 without \n -> \r\n  */
int putc_serial1 (int ch)
{
    while (!(U1LSR & 0x20));
   10580:	e59f3014 	ldr	r3, [pc, #20]	; 1059c <putc_serial1+0x1c>
   10584:	e5932014 	ldr	r2, [r3, #20]
   10588:	e3120020 	tst	r2, #32
   1058c:	0afffffc 	beq	10584 <putc_serial1+0x4>
    return (U1THR = ch);
   10590:	e59f3004 	ldr	r3, [pc, #4]	; 1059c <putc_serial1+0x1c>
   10594:	e5830000 	str	r0, [r3]
}
   10598:	e12fff1e 	bx	lr
   1059c:	e0010000 	.word	0xe0010000

000105a0 <putstring_serial0>:

void putstring_serial0 (const char *string)
{
   105a0:	e92d4010 	push	{r4, lr}
   105a4:	e1a04000 	mov	r4, r0
    char ch;

    while ((ch = *string))
   105a8:	ea000000 	b	105b0 <putstring_serial0+0x10>
    {
        putchar_serial0(ch);
   105ac:	ebffffdb 	bl	10520 <putchar_serial0>

void putstring_serial0 (const char *string)
{
    char ch;

    while ((ch = *string))
   105b0:	e4d40001 	ldrb	r0, [r4], #1
   105b4:	e3500000 	cmp	r0, #0
   105b8:	1afffffb 	bne	105ac <putstring_serial0+0xc>
    {
        putchar_serial0(ch);
        string++;
    }
}
   105bc:	e8bd4010 	pop	{r4, lr}
   105c0:	e12fff1e 	bx	lr

000105c4 <getkey_serial0>:


/* Read character from Serial Port   */
int getkey_serial0 (void)
{
	if (U0LSR & 0x01)
   105c4:	e59f300c 	ldr	r3, [pc, #12]	; 105d8 <getkey_serial0+0x14>
   105c8:	e5930014 	ldr	r0, [r3, #20]
   105cc:	e2100001 	ands	r0, r0, #1
    {
        return (U0RBR);
   105d0:	15930000 	ldrne	r0, [r3]
    }
    else
    {
        return 0;
    }
}
   105d4:	e12fff1e 	bx	lr
   105d8:	e000c000 	.word	0xe000c000

000105dc <getc0>:

/* Read character from Serial Port   */
int getc0 (void)
{
	while ( (U0LSR & 0x01) == 0 ); //Wait for character
   105dc:	e59f3014 	ldr	r3, [pc, #20]	; 105f8 <getc0+0x1c>
   105e0:	e5932014 	ldr	r2, [r3, #20]
   105e4:	e3120001 	tst	r2, #1
   105e8:	0afffffc 	beq	105e0 <getc0+0x4>
	return U0RBR;
   105ec:	e59f3004 	ldr	r3, [pc, #4]	; 105f8 <getc0+0x1c>
   105f0:	e5930000 	ldr	r0, [r3]
}
   105f4:	e12fff1e 	bx	lr
   105f8:	e000c000 	.word	0xe000c000

000105fc <getc1>:

/* Read character from Serial Port   */
int getc1 (void)
{
	while ( (U1LSR & 0x01) == 0 ); //Wait for character
   105fc:	e59f3014 	ldr	r3, [pc, #20]	; 10618 <getc1+0x1c>
   10600:	e5932014 	ldr	r2, [r3, #20]
   10604:	e3120001 	tst	r2, #1
   10608:	0afffffc 	beq	10600 <getc1+0x4>
	return U1RBR;
   1060c:	e59f3004 	ldr	r3, [pc, #4]	; 10618 <getc1+0x1c>
   10610:	e5930000 	ldr	r0, [r3]
}
   10614:	e12fff1e 	bx	lr
   10618:	e0010000 	.word	0xe0010000

0001061c <timer0Init>:

static unsigned long int tFreq;

void timer0Init(unsigned long int freq)
{
	tFreq=freq;
   1061c:	e59f3034 	ldr	r3, [pc, #52]	; 10658 <timer0Init+0x3c>
#include "rprintf.h"

static unsigned long int tFreq;

void timer0Init(unsigned long int freq)
{
   10620:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10624:	e1a01000 	mov	r1, r0
	tFreq=freq;
   10628:	e5830000 	str	r0, [r3]
	T0PR=Fcclk/tFreq;			//Set up the prescaler for a 'freq' frequency
   1062c:	e59f0028 	ldr	r0, [pc, #40]	; 1065c <timer0Init+0x40>
   10630:	eb004f61 	bl	243bc <__aeabi_uidiv>
   10634:	e59f3024 	ldr	r3, [pc, #36]	; 10660 <timer0Init+0x44>
	T0CTCR=0;					//Timer Mode
   10638:	e3a02000 	mov	r2, #0
static unsigned long int tFreq;

void timer0Init(unsigned long int freq)
{
	tFreq=freq;
	T0PR=Fcclk/tFreq;			//Set up the prescaler for a 'freq' frequency
   1063c:	e583000c 	str	r0, [r3, #12]
	T0CTCR=0;					//Timer Mode
   10640:	e5832070 	str	r2, [r3, #112]	; 0x70
	T0TCR |=0X01;				//Enable the clock
   10644:	e5932004 	ldr	r2, [r3, #4]
   10648:	e3822001 	orr	r2, r2, #1
   1064c:	e5832004 	str	r2, [r3, #4]
	//T0MCR=0x0003;				//Interrupt and Reset Timer on Match
	//T0MR0=(50000/TIMER_FREQ);	
}
   10650:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   10654:	e12fff1e 	bx	lr
   10658:	40000964 	.word	0x40000964
   1065c:	03938700 	.word	0x03938700
   10660:	e0004000 	.word	0xe0004000

00010664 <timer0Match>:

void timer0Match(int mr, unsigned long int freq, char mode)
{
	unsigned long int mfreq = tFreq/freq;		//Get the Match Register value by dividing timer frequency by request match frequency
   10664:	e59f3070 	ldr	r3, [pc, #112]	; 106dc <timer0Match+0x78>
	//T0MCR=0x0003;				//Interrupt and Reset Timer on Match
	//T0MR0=(50000/TIMER_FREQ);	
}

void timer0Match(int mr, unsigned long int freq, char mode)
{
   10668:	e92d4030 	push	{r4, r5, lr}
   1066c:	e1a04000 	mov	r4, r0
	unsigned long int mfreq = tFreq/freq;		//Get the Match Register value by dividing timer frequency by request match frequency
   10670:	e5930000 	ldr	r0, [r3]
	//T0MCR=0x0003;				//Interrupt and Reset Timer on Match
	//T0MR0=(50000/TIMER_FREQ);	
}

void timer0Match(int mr, unsigned long int freq, char mode)
{
   10674:	e20250ff 	and	r5, r2, #255	; 0xff
	unsigned long int mfreq = tFreq/freq;		//Get the Match Register value by dividing timer frequency by request match frequency
   10678:	eb004f4f 	bl	243bc <__aeabi_uidiv>

	switch(mr)
   1067c:	e3540003 	cmp	r4, #3
   10680:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   10684:	ea000012 	b	106d4 <timer0Match+0x70>
   10688:	00010698 	.word	0x00010698
   1068c:	000106a4 	.word	0x000106a4
   10690:	000106b4 	.word	0x000106b4
   10694:	000106c4 	.word	0x000106c4
	{
		case 0:
			T0MR0 = mfreq;
   10698:	e59f3040 	ldr	r3, [pc, #64]	; 106e0 <timer0Match+0x7c>
   1069c:	e5830018 	str	r0, [r3, #24]
   106a0:	ea00000a 	b	106d0 <timer0Match+0x6c>
			T0MCR = (mode<<0);		
			break;
		case 1:
			T0MR1 = mfreq;
   106a4:	e59f3034 	ldr	r3, [pc, #52]	; 106e0 <timer0Match+0x7c>
			T0MCR = (mode<<3);
   106a8:	e1a05185 	lsl	r5, r5, #3
		case 0:
			T0MR0 = mfreq;
			T0MCR = (mode<<0);		
			break;
		case 1:
			T0MR1 = mfreq;
   106ac:	e583001c 	str	r0, [r3, #28]
   106b0:	ea000006 	b	106d0 <timer0Match+0x6c>
			T0MCR = (mode<<3);
			break;
		case 2:
			T0MR2 = mfreq;
   106b4:	e59f3024 	ldr	r3, [pc, #36]	; 106e0 <timer0Match+0x7c>
			T0MCR = (mode<<6);
   106b8:	e1a05305 	lsl	r5, r5, #6
		case 1:
			T0MR1 = mfreq;
			T0MCR = (mode<<3);
			break;
		case 2:
			T0MR2 = mfreq;
   106bc:	e5830020 	str	r0, [r3, #32]
   106c0:	ea000002 	b	106d0 <timer0Match+0x6c>
			T0MCR = (mode<<6);
			break;
		case 3:
			T0MR3 = mfreq;
   106c4:	e59f3014 	ldr	r3, [pc, #20]	; 106e0 <timer0Match+0x7c>
   106c8:	e5830024 	str	r0, [r3, #36]	; 0x24
			T0MCR = (mode<<9);
   106cc:	e1a05485 	lsl	r5, r5, #9
   106d0:	e5835014 	str	r5, [r3, #20]
			break;
		default:
			break;
	}
}
   106d4:	e8bd4030 	pop	{r4, r5, lr}
   106d8:	e12fff1e 	bx	lr
   106dc:	40000964 	.word	0x40000964
   106e0:	e0004000 	.word	0xe0004000

000106e4 <ISR_Timer0>:
//Inputs: None
//This function is a global interrupt called by a match on the Timer 0 match.  
void ISR_Timer0(void)
{
	//Interrupt Code Here
	timer0IntFlag+=1;
   106e4:	e59f3030 	ldr	r3, [pc, #48]	; 1071c <ISR_Timer0+0x38>
   106e8:	e5d32000 	ldrb	r2, [r3]
   106ec:	e2822001 	add	r2, r2, #1
   106f0:	e5c32000 	strb	r2, [r3]
	
	//Keep track of the number of milliseconds
	ms++;
   106f4:	e5932004 	ldr	r2, [r3, #4]
   106f8:	e2822001 	add	r2, r2, #1
   106fc:	e5832004 	str	r2, [r3, #4]
	
	//Clear the interrupt and update the VIC priority
	T0IR = 0xFF;
   10700:	e59f3018 	ldr	r3, [pc, #24]	; 10720 <ISR_Timer0+0x3c>
   10704:	e3a020ff 	mov	r2, #255	; 0xff
   10708:	e5832000 	str	r2, [r3]
	VICVectAddr =0;						
   1070c:	e3a02000 	mov	r2, #0
   10710:	e3e03000 	mvn	r3, #0
   10714:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfcf
}
   10718:	e12fff1e 	bx	lr
   1071c:	40000968 	.word	0x40000968
   10720:	e0004000 	.word	0xe0004000

00010724 <millis>:

long int millis(void)
{
	return ms;
}
   10724:	e59f3004 	ldr	r3, [pc, #4]	; 10730 <millis+0xc>
   10728:	e5930004 	ldr	r0, [r3, #4]
   1072c:	e12fff1e 	bx	lr
   10730:	40000968 	.word	0x40000968

00010734 <timer1Init>:

static unsigned long int tFreq;

void timer1Init(unsigned long int freq)
{
	tFreq=freq;
   10734:	e59f3034 	ldr	r3, [pc, #52]	; 10770 <timer1Init+0x3c>
#include "timer1ISR.h"

static unsigned long int tFreq;

void timer1Init(unsigned long int freq)
{
   10738:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   1073c:	e1a01000 	mov	r1, r0
	tFreq=freq;
   10740:	e5830000 	str	r0, [r3]
	T1PR=Fcclk/tFreq;			//Set up the prescaler for a 'freq' frequency
   10744:	e59f0028 	ldr	r0, [pc, #40]	; 10774 <timer1Init+0x40>
   10748:	eb004f1b 	bl	243bc <__aeabi_uidiv>
   1074c:	e59f3024 	ldr	r3, [pc, #36]	; 10778 <timer1Init+0x44>
	T1CTCR=0;					//Timer Mode
   10750:	e3a02000 	mov	r2, #0
static unsigned long int tFreq;

void timer1Init(unsigned long int freq)
{
	tFreq=freq;
	T1PR=Fcclk/tFreq;			//Set up the prescaler for a 'freq' frequency
   10754:	e583000c 	str	r0, [r3, #12]
	T1CTCR=0;					//Timer Mode
   10758:	e5832070 	str	r2, [r3, #112]	; 0x70
	T1TCR |=0X01;				//Enable the clock
   1075c:	e5932004 	ldr	r2, [r3, #4]
   10760:	e3822001 	orr	r2, r2, #1
   10764:	e5832004 	str	r2, [r3, #4]
}
   10768:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1076c:	e12fff1e 	bx	lr
   10770:	40000970 	.word	0x40000970
   10774:	03938700 	.word	0x03938700
   10778:	e0008000 	.word	0xe0008000

0001077c <timer1Match>:


void timer1Match(int mr, unsigned long int freq, char mode)
{
	unsigned long int mfreq = tFreq/freq;		//Get the Match Register value by dividing timer frequency by request match frequency
   1077c:	e59f3070 	ldr	r3, [pc, #112]	; 107f4 <timer1Match+0x78>
	T1TCR |=0X01;				//Enable the clock
}


void timer1Match(int mr, unsigned long int freq, char mode)
{
   10780:	e92d4030 	push	{r4, r5, lr}
   10784:	e1a04000 	mov	r4, r0
	unsigned long int mfreq = tFreq/freq;		//Get the Match Register value by dividing timer frequency by request match frequency
   10788:	e5930000 	ldr	r0, [r3]
	T1TCR |=0X01;				//Enable the clock
}


void timer1Match(int mr, unsigned long int freq, char mode)
{
   1078c:	e20250ff 	and	r5, r2, #255	; 0xff
	unsigned long int mfreq = tFreq/freq;		//Get the Match Register value by dividing timer frequency by request match frequency
   10790:	eb004f09 	bl	243bc <__aeabi_uidiv>

	switch(mr)
   10794:	e3540003 	cmp	r4, #3
   10798:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   1079c:	ea000012 	b	107ec <timer1Match+0x70>
   107a0:	000107b0 	.word	0x000107b0
   107a4:	000107bc 	.word	0x000107bc
   107a8:	000107cc 	.word	0x000107cc
   107ac:	000107dc 	.word	0x000107dc
	{
		case 0:
			T1MR0 = mfreq;
   107b0:	e59f3040 	ldr	r3, [pc, #64]	; 107f8 <timer1Match+0x7c>
   107b4:	e5830018 	str	r0, [r3, #24]
   107b8:	ea00000a 	b	107e8 <timer1Match+0x6c>
			T1MCR = (mode<<0);		
			break;
		case 1:
			T1MR1 = mfreq;
   107bc:	e59f3034 	ldr	r3, [pc, #52]	; 107f8 <timer1Match+0x7c>
			T1MCR = (mode<<3);
   107c0:	e1a05185 	lsl	r5, r5, #3
		case 0:
			T1MR0 = mfreq;
			T1MCR = (mode<<0);		
			break;
		case 1:
			T1MR1 = mfreq;
   107c4:	e583001c 	str	r0, [r3, #28]
   107c8:	ea000006 	b	107e8 <timer1Match+0x6c>
			T1MCR = (mode<<3);
			break;
		case 2:
			T1MR2 = mfreq;
   107cc:	e59f3024 	ldr	r3, [pc, #36]	; 107f8 <timer1Match+0x7c>
			T1MCR = (mode<<6);
   107d0:	e1a05305 	lsl	r5, r5, #6
		case 1:
			T1MR1 = mfreq;
			T1MCR = (mode<<3);
			break;
		case 2:
			T1MR2 = mfreq;
   107d4:	e5830020 	str	r0, [r3, #32]
   107d8:	ea000002 	b	107e8 <timer1Match+0x6c>
			T1MCR = (mode<<6);
			break;
		case 3:
			T1MR3 = mfreq;
   107dc:	e59f3014 	ldr	r3, [pc, #20]	; 107f8 <timer1Match+0x7c>
   107e0:	e5830024 	str	r0, [r3, #36]	; 0x24
			T1MCR = (mode<<9);
   107e4:	e1a05485 	lsl	r5, r5, #9
   107e8:	e5835014 	str	r5, [r3, #20]
			break;
		default:
			break;
	}
}
   107ec:	e8bd4030 	pop	{r4, r5, lr}
   107f0:	e12fff1e 	bx	lr
   107f4:	40000970 	.word	0x40000970
   107f8:	e0008000 	.word	0xe0008000

000107fc <delay_us>:
}

void delay_us(int count)
{
	//Fcclk should be defined as system freq. in target.h
	T1MR0 = Fcclk/1000000; //Set the match register to measure 1MHz (1uS period)
   107fc:	e59f3050 	ldr	r3, [pc, #80]	; 10854 <delay_us+0x58>
   10800:	e3a0203c 	mov	r2, #60	; 0x3c
		delay_us(1000);
	}
}

void delay_us(int count)
{
   10804:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	//Fcclk should be defined as system freq. in target.h
	T1MR0 = Fcclk/1000000; //Set the match register to measure 1MHz (1uS period)
   10808:	e5832018 	str	r2, [r3, #24]
	T1MCR = (3<<0);	//Generate an interrupt when MR0 is matched
   1080c:	e3a02003 	mov	r2, #3
   10810:	e5832014 	str	r2, [r3, #20]
	T1TCR = (1<<1);	//Reset the Timer Count
	T1TCR = (1<<0);	//Start timer 1
   10814:	e3a01001 	mov	r1, #1
void delay_us(int count)
{
	//Fcclk should be defined as system freq. in target.h
	T1MR0 = Fcclk/1000000; //Set the match register to measure 1MHz (1uS period)
	T1MCR = (3<<0);	//Generate an interrupt when MR0 is matched
	T1TCR = (1<<1);	//Reset the Timer Count
   10818:	e3a02002 	mov	r2, #2
   1081c:	e5832004 	str	r2, [r3, #4]
	T1TCR = (1<<0);	//Start timer 1
	for(int i=0; i<count; i++)
	{
		while(!(T1IR & (1<<0)));	//Wait for an MR0 interrupt
   10820:	e1a0c003 	mov	ip, r3
{
	//Fcclk should be defined as system freq. in target.h
	T1MR0 = Fcclk/1000000; //Set the match register to measure 1MHz (1uS period)
	T1MCR = (3<<0);	//Generate an interrupt when MR0 is matched
	T1TCR = (1<<1);	//Reset the Timer Count
	T1TCR = (1<<0);	//Start timer 1
   10824:	e5831004 	str	r1, [r3, #4]
	for(int i=0; i<count; i++)
   10828:	e3a02000 	mov	r2, #0
   1082c:	ea000004 	b	10844 <delay_us+0x48>
	{
		while(!(T1IR & (1<<0)));	//Wait for an MR0 interrupt
   10830:	e5934000 	ldr	r4, [r3]
   10834:	e3140001 	tst	r4, #1
   10838:	0afffffc 	beq	10830 <delay_us+0x34>
		T1IR = (1<<0);		//Reset the interrupt register
   1083c:	e58c1000 	str	r1, [ip]
	//Fcclk should be defined as system freq. in target.h
	T1MR0 = Fcclk/1000000; //Set the match register to measure 1MHz (1uS period)
	T1MCR = (3<<0);	//Generate an interrupt when MR0 is matched
	T1TCR = (1<<1);	//Reset the Timer Count
	T1TCR = (1<<0);	//Start timer 1
	for(int i=0; i<count; i++)
   10840:	e2822001 	add	r2, r2, #1
   10844:	e1520000 	cmp	r2, r0
   10848:	bafffff8 	blt	10830 <delay_us+0x34>
		while(!(T1IR & (1<<0)));	//Wait for an MR0 interrupt
		T1IR = (1<<0);		//Reset the interrupt register
		//rprintf("+");
	}

}
   1084c:	e8bd0010 	pop	{r4}
   10850:	e12fff1e 	bx	lr
   10854:	e0008000 	.word	0xe0008000

00010858 <delay_ms>:
	}
}

#ifdef DELAY
void delay_ms(int count)
{
   10858:	e92d4030 	push	{r4, r5, lr}
   1085c:	e1a05000 	mov	r5, r0
	for(int i=0; i<count; i++)
   10860:	e3a04000 	mov	r4, #0
   10864:	ea000002 	b	10874 <delay_ms+0x1c>
	{
		delay_us(1000);
   10868:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   1086c:	ebffffe2 	bl	107fc <delay_us>
}

#ifdef DELAY
void delay_ms(int count)
{
	for(int i=0; i<count; i++)
   10870:	e2844001 	add	r4, r4, #1
   10874:	e1540005 	cmp	r4, r5
   10878:	bafffffa 	blt	10868 <delay_ms+0x10>
	{
		delay_us(1000);
	}
}
   1087c:	e8bd4030 	pop	{r4, r5, lr}
   10880:	e12fff1e 	bx	lr

00010884 <ISR_Timer1>:
//Inputs: None
//This function is a global interrupt called by a match on the Timer 0 match.  
void ISR_Timer1(void)
{
	//Interrupt Code Here
	timer1IntFlag=1;	
   10884:	e59f3020 	ldr	r3, [pc, #32]	; 108ac <ISR_Timer1+0x28>
   10888:	e3a02001 	mov	r2, #1
   1088c:	e5c32000 	strb	r2, [r3]
	
	//Clear the interrupt and update the VIC priority
	T1IR = 0xFF;
   10890:	e59f3018 	ldr	r3, [pc, #24]	; 108b0 <ISR_Timer1+0x2c>
   10894:	e3a020ff 	mov	r2, #255	; 0xff
   10898:	e5832000 	str	r2, [r3]
	VICVectAddr =0;						
   1089c:	e3a02000 	mov	r2, #0
   108a0:	e3e03000 	mvn	r3, #0
   108a4:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfcf
}
   108a8:	e12fff1e 	bx	lr
   108ac:	40000974 	.word	0x40000974
   108b0:	e0008000 	.word	0xe0008000

000108b4 <uart1RxInt>:
#include "uart1.h"

void uart1RxInt(char trigger_level)
{
	char level_setting = (trigger_level << 6);
	U1IER = (1<<0);	//Enable FIFO on UART with RDA interrupt (Receive Data Available)
   108b4:	e59f3028 	ldr	r3, [pc, #40]	; 108e4 <uart1RxInt+0x30>
   108b8:	e3a02001 	mov	r2, #1
   108bc:	e5832004 	str	r2, [r3, #4]
	U1FCR &= (U1FCR & 0x3F) | level_setting;	//Set the trigger level for the Rx interrupt
   108c0:	e5931008 	ldr	r1, [r3, #8]
   108c4:	e5932008 	ldr	r2, [r3, #8]
*/
#include "LPC214x.h"
#include "uart1.h"

void uart1RxInt(char trigger_level)
{
   108c8:	e1a00300 	lsl	r0, r0, #6
	char level_setting = (trigger_level << 6);
	U1IER = (1<<0);	//Enable FIFO on UART with RDA interrupt (Receive Data Available)
	U1FCR &= (U1FCR & 0x3F) | level_setting;	//Set the trigger level for the Rx interrupt
   108cc:	e20000c0 	and	r0, r0, #192	; 0xc0
   108d0:	e202203f 	and	r2, r2, #63	; 0x3f
   108d4:	e1802002 	orr	r2, r0, r2
   108d8:	e0022001 	and	r2, r2, r1
   108dc:	e5832008 	str	r2, [r3, #8]
}
   108e0:	e12fff1e 	bx	lr
   108e4:	e0010000 	.word	0xe0010000

000108e8 <ISR_UART1>:
int secondrow=0;
char uart1MessageComplete=0;

void ISR_UART1(void)
{
	char val = (char)U1RBR;
   108e8:	e59f3084 	ldr	r3, [pc, #132]	; 10974 <ISR_UART1+0x8c>
   108ec:	e5932000 	ldr	r2, [r3]
   108f0:	e20220ff 	and	r2, r2, #255	; 0xff
	
	if(val=='\r'){ 	
   108f4:	e352000d 	cmp	r2, #13
   108f8:	e59f3078 	ldr	r3, [pc, #120]	; 10978 <ISR_UART1+0x90>
   108fc:	1a00000f 	bne	10940 <ISR_UART1+0x58>
		uart1Message[mindex++]='\n';
		if(secondrow==1){
   10900:	e5931004 	ldr	r1, [r3, #4]
void ISR_UART1(void)
{
	char val = (char)U1RBR;
	
	if(val=='\r'){ 	
		uart1Message[mindex++]='\n';
   10904:	e5930000 	ldr	r0, [r3]
   10908:	e59fc06c 	ldr	ip, [pc, #108]	; 1097c <ISR_UART1+0x94>
   1090c:	e3a0200a 	mov	r2, #10
		if(secondrow==1){
   10910:	e3510001 	cmp	r1, #1
void ISR_UART1(void)
{
	char val = (char)U1RBR;
	
	if(val=='\r'){ 	
		uart1Message[mindex++]='\n';
   10914:	e7cc2000 	strb	r2, [ip, r0]
		if(secondrow==1){
			uart1Message[mindex++]='\0';
   10918:	03a02000 	moveq	r2, #0
void ISR_UART1(void)
{
	char val = (char)U1RBR;
	
	if(val=='\r'){ 	
		uart1Message[mindex++]='\n';
   1091c:	e2800001 	add	r0, r0, #1
			uart1Message[mindex++]='\0';
			mindex=0;
			secondrow=0;
			uart1MessageComplete=1;
		}else{
			secondrow=1;
   10920:	13a02001 	movne	r2, #1
void ISR_UART1(void)
{
	char val = (char)U1RBR;
	
	if(val=='\r'){ 	
		uart1Message[mindex++]='\n';
   10924:	e5830000 	str	r0, [r3]
		if(secondrow==1){
			uart1Message[mindex++]='\0';
   10928:	07cc2000 	strbeq	r2, [ip, r0]
			mindex=0;
   1092c:	05832000 	streq	r2, [r3]
			secondrow=0;
   10930:	05832004 	streq	r2, [r3, #4]
			uart1MessageComplete=1;
   10934:	05c31008 	strbeq	r1, [r3, #8]
		}else{
			secondrow=1;
   10938:	15832004 	strne	r2, [r3, #4]
   1093c:	ea000008 	b	10964 <ISR_UART1+0x7c>
		}
	}
	else if(uart1MessageComplete==0){
   10940:	e5d31008 	ldrb	r1, [r3, #8]
   10944:	e3510000 	cmp	r1, #0
   10948:	1a000005 	bne	10964 <ISR_UART1+0x7c>
		if(val != '\n')uart1Message[mindex++]=val;
   1094c:	e352000a 	cmp	r2, #10
   10950:	15931000 	ldrne	r1, [r3]
   10954:	159f0020 	ldrne	r0, [pc, #32]	; 1097c <ISR_UART1+0x94>
   10958:	17c02001 	strbne	r2, [r0, r1]
   1095c:	12811001 	addne	r1, r1, #1
   10960:	15831000 	strne	r1, [r3]
	}
	
	VICVectAddr =0;	//Update the VIC priorities
   10964:	e3a02000 	mov	r2, #0
   10968:	e3e03000 	mvn	r3, #0
   1096c:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfcf
}
   10970:	e12fff1e 	bx	lr
   10974:	e0010000 	.word	0xe0010000
   10978:	40000978 	.word	0x40000978
   1097c:	400012f0 	.word	0x400012f0

00010980 <uart0RxInt>:
#include "uart0.h"

void uart0RxInt(char trigger_level)
{
	char level_setting = (trigger_level << 6);
	U0IER = (1<<0);	//Enable FIFO on UART with RDA interrupt (Receive Data Available)
   10980:	e59f3028 	ldr	r3, [pc, #40]	; 109b0 <uart0RxInt+0x30>
   10984:	e3a02001 	mov	r2, #1
   10988:	e5832004 	str	r2, [r3, #4]
	U0FCR &= (U0FCR & 0x3F) | level_setting;	//Set the trigger level for the Rx interrupt
   1098c:	e5931008 	ldr	r1, [r3, #8]
   10990:	e5932008 	ldr	r2, [r3, #8]
*/
#include "LPC214x.h"
#include "uart0.h"

void uart0RxInt(char trigger_level)
{
   10994:	e1a00300 	lsl	r0, r0, #6
	char level_setting = (trigger_level << 6);
	U0IER = (1<<0);	//Enable FIFO on UART with RDA interrupt (Receive Data Available)
	U0FCR &= (U0FCR & 0x3F) | level_setting;	//Set the trigger level for the Rx interrupt
   10998:	e20000c0 	and	r0, r0, #192	; 0xc0
   1099c:	e202203f 	and	r2, r2, #63	; 0x3f
   109a0:	e1802002 	orr	r2, r0, r2
   109a4:	e0022001 	and	r2, r2, r1
   109a8:	e5832008 	str	r2, [r3, #8]
}
   109ac:	e12fff1e 	bx	lr
   109b0:	e000c000 	.word	0xe000c000

000109b4 <ISR_UART0>:
int m0index=0;
char uart0MessageComplete=0;

void ISR_UART0(void)
{
	char val = (char)U0RBR;
   109b4:	e59f3064 	ldr	r3, [pc, #100]	; 10a20 <ISR_UART0+0x6c>
   109b8:	e5932000 	ldr	r2, [r3]
   109bc:	e20220ff 	and	r2, r2, #255	; 0xff
	
	if(val=='\r'){ 	
   109c0:	e352000d 	cmp	r2, #13
   109c4:	e59f3058 	ldr	r3, [pc, #88]	; 10a24 <ISR_UART0+0x70>
   109c8:	1a000007 	bne	109ec <ISR_UART0+0x38>
		uart0Message[m0index++]='\0';
   109cc:	e5931000 	ldr	r1, [r3]
   109d0:	e59f0050 	ldr	r0, [pc, #80]	; 10a28 <ISR_UART0+0x74>
   109d4:	e3a02000 	mov	r2, #0
   109d8:	e7c02001 	strb	r2, [r0, r1]
		m0index=0;
   109dc:	e5832000 	str	r2, [r3]
		uart0MessageComplete=1;
   109e0:	e3a02001 	mov	r2, #1
   109e4:	e5c32004 	strb	r2, [r3, #4]
   109e8:	ea000008 	b	10a10 <ISR_UART0+0x5c>
	}
	else if(uart0MessageComplete==0){
   109ec:	e5d31004 	ldrb	r1, [r3, #4]
   109f0:	e3510000 	cmp	r1, #0
   109f4:	1a000005 	bne	10a10 <ISR_UART0+0x5c>
		if(val != '\n')uart0Message[m0index++]=val;
   109f8:	e352000a 	cmp	r2, #10
   109fc:	15931000 	ldrne	r1, [r3]
   10a00:	159f0020 	ldrne	r0, [pc, #32]	; 10a28 <ISR_UART0+0x74>
   10a04:	17c02001 	strbne	r2, [r0, r1]
   10a08:	12811001 	addne	r1, r1, #1
   10a0c:	15831000 	strne	r1, [r3]
	}
	
	VICVectAddr =0;	//Update the VIC priorities
   10a10:	e3a02000 	mov	r2, #0
   10a14:	e3e03000 	mvn	r3, #0
   10a18:	e5032fcf 	str	r2, [r3, #-4047]	; 0xfcf
}
   10a1c:	e12fff1e 	bx	lr
   10a20:	e000c000 	.word	0xe000c000
   10a24:	40000984 	.word	0x40000984
   10a28:	40001382 	.word	0x40001382

00010a2c <sd_raw_send_byte>:
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(unsigned char b)
{
    S0SPDR = b;
   10a2c:	e59f3010 	ldr	r3, [pc, #16]	; 10a44 <sd_raw_send_byte+0x18>
   10a30:	e5830008 	str	r0, [r3, #8]
    /* wait for byte to be shifted out */
    while(!(S0SPSR & 0x80));
   10a34:	e5932004 	ldr	r2, [r3, #4]
   10a38:	e3120080 	tst	r2, #128	; 0x80
   10a3c:	0afffffc 	beq	10a34 <sd_raw_send_byte+0x8>
}
   10a40:	e12fff1e 	bx	lr
   10a44:	e0020000 	.word	0xe0020000

00010a48 <sd_raw_rec_byte>:
 * \see sd_raw_send_byte
 */
unsigned char sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    S0SPDR = 0xff;
   10a48:	e59f3020 	ldr	r3, [pc, #32]	; 10a70 <sd_raw_rec_byte+0x28>
   10a4c:	e3a020ff 	mov	r2, #255	; 0xff
   10a50:	e5832008 	str	r2, [r3, #8]
    while(!(S0SPSR & 0x80));
   10a54:	e5932004 	ldr	r2, [r3, #4]
   10a58:	e3120080 	tst	r2, #128	; 0x80
   10a5c:	0afffffc 	beq	10a54 <sd_raw_rec_byte+0xc>

    return S0SPDR;
   10a60:	e59f3008 	ldr	r3, [pc, #8]	; 10a70 <sd_raw_rec_byte+0x28>
   10a64:	e5930008 	ldr	r0, [r3, #8]
   10a68:	e20000ff 	and	r0, r0, #255	; 0xff
}
   10a6c:	e12fff1e 	bx	lr
   10a70:	e0020000 	.word	0xe0020000

00010a74 <sd_raw_send_command_r1>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
unsigned char sd_raw_send_command_r1(unsigned char command, unsigned int arg)
{
   10a74:	e92d4030 	push	{r4, r5, lr}
   10a78:	e1a05000 	mov	r5, r0
   10a7c:	e1a04001 	mov	r4, r1
    unsigned char response;
    unsigned char i;

    /* wait some clock cycles */
    sd_raw_rec_byte();
   10a80:	ebfffff0 	bl	10a48 <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
   10a84:	e3850040 	orr	r0, r5, #64	; 0x40
   10a88:	ebffffe7 	bl	10a2c <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
   10a8c:	e1a00c24 	lsr	r0, r4, #24
   10a90:	ebffffe5 	bl	10a2c <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 16) & 0xff);
   10a94:	e1a00824 	lsr	r0, r4, #16
   10a98:	e20000ff 	and	r0, r0, #255	; 0xff
   10a9c:	ebffffe2 	bl	10a2c <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 8) & 0xff);
   10aa0:	e1a00424 	lsr	r0, r4, #8
   10aa4:	e20000ff 	and	r0, r0, #255	; 0xff
   10aa8:	ebffffdf 	bl	10a2c <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 0) & 0xff);
   10aac:	e20400ff 	and	r0, r4, #255	; 0xff
   10ab0:	ebffffdd 	bl	10a2c <sd_raw_send_byte>
    sd_raw_send_byte((command == CMD_GO_IDLE_STATE) ? 0x95 : 0xff);
   10ab4:	e3550000 	cmp	r5, #0
   10ab8:	13a000ff 	movne	r0, #255	; 0xff
   10abc:	03a00095 	moveq	r0, #149	; 0x95
   10ac0:	ebffffd9 	bl	10a2c <sd_raw_send_byte>
   10ac4:	e3a0400a 	mov	r4, #10

    /* receive response */
    for(i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
   10ac8:	ebffffde 	bl	10a48 <sd_raw_rec_byte>
        if(response != 0xff)
   10acc:	e35000ff 	cmp	r0, #255	; 0xff
   10ad0:	1a000002 	bne	10ae0 <sd_raw_send_command_r1+0x6c>
   10ad4:	e2444001 	sub	r4, r4, #1
    sd_raw_send_byte((arg >> 8) & 0xff);
    sd_raw_send_byte((arg >> 0) & 0xff);
    sd_raw_send_byte((command == CMD_GO_IDLE_STATE) ? 0x95 : 0xff);

    /* receive response */
    for(i = 0; i < 10; ++i)
   10ad8:	e21440ff 	ands	r4, r4, #255	; 0xff
   10adc:	1afffff9 	bne	10ac8 <sd_raw_send_command_r1+0x54>
        if(response != 0xff)
            break;
    }

    return response;
}
   10ae0:	e8bd4030 	pop	{r4, r5, lr}
   10ae4:	e12fff1e 	bx	lr

00010ae8 <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
unsigned char sd_raw_available()
{
    unsigned int i;
    configure_pin_available();
   10ae8:	e59f3028 	ldr	r3, [pc, #40]	; 10b18 <sd_raw_available+0x30>
   10aec:	e5932008 	ldr	r2, [r3, #8]
   10af0:	e3c22080 	bic	r2, r2, #128	; 0x80
   10af4:	e5832008 	str	r2, [r3, #8]
    for(i=0;i<100000;i++);
    i = get_pin_available();
   10af8:	e5930000 	ldr	r0, [r3]
    configure_pin_ss();
   10afc:	e5932008 	ldr	r2, [r3, #8]
unsigned char sd_raw_available()
{
    unsigned int i;
    configure_pin_available();
    for(i=0;i<100000;i++);
    i = get_pin_available();
   10b00:	e2000080 	and	r0, r0, #128	; 0x80
    configure_pin_ss();
   10b04:	e3822080 	orr	r2, r2, #128	; 0x80
    return i == 0x00;
}
   10b08:	e2900000 	adds	r0, r0, #0
{
    unsigned int i;
    configure_pin_available();
    for(i=0;i<100000;i++);
    i = get_pin_available();
    configure_pin_ss();
   10b0c:	e5832008 	str	r2, [r3, #8]
    return i == 0x00;
}
   10b10:	13a00001 	movne	r0, #1
   10b14:	e12fff1e 	bx	lr
   10b18:	e0028000 	.word	0xe0028000

00010b1c <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
unsigned char sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
   10b1c:	e3a00001 	mov	r0, #1
   10b20:	e12fff1e 	bx	lr

00010b24 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read
 */
unsigned char sd_raw_write(unsigned int offset, const unsigned char* buffer, unsigned short length)
{
   10b24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
                write_length = length;
    
            /* Merge the data to write with the content of the block.
                     * Use the cached block if available.
                     */
            if(block_address != raw_block_address)
   10b28:	e59f4178 	ldr	r4, [pc, #376]	; 10ca8 <sd_raw_write+0x184>
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read
 */
unsigned char sd_raw_write(unsigned int offset, const unsigned char* buffer, unsigned short length)
{
   10b2c:	e1a02802 	lsl	r2, r2, #16
   10b30:	e1a0a000 	mov	sl, r0
   10b34:	e1a08001 	mov	r8, r1
   10b38:	e1a07822 	lsr	r7, r2, #16
                    return 0;
            }
            raw_block_address = block_address;
        }

        if(buffer != raw_block)
   10b3c:	e284b005 	add	fp, r4, #5
            return 0;
    
        unsigned int block_address;
        unsigned short block_offset;
        unsigned short write_length;
        while(length > 0)
   10b40:	ea000053 	b	10c94 <sd_raw_write+0x170>
        {
            /* determine byte count to write at once */
            block_address = offset & 0xfffffe00;
            block_offset = offset & 0x01ff;
   10b44:	e1a09b8a 	lsl	r9, sl, #23
   10b48:	e1a09ba9 	lsr	r9, r9, #23
            write_length = 512 - block_offset; /* write up to block border */
   10b4c:	e2695c02 	rsb	r5, r9, #512	; 0x200
        unsigned short block_offset;
        unsigned short write_length;
        while(length > 0)
        {
            /* determine byte count to write at once */
            block_address = offset & 0xfffffe00;
   10b50:	e3ca6f7f 	bic	r6, sl, #508	; 0x1fc
            block_offset = offset & 0x01ff;
            write_length = 512 - block_offset; /* write up to block border */
   10b54:	e1a05805 	lsl	r5, r5, #16
                write_length = length;
    
            /* Merge the data to write with the content of the block.
                     * Use the cached block if available.
                     */
            if(block_address != raw_block_address)
   10b58:	e5940000 	ldr	r0, [r4]
        unsigned short block_offset;
        unsigned short write_length;
        while(length > 0)
        {
            /* determine byte count to write at once */
            block_address = offset & 0xfffffe00;
   10b5c:	e3c66003 	bic	r6, r6, #3
            block_offset = offset & 0x01ff;
            write_length = 512 - block_offset; /* write up to block border */
   10b60:	e1a05825 	lsr	r5, r5, #16
   10b64:	e1550007 	cmp	r5, r7
   10b68:	21a05007 	movcs	r5, r7
                write_length = length;
    
            /* Merge the data to write with the content of the block.
                     * Use the cached block if available.
                     */
            if(block_address != raw_block_address)
   10b6c:	e1560000 	cmp	r6, r0
   10b70:	0a000015 	beq	10bcc <sd_raw_write+0xa8>
            {
                #if SD_RAW_WRITE_BUFFERING
                if(!raw_block_written)
   10b74:	e5d43004 	ldrb	r3, [r4, #4]
   10b78:	e3530000 	cmp	r3, #0
   10b7c:	1a000004 	bne	10b94 <sd_raw_write+0x70>
                {
                    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
   10b80:	e59f1124 	ldr	r1, [pc, #292]	; 10cac <sd_raw_write+0x188>
   10b84:	e3a02c02 	mov	r2, #512	; 0x200
   10b88:	ebffffe5 	bl	10b24 <sd_raw_write>
   10b8c:	e3500000 	cmp	r0, #0
   10b90:	0a000042 	beq	10ca0 <sd_raw_write+0x17c>
                        return 0;
                }
				#endif

            if(block_offset || write_length < 512)
   10b94:	e2993000 	adds	r3, r9, #0
   10b98:	e59f2110 	ldr	r2, [pc, #272]	; 10cb0 <sd_raw_write+0x18c>
   10b9c:	13a03001 	movne	r3, #1
   10ba0:	e1550002 	cmp	r5, r2
   10ba4:	93833001 	orrls	r3, r3, #1
   10ba8:	e3530000 	cmp	r3, #0
   10bac:	0a000005 	beq	10bc8 <sd_raw_write+0xa4>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
   10bb0:	e1a00006 	mov	r0, r6
   10bb4:	e59f10f0 	ldr	r1, [pc, #240]	; 10cac <sd_raw_write+0x188>
   10bb8:	e3a02c02 	mov	r2, #512	; 0x200
   10bbc:	eb00003d 	bl	10cb8 <sd_raw_read>
   10bc0:	e3500000 	cmp	r0, #0
   10bc4:	0a000035 	beq	10ca0 <sd_raw_write+0x17c>
                    return 0;
            }
            raw_block_address = block_address;
   10bc8:	e5846000 	str	r6, [r4]
        }

        if(buffer != raw_block)
   10bcc:	e158000b 	cmp	r8, fp
   10bd0:	0a000007 	beq	10bf4 <sd_raw_write+0xd0>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
   10bd4:	e08b0009 	add	r0, fp, r9
   10bd8:	e1a01008 	mov	r1, r8
   10bdc:	e1a02005 	mov	r2, r5
   10be0:	eb001e5b 	bl	18554 <memcpy>

            #if SD_RAW_WRITE_BUFFERING
                raw_block_written = 0;
   10be4:	e3a03000 	mov	r3, #0
    
                if(length == write_length)
   10be8:	e1570005 	cmp	r7, r5
        if(buffer != raw_block)
        {
            memcpy(raw_block + block_offset, buffer, write_length);

            #if SD_RAW_WRITE_BUFFERING
                raw_block_written = 0;
   10bec:	e5c43004 	strb	r3, [r4, #4]
    
                if(length == write_length)
   10bf0:	0a000029 	beq	10c9c <sd_raw_write+0x178>
        }

        buffer += write_length;

        /* address card */
        select_card();
   10bf4:	e59f90b8 	ldr	r9, [pc, #184]	; 10cb4 <sd_raw_write+0x190>
   10bf8:	e599300c 	ldr	r3, [r9, #12]
   10bfc:	e3833080 	orr	r3, r3, #128	; 0x80

        /* send single block request */
        if(sd_raw_send_command_r1(CMD_WRITE_SINGLE_BLOCK, block_address))
   10c00:	e1a01006 	mov	r1, r6
        }

        buffer += write_length;

        /* address card */
        select_card();
   10c04:	e589300c 	str	r3, [r9, #12]

        /* send single block request */
        if(sd_raw_send_command_r1(CMD_WRITE_SINGLE_BLOCK, block_address))
   10c08:	e3a00018 	mov	r0, #24
   10c0c:	ebffff98 	bl	10a74 <sd_raw_send_command_r1>
   10c10:	e2506000 	subs	r6, r0, #0
        {
            unselect_card();
   10c14:	15993004 	ldrne	r3, [r9, #4]
   10c18:	13833080 	orrne	r3, r3, #128	; 0x80
   10c1c:	15893004 	strne	r3, [r9, #4]
            return 0;
   10c20:	13a00000 	movne	r0, #0
   10c24:	1a00001d 	bne	10ca0 <sd_raw_write+0x17c>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
   10c28:	e3a000fe 	mov	r0, #254	; 0xfe
   10c2c:	ebffff7e 	bl	10a2c <sd_raw_send_byte>

        /* write byte block */
        unsigned char* cache = raw_block;
        unsigned short i;
        for(i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
   10c30:	e59f9074 	ldr	r9, [pc, #116]	; 10cac <sd_raw_write+0x188>
   10c34:	e7d90006 	ldrb	r0, [r9, r6]
   10c38:	e2866001 	add	r6, r6, #1
   10c3c:	ebffff7a 	bl	10a2c <sd_raw_send_byte>
        sd_raw_send_byte(0xfe);

        /* write byte block */
        unsigned char* cache = raw_block;
        unsigned short i;
        for(i = 0; i < 512; ++i)
   10c40:	e3560c02 	cmp	r6, #512	; 0x200
   10c44:	1afffffa 	bne	10c34 <sd_raw_write+0x110>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
   10c48:	e3a000ff 	mov	r0, #255	; 0xff
   10c4c:	ebffff76 	bl	10a2c <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
   10c50:	e3a000ff 	mov	r0, #255	; 0xff
   10c54:	ebffff74 	bl	10a2c <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
   10c58:	ebffff7a 	bl	10a48 <sd_raw_rec_byte>
   10c5c:	e35000ff 	cmp	r0, #255	; 0xff
   10c60:	1afffffc 	bne	10c58 <sd_raw_write+0x134>
        sd_raw_rec_byte();
   10c64:	ebffff77 	bl	10a48 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
   10c68:	e59f3044 	ldr	r3, [pc, #68]	; 10cb4 <sd_raw_write+0x190>
   10c6c:	e5932004 	ldr	r2, [r3, #4]
   10c70:	e3822080 	orr	r2, r2, #128	; 0x80
   10c74:	e5832004 	str	r2, [r3, #4]

        length -= write_length;
   10c78:	e0657007 	rsb	r7, r5, r7
        offset += write_length;

        #if SD_RAW_WRITE_BUFFERING
            raw_block_written = 1;
   10c7c:	e3a03001 	mov	r3, #1
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();

        length -= write_length;
   10c80:	e1a07807 	lsl	r7, r7, #16
        offset += write_length;

        #if SD_RAW_WRITE_BUFFERING
            raw_block_written = 1;
   10c84:	e5c43004 	strb	r3, [r4, #4]
                if(length == write_length)
                    return 1;
            #endif
        }

        buffer += write_length;
   10c88:	e0888005 	add	r8, r8, r5
        sd_raw_rec_byte();

        /* deaddress card */
        unselect_card();

        length -= write_length;
   10c8c:	e1a07827 	lsr	r7, r7, #16
        offset += write_length;
   10c90:	e08aa005 	add	sl, sl, r5
            return 0;
    
        unsigned int block_address;
        unsigned short block_offset;
        unsigned short write_length;
        while(length > 0)
   10c94:	e3570000 	cmp	r7, #0
   10c98:	1affffa9 	bne	10b44 <sd_raw_write+0x20>

            #if SD_RAW_WRITE_BUFFERING
                raw_block_written = 0;
    
                if(length == write_length)
                    return 1;
   10c9c:	e3a00001 	mov	r0, #1

    return 1;
    #else
        return 0;
    #endif
}
   10ca0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ca4:	e12fff1e 	bx	lr
   10ca8:	4000098c 	.word	0x4000098c
   10cac:	40000991 	.word	0x40000991
   10cb0:	000001ff 	.word	0x000001ff
   10cb4:	e0028000 	.word	0xe0028000

00010cb8 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write
 */
unsigned char sd_raw_read(unsigned int offset, unsigned char* buffer, unsigned short length)
{
   10cb8:	e1a02802 	lsl	r2, r2, #16
   10cbc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cc0:	e1a08000 	mov	r8, r0
   10cc4:	e1a07001 	mov	r7, r1
   10cc8:	e1a06822 	lsr	r6, r2, #16
        if(read_length > length)
            read_length = length;

        #if !SD_RAW_SAVE_RAM
            /* check if the requested data is cached */
            if(block_address != raw_block_address)
   10ccc:	e59f911c 	ldr	r9, [pc, #284]	; 10df0 <sd_raw_read+0x138>
unsigned char sd_raw_read(unsigned int offset, unsigned char* buffer, unsigned short length)
{
    unsigned int block_address;
    unsigned short block_offset;
    unsigned short read_length;
    while(length > 0)
   10cd0:	ea000041 	b	10ddc <sd_raw_read+0x124>
    {
        /* determine byte count to read at once */
        block_address = offset & 0xfffffe00;
        block_offset = offset & 0x01ff;
   10cd4:	e1a0ab88 	lsl	sl, r8, #23
   10cd8:	e1a0abaa 	lsr	sl, sl, #23
        read_length = 512 - block_offset; /* read up to block border */
   10cdc:	e26a4c02 	rsb	r4, sl, #512	; 0x200
    unsigned short block_offset;
    unsigned short read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_address = offset & 0xfffffe00;
   10ce0:	e3c85f7f 	bic	r5, r8, #508	; 0x1fc
        block_offset = offset & 0x01ff;
        read_length = 512 - block_offset; /* read up to block border */
   10ce4:	e1a04804 	lsl	r4, r4, #16
        if(read_length > length)
            read_length = length;

        #if !SD_RAW_SAVE_RAM
            /* check if the requested data is cached */
            if(block_address != raw_block_address)
   10ce8:	e5990000 	ldr	r0, [r9]
    unsigned short block_offset;
    unsigned short read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_address = offset & 0xfffffe00;
   10cec:	e3c55003 	bic	r5, r5, #3
        block_offset = offset & 0x01ff;
        read_length = 512 - block_offset; /* read up to block border */
   10cf0:	e1a04824 	lsr	r4, r4, #16
   10cf4:	e1540006 	cmp	r4, r6
   10cf8:	21a04006 	movcs	r4, r6
        if(read_length > length)
            read_length = length;

        #if !SD_RAW_SAVE_RAM
            /* check if the requested data is cached */
            if(block_address != raw_block_address)
   10cfc:	e1550000 	cmp	r5, r0
   10d00:	0a00002c 	beq	10db8 <sd_raw_read+0x100>
            #endif
        {
            #if SD_RAW_WRITE_BUFFERING
                if(!raw_block_written)
   10d04:	e5d93004 	ldrb	r3, [r9, #4]
   10d08:	e3530000 	cmp	r3, #0
   10d0c:	1a000004 	bne	10d24 <sd_raw_read+0x6c>
                {
                    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
   10d10:	e59f10dc 	ldr	r1, [pc, #220]	; 10df4 <sd_raw_read+0x13c>
   10d14:	e3a02c02 	mov	r2, #512	; 0x200
   10d18:	ebffff81 	bl	10b24 <sd_raw_write>
   10d1c:	e3500000 	cmp	r0, #0
   10d20:	0a000030 	beq	10de8 <sd_raw_read+0x130>
                        return 0;
                }
            #endif

            /* address card */
            select_card();
   10d24:	e59fb0cc 	ldr	fp, [pc, #204]	; 10df8 <sd_raw_read+0x140>
   10d28:	e59b300c 	ldr	r3, [fp, #12]
   10d2c:	e3833080 	orr	r3, r3, #128	; 0x80
   10d30:	e58b300c 	str	r3, [fp, #12]

            /* send single block request */
            if(sd_raw_send_command_r1(CMD_READ_SINGLE_BLOCK, block_address))
   10d34:	e3a00011 	mov	r0, #17
   10d38:	e1a01005 	mov	r1, r5
   10d3c:	ebffff4c 	bl	10a74 <sd_raw_send_command_r1>
   10d40:	e3500000 	cmp	r0, #0
            {
                unselect_card();
   10d44:	159b3004 	ldrne	r3, [fp, #4]
   10d48:	13833080 	orrne	r3, r3, #128	; 0x80
   10d4c:	158b3004 	strne	r3, [fp, #4]
                return 0;
   10d50:	13a00000 	movne	r0, #0
   10d54:	1a000023 	bne	10de8 <sd_raw_read+0x130>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
   10d58:	ebffff3a 	bl	10a48 <sd_raw_rec_byte>
   10d5c:	e35000fe 	cmp	r0, #254	; 0xfe
   10d60:	1afffffc 	bne	10d58 <sd_raw_read+0xa0>
   10d64:	e3a0b000 	mov	fp, #0
            #else
                /* read byte block */
                unsigned char* cache = raw_block;
                unsigned short i;
                for(i = 0; i < 512; ++i)
                    *cache++ = sd_raw_rec_byte();
   10d68:	ebffff36 	bl	10a48 <sd_raw_rec_byte>
   10d6c:	e59f3080 	ldr	r3, [pc, #128]	; 10df4 <sd_raw_read+0x13c>
   10d70:	e7c3000b 	strb	r0, [r3, fp]
   10d74:	e28bb001 	add	fp, fp, #1
                }
            #else
                /* read byte block */
                unsigned char* cache = raw_block;
                unsigned short i;
                for(i = 0; i < 512; ++i)
   10d78:	e35b0c02 	cmp	fp, #512	; 0x200
   10d7c:	1afffff9 	bne	10d68 <sd_raw_read+0xb0>
                    *cache++ = sd_raw_rec_byte();
                raw_block_address = block_address;
   10d80:	e5035005 	str	r5, [r3, #-5]
    
                memcpy(buffer, raw_block + block_offset, read_length);
   10d84:	e083100a 	add	r1, r3, sl
   10d88:	e1a02004 	mov	r2, r4
   10d8c:	e1a00007 	mov	r0, r7
   10d90:	eb001def 	bl	18554 <memcpy>
                buffer += read_length;
            #endif

            /* read crc16 */
            sd_raw_rec_byte();
   10d94:	ebffff2b 	bl	10a48 <sd_raw_rec_byte>
            sd_raw_rec_byte();
   10d98:	ebffff2a 	bl	10a48 <sd_raw_rec_byte>

            /* deaddress card */
            unselect_card();
   10d9c:	e59f3054 	ldr	r3, [pc, #84]	; 10df8 <sd_raw_read+0x140>
   10da0:	e5932004 	ldr	r2, [r3, #4]
   10da4:	e3822080 	orr	r2, r2, #128	; 0x80
   10da8:	e5832004 	str	r2, [r3, #4]
                for(i = 0; i < 512; ++i)
                    *cache++ = sd_raw_rec_byte();
                raw_block_address = block_address;
    
                memcpy(buffer, raw_block + block_offset, read_length);
                buffer += read_length;
   10dac:	e0877004 	add	r7, r7, r4

            /* deaddress card */
            unselect_card();

            /* let card some time to finish */
            sd_raw_rec_byte();
   10db0:	ebffff24 	bl	10a48 <sd_raw_rec_byte>
   10db4:	ea000004 	b	10dcc <sd_raw_read+0x114>
        }
        #if !SD_RAW_SAVE_RAM
            else
            {
                /* use cached data */
                memcpy(buffer, raw_block + block_offset, read_length);
   10db8:	e59f3034 	ldr	r3, [pc, #52]	; 10df4 <sd_raw_read+0x13c>
   10dbc:	e1a00007 	mov	r0, r7
   10dc0:	e083100a 	add	r1, r3, sl
   10dc4:	e1a02004 	mov	r2, r4
   10dc8:	eb001de1 	bl	18554 <memcpy>
            }
        #endif

        length -= read_length;
   10dcc:	e0646006 	rsb	r6, r4, r6
   10dd0:	e1a06806 	lsl	r6, r6, #16
   10dd4:	e1a06826 	lsr	r6, r6, #16
        offset += read_length;
   10dd8:	e0888004 	add	r8, r8, r4
unsigned char sd_raw_read(unsigned int offset, unsigned char* buffer, unsigned short length)
{
    unsigned int block_address;
    unsigned short block_offset;
    unsigned short read_length;
    while(length > 0)
   10ddc:	e3560000 	cmp	r6, #0
   10de0:	1affffbb 	bne	10cd4 <sd_raw_read+0x1c>

        length -= read_length;
        offset += read_length;
    }

    return 1;
   10de4:	e3a00001 	mov	r0, #1
}
   10de8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10dec:	e12fff1e 	bx	lr
   10df0:	4000098c 	.word	0x4000098c
   10df4:	40000991 	.word	0x40000991
   10df8:	e0028000 	.word	0xe0028000

00010dfc <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read, sd_raw_write
 */
unsigned char sd_raw_read_interval(unsigned int offset, unsigned char* buffer, unsigned short interval, unsigned short length, sd_raw_interval_handler callback, void* p)
{
   10dfc:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
   10e00:	e1a02802 	lsl	r2, r2, #16
    if(!buffer || interval == 0 || length < interval || !callback)
   10e04:	e3510000 	cmp	r1, #0
   10e08:	13520000 	cmpne	r2, #0
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read, sd_raw_write
 */
unsigned char sd_raw_read_interval(unsigned int offset, unsigned char* buffer, unsigned short interval, unsigned short length, sd_raw_interval_handler callback, void* p)
{
   10e0c:	e28d501c 	add	r5, sp, #28
   10e10:	e1a03803 	lsl	r3, r3, #16
   10e14:	e1a04000 	mov	r4, r0
   10e18:	e8950060 	ldm	r5, {r5, r6}
    if(!buffer || interval == 0 || length < interval || !callback)
   10e1c:	13a00000 	movne	r0, #0
   10e20:	03a00001 	moveq	r0, #1
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read, sd_raw_write
 */
unsigned char sd_raw_read_interval(unsigned int offset, unsigned char* buffer, unsigned short interval, unsigned short length, sd_raw_interval_handler callback, void* p)
{
   10e24:	e1a08823 	lsr	r8, r3, #16
    if(!buffer || interval == 0 || length < interval || !callback)
   10e28:	e1a07822 	lsr	r7, r2, #16
   10e2c:	e1a0a001 	mov	sl, r1
        return 0;
   10e30:	03a00000 	moveq	r0, #0
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read, sd_raw_write
 */
unsigned char sd_raw_read_interval(unsigned int offset, unsigned char* buffer, unsigned short interval, unsigned short length, sd_raw_interval_handler callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
   10e34:	0a00001a 	beq	10ea4 <sd_raw_read_interval+0xa8>
   10e38:	e1580007 	cmp	r8, r7
   10e3c:	23a03000 	movcs	r3, #0
   10e40:	33a03001 	movcc	r3, #1
   10e44:	e3550000 	cmp	r5, #0
   10e48:	03833001 	orreq	r3, r3, #1
   10e4c:	e3530000 	cmp	r3, #0
   10e50:	1a000013 	bne	10ea4 <sd_raw_read_interval+0xa8>
        while(length >= interval)
        {
            /* as reading is now buffered, we directly
                     * hand over the request to sd_raw_read()
                     */
            if(!sd_raw_read(offset, buffer, interval))
   10e54:	e1a00004 	mov	r0, r4
   10e58:	e1a0100a 	mov	r1, sl
   10e5c:	e1a02007 	mov	r2, r7
   10e60:	ebffff94 	bl	10cb8 <sd_raw_read>
   10e64:	e3500000 	cmp	r0, #0
   10e68:	0a00000d 	beq	10ea4 <sd_raw_read_interval+0xa8>
                return 0;
            if(!callback(buffer, offset, p))
   10e6c:	e1a0000a 	mov	r0, sl
   10e70:	e1a01004 	mov	r1, r4
   10e74:	e1a02006 	mov	r2, r6
   10e78:	e1a0e00f 	mov	lr, pc
   10e7c:	e12fff15 	bx	r5
   10e80:	e3500000 	cmp	r0, #0
   10e84:	0a000005 	beq	10ea0 <sd_raw_read_interval+0xa4>
                break;
            offset += interval;
            length -= interval;
   10e88:	e0678008 	rsb	r8, r7, r8
   10e8c:	e1a08808 	lsl	r8, r8, #16
   10e90:	e1a08828 	lsr	r8, r8, #16
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

    #if !SD_RAW_SAVE_RAM
        while(length >= interval)
   10e94:	e1580007 	cmp	r8, r7
 * \param[in] callback The function to call every interval bytes.
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read, sd_raw_write
 */
unsigned char sd_raw_read_interval(unsigned int offset, unsigned char* buffer, unsigned short interval, unsigned short length, sd_raw_interval_handler callback, void* p)
   10e98:	e0844007 	add	r4, r4, r7
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

    #if !SD_RAW_SAVE_RAM
        while(length >= interval)
   10e9c:	2affffec 	bcs	10e54 <sd_raw_read_interval+0x58>
                break;
            offset += interval;
            length -= interval;
        }
    
        return 1;
   10ea0:	e3a00001 	mov	r0, #1
        /* let card some time to finish */
        sd_raw_rec_byte();
    
        return 1;
    #endif
}
   10ea4:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
   10ea8:	e12fff1e 	bx	lr

00010eac <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
unsigned char sd_raw_init()
{
   10eac:	e92d4070 	push	{r4, r5, r6, lr}
    /* enable inputs for reading card status */
    /*    configure_pin_available();*/
    /*    configure_pin_locked();*/

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_ss();
   10eb0:	e59f61a0 	ldr	r6, [pc, #416]	; 11058 <sd_raw_init+0x1ac>
   10eb4:	e5963008 	ldr	r3, [r6, #8]
   10eb8:	e3833080 	orr	r3, r3, #128	; 0x80
   10ebc:	e5863008 	str	r3, [r6, #8]
    configure_pin_mosi();
   10ec0:	e59f3194 	ldr	r3, [pc, #404]	; 1105c <sd_raw_init+0x1b0>
   10ec4:	e5932000 	ldr	r2, [r3]
   10ec8:	e3822a01 	orr	r2, r2, #4096	; 0x1000
   10ecc:	e5832000 	str	r2, [r3]
    configure_pin_miso();
   10ed0:	e5932000 	ldr	r2, [r3]
   10ed4:	e3822b01 	orr	r2, r2, #1024	; 0x400
   10ed8:	e5832000 	str	r2, [r3]
    configure_pin_sck();
   10edc:	e5932000 	ldr	r2, [r3]
   10ee0:	e3822c01 	orr	r2, r2, #256	; 0x100
   10ee4:	e5832000 	str	r2, [r3]

    unselect_card();
   10ee8:	e5963004 	ldr	r3, [r6, #4]
   10eec:	e3833080 	orr	r3, r3, #128	; 0x80
   10ef0:	e5863004 	str	r3, [r6, #4]

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    S0SPCCR = 150;  /* Set frequency to 400kHz */
   10ef4:	e59f3164 	ldr	r3, [pc, #356]	; 11060 <sd_raw_init+0x1b4>
   10ef8:	e3a02096 	mov	r2, #150	; 0x96
   10efc:	e583200c 	str	r2, [r3, #12]
    S0SPCR = 0x38;
   10f00:	e3a02038 	mov	r2, #56	; 0x38
   10f04:	e5832000 	str	r2, [r3]


    /* initialization procedure */

    if(!sd_raw_available())
   10f08:	ebfffef6 	bl	10ae8 <sd_raw_available>
   10f0c:	e2504000 	subs	r4, r0, #0
    {
        rprintf("SD RAW NOT AVAILABLE\n\r");
   10f10:	059f014c 	ldreq	r0, [pc, #332]	; 11064 <sd_raw_init+0x1b8>
    S0SPCR = 0x38;


    /* initialization procedure */

    if(!sd_raw_available())
   10f14:	0a000030 	beq	10fdc <sd_raw_init+0x130>
    {
        rprintf("SD RAW NOT AVAILABLE\n\r");
        return 0;
    }
    configure_pin_ss();
   10f18:	e5963008 	ldr	r3, [r6, #8]
   10f1c:	e3833080 	orr	r3, r3, #128	; 0x80
   10f20:	e5863008 	str	r3, [r6, #8]
    unselect_card();
   10f24:	e5963004 	ldr	r3, [r6, #4]
   10f28:	e3833080 	orr	r3, r3, #128	; 0x80
   10f2c:	e5863004 	str	r3, [r6, #4]
   10f30:	e3a0400a 	mov	r4, #10
    unsigned short i;
    /* card needs 74 cycles minimum to start up */
    for(i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
   10f34:	e2444001 	sub	r4, r4, #1
   10f38:	e1a04804 	lsl	r4, r4, #16
   10f3c:	ebfffec1 	bl	10a48 <sd_raw_rec_byte>
    configure_pin_ss();
    unselect_card();

    unsigned short i;
    /* card needs 74 cycles minimum to start up */
    for(i = 0; i < 10; ++i)
   10f40:	e1b04824 	lsrs	r4, r4, #16
   10f44:	1afffffa 	bne	10f34 <sd_raw_init+0x88>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
   10f48:	e59f3108 	ldr	r3, [pc, #264]	; 11058 <sd_raw_init+0x1ac>
   10f4c:	e593200c 	ldr	r2, [r3, #12]
   10f50:	e3822080 	orr	r2, r2, #128	; 0x80
   10f54:	e583200c 	str	r2, [r3, #12]
   10f58:	e3a04c02 	mov	r4, #512	; 0x200

    /* reset card */
    unsigned char response;
    for(i = 0; ; ++i)
    {
        response = sd_raw_send_command_r1(CMD_GO_IDLE_STATE, 0);
   10f5c:	e3a00000 	mov	r0, #0
   10f60:	e1a01000 	mov	r1, r0
   10f64:	ebfffec2 	bl	10a74 <sd_raw_send_command_r1>
        if(response == (1 << R1_IDLE_STATE))
   10f68:	e3500001 	cmp	r0, #1

    /* reset card */
    unsigned char response;
    for(i = 0; ; ++i)
    {
        response = sd_raw_send_command_r1(CMD_GO_IDLE_STATE, 0);
   10f6c:	e1a01000 	mov	r1, r0
        if(response == (1 << R1_IDLE_STATE))
   10f70:	0a00000a 	beq	10fa0 <sd_raw_init+0xf4>
   10f74:	e2444001 	sub	r4, r4, #1
   10f78:	e1a04804 	lsl	r4, r4, #16
            break;

        if(i == 0x1ff)
   10f7c:	e1b04824 	lsrs	r4, r4, #16
   10f80:	1afffff5 	bne	10f5c <sd_raw_init+0xb0>
        {
            rprintf("\n\rresponse: %d\n\r",response);
   10f84:	e59f00dc 	ldr	r0, [pc, #220]	; 11068 <sd_raw_init+0x1bc>
   10f88:	ebfffcad 	bl	10244 <rprintf>
            unselect_card();
   10f8c:	e59f30c4 	ldr	r3, [pc, #196]	; 11058 <sd_raw_init+0x1ac>
   10f90:	e5932004 	ldr	r2, [r3, #4]
   10f94:	e3822080 	orr	r2, r2, #128	; 0x80
   10f98:	e5832004 	str	r2, [r3, #4]
            return 0;
   10f9c:	ea00002a 	b	1104c <sd_raw_init+0x1a0>
    /* reset card */
    unsigned char response;
    for(i = 0; ; ++i)
    {
        response = sd_raw_send_command_r1(CMD_GO_IDLE_STATE, 0);
        if(response == (1 << R1_IDLE_STATE))
   10fa0:	e3a04902 	mov	r4, #32768	; 0x8000
    }

    /* wait for card to get ready */
    for(i = 0; ; ++i)
    {
        response = sd_raw_send_command_r1(CMD_SEND_OP_COND, 0);
   10fa4:	e3a00001 	mov	r0, #1
   10fa8:	e3a01000 	mov	r1, #0
   10fac:	ebfffeb0 	bl	10a74 <sd_raw_send_command_r1>
        if(!(response & (1 << R1_IDLE_STATE)))
   10fb0:	e2105001 	ands	r5, r0, #1
   10fb4:	0a00000a 	beq	10fe4 <sd_raw_init+0x138>
   10fb8:	e2444001 	sub	r4, r4, #1
   10fbc:	e1a04804 	lsl	r4, r4, #16
            break;

        if(i == 0x7fff)
   10fc0:	e1b04824 	lsrs	r4, r4, #16
   10fc4:	1afffff6 	bne	10fa4 <sd_raw_init+0xf8>
        {
            unselect_card();
   10fc8:	e59f3088 	ldr	r3, [pc, #136]	; 11058 <sd_raw_init+0x1ac>
   10fcc:	e5932004 	ldr	r2, [r3, #4]
   10fd0:	e3822080 	orr	r2, r2, #128	; 0x80
   10fd4:	e5832004 	str	r2, [r3, #4]
            rprintf("i = 0x7fff\n\r");
   10fd8:	e59f008c 	ldr	r0, [pc, #140]	; 1106c <sd_raw_init+0x1c0>
   10fdc:	ebfffc98 	bl	10244 <rprintf>
            return 0;
   10fe0:	ea000019 	b	1104c <sd_raw_init+0x1a0>
        }
    }

    /* set block size to 512 bytes */
    if(sd_raw_send_command_r1(CMD_SET_BLOCKLEN, 512))
   10fe4:	e3a00010 	mov	r0, #16
   10fe8:	e3a01c02 	mov	r1, #512	; 0x200
   10fec:	ebfffea0 	bl	10a74 <sd_raw_send_command_r1>
   10ff0:	e59f3060 	ldr	r3, [pc, #96]	; 11058 <sd_raw_init+0x1ac>
    {
        unselect_card();
   10ff4:	e5932004 	ldr	r2, [r3, #4]
            return 0;
        }
    }

    /* set block size to 512 bytes */
    if(sd_raw_send_command_r1(CMD_SET_BLOCKLEN, 512))
   10ff8:	e3500000 	cmp	r0, #0
    {
        unselect_card();
   10ffc:	e3822080 	orr	r2, r2, #128	; 0x80
   11000:	e5832004 	str	r2, [r3, #4]
        rprintf("BLOCK SIZE SET ERR \n\r");
   11004:	159f0064 	ldrne	r0, [pc, #100]	; 11070 <sd_raw_init+0x1c4>
            return 0;
        }
    }

    /* set block size to 512 bytes */
    if(sd_raw_send_command_r1(CMD_SET_BLOCKLEN, 512))
   11008:	1a00000d 	bne	11044 <sd_raw_init+0x198>
    /* deaddress card */
    unselect_card();

    /* switch to highest SPI frequency possible */
    //S0SPCCR = 60; /* ~1MHz-- potentially can be faster */
	S0SPCCR = 6;	/* Try setting the SPI Freq. to 10 MHz */
   1100c:	e59f304c 	ldr	r3, [pc, #76]	; 11060 <sd_raw_init+0x1b4>

    #if !SD_RAW_SAVE_RAM
        /* the first block is likely to be accessed first, so precache it here */
        raw_block_address = 0xffffffff;
   11010:	e59f105c 	ldr	r1, [pc, #92]	; 11074 <sd_raw_init+0x1c8>
    /* deaddress card */
    unselect_card();

    /* switch to highest SPI frequency possible */
    //S0SPCCR = 60; /* ~1MHz-- potentially can be faster */
	S0SPCCR = 6;	/* Try setting the SPI Freq. to 10 MHz */
   11014:	e3a02006 	mov	r2, #6
   11018:	e583200c 	str	r2, [r3, #12]

    #if !SD_RAW_SAVE_RAM
        /* the first block is likely to be accessed first, so precache it here */
        raw_block_address = 0xffffffff;
        #if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
   1101c:	e3a04001 	mov	r4, #1
    //S0SPCCR = 60; /* ~1MHz-- potentially can be faster */
	S0SPCCR = 6;	/* Try setting the SPI Freq. to 10 MHz */

    #if !SD_RAW_SAVE_RAM
        /* the first block is likely to be accessed first, so precache it here */
        raw_block_address = 0xffffffff;
   11020:	e3e03000 	mvn	r3, #0
   11024:	e5813000 	str	r3, [r1]
        #if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
   11028:	e5c14004 	strb	r4, [r1, #4]
    #endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
   1102c:	e3a02c02 	mov	r2, #512	; 0x200
   11030:	e2811005 	add	r1, r1, #5
   11034:	ebffff1f 	bl	10cb8 <sd_raw_read>
   11038:	e2505000 	subs	r5, r0, #0
   1103c:	1a000002 	bne	1104c <sd_raw_init+0x1a0>
    {
        rprintf("sd_raw_read borks\n\r");
   11040:	e59f0030 	ldr	r0, [pc, #48]	; 11078 <sd_raw_init+0x1cc>
   11044:	ebfffc7e 	bl	10244 <rprintf>
        return 0;
   11048:	e1a04005 	mov	r4, r5
    }
    #endif

    return 1;
}
   1104c:	e1a00004 	mov	r0, r4
   11050:	e8bd4070 	pop	{r4, r5, r6, lr}
   11054:	e12fff1e 	bx	lr
   11058:	e0028000 	.word	0xe0028000
   1105c:	e002c000 	.word	0xe002c000
   11060:	e0020000 	.word	0xe0020000
   11064:	00025db8 	.word	0x00025db8
   11068:	00025dcf 	.word	0x00025dcf
   1106c:	00025de0 	.word	0x00025de0
   11070:	00025ded 	.word	0x00025ded
   11074:	4000098c 	.word	0x4000098c
   11078:	00025e03 	.word	0x00025e03

0001107c <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
unsigned char sd_raw_sync()
{
   1107c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    #if SD_RAW_WRITE_SUPPORT
        #if SD_RAW_WRITE_BUFFERING
        if(raw_block_written)
   11080:	e59f1028 	ldr	r1, [pc, #40]	; 110b0 <sd_raw_sync+0x34>
   11084:	e5d13004 	ldrb	r3, [r1, #4]
   11088:	e3530000 	cmp	r3, #0
            return 1;
   1108c:	13a00001 	movne	r0, #1
 */
unsigned char sd_raw_sync()
{
    #if SD_RAW_WRITE_SUPPORT
        #if SD_RAW_WRITE_BUFFERING
        if(raw_block_written)
   11090:	1a000004 	bne	110a8 <sd_raw_sync+0x2c>
            return 1;
        if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
   11094:	e4910005 	ldr	r0, [r1], #5
   11098:	e3a02c02 	mov	r2, #512	; 0x200
   1109c:	ebfffea0 	bl	10b24 <sd_raw_write>
            return 0;
   110a0:	e2900000 	adds	r0, r0, #0
   110a4:	13a00001 	movne	r0, #1
    #endif
    return 1;
    #else
    return 0;
    #endif
}
   110a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   110ac:	e12fff1e 	bx	lr
   110b0:	4000098c 	.word	0x4000098c

000110b4 <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
unsigned char sd_raw_get_info(struct sd_raw_info* info)
{
   110b4:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
    if(!info || !sd_raw_available())
   110b8:	e2504000 	subs	r4, r0, #0
        return 0;
   110bc:	01a00004 	moveq	r0, r4
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
unsigned char sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
   110c0:	0a000091 	beq	1130c <sd_raw_get_info+0x258>
   110c4:	ebfffe87 	bl	10ae8 <sd_raw_available>
   110c8:	e3500000 	cmp	r0, #0
   110cc:	0a00008e 	beq	1130c <sd_raw_get_info+0x258>
        return 0;

    memset(info, 0, sizeof(*info));

    select_card();
   110d0:	e59f523c 	ldr	r5, [pc, #572]	; 11314 <sd_raw_get_info+0x260>
unsigned char sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
        return 0;

    memset(info, 0, sizeof(*info));
   110d4:	e3a01000 	mov	r1, #0
   110d8:	e3a0201c 	mov	r2, #28
   110dc:	e1a00004 	mov	r0, r4
   110e0:	eb001d51 	bl	1862c <memset>

    select_card();
   110e4:	e595300c 	ldr	r3, [r5, #12]
   110e8:	e3833080 	orr	r3, r3, #128	; 0x80
   110ec:	e585300c 	str	r3, [r5, #12]

    /* read cid register */
    if(sd_raw_send_command_r1(CMD_SEND_CID, 0))
   110f0:	e3a0000a 	mov	r0, #10
   110f4:	e3a01000 	mov	r1, #0
   110f8:	ebfffe5d 	bl	10a74 <sd_raw_send_command_r1>
   110fc:	e3500000 	cmp	r0, #0
    {
        unselect_card();
   11100:	15953004 	ldrne	r3, [r5, #4]
   11104:	13833080 	orrne	r3, r3, #128	; 0x80
   11108:	15853004 	strne	r3, [r5, #4]
    memset(info, 0, sizeof(*info));

    select_card();

    /* read cid register */
    if(sd_raw_send_command_r1(CMD_SEND_CID, 0))
   1110c:	1a00003b 	bne	11200 <sd_raw_get_info+0x14c>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
   11110:	ebfffe4c 	bl	10a48 <sd_raw_rec_byte>
   11114:	e35000fe 	cmp	r0, #254	; 0xfe
   11118:	1afffffc 	bne	11110 <sd_raw_get_info+0x5c>
   1111c:	e1a06004 	mov	r6, r4
   11120:	e3a07060 	mov	r7, #96	; 0x60
   11124:	e3a05000 	mov	r5, #0
    unsigned char i;
    for(i = 0; i < 18; ++i)
    {
        unsigned char b = sd_raw_rec_byte();
   11128:	ebfffe46 	bl	10a48 <sd_raw_rec_byte>

        switch(i)
   1112c:	e355000e 	cmp	r5, #14
   11130:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
   11134:	ea000022 	b	111c4 <sd_raw_get_info+0x110>
   11138:	00011174 	.word	0x00011174
   1113c:	0001117c 	.word	0x0001117c
   11140:	0001117c 	.word	0x0001117c
   11144:	00011184 	.word	0x00011184
   11148:	00011184 	.word	0x00011184
   1114c:	00011184 	.word	0x00011184
   11150:	00011184 	.word	0x00011184
   11154:	00011184 	.word	0x00011184
   11158:	0001118c 	.word	0x0001118c
   1115c:	00011194 	.word	0x00011194
   11160:	00011194 	.word	0x00011194
   11164:	00011194 	.word	0x00011194
   11168:	00011194 	.word	0x00011194
   1116c:	000111a4 	.word	0x000111a4
   11170:	000111b0 	.word	0x000111b0
        {
            case 0:
                info->manufacturer = b;
   11174:	e5c40000 	strb	r0, [r4]
                break;
   11178:	ea000011 	b	111c4 <sd_raw_get_info+0x110>
            case 1:
            case 2:
                info->oem[i - 1] = b;
   1117c:	e5c60000 	strb	r0, [r6]
                break;
   11180:	ea00000f 	b	111c4 <sd_raw_get_info+0x110>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
   11184:	e5c60001 	strb	r0, [r6, #1]
                break;
   11188:	ea00000d 	b	111c4 <sd_raw_get_info+0x110>
            case 8:
                info->revision = b;
   1118c:	e5c4000a 	strb	r0, [r4, #10]
                break;
   11190:	ea00000b 	b	111c4 <sd_raw_get_info+0x110>
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (unsigned int) b << ((12 - i) * 8);
   11194:	e594300c 	ldr	r3, [r4, #12]
   11198:	e1830710 	orr	r0, r3, r0, lsl r7
   1119c:	e584000c 	str	r0, [r4, #12]
                break;
   111a0:	ea000007 	b	111c4 <sd_raw_get_info+0x110>
            case 13:
                info->manufacturing_year = b << 4;
   111a4:	e1a00200 	lsl	r0, r0, #4
   111a8:	e5c40010 	strb	r0, [r4, #16]
                break;
   111ac:	ea000004 	b	111c4 <sd_raw_get_info+0x110>
            case 14:
                info->manufacturing_year |= b >> 4;
   111b0:	e5d43010 	ldrb	r3, [r4, #16]
   111b4:	e1833220 	orr	r3, r3, r0, lsr #4
                info->manufacturing_month = b & 0x0f;
   111b8:	e200000f 	and	r0, r0, #15
                break;
            case 13:
                info->manufacturing_year = b << 4;
                break;
            case 14:
                info->manufacturing_year |= b >> 4;
   111bc:	e5c43010 	strb	r3, [r4, #16]
                info->manufacturing_month = b & 0x0f;
   111c0:	e5c40011 	strb	r0, [r4, #17]
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    unsigned char i;
    for(i = 0; i < 18; ++i)
   111c4:	e2855001 	add	r5, r5, #1
   111c8:	e20550ff 	and	r5, r5, #255	; 0xff
   111cc:	e3550012 	cmp	r5, #18
   111d0:	e2866001 	add	r6, r6, #1
   111d4:	e2477008 	sub	r7, r7, #8
   111d8:	1affffd2 	bne	11128 <sd_raw_get_info+0x74>

    /* read csd register */
    unsigned char csd_read_bl_len = 0;
    unsigned char csd_c_size_mult = 0;
    unsigned short csd_c_size = 0;
    if(sd_raw_send_command_r1(CMD_SEND_CSD, 0))
   111dc:	e3a00009 	mov	r0, #9
   111e0:	e3a01000 	mov	r1, #0
   111e4:	ebfffe22 	bl	10a74 <sd_raw_send_command_r1>
   111e8:	e3500000 	cmp	r0, #0
   111ec:	0a000005 	beq	11208 <sd_raw_get_info+0x154>
    {
        unselect_card();
   111f0:	e59f311c 	ldr	r3, [pc, #284]	; 11314 <sd_raw_get_info+0x260>
   111f4:	e5932004 	ldr	r2, [r3, #4]
   111f8:	e3822080 	orr	r2, r2, #128	; 0x80
   111fc:	e5832004 	str	r2, [r3, #4]
        return 0;
   11200:	e3a00000 	mov	r0, #0
   11204:	ea000040 	b	1130c <sd_raw_get_info+0x258>
    }
    while(sd_raw_rec_byte() != 0xfe);
   11208:	ebfffe0e 	bl	10a48 <sd_raw_rec_byte>
   1120c:	e35000fe 	cmp	r0, #254	; 0xfe
   11210:	1afffffc 	bne	11208 <sd_raw_get_info+0x154>
   11214:	e3a05000 	mov	r5, #0
   11218:	e1a07005 	mov	r7, r5
   1121c:	e1a0a005 	mov	sl, r5
   11220:	e1a06005 	mov	r6, r5
                if(b & 0x40)
                    info->flag_copy = 1;
                if(b & 0x20)
                    info->flag_write_protect = 1;
                if(b & 0x10)
                    info->flag_write_protect_temp = 1;
   11224:	e3a08001 	mov	r8, #1
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(i = 0; i < 18; ++i)
    {
        unsigned char b = sd_raw_rec_byte();
   11228:	ebfffe06 	bl	10a48 <sd_raw_rec_byte>

        switch(i)
   1122c:	e2463005 	sub	r3, r6, #5
   11230:	e3530009 	cmp	r3, #9
   11234:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   11238:	ea00002a 	b	112e8 <sd_raw_get_info+0x234>
   1123c:	00011264 	.word	0x00011264
   11240:	0001126c 	.word	0x0001126c
   11244:	00011278 	.word	0x00011278
   11248:	00011284 	.word	0x00011284
   1124c:	0001129c 	.word	0x0001129c
   11250:	000112a8 	.word	0x000112a8
   11254:	000112e8 	.word	0x000112e8
   11258:	000112e8 	.word	0x000112e8
   1125c:	000112e8 	.word	0x000112e8
   11260:	000112c4 	.word	0x000112c4
        {
            case 5:
                csd_read_bl_len = b & 0x0f;
   11264:	e200a00f 	and	sl, r0, #15
                break;
   11268:	ea00001e 	b	112e8 <sd_raw_get_info+0x234>
            case 6:
                csd_c_size = (unsigned short) (b & 0x03) << 8;
   1126c:	e2005003 	and	r5, r0, #3
   11270:	e1a05405 	lsl	r5, r5, #8
                break;
   11274:	ea00001b 	b	112e8 <sd_raw_get_info+0x234>
            case 7:
                csd_c_size |= b;
   11278:	e1805005 	orr	r5, r0, r5
                csd_c_size <<= 2;
   1127c:	e1a05905 	lsl	r5, r5, #18
   11280:	ea000003 	b	11294 <sd_raw_get_info+0x1e0>
                break;
            case 8:
                csd_c_size |= b >> 6;
   11284:	e1a00900 	lsl	r0, r0, #18
   11288:	e1855c20 	orr	r5, r5, r0, lsr #24
                ++csd_c_size;
   1128c:	e2855001 	add	r5, r5, #1
   11290:	e1a05805 	lsl	r5, r5, #16
   11294:	e1a05825 	lsr	r5, r5, #16
                break;
   11298:	ea000012 	b	112e8 <sd_raw_get_info+0x234>
            case 9:
                csd_c_size_mult = (b & 0x03) << 1;
   1129c:	e2007003 	and	r7, r0, #3
   112a0:	e1a07087 	lsl	r7, r7, #1
                break;
   112a4:	ea00000f 	b	112e8 <sd_raw_get_info+0x234>
            case 10:
                csd_c_size_mult |= b >> 7;
   112a8:	e18773a0 	orr	r7, r7, r0, lsr #7
   112ac:	e20770ff 	and	r7, r7, #255	; 0xff

                info->capacity = (unsigned int) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
   112b0:	e087300a 	add	r3, r7, sl
   112b4:	e2833002 	add	r3, r3, #2
   112b8:	e1a03315 	lsl	r3, r5, r3
   112bc:	e5843014 	str	r3, [r4, #20]

                break;
   112c0:	ea000008 	b	112e8 <sd_raw_get_info+0x234>
            case 14:
                if(b & 0x40)
   112c4:	e3100040 	tst	r0, #64	; 0x40
                    info->flag_copy = 1;
   112c8:	15c48018 	strbne	r8, [r4, #24]
                if(b & 0x20)
   112cc:	e3100020 	tst	r0, #32
                    info->flag_write_protect = 1;
   112d0:	15c48019 	strbne	r8, [r4, #25]
                if(b & 0x10)
   112d4:	e3100010 	tst	r0, #16
                    info->flag_write_protect_temp = 1;
                info->format = (b & 0x0c) >> 2;
   112d8:	e200000c 	and	r0, r0, #12
   112dc:	e1a00140 	asr	r0, r0, #2
                if(b & 0x40)
                    info->flag_copy = 1;
                if(b & 0x20)
                    info->flag_write_protect = 1;
                if(b & 0x10)
                    info->flag_write_protect_temp = 1;
   112e0:	15c4801a 	strbne	r8, [r4, #26]
                info->format = (b & 0x0c) >> 2;
   112e4:	e5c4001b 	strb	r0, [r4, #27]
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(i = 0; i < 18; ++i)
   112e8:	e2866001 	add	r6, r6, #1
   112ec:	e20660ff 	and	r6, r6, #255	; 0xff
   112f0:	e3560012 	cmp	r6, #18
   112f4:	1affffcb 	bne	11228 <sd_raw_get_info+0x174>
                info->format = (b & 0x0c) >> 2;
                break;
        }
    }

    unselect_card();
   112f8:	e59f3014 	ldr	r3, [pc, #20]	; 11314 <sd_raw_get_info+0x260>
   112fc:	e5932004 	ldr	r2, [r3, #4]
   11300:	e3822080 	orr	r2, r2, #128	; 0x80
   11304:	e5832004 	str	r2, [r3, #4]

    return 1;
   11308:	e3a00001 	mov	r0, #1
}
   1130c:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
   11310:	e12fff1e 	bx	lr
   11314:	e0028000 	.word	0xe0028000

00011318 <SDoff>:

void SDoff(void)
{
    SPI_SS_IODIR &= ~(1<<SPI_SS_PIN);
   11318:	e59f301c 	ldr	r3, [pc, #28]	; 1133c <SDoff+0x24>
   1131c:	e5932008 	ldr	r2, [r3, #8]
   11320:	e3c22080 	bic	r2, r2, #128	; 0x80
   11324:	e5832008 	str	r2, [r3, #8]
    PINSEL0 &= ~(0x1500);
   11328:	e2833901 	add	r3, r3, #16384	; 0x4000
   1132c:	e5932000 	ldr	r2, [r3]
   11330:	e3c22c15 	bic	r2, r2, #5376	; 0x1500
   11334:	e5832000 	str	r2, [r3]
}
   11338:	e12fff1e 	bx	lr
   1133c:	e0028000 	.word	0xe0028000

00011340 <SDon>:

void SDon(void)
{
    SPI_SS_IODIR |= (1<<SPI_SS_PIN);
   11340:	e59f301c 	ldr	r3, [pc, #28]	; 11364 <SDon+0x24>
   11344:	e5932008 	ldr	r2, [r3, #8]
   11348:	e3822080 	orr	r2, r2, #128	; 0x80
   1134c:	e5832008 	str	r2, [r3, #8]
    PINSEL0 |= (0x1500);
   11350:	e2833901 	add	r3, r3, #16384	; 0x4000
   11354:	e5932000 	ldr	r2, [r3]
   11358:	e3822c15 	orr	r2, r2, #5376	; 0x1500
   1135c:	e5832000 	str	r2, [r3]
}
   11360:	e12fff1e 	bx	lr
   11364:	e0028000 	.word	0xe0028000

00011368 <format_card>:
//NES : 10-28-7 
//Low-level formats a 512MB card
//Assumes *many* things
//You must pass this fuction 0xAA to get it to work (safety check)
char format_card(char make_sure)
{
   11368:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1136c:	e20000ff 	and	r0, r0, #255	; 0xff
	#define BR_LOCATION		(MBR_LOCATION+0x80000)
	#define FAT_TABLE		(BR_LOCATION + (0x200 * 512))
	#define ROOT_DIR		(BR_LOCATION + (0x0200 * 512) + (0x00F5 * 2 * 512))

	//Safety check
	if (make_sure != 0xAA) return 0;
   11370:	e35000aa 	cmp	r0, #170	; 0xaa
//NES : 10-28-7 
//Low-level formats a 512MB card
//Assumes *many* things
//You must pass this fuction 0xAA to get it to work (safety check)
char format_card(char make_sure)
{
   11374:	e24ddc02 	sub	sp, sp, #512	; 0x200
	#define BR_LOCATION		(MBR_LOCATION+0x80000)
	#define FAT_TABLE		(BR_LOCATION + (0x200 * 512))
	#define ROOT_DIR		(BR_LOCATION + (0x0200 * 512) + (0x00F5 * 2 * 512))

	//Safety check
	if (make_sure != 0xAA) return 0;
   11378:	13a00000 	movne	r0, #0
   1137c:	1a00006e 	bne	1153c <format_card+0x1d4>
   11380:	e3a04000 	mov	r4, #0
	
	int i;
	unsigned char my_buff[512];
	for(i = 0 ; i < 512 ; i++) my_buff[i] = 0x00;
   11384:	e1a03004 	mov	r3, r4
   11388:	e1a0500d 	mov	r5, sp
   1138c:	e7c43005 	strb	r3, [r4, r5]
   11390:	e2844001 	add	r4, r4, #1
   11394:	e3540c02 	cmp	r4, #512	; 0x200
   11398:	1afffffa 	bne	11388 <format_card+0x20>
	
	//Init SD card interface
	sd_raw_init();
   1139c:	ebfffec2 	bl	10eac <sd_raw_init>

	//Erase Master Boot record
	sd_raw_sync();
   113a0:	ebffff35 	bl	1107c <sd_raw_sync>
	sd_raw_write(MBR_LOCATION, my_buff, 512);
   113a4:	e1a02004 	mov	r2, r4
   113a8:	e1a0100d 	mov	r1, sp
   113ac:	e3a00000 	mov	r0, #0
   113b0:	ebfffddb 	bl	10b24 <sd_raw_write>

	//Erase Boot record
	sd_raw_sync();
   113b4:	ebffff30 	bl	1107c <sd_raw_sync>
	sd_raw_write(BR_LOCATION, my_buff, 512);
   113b8:	e1a02004 	mov	r2, r4
   113bc:	e3a00702 	mov	r0, #524288	; 0x80000
   113c0:	e1a0100d 	mov	r1, sp
   113c4:	ebfffdd6 	bl	10b24 <sd_raw_write>

	//Erase FAT tables
	for(i = 0 ; i < 0x00F5 ; i++) //0x00F5 = 245 bytes : comes from byte 0x16 from Boot Record
   113c8:	e59f6178 	ldr	r6, [pc, #376]	; 11548 <format_card+0x1e0>
	sd_raw_sync();
	sd_raw_write(MBR_LOCATION, my_buff, 512);

	//Erase Boot record
	sd_raw_sync();
	sd_raw_write(BR_LOCATION, my_buff, 512);
   113cc:	e3a04703 	mov	r4, #786432	; 0xc0000

	//Erase FAT tables
	for(i = 0 ; i < 0x00F5 ; i++) //0x00F5 = 245 bytes : comes from byte 0x16 from Boot Record
	{
		sd_raw_sync();
		sd_raw_write( (FAT_TABLE + (i*512)), my_buff, 512);
   113d0:	e1a0500d 	mov	r5, sp
	sd_raw_write(BR_LOCATION, my_buff, 512);

	//Erase FAT tables
	for(i = 0 ; i < 0x00F5 ; i++) //0x00F5 = 245 bytes : comes from byte 0x16 from Boot Record
	{
		sd_raw_sync();
   113d4:	ebffff28 	bl	1107c <sd_raw_sync>
		sd_raw_write( (FAT_TABLE + (i*512)), my_buff, 512);
   113d8:	e1a00004 	mov	r0, r4
   113dc:	e1a0100d 	mov	r1, sp
   113e0:	e3a02c02 	mov	r2, #512	; 0x200
   113e4:	e2844c02 	add	r4, r4, #512	; 0x200
   113e8:	ebfffdcd 	bl	10b24 <sd_raw_write>
	//Erase Boot record
	sd_raw_sync();
	sd_raw_write(BR_LOCATION, my_buff, 512);

	//Erase FAT tables
	for(i = 0 ; i < 0x00F5 ; i++) //0x00F5 = 245 bytes : comes from byte 0x16 from Boot Record
   113ec:	e1540006 	cmp	r4, r6
   113f0:	1afffff7 	bne	113d4 <format_card+0x6c>
	
	//Write Master Boot Record
	#define PART1	0x01BE
	my_buff[PART1 + 0] = 0x00;
	my_buff[PART1 + 1] = 0x00;
	my_buff[PART1 + 2] = 0x01;
   113f4:	e3a03001 	mov	r3, #1
   113f8:	e5cd31c0 	strb	r3, [sp, #448]	; 0x1c0
	my_buff[PART1 + 3] = 0x01;
   113fc:	e5cd31c1 	strb	r3, [sp, #449]	; 0x1c1
	my_buff[PART1 + 4] = 0x06;
   11400:	e3a03006 	mov	r3, #6
   11404:	e5cd31c2 	strb	r3, [sp, #450]	; 0x1c2
	my_buff[PART1 + 5] = 0x1F;
   11408:	e3a0301f 	mov	r3, #31
   1140c:	e5cd31c3 	strb	r3, [sp, #451]	; 0x1c3
	my_buff[PART1 + 6] = 0xE0;
   11410:	e3e0301f 	mvn	r3, #31
		sd_raw_write( (FAT_TABLE + (i*512)), my_buff, 512);
	}
	
	//Write Master Boot Record
	#define PART1	0x01BE
	my_buff[PART1 + 0] = 0x00;
   11414:	e3a09000 	mov	r9, #0
	my_buff[PART1 + 10] = 0x00;
	my_buff[PART1 + 11] = 0x00;
	my_buff[PART1 + 12] = 0x00;
	my_buff[PART1 + 13] = 0x4C;
	my_buff[PART1 + 14] = 0x0F;
	my_buff[510] = 0x55;
   11418:	e3a04055 	mov	r4, #85	; 0x55
	my_buff[PART1 + 1] = 0x00;
	my_buff[PART1 + 2] = 0x01;
	my_buff[PART1 + 3] = 0x01;
	my_buff[PART1 + 4] = 0x06;
	my_buff[PART1 + 5] = 0x1F;
	my_buff[PART1 + 6] = 0xE0;
   1141c:	e5cd31c4 	strb	r3, [sp, #452]	; 0x1c4
	my_buff[PART1 + 7] = 0xD3;
	my_buff[PART1 + 8] = 0x00;
	my_buff[PART1 + 9] = 0x04;
   11420:	e3a0a004 	mov	sl, #4
	my_buff[PART1 + 2] = 0x01;
	my_buff[PART1 + 3] = 0x01;
	my_buff[PART1 + 4] = 0x06;
	my_buff[PART1 + 5] = 0x1F;
	my_buff[PART1 + 6] = 0xE0;
	my_buff[PART1 + 7] = 0xD3;
   11424:	e3e0302c 	mvn	r3, #44	; 0x2c
	my_buff[PART1 + 8] = 0x00;
	my_buff[PART1 + 9] = 0x04;
	my_buff[PART1 + 10] = 0x00;
	my_buff[PART1 + 11] = 0x00;
	my_buff[PART1 + 12] = 0x00;
	my_buff[PART1 + 13] = 0x4C;
   11428:	e3a0804c 	mov	r8, #76	; 0x4c
	my_buff[PART1 + 14] = 0x0F;
   1142c:	e3a0700f 	mov	r7, #15
	my_buff[510] = 0x55;
	my_buff[511] = 0xAA;
   11430:	e3e06055 	mvn	r6, #85	; 0x55
	my_buff[PART1 + 2] = 0x01;
	my_buff[PART1 + 3] = 0x01;
	my_buff[PART1 + 4] = 0x06;
	my_buff[PART1 + 5] = 0x1F;
	my_buff[PART1 + 6] = 0xE0;
	my_buff[PART1 + 7] = 0xD3;
   11434:	e5cd31c5 	strb	r3, [sp, #453]	; 0x1c5
		sd_raw_write( (FAT_TABLE + (i*512)), my_buff, 512);
	}
	
	//Write Master Boot Record
	#define PART1	0x01BE
	my_buff[PART1 + 0] = 0x00;
   11438:	e5cd91be 	strb	r9, [sp, #446]	; 0x1be
	my_buff[PART1 + 1] = 0x00;
   1143c:	e5cd91bf 	strb	r9, [sp, #447]	; 0x1bf
	my_buff[PART1 + 3] = 0x01;
	my_buff[PART1 + 4] = 0x06;
	my_buff[PART1 + 5] = 0x1F;
	my_buff[PART1 + 6] = 0xE0;
	my_buff[PART1 + 7] = 0xD3;
	my_buff[PART1 + 8] = 0x00;
   11440:	e5cd91c6 	strb	r9, [sp, #454]	; 0x1c6
	my_buff[PART1 + 9] = 0x04;
   11444:	e5cda1c7 	strb	sl, [sp, #455]	; 0x1c7
	my_buff[PART1 + 10] = 0x00;
   11448:	e5cd91c8 	strb	r9, [sp, #456]	; 0x1c8
	my_buff[PART1 + 11] = 0x00;
   1144c:	e5cd91c9 	strb	r9, [sp, #457]	; 0x1c9
	my_buff[PART1 + 12] = 0x00;
   11450:	e5cd91ca 	strb	r9, [sp, #458]	; 0x1ca
	my_buff[PART1 + 13] = 0x4C;
   11454:	e5cd81cb 	strb	r8, [sp, #459]	; 0x1cb
	my_buff[PART1 + 14] = 0x0F;
   11458:	e5cd71cc 	strb	r7, [sp, #460]	; 0x1cc
	my_buff[510] = 0x55;
   1145c:	e5cd41fe 	strb	r4, [sp, #510]	; 0x1fe
	my_buff[511] = 0xAA;
   11460:	e5cd61ff 	strb	r6, [sp, #511]	; 0x1ff

	sd_raw_sync();
   11464:	ebffff04 	bl	1107c <sd_raw_sync>
	sd_raw_write(MBR_LOCATION, my_buff, 512);
   11468:	e1a0100d 	mov	r1, sp
   1146c:	e3a02c02 	mov	r2, #512	; 0x200
   11470:	e1a00009 	mov	r0, r9
   11474:	ebfffdaa 	bl	10b24 <sd_raw_write>
	sd_raw_sync();
   11478:	ebfffeff 	bl	1107c <sd_raw_sync>
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
	my_buff[1] = 0xFE;
	my_buff[2] = 0x90;
	my_buff[12] = 0x02;
	my_buff[13] = 0x10;
   1147c:	e3a02010 	mov	r2, #16
	sd_raw_write(MBR_LOCATION, my_buff, 512);
	sd_raw_sync();

	//Write Boot Record
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
   11480:	e3e03014 	mvn	r3, #20
	my_buff[1] = 0xFE;
	my_buff[2] = 0x90;
	my_buff[12] = 0x02;
	my_buff[13] = 0x10;
   11484:	e5cd200d 	strb	r2, [sp, #13]
	my_buff[14] = 0x16;
   11488:	e3a02016 	mov	r2, #22
	sd_raw_write(MBR_LOCATION, my_buff, 512);
	sd_raw_sync();

	//Write Boot Record
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
   1148c:	e5cd3000 	strb	r3, [sp]
	my_buff[1] = 0xFE;
	my_buff[2] = 0x90;
	my_buff[12] = 0x02;
	my_buff[13] = 0x10;
	my_buff[14] = 0x16;
   11490:	e5cd200e 	strb	r2, [sp, #14]
	sd_raw_sync();

	//Write Boot Record
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
	my_buff[1] = 0xFE;
   11494:	e3e03001 	mvn	r3, #1
	my_buff[24] = 0x20;
	my_buff[26] = 0x20;
	my_buff[29] = 0x04;
	my_buff[33] = 0x4C;
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
   11498:	e3a02029 	mov	r2, #41	; 0x29
	sd_raw_sync();

	//Write Boot Record
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
	my_buff[1] = 0xFE;
   1149c:	e5cd3001 	strb	r3, [sp, #1]
	my_buff[24] = 0x20;
	my_buff[26] = 0x20;
	my_buff[29] = 0x04;
	my_buff[33] = 0x4C;
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
   114a0:	e5cd2026 	strb	r2, [sp, #38]	; 0x26

	//Write Boot Record
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
	my_buff[1] = 0xFE;
	my_buff[2] = 0x90;
   114a4:	e3e0306f 	mvn	r3, #111	; 0x6f
	my_buff[26] = 0x20;
	my_buff[29] = 0x04;
	my_buff[33] = 0x4C;
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
   114a8:	e3a02046 	mov	r2, #70	; 0x46

	//Write Boot Record
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
	my_buff[1] = 0xFE;
	my_buff[2] = 0x90;
   114ac:	e5cd3002 	strb	r3, [sp, #2]
	my_buff[26] = 0x20;
	my_buff[29] = 0x04;
	my_buff[33] = 0x4C;
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
   114b0:	e5cd2036 	strb	r2, [sp, #54]	; 0x36
	//Write Boot Record
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
	my_buff[1] = 0xFE;
	my_buff[2] = 0x90;
	my_buff[12] = 0x02;
   114b4:	e3a03002 	mov	r3, #2
	my_buff[29] = 0x04;
	my_buff[33] = 0x4C;
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
	my_buff[55] = 0x41;
   114b8:	e3a02041 	mov	r2, #65	; 0x41
	//Write Boot Record
	#define BOOTRECORD1	0x80000
	my_buff[0] = 0xEB;
	my_buff[1] = 0xFE;
	my_buff[2] = 0x90;
	my_buff[12] = 0x02;
   114bc:	e5cd300c 	strb	r3, [sp, #12]
	my_buff[13] = 0x10;
	my_buff[14] = 0x16;
	my_buff[16] = 0x02;
   114c0:	e5cd3010 	strb	r3, [sp, #16]
	my_buff[18] = 0x02;
   114c4:	e5cd3012 	strb	r3, [sp, #18]
	my_buff[29] = 0x04;
	my_buff[33] = 0x4C;
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
	my_buff[55] = 0x41;
   114c8:	e5cd2037 	strb	r2, [sp, #55]	; 0x37
	my_buff[12] = 0x02;
	my_buff[13] = 0x10;
	my_buff[14] = 0x16;
	my_buff[16] = 0x02;
	my_buff[18] = 0x02;
	my_buff[21] = 0xF8;
   114cc:	e3e03007 	mvn	r3, #7
	my_buff[33] = 0x4C;
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
	my_buff[55] = 0x41;
	my_buff[56] = 0x54;
   114d0:	e3a02054 	mov	r2, #84	; 0x54
	my_buff[12] = 0x02;
	my_buff[13] = 0x10;
	my_buff[14] = 0x16;
	my_buff[16] = 0x02;
	my_buff[18] = 0x02;
	my_buff[21] = 0xF8;
   114d4:	e5cd3015 	strb	r3, [sp, #21]
	my_buff[33] = 0x4C;
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
	my_buff[55] = 0x41;
	my_buff[56] = 0x54;
   114d8:	e5cd2038 	strb	r2, [sp, #56]	; 0x38
	my_buff[13] = 0x10;
	my_buff[14] = 0x16;
	my_buff[16] = 0x02;
	my_buff[18] = 0x02;
	my_buff[21] = 0xF8;
	my_buff[22] = 0xF5;
   114dc:	e3e0300a 	mvn	r3, #10
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
	my_buff[55] = 0x41;
	my_buff[56] = 0x54;
	my_buff[57] = 0x31;
   114e0:	e3a02031 	mov	r2, #49	; 0x31
	my_buff[13] = 0x10;
	my_buff[14] = 0x16;
	my_buff[16] = 0x02;
	my_buff[18] = 0x02;
	my_buff[21] = 0xF8;
	my_buff[22] = 0xF5;
   114e4:	e5cd3016 	strb	r3, [sp, #22]
	my_buff[34] = 0x0F;
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
	my_buff[55] = 0x41;
	my_buff[56] = 0x54;
	my_buff[57] = 0x31;
   114e8:	e5cd2039 	strb	r2, [sp, #57]	; 0x39
	my_buff[14] = 0x16;
	my_buff[16] = 0x02;
	my_buff[18] = 0x02;
	my_buff[21] = 0xF8;
	my_buff[22] = 0xF5;
	my_buff[24] = 0x20;
   114ec:	e3a03020 	mov	r3, #32
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
	my_buff[55] = 0x41;
	my_buff[56] = 0x54;
	my_buff[57] = 0x31;
	my_buff[58] = 0x36;
   114f0:	e3a02036 	mov	r2, #54	; 0x36
	my_buff[14] = 0x16;
	my_buff[16] = 0x02;
	my_buff[18] = 0x02;
	my_buff[21] = 0xF8;
	my_buff[22] = 0xF5;
	my_buff[24] = 0x20;
   114f4:	e5cd3018 	strb	r3, [sp, #24]
	my_buff[26] = 0x20;
   114f8:	e5cd301a 	strb	r3, [sp, #26]
	my_buff[54] = 0x46;
	my_buff[55] = 0x41;
	my_buff[56] = 0x54;
	my_buff[57] = 0x31;
	my_buff[58] = 0x36;
	my_buff[59] = 0x20;
   114fc:	e5cd303b 	strb	r3, [sp, #59]	; 0x3b
	my_buff[60] = 0x20;
   11500:	e5cd303c 	strb	r3, [sp, #60]	; 0x3c
	my_buff[61] = 0x20;
   11504:	e5cd303d 	strb	r3, [sp, #61]	; 0x3d
	my_buff[38] = 0x29;
	my_buff[54] = 0x46;
	my_buff[55] = 0x41;
	my_buff[56] = 0x54;
	my_buff[57] = 0x31;
	my_buff[58] = 0x36;
   11508:	e5cd203a 	strb	r2, [sp, #58]	; 0x3a
	my_buff[18] = 0x02;
	my_buff[21] = 0xF8;
	my_buff[22] = 0xF5;
	my_buff[24] = 0x20;
	my_buff[26] = 0x20;
	my_buff[29] = 0x04;
   1150c:	e5cda01d 	strb	sl, [sp, #29]
	my_buff[33] = 0x4C;
   11510:	e5cd8021 	strb	r8, [sp, #33]	; 0x21
	my_buff[34] = 0x0F;
   11514:	e5cd7022 	strb	r7, [sp, #34]	; 0x22
	my_buff[57] = 0x31;
	my_buff[58] = 0x36;
	my_buff[59] = 0x20;
	my_buff[60] = 0x20;
	my_buff[61] = 0x20;
	my_buff[510] = 0x55;
   11518:	e5cd41fe 	strb	r4, [sp, #510]	; 0x1fe
	my_buff[511] = 0xAA;
   1151c:	e5cd61ff 	strb	r6, [sp, #511]	; 0x1ff
	
	sd_raw_sync();
   11520:	ebfffed5 	bl	1107c <sd_raw_sync>
	sd_raw_write(BR_LOCATION, my_buff, 512);
   11524:	e1a0100d 	mov	r1, sp
   11528:	e3a02c02 	mov	r2, #512	; 0x200
   1152c:	e3a00702 	mov	r0, #524288	; 0x80000
   11530:	ebfffd7b 	bl	10b24 <sd_raw_write>
	sd_raw_sync();
   11534:	ebfffed0 	bl	1107c <sd_raw_sync>
	
	return(0x55); //Successful format
   11538:	e1a00004 	mov	r0, r4
}
   1153c:	e28ddc02 	add	sp, sp, #512	; 0x200
   11540:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11544:	e12fff1e 	bx	lr
   11548:	000dea00 	.word	0x000dea00

0001154c <partition_open>:
 *                  and is of an unknown type.
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, int8_t index0)
{
   1154c:	e92d41ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index0 >= 4)
   11550:	e3500000 	cmp	r0, #0
   11554:	13510000 	cmpne	r1, #0
 *                  and is of an unknown type.
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, int8_t index0)
{
   11558:	e1a03c03 	lsl	r3, r3, #24
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index0 >= 4)
   1155c:	13a05000 	movne	r5, #0
   11560:	03a05001 	moveq	r5, #1
 *                  and is of an unknown type.
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, int8_t index0)
{
   11564:	e1a04002 	mov	r4, r2
   11568:	e1a06c43 	asr	r6, r3, #24
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index0 >= 4)
   1156c:	e1a08001 	mov	r8, r1
   11570:	e1a07000 	mov	r7, r0
        return 0;
   11574:	03a05000 	moveq	r5, #0
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, int8_t index0)
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index0 >= 4)
   11578:	0a000030 	beq	11640 <partition_open+0xf4>
   1157c:	e3560003 	cmp	r6, #3
   11580:	ca00002e 	bgt	11640 <partition_open+0xf4>
        return 0;

    if(index0 >= 0)
   11584:	e3560000 	cmp	r6, #0
   11588:	ba00000b 	blt	115bc <partition_open+0x70>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index0 * 0x10, buffer, sizeof(buffer)))
   1158c:	e1a00206 	lsl	r0, r6, #4
   11590:	e2800f6f 	add	r0, r0, #444	; 0x1bc
   11594:	e2800002 	add	r0, r0, #2
   11598:	e1a0100d 	mov	r1, sp
   1159c:	e3a02010 	mov	r2, #16
   115a0:	e1a0e00f 	mov	lr, pc
   115a4:	e12fff17 	bx	r7
   115a8:	e2505000 	subs	r5, r0, #0
   115ac:	0a000023 	beq	11640 <partition_open+0xf4>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
   115b0:	e5dd5004 	ldrb	r5, [sp, #4]
   115b4:	e3550000 	cmp	r5, #0
   115b8:	0a000020 	beq	11640 <partition_open+0xf4>
            return 0;
    }

    /* allocate partition descriptor */
    new_partition = malloc(sizeof(*new_partition));
   115bc:	e3a00018 	mov	r0, #24
   115c0:	eb001a12 	bl	17e10 <malloc>
    if(!new_partition)
   115c4:	e2505000 	subs	r5, r0, #0
   115c8:	0a00001c 	beq	11640 <partition_open+0xf4>
        return 0;
    memset(new_partition, 0, sizeof(*new_partition));
   115cc:	e3a01000 	mov	r1, #0
   115d0:	e3a02018 	mov	r2, #24
   115d4:	eb001c14 	bl	1862c <memset>
    /* fill partition descriptor */
    new_partition->device_read = device_read;
    new_partition->device_read_interval = device_read_interval;
    new_partition->device_write = device_write;

    if(index0 >= 0)
   115d8:	e3560000 	cmp	r6, #0
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
   115dc:	b3e03000 	mvnlt	r3, #0
        return 0;
    memset(new_partition, 0, sizeof(*new_partition));

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    new_partition->device_read_interval = device_read_interval;
   115e0:	e8850180 	stm	r5, {r7, r8}
    new_partition->device_write = device_write;
   115e4:	e5854008 	str	r4, [r5, #8]
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
   115e8:	b5c5300c 	strblt	r3, [r5, #12]
    /* fill partition descriptor */
    new_partition->device_read = device_read;
    new_partition->device_read_interval = device_read_interval;
    new_partition->device_write = device_write;

    if(index0 >= 0)
   115ec:	ba000013 	blt	11640 <partition_open+0xf4>
    {
        new_partition->type = buffer[4];
   115f0:	e5dd3004 	ldrb	r3, [sp, #4]
   115f4:	e5c5300c 	strb	r3, [r5, #12]
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
   115f8:	e5dd300a 	ldrb	r3, [sp, #10]

    if(index0 >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
   115fc:	e5dd2009 	ldrb	r2, [sp, #9]
                                ((uint32_t) buffer[10] << 16) |
   11600:	e1a03803 	lsl	r3, r3, #16
    new_partition->device_write = device_write;

    if(index0 >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
   11604:	e1833402 	orr	r3, r3, r2, lsl #8
   11608:	e5dd2008 	ldrb	r2, [sp, #8]
                                ((uint32_t) buffer[9] << 8) |
   1160c:	e1833002 	orr	r3, r3, r2
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
   11610:	e5dd200b 	ldrb	r2, [sp, #11]
    if(index0 >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
   11614:	e1833c02 	orr	r3, r3, r2, lsl #24
    new_partition->device_write = device_write;

    if(index0 >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
   11618:	e5853010 	str	r3, [r5, #16]
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
                                ((uint32_t) buffer[13] << 8) |
                                ((uint32_t) buffer[14] << 16) |
   1161c:	e5dd300e 	ldrb	r3, [sp, #14]
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
                                ((uint32_t) buffer[13] << 8) |
   11620:	e5dd200d 	ldrb	r2, [sp, #13]
                                ((uint32_t) buffer[14] << 16) |
   11624:	e1a03803 	lsl	r3, r3, #16
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
   11628:	e1833402 	orr	r3, r3, r2, lsl #8
   1162c:	e5dd200c 	ldrb	r2, [sp, #12]
                                ((uint32_t) buffer[13] << 8) |
   11630:	e1833002 	orr	r3, r3, r2
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
   11634:	e5dd200f 	ldrb	r2, [sp, #15]
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
                                ((uint32_t) buffer[13] << 8) |
                                ((uint32_t) buffer[14] << 16) |
   11638:	e1833c02 	orr	r3, r3, r2, lsl #24
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
   1163c:	e5853014 	str	r3, [r5, #20]
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
   11640:	e1a00005 	mov	r0, r5
   11644:	e28dd010 	add	sp, sp, #16
   11648:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1164c:	e12fff1e 	bx	lr

00011650 <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
   11650:	e2503000 	subs	r3, r0, #0
 * \param[in] partition The partition descriptor to destroy.
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
   11654:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if(!partition)
        return 0;
   11658:	01a00003 	moveq	r0, r3
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
   1165c:	0a000001 	beq	11668 <partition_close+0x18>
        return 0;

    /* destroy partition descriptor */
    free(partition);
   11660:	eb0019ef 	bl	17e24 <free>

    return 1;
   11664:	e3a00001 	mov	r0, #1
}
   11668:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1166c:	e12fff1e 	bx	lr

00011670 <openroot>:
struct partition_struct* partition;
struct fat16_dir_struct* dd;
struct fat16_file_struct * fd;

int openroot(void)
{
   11670:	e92d4010 	push	{r4, lr}
    /* open first partition */
    partition = partition_open((device_read_t) sd_raw_read,
   11674:	e59f00a0 	ldr	r0, [pc, #160]	; 1171c <openroot+0xac>
   11678:	e59f10a0 	ldr	r1, [pc, #160]	; 11720 <openroot+0xb0>
   1167c:	e59f20a0 	ldr	r2, [pc, #160]	; 11724 <openroot+0xb4>
   11680:	e3a03000 	mov	r3, #0
   11684:	ebffffb0 	bl	1154c <partition_open>
   11688:	e59f4098 	ldr	r4, [pc, #152]	; 11728 <openroot+0xb8>
                               (device_read_interval_t) sd_raw_read_interval,
                               (device_write_t) sd_raw_write,
                               0);

    if(!partition)
   1168c:	e3500000 	cmp	r0, #0
struct fat16_file_struct * fd;

int openroot(void)
{
    /* open first partition */
    partition = partition_open((device_read_t) sd_raw_read,
   11690:	e5840000 	str	r0, [r4]
                               (device_read_interval_t) sd_raw_read_interval,
                               (device_write_t) sd_raw_write,
                               0);

    if(!partition)
   11694:	1a000008 	bne	116bc <openroot+0x4c>
    {
        /* If the partition did not open, assume the storage device
             *      * is a "superfloppy", i.e. has no MBR.
             *           */
        partition = partition_open((device_read_t) sd_raw_read,
   11698:	e59f007c 	ldr	r0, [pc, #124]	; 1171c <openroot+0xac>
   1169c:	e59f107c 	ldr	r1, [pc, #124]	; 11720 <openroot+0xb0>
   116a0:	e59f207c 	ldr	r2, [pc, #124]	; 11724 <openroot+0xb4>
   116a4:	e3e03000 	mvn	r3, #0
   116a8:	ebffffa7 	bl	1154c <partition_open>
                                   (device_read_interval_t) sd_raw_read_interval,
                                   (device_write_t) sd_raw_write,
                                   -1);
        if(!partition)
   116ac:	e3500000 	cmp	r0, #0
    if(!partition)
    {
        /* If the partition did not open, assume the storage device
             *      * is a "superfloppy", i.e. has no MBR.
             *           */
        partition = partition_open((device_read_t) sd_raw_read,
   116b0:	e5840000 	str	r0, [r4]
                                   (device_read_interval_t) sd_raw_read_interval,
                                   (device_write_t) sd_raw_write,
                                   -1);
        if(!partition)
        {
            rprintf("opening partition failed\n\r");
   116b4:	059f0070 	ldreq	r0, [pc, #112]	; 1172c <openroot+0xbc>
             *           */
        partition = partition_open((device_read_t) sd_raw_read,
                                   (device_read_interval_t) sd_raw_read_interval,
                                   (device_write_t) sd_raw_write,
                                   -1);
        if(!partition)
   116b8:	0a000013 	beq	1170c <openroot+0x9c>
            return 1;
        }
    }

    /* open file system */
    fs = fat16_open(partition);
   116bc:	e59f3064 	ldr	r3, [pc, #100]	; 11728 <openroot+0xb8>
   116c0:	e5930000 	ldr	r0, [r3]
   116c4:	eb0002ea 	bl	12274 <fat16_open>
   116c8:	e59f4060 	ldr	r4, [pc, #96]	; 11730 <openroot+0xc0>
    if(!fs)
   116cc:	e3500000 	cmp	r0, #0
            return 1;
        }
    }

    /* open file system */
    fs = fat16_open(partition);
   116d0:	e5840000 	str	r0, [r4]
    if(!fs)
    {
        rprintf("opening filesystem failed\n\r");
   116d4:	059f0058 	ldreq	r0, [pc, #88]	; 11734 <openroot+0xc4>
        }
    }

    /* open file system */
    fs = fat16_open(partition);
    if(!fs)
   116d8:	0a00000b 	beq	1170c <openroot+0x9c>
        rprintf("opening filesystem failed\n\r");
        return 1;
    }

    /* open root directory */
    fat16_get_dir_entry_of_path(fs, "/", &dir_entry);
   116dc:	e59f1054 	ldr	r1, [pc, #84]	; 11738 <openroot+0xc8>
   116e0:	e59f2054 	ldr	r2, [pc, #84]	; 1173c <openroot+0xcc>
   116e4:	eb000586 	bl	12d04 <fat16_get_dir_entry_of_path>

    dd = fat16_open_dir(fs, &dir_entry);
   116e8:	e5940000 	ldr	r0, [r4]
   116ec:	e59f1048 	ldr	r1, [pc, #72]	; 1173c <openroot+0xcc>
   116f0:	eb0004ef 	bl	12ab4 <fat16_open_dir>
   116f4:	e59f3044 	ldr	r3, [pc, #68]	; 11740 <openroot+0xd0>
    if(!dd)
   116f8:	e3500000 	cmp	r0, #0
    }

    /* open root directory */
    fat16_get_dir_entry_of_path(fs, "/", &dir_entry);

    dd = fat16_open_dir(fs, &dir_entry);
   116fc:	e5830000 	str	r0, [r3]
    if(!dd)
    {
        rprintf("opening root directory failed\n\r");
        return 1;
    }
    return 0;
   11700:	13a00000 	movne	r0, #0

    /* open root directory */
    fat16_get_dir_entry_of_path(fs, "/", &dir_entry);

    dd = fat16_open_dir(fs, &dir_entry);
    if(!dd)
   11704:	1a000002 	bne	11714 <openroot+0xa4>
    {
        rprintf("opening root directory failed\n\r");
   11708:	e59f0034 	ldr	r0, [pc, #52]	; 11744 <openroot+0xd4>
   1170c:	ebfffacc 	bl	10244 <rprintf>
        return 1;
   11710:	e3a00001 	mov	r0, #1
    }
    return 0;
}
   11714:	e8bd4010 	pop	{r4, lr}
   11718:	e12fff1e 	bx	lr
   1171c:	00010cb8 	.word	0x00010cb8
   11720:	00010dfc 	.word	0x00010dfc
   11724:	00010b24 	.word	0x00010b24
   11728:	40001404 	.word	0x40001404
   1172c:	00025e17 	.word	0x00025e17
   11730:	400013d0 	.word	0x400013d0
   11734:	00025e32 	.word	0x00025e32
   11738:	00025e4e 	.word	0x00025e4e
   1173c:	400013d4 	.word	0x400013d4
   11740:	40001408 	.word	0x40001408
   11744:	00025e50 	.word	0x00025e50

00011748 <root_file_exists>:

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   11748:	e59f3020 	ldr	r3, [pc, #32]	; 11770 <root_file_exists+0x28>
    return 0;
}

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
   1174c:	e1a02000 	mov	r2, r0
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   11750:	e5930000 	ldr	r0, [r3]
   11754:	e59f3018 	ldr	r3, [pc, #24]	; 11774 <root_file_exists+0x2c>
    return 0;
}

/* returns 1 if file exists, 0 else */
int root_file_exists(char* name)
{
   11758:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    return(find_file_in_dir(fs,dd,name,&dir_entry));
   1175c:	e5931000 	ldr	r1, [r3]
   11760:	e59f3010 	ldr	r3, [pc, #16]	; 11778 <root_file_exists+0x30>
   11764:	eb000685 	bl	13180 <find_file_in_dir>
}
   11768:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1176c:	e12fff1e 	bx	lr
   11770:	400013d0 	.word	0x400013d0
   11774:	40001408 	.word	0x40001408
   11778:	400013d4 	.word	0x400013d4

0001177c <root_open_new>:

/* returns NULL if error, pointer if file opened */
struct fat16_file_struct * root_open_new(char* name)
{
   1177c:	e92d4030 	push	{r4, r5, lr}
    if(fat16_create_file(dd,name,&dir_entry))
   11780:	e59f5030 	ldr	r5, [pc, #48]	; 117b8 <root_open_new+0x3c>
    return(find_file_in_dir(fs,dd,name,&dir_entry));
}

/* returns NULL if error, pointer if file opened */
struct fat16_file_struct * root_open_new(char* name)
{
   11784:	e1a04000 	mov	r4, r0
    if(fat16_create_file(dd,name,&dir_entry))
   11788:	e1a01004 	mov	r1, r4
   1178c:	e5950000 	ldr	r0, [r5]
   11790:	e59f2024 	ldr	r2, [pc, #36]	; 117bc <root_open_new+0x40>
   11794:	eb0005b0 	bl	12e5c <fat16_create_file>
   11798:	e3500000 	cmp	r0, #0
    {
        return(open_file_in_dir(fs,dd,name));
   1179c:	159f301c 	ldrne	r3, [pc, #28]	; 117c0 <root_open_new+0x44>
   117a0:	15951000 	ldrne	r1, [r5]
   117a4:	15930000 	ldrne	r0, [r3]
   117a8:	11a02004 	movne	r2, r4
   117ac:	1b000688 	blne	131d4 <open_file_in_dir>
    }
    else
    {
        return NULL;
    }
}
   117b0:	e8bd4030 	pop	{r4, r5, lr}
   117b4:	e12fff1e 	bx	lr
   117b8:	40001408 	.word	0x40001408
   117bc:	400013d4 	.word	0x400013d4
   117c0:	400013d0 	.word	0x400013d0

000117c4 <root_open>:

struct fat16_file_struct * root_open(char* name)
{
   117c4:	e92d4031 	push	{r0, r4, r5, lr}
    //return(open_file_in_dir(fs,dd,name));
	struct fat16_file_struct * handle;
	int32_t offset=0;
   117c8:	e3a03000 	mov	r3, #0
   117cc:	e28d4004 	add	r4, sp, #4
   117d0:	e5243004 	str	r3, [r4, #-4]!
	
	handle = open_file_in_dir(fs, dd, name);
   117d4:	e59f302c 	ldr	r3, [pc, #44]	; 11808 <root_open+0x44>
        return NULL;
    }
}

struct fat16_file_struct * root_open(char* name)
{
   117d8:	e1a02000 	mov	r2, r0
    //return(open_file_in_dir(fs,dd,name));
	struct fat16_file_struct * handle;
	int32_t offset=0;
	
	handle = open_file_in_dir(fs, dd, name);
   117dc:	e5930000 	ldr	r0, [r3]
   117e0:	e59f3024 	ldr	r3, [pc, #36]	; 1180c <root_open+0x48>
   117e4:	e5931000 	ldr	r1, [r3]
   117e8:	eb000679 	bl	131d4 <open_file_in_dir>
	fat16_seek_file(handle, &offset, FAT16_SEEK_END);
   117ec:	e1a0100d 	mov	r1, sp
{
    //return(open_file_in_dir(fs,dd,name));
	struct fat16_file_struct * handle;
	int32_t offset=0;
	
	handle = open_file_in_dir(fs, dd, name);
   117f0:	e1a05000 	mov	r5, r0
	fat16_seek_file(handle, &offset, FAT16_SEEK_END);
   117f4:	e3a02002 	mov	r2, #2
   117f8:	eb000487 	bl	12a1c <fat16_seek_file>
	
	return handle;
}
   117fc:	e1a00005 	mov	r0, r5
   11800:	e8bd4038 	pop	{r3, r4, r5, lr}
   11804:	e12fff1e 	bx	lr
   11808:	400013d0 	.word	0x400013d0
   1180c:	40001408 	.word	0x40001408

00011810 <print_disk_info>:

uint8_t print_disk_info(const struct fat16_fs_struct* disk_fs)
{
   11810:	e92d4030 	push	{r4, r5, lr}
    if(!disk_fs)
   11814:	e2504000 	subs	r4, r0, #0
	
	return handle;
}

uint8_t print_disk_info(const struct fat16_fs_struct* disk_fs)
{
   11818:	e24dd01c 	sub	sp, sp, #28
    if(!disk_fs)
        return 0;
   1181c:	01a00004 	moveq	r0, r4
	return handle;
}

uint8_t print_disk_info(const struct fat16_fs_struct* disk_fs)
{
    if(!disk_fs)
   11820:	0a00002d 	beq	118dc <print_disk_info+0xcc>
        return 0;

    struct sd_raw_info disk_info;
    if(!sd_raw_get_info(&disk_info))
   11824:	e1a0000d 	mov	r0, sp
   11828:	ebfffe21 	bl	110b4 <sd_raw_get_info>
   1182c:	e3500000 	cmp	r0, #0
   11830:	0a000029 	beq	118dc <print_disk_info+0xcc>
        return 0;

//    int temp = get_output();
//    set_output(UART_ONLY);
    rprintf("manuf:  0x%02x\n\r", disk_info.manufacturer);
   11834:	e59f00ac 	ldr	r0, [pc, #172]	; 118e8 <print_disk_info+0xd8>
   11838:	e5dd1000 	ldrb	r1, [sp]
   1183c:	ebfffa80 	bl	10244 <rprintf>
    rprintf("oem:    %s\n\r", disk_info.oem);
   11840:	e59f00a4 	ldr	r0, [pc, #164]	; 118ec <print_disk_info+0xdc>
   11844:	e28d1001 	add	r1, sp, #1
   11848:	ebfffa7d 	bl	10244 <rprintf>
    rprintf("prod:   %s\n\r", disk_info.product);
   1184c:	e59f009c 	ldr	r0, [pc, #156]	; 118f0 <print_disk_info+0xe0>
   11850:	e28d1004 	add	r1, sp, #4
   11854:	ebfffa7a 	bl	10244 <rprintf>
    rprintf("rev:    %02x\n\r", disk_info.revision);
   11858:	e59f0094 	ldr	r0, [pc, #148]	; 118f4 <print_disk_info+0xe4>
   1185c:	e5dd100a 	ldrb	r1, [sp, #10]
   11860:	ebfffa77 	bl	10244 <rprintf>
    rprintf("serial: 0x%08lx\n\r", disk_info.serial);
   11864:	e59f008c 	ldr	r0, [pc, #140]	; 118f8 <print_disk_info+0xe8>
   11868:	e59d100c 	ldr	r1, [sp, #12]
   1186c:	ebfffa74 	bl	10244 <rprintf>
    rprintf("date:   %02d/%02d\n\r", disk_info.manufacturing_month, disk_info.manufacturing_year);
   11870:	e5dd2010 	ldrb	r2, [sp, #16]
   11874:	e59f0080 	ldr	r0, [pc, #128]	; 118fc <print_disk_info+0xec>
   11878:	e5dd1011 	ldrb	r1, [sp, #17]
   1187c:	ebfffa70 	bl	10244 <rprintf>
    rprintf("size:   %ld\n\r", disk_info.capacity);
   11880:	e59f0078 	ldr	r0, [pc, #120]	; 11900 <print_disk_info+0xf0>
   11884:	e59d1014 	ldr	r1, [sp, #20]
   11888:	ebfffa6d 	bl	10244 <rprintf>
    rprintf("copy:   %d\n\r", disk_info.flag_copy);
   1188c:	e59f0070 	ldr	r0, [pc, #112]	; 11904 <print_disk_info+0xf4>
   11890:	e5dd1018 	ldrb	r1, [sp, #24]
   11894:	ebfffa6a 	bl	10244 <rprintf>
    rprintf("wr.pr.: %d/%d\n\r", disk_info.flag_write_protect_temp, disk_info.flag_write_protect);
   11898:	e5dd2019 	ldrb	r2, [sp, #25]
   1189c:	e59f0064 	ldr	r0, [pc, #100]	; 11908 <print_disk_info+0xf8>
   118a0:	e5dd101a 	ldrb	r1, [sp, #26]
   118a4:	ebfffa66 	bl	10244 <rprintf>
    rprintf("format: %d\n\r", disk_info.format);
   118a8:	e5dd101b 	ldrb	r1, [sp, #27]
   118ac:	e59f0058 	ldr	r0, [pc, #88]	; 1190c <print_disk_info+0xfc>
   118b0:	ebfffa63 	bl	10244 <rprintf>
    rprintf("free:   %ld/%ld\n\r", fat16_get_fs_free(disk_fs), fat16_get_fs_size(disk_fs));
   118b4:	e1a00004 	mov	r0, r4
   118b8:	eb000604 	bl	130d0 <fat16_get_fs_free>
   118bc:	e1a05000 	mov	r5, r0
   118c0:	e1a00004 	mov	r0, r4
   118c4:	eb0005f9 	bl	130b0 <fat16_get_fs_size>
   118c8:	e1a01005 	mov	r1, r5
   118cc:	e1a02000 	mov	r2, r0
   118d0:	e59f0038 	ldr	r0, [pc, #56]	; 11910 <print_disk_info+0x100>
   118d4:	ebfffa5a 	bl	10244 <rprintf>
//    set_output(temp);
    return 1;
   118d8:	e3a00001 	mov	r0, #1
}
   118dc:	e28dd01c 	add	sp, sp, #28
   118e0:	e8bd4030 	pop	{r4, r5, lr}
   118e4:	e12fff1e 	bx	lr
   118e8:	00025e70 	.word	0x00025e70
   118ec:	00025e81 	.word	0x00025e81
   118f0:	00025e8e 	.word	0x00025e8e
   118f4:	00025e9b 	.word	0x00025e9b
   118f8:	00025eaa 	.word	0x00025eaa
   118fc:	00025ebc 	.word	0x00025ebc
   11900:	00025ed0 	.word	0x00025ed0
   11904:	00025ede 	.word	0x00025ede
   11908:	00025eeb 	.word	0x00025eeb
   1190c:	00025efb 	.word	0x00025efb
   11910:	00025f08 	.word	0x00025f08

00011914 <root_disk_info>:

void root_disk_info(void)
{
    print_disk_info(fs);
   11914:	e59f3004 	ldr	r3, [pc, #4]	; 11920 <root_disk_info+0xc>
   11918:	e5930000 	ldr	r0, [r3]
   1191c:	eaffffbb 	b	11810 <print_disk_info>
   11920:	400013d0 	.word	0x400013d0

00011924 <rootDirectory_files_stream>:
{

    static int idx = 0;

    /* If reset, we need to reset the dir */
    if(reset)
   11924:	e3500000 	cmp	r0, #0
 * has been reached.
 *
 * Assert (1) reset whenever you want to re-start
 */
char rootDirectory_files_stream(int reset)
{
   11928:	e92d4010 	push	{r4, lr}

    static int idx = 0;

    /* If reset, we need to reset the dir */
    if(reset)
   1192c:	0a000004 	beq	11944 <rootDirectory_files_stream+0x20>
    {
        fat16_reset_dir(dd);
   11930:	e59f3060 	ldr	r3, [pc, #96]	; 11998 <rootDirectory_files_stream+0x74>
   11934:	e5930000 	ldr	r0, [r3]
   11938:	eb00053c 	bl	12e30 <fat16_reset_dir>
        return 0;
   1193c:	e3a00000 	mov	r0, #0
   11940:	ea000012 	b	11990 <rootDirectory_files_stream+0x6c>
    /* Whenever IDX is zero, we're gonna start a new file,
       * so read a new one.
       * if there's no new file,
       * return 0, because it's over
       */
    if(idx == 0)
   11944:	e59f4050 	ldr	r4, [pc, #80]	; 1199c <rootDirectory_files_stream+0x78>
   11948:	e5943000 	ldr	r3, [r4]
   1194c:	e3530000 	cmp	r3, #0
   11950:	1a000005 	bne	1196c <rootDirectory_files_stream+0x48>
    {
        if(fat16_read_dir(dd,&dir_entry)==0)
   11954:	e59f303c 	ldr	r3, [pc, #60]	; 11998 <rootDirectory_files_stream+0x74>
   11958:	e59f1040 	ldr	r1, [pc, #64]	; 119a0 <rootDirectory_files_stream+0x7c>
   1195c:	e5930000 	ldr	r0, [r3]
   11960:	eb000471 	bl	12b2c <fat16_read_dir>
   11964:	e3500000 	cmp	r0, #0
   11968:	0a000008 	beq	11990 <rootDirectory_files_stream+0x6c>
    /* If we've reached the end of a string,
       * return comma instead of \0,
       * so the list is comma delimited,
       * and terminated with a zero
       */
    if(dir_entry.long_name[idx]=='\0')
   1196c:	e5942000 	ldr	r2, [r4]
   11970:	e59f1028 	ldr	r1, [pc, #40]	; 119a0 <rootDirectory_files_stream+0x7c>
   11974:	e7d10002 	ldrb	r0, [r1, r2]
   11978:	e59f301c 	ldr	r3, [pc, #28]	; 1199c <rootDirectory_files_stream+0x78>
   1197c:	e3500000 	cmp	r0, #0
        idx = 0;
        return ',';
    }


    return dir_entry.long_name[idx++];
   11980:	12822001 	addne	r2, r2, #1
   11984:	15832000 	strne	r2, [r3]
       * so the list is comma delimited,
       * and terminated with a zero
       */
    if(dir_entry.long_name[idx]=='\0')
    {
        idx = 0;
   11988:	05830000 	streq	r0, [r3]
        return ',';
   1198c:	03a0002c 	moveq	r0, #44	; 0x2c
    }


    return dir_entry.long_name[idx++];

}
   11990:	e8bd4010 	pop	{r4, lr}
   11994:	e12fff1e 	bx	lr
   11998:	40001408 	.word	0x40001408
   1199c:	40000b94 	.word	0x40000b94
   119a0:	400013d4 	.word	0x400013d4

000119a4 <rootDirectory_files>:
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
   119a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat16_reset_dir(dd);
   119a8:	e59f8084 	ldr	r8, [pc, #132]	; 11a34 <rootDirectory_files+0x90>
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
   119ac:	e1a06000 	mov	r6, r0
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat16_reset_dir(dd);
   119b0:	e5980000 	ldr	r0, [r8]
//Pre: buf is an array of characters at least as big as len
//		len is the size of the array to read
//Post: buf contains the characters of the filenames in Root, starting at the first file
//		and ending after len characters
int rootDirectory_files(char* buf, int len)
{
   119b4:	e1a04001 	mov	r4, r1
    int i;
    int num=0;
   119b8:	e3a05000 	mov	r5, #0
    /* Loop will walk through every file in directory dd */
    fat16_reset_dir(dd);
   119bc:	eb00051b 	bl	12e30 <fat16_reset_dir>
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
                return 1;
            }
        }
        *buf++=',';
   119c0:	e3a0702c 	mov	r7, #44	; 0x2c
{
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat16_reset_dir(dd);
    while(fat16_read_dir(dd,&dir_entry))
   119c4:	ea000010 	b	11a0c <rootDirectory_files+0x68>
        while(dir_entry.long_name[i]!='\0')
        {
            /* And copy each character into buf */
            *buf++=dir_entry.long_name[i++];
            len--;
            if(len==1)
   119c8:	e3540001 	cmp	r4, #1
        i = 0;
        /* Spin through the filename */
        while(dir_entry.long_name[i]!='\0')
        {
            /* And copy each character into buf */
            *buf++=dir_entry.long_name[i++];
   119cc:	e5c32000 	strb	r2, [r3]
            len--;
            if(len==1)
            {
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
   119d0:	03a02000 	moveq	r2, #0
   119d4:	0a000009 	beq	11a00 <rootDirectory_files+0x5c>
    fat16_reset_dir(dd);
    while(fat16_read_dir(dd,&dir_entry))
    {
        i = 0;
        /* Spin through the filename */
        while(dir_entry.long_name[i]!='\0')
   119d8:	e5f12001 	ldrb	r2, [r1, #1]!
   119dc:	e3520000 	cmp	r2, #0
        {
            /* And copy each character into buf */
            *buf++=dir_entry.long_name[i++];
   119e0:	e1a03006 	mov	r3, r6
   119e4:	e2444001 	sub	r4, r4, #1
   119e8:	e2866001 	add	r6, r6, #1
    fat16_reset_dir(dd);
    while(fat16_read_dir(dd,&dir_entry))
    {
        i = 0;
        /* Spin through the filename */
        while(dir_entry.long_name[i]!='\0')
   119ec:	1afffff5 	bne	119c8 <rootDirectory_files+0x24>
            }
        }
        *buf++=',';
        num++;
        len--;
        if(len==1)
   119f0:	e3540001 	cmp	r4, #1
                /* Buf if we ever get to the end of buf, quit */
                *buf='\0';
                return 1;
            }
        }
        *buf++=',';
   119f4:	e5c37000 	strb	r7, [r3]
        num++;
   119f8:	e2855001 	add	r5, r5, #1
        len--;
        if(len==1)
   119fc:	1a000002 	bne	11a0c <rootDirectory_files+0x68>
        {
            /* Buf if we ever get to the end of buf, quit */
            *buf='\0';
   11a00:	e5c32001 	strb	r2, [r3, #1]
            return 1;
   11a04:	e1a05004 	mov	r5, r4
   11a08:	ea000006 	b	11a28 <rootDirectory_files+0x84>
{
    int i;
    int num=0;
    /* Loop will walk through every file in directory dd */
    fat16_reset_dir(dd);
    while(fat16_read_dir(dd,&dir_entry))
   11a0c:	e5980000 	ldr	r0, [r8]
   11a10:	e59f1020 	ldr	r1, [pc, #32]	; 11a38 <rootDirectory_files+0x94>
   11a14:	eb000444 	bl	12b2c <fat16_read_dir>
   11a18:	e3500000 	cmp	r0, #0
   11a1c:	159f1018 	ldrne	r1, [pc, #24]	; 11a3c <rootDirectory_files+0x98>
   11a20:	1affffec 	bne	119d8 <rootDirectory_files+0x34>
            /* Buf if we ever get to the end of buf, quit */
            *buf='\0';
            return 1;
        }
    }
    *buf='\0';
   11a24:	e5c60000 	strb	r0, [r6]
    return num;
}
   11a28:	e1a00005 	mov	r0, r5
   11a2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   11a30:	e12fff1e 	bx	lr
   11a34:	40001408 	.word	0x40001408
   11a38:	400013d4 	.word	0x400013d4
   11a3c:	400013d3 	.word	0x400013d3

00011a40 <root_format>:

void root_format(void)
{
   11a40:	e92d4030 	push	{r4, r5, lr}
    fat16_reset_dir(dd);
   11a44:	e59f403c 	ldr	r4, [pc, #60]	; 11a88 <root_format+0x48>
   11a48:	e5940000 	ldr	r0, [r4]
   11a4c:	eb0004f7 	bl	12e30 <fat16_reset_dir>
    while(fat16_read_dir(dd,&dir_entry))
    {
        fat16_delete_file(fs,&dir_entry);
   11a50:	e59f5034 	ldr	r5, [pc, #52]	; 11a8c <root_format+0x4c>
}

void root_format(void)
{
    fat16_reset_dir(dd);
    while(fat16_read_dir(dd,&dir_entry))
   11a54:	ea000004 	b	11a6c <root_format+0x2c>
    {
        fat16_delete_file(fs,&dir_entry);
   11a58:	e5950000 	ldr	r0, [r5]
   11a5c:	e59f102c 	ldr	r1, [pc, #44]	; 11a90 <root_format+0x50>
   11a60:	eb00056a 	bl	13010 <fat16_delete_file>
        fat16_reset_dir(dd);
   11a64:	e5940000 	ldr	r0, [r4]
   11a68:	eb0004f0 	bl	12e30 <fat16_reset_dir>
}

void root_format(void)
{
    fat16_reset_dir(dd);
    while(fat16_read_dir(dd,&dir_entry))
   11a6c:	e5940000 	ldr	r0, [r4]
   11a70:	e59f1018 	ldr	r1, [pc, #24]	; 11a90 <root_format+0x50>
   11a74:	eb00042c 	bl	12b2c <fat16_read_dir>
   11a78:	e3500000 	cmp	r0, #0
   11a7c:	1afffff5 	bne	11a58 <root_format+0x18>
    {
        fat16_delete_file(fs,&dir_entry);
        fat16_reset_dir(dd);
    }
}
   11a80:	e8bd4030 	pop	{r4, r5, lr}
   11a84:	e12fff1e 	bx	lr
   11a88:	40001408 	.word	0x40001408
   11a8c:	400013d0 	.word	0x400013d0
   11a90:	400013d4 	.word	0x400013d4

00011a94 <root_delete>:

int root_delete(char* filename)
{
   11a94:	e92d4010 	push	{r4, lr}
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   11a98:	e59f3038 	ldr	r3, [pc, #56]	; 11ad8 <root_delete+0x44>
   11a9c:	e59f4038 	ldr	r4, [pc, #56]	; 11adc <root_delete+0x48>
        fat16_reset_dir(dd);
    }
}

int root_delete(char* filename)
{
   11aa0:	e1a02000 	mov	r2, r0
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   11aa4:	e5931000 	ldr	r1, [r3]
   11aa8:	e5940000 	ldr	r0, [r4]
   11aac:	e59f302c 	ldr	r3, [pc, #44]	; 11ae0 <root_delete+0x4c>
   11ab0:	eb0005b2 	bl	13180 <find_file_in_dir>
   11ab4:	e3500000 	cmp	r0, #0
    {
        fat16_delete_file(fs,&dir_entry);
        return 0;
    }
    return 1;
   11ab8:	03a00001 	moveq	r0, #1
    }
}

int root_delete(char* filename)
{
    if(find_file_in_dir(fs,dd,filename,&dir_entry))
   11abc:	0a000003 	beq	11ad0 <root_delete+0x3c>
    {
        fat16_delete_file(fs,&dir_entry);
   11ac0:	e5940000 	ldr	r0, [r4]
   11ac4:	e59f1014 	ldr	r1, [pc, #20]	; 11ae0 <root_delete+0x4c>
   11ac8:	eb000550 	bl	13010 <fat16_delete_file>
        return 0;
   11acc:	e3a00000 	mov	r0, #0
    }
    return 1;
}
   11ad0:	e8bd4010 	pop	{r4, lr}
   11ad4:	e12fff1e 	bx	lr
   11ad8:	40001408 	.word	0x40001408
   11adc:	400013d0 	.word	0x400013d0
   11ae0:	400013d4 	.word	0x400013d4

00011ae4 <fat16_get_fs_free_callback>:
/**
 * \ingroup fat16_fs
 * Callback function used for counting free clusters.
 */
uint8_t fat16_get_fs_free_callback(uint8_t* buffer, uint32_t offset, void* p)
{
   11ae4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    struct fat16_usage_count_callback_arg* count_arg = (struct fat16_usage_count_callback_arg*) p;
    uint8_t buffer_size = count_arg->buffer_size;
   11ae8:	e5d21002 	ldrb	r1, [r2, #2]
    uint8_t i;
    for(i = 0; i < buffer_size; i += 2)
   11aec:	e3a03000 	mov	r3, #0
   11af0:	ea000007 	b	11b14 <fat16_get_fs_free_callback+0x30>

/**
 * \ingroup fat16_fs
 * Callback function used for counting free clusters.
 */
uint8_t fat16_get_fs_free_callback(uint8_t* buffer, uint32_t offset, void* p)
   11af4:	e080c003 	add	ip, r0, r3
    struct fat16_usage_count_callback_arg* count_arg = (struct fat16_usage_count_callback_arg*) p;
    uint8_t buffer_size = count_arg->buffer_size;
    uint8_t i;
    for(i = 0; i < buffer_size; i += 2)
    {
        if((((uint16_t) buffer[1] << 8) | ((uint16_t) buffer[0] << 0)) == FAT16_CLUSTER_FREE)
   11af8:	e5dc4001 	ldrb	r4, [ip, #1]
   11afc:	e7d0c003 	ldrb	ip, [r0, r3]
   11b00:	e19cc404 	orrs	ip, ip, r4, lsl #8
            ++(count_arg->cluster_count);
   11b04:	01d2c0b0 	ldrheq	ip, [r2]
   11b08:	028cc001 	addeq	ip, ip, #1
   11b0c:	01c2c0b0 	strheq	ip, [r2]
   11b10:	e2833002 	add	r3, r3, #2
uint8_t fat16_get_fs_free_callback(uint8_t* buffer, uint32_t offset, void* p)
{
    struct fat16_usage_count_callback_arg* count_arg = (struct fat16_usage_count_callback_arg*) p;
    uint8_t buffer_size = count_arg->buffer_size;
    uint8_t i;
    for(i = 0; i < buffer_size; i += 2)
   11b14:	e203c0ff 	and	ip, r3, #255	; 0xff
   11b18:	e15c0001 	cmp	ip, r1
   11b1c:	3afffff4 	bcc	11af4 <fat16_get_fs_free_callback+0x10>

        buffer += 2;
    }

    return 1;
}
   11b20:	e3a00001 	mov	r0, #1
   11b24:	e8bd0010 	pop	{r4}
   11b28:	e12fff1e 	bx	lr

00011b2c <fat16_dir_entry_seek_callback>:
uint8_t fat16_dir_entry_seek_callback(uint8_t* buffer, uint32_t offset, void* p)
{
    struct fat16_read_callback_arg* arg = p;

    /* skip deleted or empty entries */
    if(buffer[0] == FAT16_DIRENTRY_DELETED || !buffer[0])
   11b2c:	e5d03000 	ldrb	r3, [r0]
   11b30:	e35300e5 	cmp	r3, #229	; 0xe5
   11b34:	13530000 	cmpne	r3, #0
   11b38:	0a000014 	beq	11b90 <fat16_dir_entry_seek_callback+0x64>
        return 1;

    if(arg->entry_cur == arg->entry_num)
   11b3c:	e1d230b0 	ldrh	r3, [r2]
   11b40:	e1d2c0b2 	ldrh	ip, [r2, #2]
   11b44:	e15c0003 	cmp	ip, r3
   11b48:	1a00000b 	bne	11b7c <fat16_dir_entry_seek_callback+0x50>
    {
        arg->entry_offset = offset;
   11b4c:	e5821004 	str	r1, [r2, #4]
        arg->byte_count = buffer[11] == 0x0f ?
   11b50:	e5d0300b 	ldrb	r3, [r0, #11]
   11b54:	e353000f 	cmp	r3, #15
        ((buffer[0] & FAT16_DIRENTRY_LFNSEQMASK) + 1) * 32 :
   11b58:	05d03000 	ldrbeq	r3, [r0]
   11b5c:	0203303f 	andeq	r3, r3, #63	; 0x3f
        return 1;

    if(arg->entry_cur == arg->entry_num)
    {
        arg->entry_offset = offset;
        arg->byte_count = buffer[11] == 0x0f ?
   11b60:	02833001 	addeq	r3, r3, #1
   11b64:	01a03283 	lsleq	r3, r3, #5
   11b68:	020330ff 	andeq	r3, r3, #255	; 0xff
   11b6c:	13a03020 	movne	r3, #32
   11b70:	e5c23008 	strb	r3, [r2, #8]
   11b74:	e3a00000 	mov	r0, #0
   11b78:	e12fff1e 	bx	lr
        32;
        return 0;
    }

    /* if we read a 8.3 entry, we reached a new directory entry */
    if(buffer[11] != 0x0f)
   11b7c:	e5d0100b 	ldrb	r1, [r0, #11]
   11b80:	e351000f 	cmp	r1, #15
   11b84:	0a000003 	beq	11b98 <fat16_dir_entry_seek_callback+0x6c>
        ++arg->entry_cur;
   11b88:	e2833001 	add	r3, r3, #1
   11b8c:	e1c230b0 	strh	r3, [r2]
{
    struct fat16_read_callback_arg* arg = p;

    /* skip deleted or empty entries */
    if(buffer[0] == FAT16_DIRENTRY_DELETED || !buffer[0])
        return 1;
   11b90:	e3a00001 	mov	r0, #1
   11b94:	e12fff1e 	bx	lr

    /* if we read a 8.3 entry, we reached a new directory entry */
    if(buffer[11] != 0x0f)
        ++arg->entry_cur;

    return 1;
   11b98:	e3a00001 	mov	r0, #1
}
   11b9c:	e12fff1e 	bx	lr

00011ba0 <fat16_dir_entry_read_callback>:
/**
 * \ingroup fat16_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat16_dir_entry_read_callback(uint8_t* buffer, uint32_t offset, void* p)
{
   11ba0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    struct fat16_dir_entry_struct* dir_entry = p;

    /* there should not be any deleted or empty entries */
    if(buffer[0] == FAT16_DIRENTRY_DELETED || !buffer[0])
   11ba4:	e5d03000 	ldrb	r3, [r0]
   11ba8:	e35300e5 	cmp	r3, #229	; 0xe5
   11bac:	13530000 	cmpne	r3, #0
   11bb0:	0a000061 	beq	11d3c <fat16_dir_entry_read_callback+0x19c>
        return 0;

    if(!dir_entry->entry_offset)
   11bb4:	e5923028 	ldr	r3, [r2, #40]	; 0x28
   11bb8:	e3530000 	cmp	r3, #0
        dir_entry->entry_offset = offset;
   11bbc:	05821028 	streq	r1, [r2, #40]	; 0x28
 * \returns 0 on failure, 1 on success and 2 if the
 *          directory entry is complete.
 */
uint8_t fat16_interpret_dir_entry(struct fat16_dir_entry_struct* dir_entry, const uint8_t* raw_entry)
{
    if(!dir_entry || !raw_entry || !raw_entry[0])
   11bc0:	e5d03000 	ldrb	r3, [r0]
   11bc4:	e3530000 	cmp	r3, #0
   11bc8:	01a00003 	moveq	r0, r3
   11bcc:	0a00005b 	beq	11d40 <fat16_dir_entry_read_callback+0x1a0>
        return 0;

    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
   11bd0:	e5d0100b 	ldrb	r1, [r0, #11]
   11bd4:	e351000f 	cmp	r1, #15
   11bd8:	1a000024 	bne	11c70 <fat16_dir_entry_read_callback+0xd0>
    {
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
   11bdc:	e203303f 	and	r3, r3, #63	; 0x3f
   11be0:	e3a0100d 	mov	r1, #13
   11be4:	e2433001 	sub	r3, r3, #1
   11be8:	e0030391 	mul	r3, r1, r3
   11bec:	e1a03803 	lsl	r3, r3, #16
   11bf0:	e1a01823 	lsr	r1, r3, #16

        if(char_offset + 12 < sizeof(dir_entry->long_name))
   11bf4:	e281c00c 	add	ip, r1, #12
   11bf8:	e35c001f 	cmp	ip, #31
   11bfc:	8a00004c 	bhi	11d34 <fat16_dir_entry_read_callback+0x194>
        {
            /* Lfn supports unicode, but we do not, for now.
                                                 * So we assume pure ascii and read only every
                                                 * second byte.
                                                 */
            long_name[char_offset + 0] = raw_entry[1];
   11c00:	e5d0c001 	ldrb	ip, [r0, #1]
   11c04:	e7c2c823 	strb	ip, [r2, r3, lsr #16]
            long_name[char_offset + 1] = raw_entry[3];
   11c08:	e5d03003 	ldrb	r3, [r0, #3]
   11c0c:	e0822001 	add	r2, r2, r1
   11c10:	e5c23001 	strb	r3, [r2, #1]
            long_name[char_offset + 2] = raw_entry[5];
   11c14:	e5d03005 	ldrb	r3, [r0, #5]
   11c18:	e5c23002 	strb	r3, [r2, #2]
            long_name[char_offset + 3] = raw_entry[7];
   11c1c:	e5d03007 	ldrb	r3, [r0, #7]
   11c20:	e5c23003 	strb	r3, [r2, #3]
            long_name[char_offset + 4] = raw_entry[9];
   11c24:	e5d03009 	ldrb	r3, [r0, #9]
   11c28:	e5c23004 	strb	r3, [r2, #4]
            long_name[char_offset + 5] = raw_entry[14];
   11c2c:	e5d0300e 	ldrb	r3, [r0, #14]
   11c30:	e5c23005 	strb	r3, [r2, #5]
            long_name[char_offset + 6] = raw_entry[16];
   11c34:	e5d03010 	ldrb	r3, [r0, #16]
   11c38:	e5c23006 	strb	r3, [r2, #6]
            long_name[char_offset + 7] = raw_entry[18];
   11c3c:	e5d03012 	ldrb	r3, [r0, #18]
   11c40:	e5c23007 	strb	r3, [r2, #7]
            long_name[char_offset + 8] = raw_entry[20];
   11c44:	e5d03014 	ldrb	r3, [r0, #20]
   11c48:	e5c23008 	strb	r3, [r2, #8]
            long_name[char_offset + 9] = raw_entry[22];
   11c4c:	e5d03016 	ldrb	r3, [r0, #22]
   11c50:	e5c23009 	strb	r3, [r2, #9]
            long_name[char_offset + 10] = raw_entry[24];
   11c54:	e5d03018 	ldrb	r3, [r0, #24]
   11c58:	e5c2300a 	strb	r3, [r2, #10]
            long_name[char_offset + 11] = raw_entry[28];
   11c5c:	e5d0301c 	ldrb	r3, [r0, #28]
   11c60:	e5c2300b 	strb	r3, [r2, #11]
            long_name[char_offset + 12] = raw_entry[30];
   11c64:	e5d0301e 	ldrb	r3, [r0, #30]
   11c68:	e5c2300c 	strb	r3, [r2, #12]
   11c6c:	ea000030 	b	11d34 <fat16_dir_entry_read_callback+0x194>
        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
   11c70:	e5d21000 	ldrb	r1, [r2]
   11c74:	e3510000 	cmp	r1, #0
   11c78:	1a00001d 	bne	11cf4 <fat16_dir_entry_read_callback+0x154>
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
   11c7c:	e7d0c001 	ldrb	ip, [r0, r1]
   11c80:	e35c0020 	cmp	ip, #32
        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
   11c84:	e20130ff 	and	r3, r1, #255	; 0xff
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
   11c88:	0a000004 	beq	11ca0 <fat16_dir_entry_read_callback+0x100>
                    break;
                long_name[i] = raw_entry[i];
   11c8c:	e7c2c001 	strb	ip, [r2, r1]
   11c90:	e2811001 	add	r1, r1, #1
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
   11c94:	e3510008 	cmp	r1, #8
   11c98:	1afffff7 	bne	11c7c <fat16_dir_entry_read_callback+0xdc>
   11c9c:	e1a03001 	mov	r3, r1
            {
                if(raw_entry[i] == ' ')
                    break;
                long_name[i] = raw_entry[i];
            }
            if(raw_entry[8] != ' ')
   11ca0:	e5d01008 	ldrb	r1, [r0, #8]
   11ca4:	e3510020 	cmp	r1, #32
   11ca8:	0a00000f 	beq	11cec <fat16_dir_entry_read_callback+0x14c>
            {
                long_name[i++] = '.';
   11cac:	e3a0102e 	mov	r1, #46	; 0x2e
   11cb0:	e7c21003 	strb	r1, [r2, r3]
   11cb4:	e283c001 	add	ip, r3, #1

/**
 * \ingroup fat16_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat16_dir_entry_read_callback(uint8_t* buffer, uint32_t offset, void* p)
   11cb8:	e2833004 	add	r3, r3, #4
   11cbc:	e20340ff 	and	r4, r3, #255	; 0xff
                    break;
                long_name[i] = raw_entry[i];
            }
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';
   11cc0:	e1a01000 	mov	r1, r0
   11cc4:	e20c30ff 	and	r3, ip, #255	; 0xff

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(raw_entry[j] != ' ')
   11cc8:	e5d1c008 	ldrb	ip, [r1, #8]
   11ccc:	e35c0020 	cmp	ip, #32
   11cd0:	0a000005 	beq	11cec <fat16_dir_entry_read_callback+0x14c>
                    {
                        long_name[i++] = raw_entry[j];
   11cd4:	e7c2c003 	strb	ip, [r2, r3]
   11cd8:	e2833001 	add	r3, r3, #1
   11cdc:	e20330ff 	and	r3, r3, #255	; 0xff
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
   11ce0:	e1530004 	cmp	r3, r4
                {
                    if(raw_entry[j] != ' ')
                    {
                        long_name[i++] = raw_entry[j];
   11ce4:	e2811001 	add	r1, r1, #1
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
   11ce8:	1afffff6 	bne	11cc8 <fat16_dir_entry_read_callback+0x128>
                        break;
                    }
                }
            }

            long_name[i] = '\0';
   11cec:	e3a01000 	mov	r1, #0
   11cf0:	e7c21003 	strb	r1, [r2, r3]
        }

        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
   11cf4:	e5d0300b 	ldrb	r3, [r0, #11]
   11cf8:	e5c23020 	strb	r3, [r2, #32]
        dir_entry->cluster = ((uint16_t) raw_entry[26]) |
        ((uint16_t) raw_entry[27] << 8);
   11cfc:	e5d0101b 	ldrb	r1, [r0, #27]
            long_name[i] = '\0';
        }

        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
        dir_entry->cluster = ((uint16_t) raw_entry[26]) |
   11d00:	e5d0301a 	ldrb	r3, [r0, #26]
   11d04:	e1833401 	orr	r3, r3, r1, lsl #8
   11d08:	e1c232b2 	strh	r3, [r2, #34]	; 0x22
        ((uint16_t) raw_entry[27] << 8);
        dir_entry->file_size = ((uint32_t) raw_entry[28]) |
        ((uint32_t) raw_entry[29] << 8) |
        ((uint32_t) raw_entry[30] << 16) |
   11d0c:	e5d0301e 	ldrb	r3, [r0, #30]
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
        dir_entry->cluster = ((uint16_t) raw_entry[26]) |
        ((uint16_t) raw_entry[27] << 8);
        dir_entry->file_size = ((uint32_t) raw_entry[28]) |
        ((uint32_t) raw_entry[29] << 8) |
   11d10:	e5d0101d 	ldrb	r1, [r0, #29]
        ((uint32_t) raw_entry[30] << 16) |
   11d14:	e1a03803 	lsl	r3, r3, #16

        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
        dir_entry->cluster = ((uint16_t) raw_entry[26]) |
        ((uint16_t) raw_entry[27] << 8);
        dir_entry->file_size = ((uint32_t) raw_entry[28]) |
   11d18:	e1833401 	orr	r3, r3, r1, lsl #8
   11d1c:	e5d0101c 	ldrb	r1, [r0, #28]
        ((uint32_t) raw_entry[29] << 8) |
   11d20:	e1833001 	orr	r3, r3, r1
        ((uint32_t) raw_entry[30] << 16) |
        ((uint32_t) raw_entry[31] << 24);
   11d24:	e5d0101f 	ldrb	r1, [r0, #31]
        dir_entry->attributes = raw_entry[11];
        dir_entry->cluster = ((uint16_t) raw_entry[26]) |
        ((uint16_t) raw_entry[27] << 8);
        dir_entry->file_size = ((uint32_t) raw_entry[28]) |
        ((uint32_t) raw_entry[29] << 8) |
        ((uint32_t) raw_entry[30] << 16) |
   11d28:	e1833c01 	orr	r3, r3, r1, lsl #24

        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
        dir_entry->cluster = ((uint16_t) raw_entry[26]) |
        ((uint16_t) raw_entry[27] << 8);
        dir_entry->file_size = ((uint32_t) raw_entry[28]) |
   11d2c:	e5823024 	str	r3, [r2, #36]	; 0x24
   11d30:	ea000001 	b	11d3c <fat16_dir_entry_read_callback+0x19c>
    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
    {
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;

        if(char_offset + 12 < sizeof(dir_entry->long_name))
   11d34:	e3a00001 	mov	r0, #1
   11d38:	ea000000 	b	11d40 <fat16_dir_entry_read_callback+0x1a0>
{
    struct fat16_dir_entry_struct* dir_entry = p;

    /* there should not be any deleted or empty entries */
    if(buffer[0] == FAT16_DIRENTRY_DELETED || !buffer[0])
        return 0;
   11d3c:	e3a00000 	mov	r0, #0
            case 2: /* directory entry complete, finish */
            return 0;
        }

    return 0;
}
   11d40:	e8bd0010 	pop	{r4}
   11d44:	e12fff1e 	bx	lr

00011d48 <fat16_get_next_cluster>:
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
uint16_t fat16_get_next_cluster(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
    if(!fs || cluster_num < 2)
   11d48:	e3500000 	cmp	r0, #0
   11d4c:	13510001 	cmpne	r1, #1
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
uint16_t fat16_get_next_cluster(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
   11d50:	e92d4011 	push	{r0, r4, lr}
    if(!fs || cluster_num < 2)
   11d54:	83a04000 	movhi	r4, #0
   11d58:	93a04001 	movls	r4, #1
        return 0;
   11d5c:	93a00000 	movls	r0, #0
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
uint16_t fat16_get_next_cluster(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
    if(!fs || cluster_num < 2)
   11d60:	9a00001a 	bls	11dd0 <fat16_get_next_cluster+0x88>
        return 0;

    /* read appropriate fat entry */
    uint8_t fat_entry[2];
    if(!fs->partition->device_read(fs->header.fat_offset + 2 * cluster_num, fat_entry, 2))
   11d64:	e5903000 	ldr	r3, [r0]
   11d68:	e5900008 	ldr	r0, [r0, #8]
   11d6c:	e3a02002 	mov	r2, #2
   11d70:	e0800081 	add	r0, r0, r1, lsl #1
   11d74:	e1a0100d 	mov	r1, sp
   11d78:	e593c000 	ldr	ip, [r3]
   11d7c:	e1a0e00f 	mov	lr, pc
   11d80:	e12fff1c 	bx	ip
   11d84:	e3500000 	cmp	r0, #0
   11d88:	0a000010 	beq	11dd0 <fat16_get_next_cluster+0x88>
        return 0;

    /* determine next cluster from fat */
    cluster_num = ((uint16_t) fat_entry[0]) |
   11d8c:	e5dd3000 	ldrb	r3, [sp]
    ((uint16_t) fat_entry[1] << 8);
   11d90:	e5dd0001 	ldrb	r0, [sp, #1]
    uint8_t fat_entry[2];
    if(!fs->partition->device_read(fs->header.fat_offset + 2 * cluster_num, fat_entry, 2))
        return 0;

    /* determine next cluster from fat */
    cluster_num = ((uint16_t) fat_entry[0]) |
   11d94:	e1830400 	orr	r0, r3, r0, lsl #8
    ((uint16_t) fat_entry[1] << 8);
	///*
    if(cluster_num == FAT16_CLUSTER_FREE ||
        cluster_num == FAT16_CLUSTER_BAD ||
   11d98:	e59f3038 	ldr	r3, [pc, #56]	; 11dd8 <fat16_get_next_cluster+0x90>

    /* determine next cluster from fat */
    cluster_num = ((uint16_t) fat_entry[0]) |
    ((uint16_t) fat_entry[1] << 8);
	///*
    if(cluster_num == FAT16_CLUSTER_FREE ||
   11d9c:	e3500000 	cmp	r0, #0
   11da0:	11500003 	cmpne	r0, r3
        cluster_num == FAT16_CLUSTER_BAD ||
       (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
       (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
    //*/
	return 0;
   11da4:	01a00004 	moveq	r0, r4

    /* determine next cluster from fat */
    cluster_num = ((uint16_t) fat_entry[0]) |
    ((uint16_t) fat_entry[1] << 8);
	///*
    if(cluster_num == FAT16_CLUSTER_FREE ||
   11da8:	0a000008 	beq	11dd0 <fat16_get_next_cluster+0x88>
        cluster_num == FAT16_CLUSTER_BAD ||
       (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
       (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
   11dac:	e1500003 	cmp	r0, r3
    cluster_num = ((uint16_t) fat_entry[0]) |
    ((uint16_t) fat_entry[1] << 8);
	///*
    if(cluster_num == FAT16_CLUSTER_FREE ||
        cluster_num == FAT16_CLUSTER_BAD ||
       (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
   11db0:	e2802010 	add	r2, r0, #16
       (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
   11db4:	93a03000 	movls	r3, #0
   11db8:	83a03001 	movhi	r3, #1
    cluster_num = ((uint16_t) fat_entry[0]) |
    ((uint16_t) fat_entry[1] << 8);
	///*
    if(cluster_num == FAT16_CLUSTER_FREE ||
        cluster_num == FAT16_CLUSTER_BAD ||
       (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
   11dbc:	e1a02802 	lsl	r2, r2, #16
   11dc0:	e3520806 	cmp	r2, #393216	; 0x60000
   11dc4:	93833001 	orrls	r3, r3, #1
       (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
    //*/
	return 0;
   11dc8:	e3530000 	cmp	r3, #0
   11dcc:	13a00000 	movne	r0, #0

    return cluster_num;
}
   11dd0:	e8bd4018 	pop	{r3, r4, lr}
   11dd4:	e12fff1e 	bx	lr
   11dd8:	0000fff7 	.word	0x0000fff7

00011ddc <fat16_free_clusters>:
 * \see fat16_terminate_clusters
 */
uint8_t fat16_free_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs || cluster_num < 2)
   11ddc:	e3500000 	cmp	r0, #0
   11de0:	13510001 	cmpne	r1, #1
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat16_terminate_clusters
 */
uint8_t fat16_free_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
   11de4:	e92d45f1 	push	{r0, r4, r5, r6, r7, r8, sl, lr}
   11de8:	e1a04001 	mov	r4, r1
    #if FAT16_WRITE_SUPPORT
        if(!fs || cluster_num < 2)
   11dec:	e1a05000 	mov	r5, r0
   11df0:	83a06000 	movhi	r6, #0
   11df4:	93a06001 	movls	r6, #1
   11df8:	9a000022 	bls	11e88 <fat16_free_clusters+0xac>
            return 0;
    
        uint32_t fat_offset = fs->header.fat_offset;
   11dfc:	e5908008 	ldr	r8, [r0, #8]
               cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
               )
            return 0;
			///*
            if((cluster_num_next >= FAT16_CLUSTER_LAST_MIN) &&
   11e00:	e59fa08c 	ldr	sl, [pc, #140]	; 11e94 <fat16_free_clusters+0xb8>
    
        uint32_t fat_offset = fs->header.fat_offset;
        uint8_t buffer[2];
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + 2 * cluster_num, buffer, 2))
   11e04:	e0887084 	add	r7, r8, r4, lsl #1
   11e08:	e5953000 	ldr	r3, [r5]
   11e0c:	e1a00007 	mov	r0, r7
   11e10:	e1a0100d 	mov	r1, sp
   11e14:	e3a02002 	mov	r2, #2
   11e18:	e593c000 	ldr	ip, [r3]
   11e1c:	e1a0e00f 	mov	lr, pc
   11e20:	e12fff1c 	bx	ip
   11e24:	e3500000 	cmp	r0, #0
   11e28:	0a000017 	beq	11e8c <fat16_free_clusters+0xb0>
                return 0;
    
            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ((uint16_t) buffer[0]) |
            ((uint16_t) buffer[1] << 8);
   11e2c:	e5dd4001 	ldrb	r4, [sp, #1]
        {
            if(!fs->partition->device_read(fat_offset + 2 * cluster_num, buffer, 2))
                return 0;
    
            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ((uint16_t) buffer[0]) |
   11e30:	e5dd3000 	ldrb	r3, [sp]
            ((uint16_t) buffer[1] << 8);
    
            if(cluster_num_next == FAT16_CLUSTER_FREE)
   11e34:	e1934404 	orrs	r4, r3, r4, lsl #8
   11e38:	0a000010 	beq	11e80 <fat16_free_clusters+0xa4>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
   11e3c:	e2843010 	add	r3, r4, #16
   11e40:	e1a03803 	lsl	r3, r3, #16
   11e44:	e3530807 	cmp	r3, #458752	; 0x70000
   11e48:	9a00000e 	bls	11e88 <fat16_free_clusters+0xac>
			///*
            if((cluster_num_next >= FAT16_CLUSTER_LAST_MIN) &&
                (cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
               )
			//*/
            cluster_num_next = 0;
   11e4c:	e154000a 	cmp	r4, sl
   11e50:	83a04000 	movhi	r4, #0
    
            /* free cluster */
            buffer[0] = FAT16_CLUSTER_FREE & 0xff;
   11e54:	e5cd6000 	strb	r6, [sp]
            buffer[1] = (FAT16_CLUSTER_FREE >> 8) & 0xff;
   11e58:	e5cd6001 	strb	r6, [sp, #1]
            fs->partition->device_write(fat_offset + 2 * cluster_num, buffer, 2);
   11e5c:	e5953000 	ldr	r3, [r5]
   11e60:	e1a00007 	mov	r0, r7
   11e64:	e1a0100d 	mov	r1, sp
   11e68:	e3a02002 	mov	r2, #2
   11e6c:	e593c008 	ldr	ip, [r3, #8]
   11e70:	e1a0e00f 	mov	lr, pc
   11e74:	e12fff1c 	bx	ip
        if(!fs || cluster_num < 2)
            return 0;
    
        uint32_t fat_offset = fs->header.fat_offset;
        uint8_t buffer[2];
        while(cluster_num)
   11e78:	e3540000 	cmp	r4, #0
   11e7c:	1affffe0 	bne	11e04 <fat16_free_clusters+0x28>
            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ((uint16_t) buffer[0]) |
            ((uint16_t) buffer[1] << 8);
    
            if(cluster_num_next == FAT16_CLUSTER_FREE)
                return 1;
   11e80:	e3a00001 	mov	r0, #1
   11e84:	ea000000 	b	11e8c <fat16_free_clusters+0xb0>
 */
uint8_t fat16_free_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs || cluster_num < 2)
            return 0;
   11e88:	e3a00000 	mov	r0, #0
    
        return 1;
    #else
        return 0;
    #endif
}
   11e8c:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, sl, lr}
   11e90:	e12fff1e 	bx	lr
   11e94:	0000fff7 	.word	0x0000fff7

00011e98 <fat16_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
uint16_t fat16_append_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num, uint16_t count)
{
   11e98:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    #if FAT16_WRITE_SUPPORT
        if(!fs)
   11e9c:	e2506000 	subs	r6, r0, #0
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
uint16_t fat16_append_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num, uint16_t count)
{
   11ea0:	e24dd014 	sub	sp, sp, #20
   11ea4:	e1a0b001 	mov	fp, r1
   11ea8:	e1a0a002 	mov	sl, r2
    #if FAT16_WRITE_SUPPORT
        if(!fs)
            return 0;
   11eac:	01a04006 	moveq	r4, r6
 * \returns 0 on failure, the number of the first new cluster on success.
 */
uint16_t fat16_append_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num, uint16_t count)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs)
   11eb0:	0a00004e 	beq	11ff0 <fat16_append_clusters+0x158>
            return 0;
    
        device_read_t device_read = fs->partition->device_read;
   11eb4:	e5963000 	ldr	r3, [r6]
   11eb8:	e5932000 	ldr	r2, [r3]
        device_write_t device_write = fs->partition->device_write;
   11ebc:	e5933008 	ldr	r3, [r3, #8]
   11ec0:	e58d3000 	str	r3, [sp]
        uint32_t fat_offset = fs->header.fat_offset;
   11ec4:	e5963008 	ldr	r3, [r6, #8]
   11ec8:	e58d3004 	str	r3, [sp, #4]
        uint16_t cluster_max = fs->header.fat_size / 2;
   11ecc:	e596300c 	ldr	r3, [r6, #12]
   11ed0:	e1a03783 	lsl	r3, r3, #15
   11ed4:	e1a03823 	lsr	r3, r3, #16
        uint16_t cluster_next = 0;
        uint16_t count_left = count;
        uint8_t buffer[2];
        uint16_t cluster_new;
        for(cluster_new = 0; cluster_new < cluster_max; ++cluster_new)
   11ed8:	e3a05000 	mov	r5, #0
{
    #if FAT16_WRITE_SUPPORT
        if(!fs)
            return 0;
    
        device_read_t device_read = fs->partition->device_read;
   11edc:	e58d2008 	str	r2, [sp, #8]
        device_write_t device_write = fs->partition->device_write;
        uint32_t fat_offset = fs->header.fat_offset;
        uint16_t cluster_max = fs->header.fat_size / 2;
   11ee0:	e58d300c 	str	r3, [sp, #12]
        uint16_t cluster_next = 0;
        uint16_t count_left = count;
        uint8_t buffer[2];
        uint16_t cluster_new;
        for(cluster_new = 0; cluster_new < cluster_max; ++cluster_new)
   11ee4:	e59d8004 	ldr	r8, [sp, #4]
        device_read_t device_read = fs->partition->device_read;
        device_write_t device_write = fs->partition->device_write;
        uint32_t fat_offset = fs->header.fat_offset;
        uint16_t cluster_max = fs->header.fat_size / 2;
        uint16_t cluster_next = 0;
        uint16_t count_left = count;
   11ee8:	e1a0700a 	mov	r7, sl
    
        device_read_t device_read = fs->partition->device_read;
        device_write_t device_write = fs->partition->device_write;
        uint32_t fat_offset = fs->header.fat_offset;
        uint16_t cluster_max = fs->header.fat_size / 2;
        uint16_t cluster_next = 0;
   11eec:	e1a04005 	mov	r4, r5
                buffer[1] == ((FAT16_CLUSTER_FREE >> 8) & 0xff))
            {
                /* allocate cluster */
                if(count_left == count)
                {
                    buffer[0] = FAT16_CLUSTER_LAST_MAX & 0xff;
   11ef0:	e3e09000 	mvn	r9, #0
        uint16_t cluster_max = fs->header.fat_size / 2;
        uint16_t cluster_next = 0;
        uint16_t count_left = count;
        uint8_t buffer[2];
        uint16_t cluster_new;
        for(cluster_new = 0; cluster_new < cluster_max; ++cluster_new)
   11ef4:	ea000024 	b	11f8c <fat16_append_clusters+0xf4>
        {
            if(!device_read(fat_offset + 2 * cluster_new, buffer, sizeof(buffer)))
   11ef8:	e1a00008 	mov	r0, r8
   11efc:	e28d1010 	add	r1, sp, #16
   11f00:	e3a02002 	mov	r2, #2
   11f04:	e59d3008 	ldr	r3, [sp, #8]
   11f08:	e1a0e00f 	mov	lr, pc
   11f0c:	e12fff13 	bx	r3
   11f10:	e3500000 	cmp	r0, #0
   11f14:	0a000034 	beq	11fec <fat16_append_clusters+0x154>
                return 0;
    
            /* check if this is a free cluster */
            if(buffer[0] == (FAT16_CLUSTER_FREE & 0xff) &&
   11f18:	e5dd3010 	ldrb	r3, [sp, #16]
   11f1c:	e3530000 	cmp	r3, #0
   11f20:	1a000015 	bne	11f7c <fat16_append_clusters+0xe4>
   11f24:	e5dd3011 	ldrb	r3, [sp, #17]
   11f28:	e3530000 	cmp	r3, #0
   11f2c:	1a000012 	bne	11f7c <fat16_append_clusters+0xe4>
                buffer[1] == ((FAT16_CLUSTER_FREE >> 8) & 0xff))
            {
                /* allocate cluster */
                if(count_left == count)
   11f30:	e157000a 	cmp	r7, sl
                    buffer[1] = (FAT16_CLUSTER_LAST_MAX >> 8) & 0xff;
                }
                else
                {
                    buffer[0] = cluster_next & 0xff;
                    buffer[1] = (cluster_next >> 8) & 0xff;
   11f34:	11a03424 	lsrne	r3, r4, #8
   11f38:	15cd3011 	strbne	r3, [sp, #17]
                buffer[1] == ((FAT16_CLUSTER_FREE >> 8) & 0xff))
            {
                /* allocate cluster */
                if(count_left == count)
                {
                    buffer[0] = FAT16_CLUSTER_LAST_MAX & 0xff;
   11f3c:	05cd9010 	strbeq	r9, [sp, #16]
                    buffer[1] = (FAT16_CLUSTER_LAST_MAX >> 8) & 0xff;
   11f40:	05cd9011 	strbeq	r9, [sp, #17]
                }
                else
                {
                    buffer[0] = cluster_next & 0xff;
   11f44:	15cd4010 	strbne	r4, [sp, #16]
                    buffer[1] = (cluster_next >> 8) & 0xff;
                }
    
                if(!device_write(fat_offset + 2 * cluster_new, buffer, sizeof(buffer)))
   11f48:	e1a00008 	mov	r0, r8
   11f4c:	e28d1010 	add	r1, sp, #16
   11f50:	e3a02002 	mov	r2, #2
   11f54:	e59d3000 	ldr	r3, [sp]
   11f58:	e1a0e00f 	mov	lr, pc
   11f5c:	e12fff13 	bx	r3
   11f60:	e3500000 	cmp	r0, #0
   11f64:	0a00000b 	beq	11f98 <fat16_append_clusters+0x100>
                    break;
    
                cluster_next = cluster_new;
                if(--count_left == 0)
   11f68:	e2477001 	sub	r7, r7, #1
   11f6c:	e1a07807 	lsl	r7, r7, #16
   11f70:	e1b07827 	lsrs	r7, r7, #16
   11f74:	e1a04005 	mov	r4, r5
   11f78:	0a000008 	beq	11fa0 <fat16_append_clusters+0x108>
        uint16_t cluster_max = fs->header.fat_size / 2;
        uint16_t cluster_next = 0;
        uint16_t count_left = count;
        uint8_t buffer[2];
        uint16_t cluster_new;
        for(cluster_new = 0; cluster_new < cluster_max; ++cluster_new)
   11f7c:	e2855001 	add	r5, r5, #1
   11f80:	e1a05805 	lsl	r5, r5, #16
   11f84:	e1a05825 	lsr	r5, r5, #16
   11f88:	e2888002 	add	r8, r8, #2
   11f8c:	e59d300c 	ldr	r3, [sp, #12]
   11f90:	e1550003 	cmp	r5, r3
   11f94:	3affffd7 	bcc	11ef8 <fat16_append_clusters+0x60>
            }
        }
    
        do
        {
            if(count_left > 0)
   11f98:	e3570000 	cmp	r7, #0
   11f9c:	1a00000d 	bne	11fd8 <fat16_append_clusters+0x140>
                break;
    
            /* We allocated a new cluster chain. Now join
                                             * it with the existing one.
                                             */
            if(cluster_num >= 2)
   11fa0:	e35b0001 	cmp	fp, #1
   11fa4:	9a000011 	bls	11ff0 <fat16_append_clusters+0x158>
            {
                buffer[0] = cluster_next & 0xff;
                buffer[1] = (cluster_next >> 8) & 0xff;
   11fa8:	e1a03424 	lsr	r3, r4, #8
   11fac:	e5cd3011 	strb	r3, [sp, #17]
                if(!device_write(fat_offset + 2 * cluster_num, buffer, sizeof(buffer)))
   11fb0:	e59d3004 	ldr	r3, [sp, #4]
            /* We allocated a new cluster chain. Now join
                                             * it with the existing one.
                                             */
            if(cluster_num >= 2)
            {
                buffer[0] = cluster_next & 0xff;
   11fb4:	e5cd4010 	strb	r4, [sp, #16]
                buffer[1] = (cluster_next >> 8) & 0xff;
                if(!device_write(fat_offset + 2 * cluster_num, buffer, sizeof(buffer)))
   11fb8:	e083008b 	add	r0, r3, fp, lsl #1
   11fbc:	e28d1010 	add	r1, sp, #16
   11fc0:	e3a02002 	mov	r2, #2
   11fc4:	e59d3000 	ldr	r3, [sp]
   11fc8:	e1a0e00f 	mov	lr, pc
   11fcc:	e12fff13 	bx	r3
   11fd0:	e3500000 	cmp	r0, #0
   11fd4:	1a000005 	bne	11ff0 <fat16_append_clusters+0x158>
        while(0);
    
        /* No space left on device or writing error.
                             * Free up all clusters already allocated.
                             */
        fat16_free_clusters(fs, cluster_next);
   11fd8:	e1a01004 	mov	r1, r4
   11fdc:	e1a00006 	mov	r0, r6
   11fe0:	ebffff7d 	bl	11ddc <fat16_free_clusters>
    
        return 0;
   11fe4:	e3a04000 	mov	r4, #0
   11fe8:	ea000000 	b	11ff0 <fat16_append_clusters+0x158>
        uint8_t buffer[2];
        uint16_t cluster_new;
        for(cluster_new = 0; cluster_new < cluster_max; ++cluster_new)
        {
            if(!device_read(fat_offset + 2 * cluster_new, buffer, sizeof(buffer)))
                return 0;
   11fec:	e1a04000 	mov	r4, r0
    
        return 0;
    #else
        return 0;
    #endif
}
   11ff0:	e1a00004 	mov	r0, r4
   11ff4:	e28dd014 	add	sp, sp, #20
   11ff8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ffc:	e12fff1e 	bx	lr

00012000 <fat16_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_write_dir_entry(const struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
   12000:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    #if FAT16_WRITE_SUPPORT
        if(!fs || !dir_entry)
   12004:	e3500000 	cmp	r0, #0
   12008:	13510000 	cmpne	r1, #0
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_write_dir_entry(const struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
   1200c:	e24dd020 	sub	sp, sp, #32
    #if FAT16_WRITE_SUPPORT
        if(!fs || !dir_entry)
   12010:	e1a04001 	mov	r4, r1
            return 0;
   12014:	03a00000 	moveq	r0, #0
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_write_dir_entry(const struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs || !dir_entry)
   12018:	0a000092 	beq	12268 <fat16_write_dir_entry+0x268>
            return 0;
    
        device_write_t device_write = fs->partition->device_write;
   1201c:	e5903000 	ldr	r3, [r0]
        uint32_t offset = dir_entry->entry_offset;
        uint8_t name_len = strlen(dir_entry->long_name);
   12020:	e1a00001 	mov	r0, r1
{
    #if FAT16_WRITE_SUPPORT
        if(!fs || !dir_entry)
            return 0;
    
        device_write_t device_write = fs->partition->device_write;
   12024:	e593a008 	ldr	sl, [r3, #8]
        uint32_t offset = dir_entry->entry_offset;
   12028:	e5916028 	ldr	r6, [r1, #40]	; 0x28
        uint8_t name_len = strlen(dir_entry->long_name);
   1202c:	eb001b56 	bl	18d8c <strlen>
   12030:	e20050ff 	and	r5, r0, #255	; 0xff
        uint8_t lfn_entry_count = (name_len + 12) / 13;
   12034:	e3a0100d 	mov	r1, #13
   12038:	e285000c 	add	r0, r5, #12
   1203c:	eb004924 	bl	244d4 <__aeabi_idiv>
        uint8_t buffer[32];
    
        /* write 8.3 entry */
    
        /* generate 8.3 file name */
        memset(&buffer[0], ' ', 11);
   12040:	e3a01020 	mov	r1, #32
   12044:	e3a0200b 	mov	r2, #11
            return 0;
    
        device_write_t device_write = fs->partition->device_write;
        uint32_t offset = dir_entry->entry_offset;
        uint8_t name_len = strlen(dir_entry->long_name);
        uint8_t lfn_entry_count = (name_len + 12) / 13;
   12048:	e20080ff 	and	r8, r0, #255	; 0xff
        uint8_t buffer[32];
    
        /* write 8.3 entry */
    
        /* generate 8.3 file name */
        memset(&buffer[0], ' ', 11);
   1204c:	e1a0000d 	mov	r0, sp
   12050:	eb001975 	bl	1862c <memset>
        char* name_ext = strrchr(dir_entry->long_name, '.');
   12054:	e1a00004 	mov	r0, r4
   12058:	e3a0102e 	mov	r1, #46	; 0x2e
   1205c:	eb001c21 	bl	190e8 <strrchr>
        if(name_ext)
   12060:	e3500000 	cmp	r0, #0
   12064:	0a00000b 	beq	12098 <fat16_write_dir_entry+0x98>
        {
            ++name_ext;
   12068:	e2807001 	add	r7, r0, #1
    
            uint8_t name_ext_len = strlen(name_ext);
   1206c:	e1a00007 	mov	r0, r7
   12070:	eb001b45 	bl	18d8c <strlen>
   12074:	e20020ff 	and	r2, r0, #255	; 0xff
            name_len -= name_ext_len + 1;
   12078:	e1e03002 	mvn	r3, r2
   1207c:	e0855003 	add	r5, r5, r3
    
            if(name_ext_len > 3)
                name_ext_len = 3;
    
            memcpy(&buffer[8], name_ext, name_ext_len);
   12080:	e28d0008 	add	r0, sp, #8
   12084:	e1a01007 	mov	r1, r7
   12088:	e3520003 	cmp	r2, #3
   1208c:	23a02003 	movcs	r2, #3
        if(name_ext)
        {
            ++name_ext;
    
            uint8_t name_ext_len = strlen(name_ext);
            name_len -= name_ext_len + 1;
   12090:	e20550ff 	and	r5, r5, #255	; 0xff
    
            if(name_ext_len > 3)
                name_ext_len = 3;
    
            memcpy(&buffer[8], name_ext, name_ext_len);
   12094:	eb00192e 	bl	18554 <memcpy>
        }
    
        if(name_len <= 8)
   12098:	e3550008 	cmp	r5, #8
        {
            memcpy(buffer, dir_entry->long_name, name_len);
   1209c:	e1a0000d 	mov	r0, sp
   120a0:	e1a01004 	mov	r1, r4
                name_ext_len = 3;
    
            memcpy(&buffer[8], name_ext, name_ext_len);
        }
    
        if(name_len <= 8)
   120a4:	8a000002 	bhi	120b4 <fat16_write_dir_entry+0xb4>
        {
            memcpy(buffer, dir_entry->long_name, name_len);
   120a8:	e1a02005 	mov	r2, r5
   120ac:	eb001928 	bl	18554 <memcpy>
   120b0:	ea00000c 	b	120e8 <fat16_write_dir_entry+0xe8>
        }
        else
        {
            memcpy(buffer, dir_entry->long_name, 8);
   120b4:	e3a02008 	mov	r2, #8
   120b8:	eb001925 	bl	18554 <memcpy>
    
            /* Minimize 8.3 name clashes by appending
                                             * the lower byte of the cluster number.
                                             */
            uint8_t num = dir_entry->cluster & 0xff;
   120bc:	e5d43022 	ldrb	r3, [r4, #34]	; 0x22
    
            buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
   120c0:	e353009f 	cmp	r3, #159	; 0x9f
   120c4:	e1a02223 	lsr	r2, r3, #4
            num &= 0x0f;
   120c8:	e203300f 	and	r3, r3, #15
            /* Minimize 8.3 name clashes by appending
                                             * the lower byte of the cluster number.
                                             */
            uint8_t num = dir_entry->cluster & 0xff;
    
            buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
   120cc:	92822030 	addls	r2, r2, #48	; 0x30
   120d0:	82822061 	addhi	r2, r2, #97	; 0x61
            num &= 0x0f;
            buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
   120d4:	e3530009 	cmp	r3, #9
   120d8:	92833030 	addls	r3, r3, #48	; 0x30
   120dc:	82833061 	addhi	r3, r3, #97	; 0x61
            /* Minimize 8.3 name clashes by appending
                                             * the lower byte of the cluster number.
                                             */
            uint8_t num = dir_entry->cluster & 0xff;
    
            buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
   120e0:	e5cd2006 	strb	r2, [sp, #6]
            num &= 0x0f;
            buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
   120e4:	e5cd3007 	strb	r3, [sp, #7]
        }
    
        /* fill directory entry buffer */
        memset(&buffer[11], 0, sizeof(buffer) - 11);
   120e8:	e3a01000 	mov	r1, #0
   120ec:	e3a02015 	mov	r2, #21
   120f0:	e28d000b 	add	r0, sp, #11
   120f4:	eb00194c 	bl	1862c <memset>
        buffer[0x0b] = dir_entry->attributes;
   120f8:	e5d43020 	ldrb	r3, [r4, #32]
   120fc:	e5cd300b 	strb	r3, [sp, #11]
			buffer[0x19] = (modified_date >> 8) & 0xFF;
			*/
			//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		#endif

        buffer[0x1a] = (dir_entry->cluster >> 0) & 0xff;
   12100:	e1d432b2 	ldrh	r3, [r4, #34]	; 0x22
   12104:	e5cd301a 	strb	r3, [sp, #26]
        buffer[0x1b] = (dir_entry->cluster >> 8) & 0xff;
   12108:	e1a03423 	lsr	r3, r3, #8
   1210c:	e5cd301b 	strb	r3, [sp, #27]
        buffer[0x1c] = (dir_entry->file_size >> 0) & 0xff;
   12110:	e5943024 	ldr	r3, [r4, #36]	; 0x24
        buffer[0x1d] = (dir_entry->file_size >> 8) & 0xff;
   12114:	e1a02423 	lsr	r2, r3, #8
			//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
		#endif

        buffer[0x1a] = (dir_entry->cluster >> 0) & 0xff;
        buffer[0x1b] = (dir_entry->cluster >> 8) & 0xff;
        buffer[0x1c] = (dir_entry->file_size >> 0) & 0xff;
   12118:	e5cd301c 	strb	r3, [sp, #28]
        buffer[0x1d] = (dir_entry->file_size >> 8) & 0xff;
   1211c:	e5cd201d 	strb	r2, [sp, #29]
        buffer[0x1e] = (dir_entry->file_size >> 16) & 0xff;
   12120:	e1a02823 	lsr	r2, r3, #16
        buffer[0x1f] = (dir_entry->file_size >> 24) & 0xff;
   12124:	e1a03c23 	lsr	r3, r3, #24

        buffer[0x1a] = (dir_entry->cluster >> 0) & 0xff;
        buffer[0x1b] = (dir_entry->cluster >> 8) & 0xff;
        buffer[0x1c] = (dir_entry->file_size >> 0) & 0xff;
        buffer[0x1d] = (dir_entry->file_size >> 8) & 0xff;
        buffer[0x1e] = (dir_entry->file_size >> 16) & 0xff;
   12128:	e5cd201e 	strb	r2, [sp, #30]
        buffer[0x1f] = (dir_entry->file_size >> 24) & 0xff;
   1212c:	e5cd301f 	strb	r3, [sp, #31]
    
        /* write to disk */
        if(!device_write(offset + (uint32_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
   12130:	e0860288 	add	r0, r6, r8, lsl #5
   12134:	e1a0100d 	mov	r1, sp
   12138:	e3a02020 	mov	r2, #32
   1213c:	e1a0e00f 	mov	lr, pc
   12140:	e12fff1a 	bx	sl
   12144:	e3500000 	cmp	r0, #0
   12148:	0a000046 	beq	12268 <fat16_write_dir_entry+0x268>
            return 0;
    
        /* calculate checksum of 8.3 name */
        uint8_t checksum = buffer[0];
   1214c:	e5dd7000 	ldrb	r7, [sp]
   12150:	e1a0300d 	mov	r3, sp
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_write_dir_entry(const struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
   12154:	e28d200a 	add	r2, sp, #10
    
        /* calculate checksum of 8.3 name */
        uint8_t checksum = buffer[0];
        uint8_t i;
        for(i = 1; i < 11; ++i)
            checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
   12158:	e1a010a7 	lsr	r1, r7, #1
   1215c:	e1817387 	orr	r7, r1, r7, lsl #7
   12160:	e5f31001 	ldrb	r1, [r3, #1]!
   12164:	e0877001 	add	r7, r7, r1
            return 0;
    
        /* calculate checksum of 8.3 name */
        uint8_t checksum = buffer[0];
        uint8_t i;
        for(i = 1; i < 11; ++i)
   12168:	e1530002 	cmp	r3, r2
            checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
   1216c:	e20770ff 	and	r7, r7, #255	; 0xff
            return 0;
    
        /* calculate checksum of 8.3 name */
        uint8_t checksum = buffer[0];
        uint8_t i;
        for(i = 1; i < 11; ++i)
   12170:	1afffff8 	bne	12158 <fat16_write_dir_entry+0x158>
            return 0;
    
        device_write_t device_write = fs->partition->device_write;
        uint32_t offset = dir_entry->entry_offset;
        uint8_t name_len = strlen(dir_entry->long_name);
        uint8_t lfn_entry_count = (name_len + 12) / 13;
   12174:	e1a05008 	mov	r5, r8
        /* write lfn entries */
        uint8_t lfn_entry;
        for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
        {
            memset(buffer, 0, sizeof(buffer));
            memset(&buffer[0x01], 0xff, 10);
   12178:	e28d9001 	add	r9, sp, #1
            memset(&buffer[0x0e], 0xff, 12);
   1217c:	e28db00e 	add	fp, sp, #14
   12180:	ea000035 	b	1225c <fat16_write_dir_entry+0x25c>
    
        /* write lfn entries */
        uint8_t lfn_entry;
        for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
        {
            memset(buffer, 0, sizeof(buffer));
   12184:	e3a01000 	mov	r1, #0
   12188:	e3a02020 	mov	r2, #32
   1218c:	e1a0000d 	mov	r0, sp
   12190:	eb001925 	bl	1862c <memset>
            memset(&buffer[0x01], 0xff, 10);
   12194:	e3a010ff 	mov	r1, #255	; 0xff
   12198:	e3a0200a 	mov	r2, #10
   1219c:	e1a00009 	mov	r0, r9
   121a0:	eb001921 	bl	1862c <memset>
            memset(&buffer[0x0e], 0xff, 12);
   121a4:	e3a010ff 	mov	r1, #255	; 0xff
   121a8:	e3a0200c 	mov	r2, #12
   121ac:	e1a0000b 	mov	r0, fp
   121b0:	eb00191d 	bl	1862c <memset>
            memset(&buffer[0x1c], 0xff, 4);
   121b4:	e3e03000 	mvn	r3, #0
    
            buffer[0x00] = lfn_entry;
            if(lfn_entry == lfn_entry_count)
   121b8:	e1550008 	cmp	r5, r8
        for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
        {
            memset(buffer, 0, sizeof(buffer));
            memset(&buffer[0x01], 0xff, 10);
            memset(&buffer[0x0e], 0xff, 12);
            memset(&buffer[0x1c], 0xff, 4);
   121bc:	e58d301c 	str	r3, [sp, #28]
    
            buffer[0x00] = lfn_entry;
            if(lfn_entry == lfn_entry_count)
                buffer[0x00] |= FAT16_DIRENTRY_LFNLAST;
   121c0:	03853040 	orreq	r3, r5, #64	; 0x40
            memset(buffer, 0, sizeof(buffer));
            memset(&buffer[0x01], 0xff, 10);
            memset(&buffer[0x0e], 0xff, 12);
            memset(&buffer[0x1c], 0xff, 4);
    
            buffer[0x00] = lfn_entry;
   121c4:	e5cd5000 	strb	r5, [sp]
            if(lfn_entry == lfn_entry_count)
                buffer[0x00] |= FAT16_DIRENTRY_LFNLAST;
    
            /* set file name */
            const char* long_name_curr = dir_entry->long_name + (lfn_entry - 1) * 13;
   121c8:	e3a0200d 	mov	r2, #13
            memset(&buffer[0x0e], 0xff, 12);
            memset(&buffer[0x1c], 0xff, 4);
    
            buffer[0x00] = lfn_entry;
            if(lfn_entry == lfn_entry_count)
                buffer[0x00] |= FAT16_DIRENTRY_LFNLAST;
   121cc:	05cd3000 	strbeq	r3, [sp]
    
            /* set file name */
            const char* long_name_curr = dir_entry->long_name + (lfn_entry - 1) * 13;
   121d0:	e2453001 	sub	r3, r5, #1
   121d4:	e0224293 	mla	r2, r3, r2, r4
            i = 1;
            while(i < 0x1f)
            {
                buffer[i++] = *long_name_curr;
                buffer[i++] = 0;
   121d8:	e3a01000 	mov	r1, #0
            if(lfn_entry == lfn_entry_count)
                buffer[0x00] |= FAT16_DIRENTRY_LFNLAST;
    
            /* set file name */
            const char* long_name_curr = dir_entry->long_name + (lfn_entry - 1) * 13;
            i = 1;
   121dc:	e3a03001 	mov	r3, #1
            while(i < 0x1f)
            {
                buffer[i++] = *long_name_curr;
   121e0:	e4d2c001 	ldrb	ip, [r2], #1
   121e4:	e28de020 	add	lr, sp, #32
   121e8:	e08e0003 	add	r0, lr, r3
   121ec:	e540c020 	strb	ip, [r0, #-32]
   121f0:	e2830001 	add	r0, r3, #1
                buffer[i++] = 0;
   121f4:	e2833002 	add	r3, r3, #2
   121f8:	e20330ff 	and	r3, r3, #255	; 0xff
   121fc:	e20000ff 	and	r0, r0, #255	; 0xff
   12200:	e08e0000 	add	r0, lr, r0
    
                switch(i)
   12204:	e353000b 	cmp	r3, #11
            const char* long_name_curr = dir_entry->long_name + (lfn_entry - 1) * 13;
            i = 1;
            while(i < 0x1f)
            {
                buffer[i++] = *long_name_curr;
                buffer[i++] = 0;
   12208:	e5401020 	strb	r1, [r0, #-32]
    
                switch(i)
                {
                    case 0x0b:
                        i = 0x0e;
   1220c:	03a0300e 	moveq	r3, #14
            while(i < 0x1f)
            {
                buffer[i++] = *long_name_curr;
                buffer[i++] = 0;
    
                switch(i)
   12210:	0a000001 	beq	1221c <fat16_write_dir_entry+0x21c>
                {
                    case 0x0b:
                        i = 0x0e;
                        break;
                    case 0x1a:
                        i = 0x1c;
   12214:	e353001a 	cmp	r3, #26
   12218:	03a0301c 	moveq	r3, #28
                        break;
                }
    
                if(!*long_name_curr++)
   1221c:	e5520001 	ldrb	r0, [r2, #-1]
   12220:	e3500000 	cmp	r0, #0
   12224:	0a000001 	beq	12230 <fat16_write_dir_entry+0x230>
                buffer[0x00] |= FAT16_DIRENTRY_LFNLAST;
    
            /* set file name */
            const char* long_name_curr = dir_entry->long_name + (lfn_entry - 1) * 13;
            i = 1;
            while(i < 0x1f)
   12228:	e353001e 	cmp	r3, #30
   1222c:	9affffeb 	bls	121e0 <fat16_write_dir_entry+0x1e0>
                if(!*long_name_curr++)
                    break;
            }
    
            /* mark as lfn entry */
            buffer[0x0b] = 0x0f;
   12230:	e3a0300f 	mov	r3, #15
    
            /* set checksum */
            buffer[0x0d] = checksum;
    
            /* write entry */
            device_write(offset, buffer, sizeof(buffer));
   12234:	e1a00006 	mov	r0, r6
                if(!*long_name_curr++)
                    break;
            }
    
            /* mark as lfn entry */
            buffer[0x0b] = 0x0f;
   12238:	e5cd300b 	strb	r3, [sp, #11]
    
            /* set checksum */
            buffer[0x0d] = checksum;
   1223c:	e5cd700d 	strb	r7, [sp, #13]
    
            /* write entry */
            device_write(offset, buffer, sizeof(buffer));
   12240:	e1a0100d 	mov	r1, sp
   12244:	e3a02020 	mov	r2, #32
   12248:	e1a0e00f 	mov	lr, pc
   1224c:	e12fff1a 	bx	sl
        for(i = 1; i < 11; ++i)
            checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
        /* write lfn entries */
        uint8_t lfn_entry;
        for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
   12250:	e2455001 	sub	r5, r5, #1
            buffer[0x0d] = checksum;
    
            /* write entry */
            device_write(offset, buffer, sizeof(buffer));
    
            offset += sizeof(buffer);
   12254:	e2866020 	add	r6, r6, #32
        for(i = 1; i < 11; ++i)
            checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
        /* write lfn entries */
        uint8_t lfn_entry;
        for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
   12258:	e20550ff 	and	r5, r5, #255	; 0xff
   1225c:	e3550000 	cmp	r5, #0
   12260:	1affffc7 	bne	12184 <fat16_write_dir_entry+0x184>
            device_write(offset, buffer, sizeof(buffer));
    
            offset += sizeof(buffer);
        }
    
        return 1;
   12264:	e3a00001 	mov	r0, #1
    
    #else
        return 0;
    #endif
}
   12268:	e28dd020 	add	sp, sp, #32
   1226c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12270:	e12fff1e 	bx	lr

00012274 <fat16_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT16 filesystem descriptor on success.
 * \see fat16_open
 */
struct fat16_fs_struct* fat16_open(struct partition_struct* partition)
{
   12274:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!partition ||
   12278:	e2506000 	subs	r6, r0, #0
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT16 filesystem descriptor on success.
 * \see fat16_open
 */
struct fat16_fs_struct* fat16_open(struct partition_struct* partition)
{
   1227c:	e24dd030 	sub	sp, sp, #48	; 0x30
        !partition->device_write
       #else
        0
       #endif
       )
    return 0;
   12280:	01a04006 	moveq	r4, r6
 * \returns 0 on error, a FAT16 filesystem descriptor on success.
 * \see fat16_open
 */
struct fat16_fs_struct* fat16_open(struct partition_struct* partition)
{
    if(!partition ||
   12284:	0a00006e 	beq	12444 <fat16_open+0x1d0>
   12288:	e5964008 	ldr	r4, [r6, #8]
   1228c:	e3540000 	cmp	r4, #0
   12290:	0a00006b 	beq	12444 <fat16_open+0x1d0>
        0
       #endif
       )
    return 0;

    struct fat16_fs_struct* fs = malloc(sizeof(*fs));
   12294:	e3a0001c 	mov	r0, #28
   12298:	eb0016dc 	bl	17e10 <malloc>
    if(!fs)
   1229c:	e2504000 	subs	r4, r0, #0
   122a0:	1a000002 	bne	122b0 <fat16_open+0x3c>
    {
        rprintf("MALLOC FAILS\n\r");
   122a4:	e59f01a8 	ldr	r0, [pc, #424]	; 12454 <fat16_open+0x1e0>
   122a8:	ebfff7e5 	bl	10244 <rprintf>
        return 0;
   122ac:	ea000064 	b	12444 <fat16_open+0x1d0>
    }
    memset(fs, 0, sizeof(*fs));
   122b0:	e3a01000 	mov	r1, #0
   122b4:	e3a0201c 	mov	r2, #28
   122b8:	eb0018db 	bl	1862c <memset>
        return 0;
    }

    /* read fat parameters */
    uint8_t buffer[25];
    uint32_t partition_offset = partition->offset * 512;
   122bc:	e5968010 	ldr	r8, [r6, #16]
   122c0:	e1a08488 	lsl	r8, r8, #9
        rprintf("MALLOC FAILS\n\r");
        return 0;
    }
    memset(fs, 0, sizeof(*fs));

    fs->partition = partition;
   122c4:	e5846000 	str	r6, [r4]

    /* read fat parameters */
    uint8_t buffer[25];
    uint32_t partition_offset = partition->offset * 512;

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
   122c8:	e288000b 	add	r0, r8, #11
   122cc:	e28d1014 	add	r1, sp, #20
   122d0:	e3a02019 	mov	r2, #25
   122d4:	e596c000 	ldr	ip, [r6]
   122d8:	e1a0e00f 	mov	lr, pc
   122dc:	e12fff1c 	bx	ip
   122e0:	e3500000 	cmp	r0, #0
   122e4:	0a000051 	beq	12430 <fat16_open+0x1bc>
        return 0;

    uint16_t bytes_per_sector = ((uint16_t) buffer[0x00]) |
    ((uint16_t) buffer[0x01] << 8);
    uint8_t sectors_per_cluster = buffer[0x02];
    uint16_t reserved_sectors = ((uint16_t) buffer[0x03]) |
   122e8:	e5dd2017 	ldrb	r2, [sp, #23]
    ((uint16_t) buffer[0x04] << 8);
   122ec:	e5dd3018 	ldrb	r3, [sp, #24]
        return 0;

    uint16_t bytes_per_sector = ((uint16_t) buffer[0x00]) |
    ((uint16_t) buffer[0x01] << 8);
    uint8_t sectors_per_cluster = buffer[0x02];
    uint16_t reserved_sectors = ((uint16_t) buffer[0x03]) |
   122f0:	e58d2004 	str	r2, [sp, #4]
    ((uint16_t) buffer[0x04] << 8);
    uint8_t fat_copies = buffer[0x05];
   122f4:	e5dd2019 	ldrb	r2, [sp, #25]
    uint16_t max_root_entries = ((uint16_t) buffer[0x06]) |
    ((uint16_t) buffer[0x07] << 8);
    uint16_t sector_count_16 = ((uint16_t) buffer[0x08]) |
    ((uint16_t) buffer[0x09] << 8);
    uint16_t sectors_per_fat = ((uint16_t) buffer[0x0b]) |
    ((uint16_t) buffer[0x0c] << 8);
   122f8:	e5ddc020 	ldrb	ip, [sp, #32]
    uint8_t fat_copies = buffer[0x05];
    uint16_t max_root_entries = ((uint16_t) buffer[0x06]) |
    ((uint16_t) buffer[0x07] << 8);
    uint16_t sector_count_16 = ((uint16_t) buffer[0x08]) |
    ((uint16_t) buffer[0x09] << 8);
    uint16_t sectors_per_fat = ((uint16_t) buffer[0x0b]) |
   122fc:	e5dd001f 	ldrb	r0, [sp, #31]

    uint16_t bytes_per_sector = ((uint16_t) buffer[0x00]) |
    ((uint16_t) buffer[0x01] << 8);
    uint8_t sectors_per_cluster = buffer[0x02];
    uint16_t reserved_sectors = ((uint16_t) buffer[0x03]) |
    ((uint16_t) buffer[0x04] << 8);
   12300:	e58d3008 	str	r3, [sp, #8]
    uint8_t fat_copies = buffer[0x05];
   12304:	e58d200c 	str	r2, [sp, #12]
    uint16_t max_root_entries = ((uint16_t) buffer[0x06]) |
   12308:	e5dd301a 	ldrb	r3, [sp, #26]
    ((uint16_t) buffer[0x07] << 8);
   1230c:	e5dd201b 	ldrb	r2, [sp, #27]
    uint32_t sector_count = ((uint32_t) buffer[0x15]) |
    ((uint32_t) buffer[0x16] << 8) |
    ((uint32_t) buffer[0x17] << 16) |
    ((uint32_t) buffer[0x18] << 24);

    if(sectors_per_fat == 0)
   12310:	e190040c 	orrs	r0, r0, ip, lsl #8
    ((uint16_t) buffer[0x01] << 8);
    uint8_t sectors_per_cluster = buffer[0x02];
    uint16_t reserved_sectors = ((uint16_t) buffer[0x03]) |
    ((uint16_t) buffer[0x04] << 8);
    uint8_t fat_copies = buffer[0x05];
    uint16_t max_root_entries = ((uint16_t) buffer[0x06]) |
   12314:	e58d3000 	str	r3, [sp]
    ((uint16_t) buffer[0x07] << 8);
   12318:	e58d2010 	str	r2, [sp, #16]
    uint32_t partition_offset = partition->offset * 512;

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = ((uint16_t) buffer[0x00]) |
   1231c:	e5dde014 	ldrb	lr, [sp, #20]
    ((uint16_t) buffer[0x01] << 8);
   12320:	e5dd5015 	ldrb	r5, [sp, #21]
    uint8_t sectors_per_cluster = buffer[0x02];
   12324:	e5ddb016 	ldrb	fp, [sp, #22]
    uint16_t reserved_sectors = ((uint16_t) buffer[0x03]) |
    ((uint16_t) buffer[0x04] << 8);
    uint8_t fat_copies = buffer[0x05];
    uint16_t max_root_entries = ((uint16_t) buffer[0x06]) |
    ((uint16_t) buffer[0x07] << 8);
    uint16_t sector_count_16 = ((uint16_t) buffer[0x08]) |
   12328:	e5dd301c 	ldrb	r3, [sp, #28]
    ((uint16_t) buffer[0x09] << 8);
   1232c:	e5dd201d 	ldrb	r2, [sp, #29]
    uint16_t sectors_per_fat = ((uint16_t) buffer[0x0b]) |
    ((uint16_t) buffer[0x0c] << 8);
    uint32_t sector_count = ((uint32_t) buffer[0x15]) |
   12330:	e5dda029 	ldrb	sl, [sp, #41]	; 0x29
    ((uint32_t) buffer[0x16] << 8) |
   12334:	e5dd902a 	ldrb	r9, [sp, #42]	; 0x2a
    ((uint32_t) buffer[0x17] << 16) |
   12338:	e5dd702b 	ldrb	r7, [sp, #43]	; 0x2b
    ((uint32_t) buffer[0x18] << 24);
   1233c:	e5dd102c 	ldrb	r1, [sp, #44]	; 0x2c

    if(sectors_per_fat == 0)
   12340:	0a00003a 	beq	12430 <fat16_open+0x1bc>
    ((uint16_t) buffer[0x09] << 8);
    uint16_t sectors_per_fat = ((uint16_t) buffer[0x0b]) |
    ((uint16_t) buffer[0x0c] << 8);
    uint32_t sector_count = ((uint32_t) buffer[0x15]) |
    ((uint32_t) buffer[0x16] << 8) |
    ((uint32_t) buffer[0x17] << 16) |
   12344:	e1a07807 	lsl	r7, r7, #16
    ((uint16_t) buffer[0x07] << 8);
    uint16_t sector_count_16 = ((uint16_t) buffer[0x08]) |
    ((uint16_t) buffer[0x09] << 8);
    uint16_t sectors_per_fat = ((uint16_t) buffer[0x0b]) |
    ((uint16_t) buffer[0x0c] << 8);
    uint32_t sector_count = ((uint32_t) buffer[0x15]) |
   12348:	e1877409 	orr	r7, r7, r9, lsl #8
    ((uint32_t) buffer[0x16] << 8) |
   1234c:	e187700a 	orr	r7, r7, sl

    if(sectors_per_fat == 0)
    /* this is not a FAT16 */
        return 0;

    if(sector_count == 0)
   12350:	e1977c01 	orrs	r7, r7, r1, lsl #24
   12354:	1a000001 	bne	12360 <fat16_open+0xec>
    {
        if(sector_count_16 == 0)
   12358:	e1937402 	orrs	r7, r3, r2, lsl #8
   1235c:	0a000033 	beq	12430 <fat16_open+0x1bc>
    ((uint16_t) buffer[0x01] << 8);
    uint8_t sectors_per_cluster = buffer[0x02];
    uint16_t reserved_sectors = ((uint16_t) buffer[0x03]) |
    ((uint16_t) buffer[0x04] << 8);
    uint8_t fat_copies = buffer[0x05];
    uint16_t max_root_entries = ((uint16_t) buffer[0x06]) |
   12360:	e59d3000 	ldr	r3, [sp]
   12364:	e59d2010 	ldr	r2, [sp, #16]
   12368:	e1833402 	orr	r3, r3, r2, lsl #8
   1236c:	e58d3000 	str	r3, [sp]
            sector_count = sector_count_16;
    }

    /* ensure we really have a FAT16 fs here */
    uint32_t data_sector_count = sector_count
    - reserved_sectors
   12370:	e59d2008 	ldr	r2, [sp, #8]
   12374:	e59d3004 	ldr	r3, [sp, #4]
   12378:	e183a402 	orr	sl, r3, r2, lsl #8
    - (uint32_t) sectors_per_fat * fat_copies
   1237c:	e59d200c 	ldr	r2, [sp, #12]
   12380:	e0030092 	mul	r3, r2, r0
   12384:	e58d3004 	str	r3, [sp, #4]
    - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
   12388:	e59d3000 	ldr	r3, [sp]
   1238c:	e3e0001f 	mvn	r0, #31
   12390:	e0000093 	mul	r0, r3, r0
    uint32_t partition_offset = partition->offset * 512;

    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
        return 0;

    uint16_t bytes_per_sector = ((uint16_t) buffer[0x00]) |
   12394:	e18e5405 	orr	r5, lr, r5, lsl #8

    /* ensure we really have a FAT16 fs here */
    uint32_t data_sector_count = sector_count
    - reserved_sectors
    - (uint32_t) sectors_per_fat * fat_copies
    - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
   12398:	e0650000 	rsb	r0, r5, r0
   1239c:	e1a01005 	mov	r1, r5
   123a0:	e2800001 	add	r0, r0, #1
   123a4:	eb00484a 	bl	244d4 <__aeabi_idiv>
 *
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT16 filesystem descriptor on success.
 * \see fat16_open
 */
struct fat16_fs_struct* fat16_open(struct partition_struct* partition)
   123a8:	e59d2004 	ldr	r2, [sp, #4]
   123ac:	e08a3002 	add	r3, sl, r2
            sector_count = sector_count_16;
    }

    /* ensure we really have a FAT16 fs here */
    uint32_t data_sector_count = sector_count
    - reserved_sectors
   123b0:	e0630000 	rsb	r0, r3, r0
    - (uint32_t) sectors_per_fat * fat_copies
    - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
   123b4:	e0800007 	add	r0, r0, r7
   123b8:	e1a0100b 	mov	r1, fp
   123bc:	eb0047fe 	bl	243bc <__aeabi_uidiv>
    if(data_cluster_count < 4085 || data_cluster_count >= 65525)
   123c0:	e2403eff 	sub	r3, r0, #4080	; 0xff0
   123c4:	e2433005 	sub	r3, r3, #5
   123c8:	e3530a0f 	cmp	r3, #61440	; 0xf000
    /* ensure we really have a FAT16 fs here */
    uint32_t data_sector_count = sector_count
    - reserved_sectors
    - (uint32_t) sectors_per_fat * fat_copies
    - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
   123cc:	e1a09000 	mov	r9, r0
    if(data_cluster_count < 4085 || data_cluster_count >= 65525)
   123d0:	2a000016 	bcs	12430 <fat16_open+0x1bc>
    memset(header, 0, sizeof(*header));

    header->size = sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
    partition_offset +
   123d4:	e028859a 	mla	r8, sl, r5, r8
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    if(data_cluster_count < 4085 || data_cluster_count >= 65525)
    /* this is not a FAT16 */
        return 0;

    partition->type = PARTITION_TYPE_FAT16;
   123d8:	e3a03006 	mov	r3, #6
   123dc:	e5c6300c 	strb	r3, [r6, #12]

    /* fill header information */
    struct fat16_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
   123e0:	e2840004 	add	r0, r4, #4
   123e4:	e3a01000 	mov	r1, #0
   123e8:	e3a02018 	mov	r2, #24
   123ec:	eb00188e 	bl	1862c <memset>

    header->sector_size = bytes_per_sector;
    header->cluster_size = (uint32_t) bytes_per_sector * sectors_per_cluster;

    header->root_dir_offset = /* jump to fats */
    header->fat_offset +
   123f0:	e59d3004 	ldr	r3, [sp, #4]

    /* fill header information */
    struct fat16_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));

    header->size = sector_count * bytes_per_sector;
   123f4:	e0070795 	mul	r7, r5, r7
    /* jump to fat */
    (uint32_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * 2;

    header->sector_size = bytes_per_sector;
    header->cluster_size = (uint32_t) bytes_per_sector * sectors_per_cluster;
   123f8:	e00b0b95 	mul	fp, r5, fp
    partition_offset +
    /* jump to fat */
    (uint32_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * 2;

    header->sector_size = bytes_per_sector;
   123fc:	e1c451b0 	strh	r5, [r4, #16]
    header->cluster_size = (uint32_t) bytes_per_sector * sectors_per_cluster;

    header->root_dir_offset = /* jump to fats */
    header->fat_offset +
   12400:	e0258593 	mla	r5, r3, r5, r8
    /* jump to root directory entries */
    (uint32_t) fat_copies * sectors_per_fat * bytes_per_sector;

    header->cluster_zero_offset = /* jump to root directory entries */
    header->root_dir_offset +
   12404:	e59d3000 	ldr	r3, [sp]

    header->fat_offset = /* jump to partition */
    partition_offset +
    /* jump to fat */
    (uint32_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * 2;
   12408:	e2899002 	add	r9, r9, #2
   1240c:	e1a09089 	lsl	r9, r9, #1

    header->sector_size = bytes_per_sector;
    header->cluster_size = (uint32_t) bytes_per_sector * sectors_per_cluster;

    header->root_dir_offset = /* jump to fats */
   12410:	e5845014 	str	r5, [r4, #20]
    header->fat_offset +
    /* jump to root directory entries */
    (uint32_t) fat_copies * sectors_per_fat * bytes_per_sector;

    header->cluster_zero_offset = /* jump to root directory entries */
    header->root_dir_offset +
   12414:	e0855283 	add	r5, r5, r3, lsl #5

    /* fill header information */
    struct fat16_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));

    header->size = sector_count * bytes_per_sector;
   12418:	e5847004 	str	r7, [r4, #4]

    header->fat_offset = /* jump to partition */
   1241c:	e5848008 	str	r8, [r4, #8]
    partition_offset +
    /* jump to fat */
    (uint32_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * 2;
   12420:	e584900c 	str	r9, [r4, #12]

    header->sector_size = bytes_per_sector;
    header->cluster_size = (uint32_t) bytes_per_sector * sectors_per_cluster;
   12424:	e1c4b1b2 	strh	fp, [r4, #18]
    header->root_dir_offset = /* jump to fats */
    header->fat_offset +
    /* jump to root directory entries */
    (uint32_t) fat_copies * sectors_per_fat * bytes_per_sector;

    header->cluster_zero_offset = /* jump to root directory entries */
   12428:	e5845018 	str	r5, [r4, #24]
   1242c:	ea000004 	b	12444 <fat16_open+0x1d0>
    memset(fs, 0, sizeof(*fs));

    fs->partition = partition;
    if(!fat16_read_header(fs))
    {
        rprintf("Failed Reading Header\n\r");
   12430:	e59f0020 	ldr	r0, [pc, #32]	; 12458 <fat16_open+0x1e4>
   12434:	ebfff782 	bl	10244 <rprintf>
        free(fs);
   12438:	e1a00004 	mov	r0, r4
   1243c:	eb001678 	bl	17e24 <free>
        return 0;
   12440:	e3a04000 	mov	r4, #0
    }

    return fs;
}
   12444:	e1a00004 	mov	r0, r4
   12448:	e28dd030 	add	sp, sp, #48	; 0x30
   1244c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12450:	e12fff1e 	bx	lr
   12454:	00025f1a 	.word	0x00025f1a
   12458:	00025f29 	.word	0x00025f29

0001245c <fat16_close>:
 * \param[in] fs The filesystem to close.
 * \see fat16_open
 */
void fat16_close(struct fat16_fs_struct* fs)
{
    if(!fs)
   1245c:	e3500000 	cmp	r0, #0
 *
 * \param[in] fs The filesystem to close.
 * \see fat16_open
 */
void fat16_close(struct fat16_fs_struct* fs)
{
   12460:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if(!fs)
        return;

    free(fs);
   12464:	1b00166e 	blne	17e24 <free>
}
   12468:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1246c:	e12fff1e 	bx	lr

00012470 <fat16_open_file>:
 * \returns The file handle, or 0 on failure.
 * \see fat16_close_file
 */
struct fat16_file_struct* fat16_open_file(struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT16_ATTRIB_DIR))
   12470:	e3500000 	cmp	r0, #0
   12474:	13510000 	cmpne	r1, #0
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat16_close_file
 */
struct fat16_file_struct* fat16_open_file(struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
   12478:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if(!fs || !dir_entry || (dir_entry->attributes & FAT16_ATTRIB_DIR))
   1247c:	13a04000 	movne	r4, #0
   12480:	03a04001 	moveq	r4, #1
   12484:	e1a05001 	mov	r5, r1
   12488:	e1a06000 	mov	r6, r0
        return 0;
   1248c:	03a04000 	moveq	r4, #0
 * \returns The file handle, or 0 on failure.
 * \see fat16_close_file
 */
struct fat16_file_struct* fat16_open_file(struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT16_ATTRIB_DIR))
   12490:	0a00000e 	beq	124d0 <fat16_open_file+0x60>
   12494:	e5d17020 	ldrb	r7, [r1, #32]
   12498:	e2177010 	ands	r7, r7, #16
   1249c:	1a00000b 	bne	124d0 <fat16_open_file+0x60>
        return 0;

    struct fat16_file_struct* fd = malloc(sizeof(*fd));
   124a0:	e3a00038 	mov	r0, #56	; 0x38
   124a4:	eb001659 	bl	17e10 <malloc>
    if(!fd)
   124a8:	e2504000 	subs	r4, r0, #0
   124ac:	0a000007 	beq	124d0 <fat16_open_file+0x60>
        return 0;

    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
   124b0:	e2840004 	add	r0, r4, #4
   124b4:	e1a01005 	mov	r1, r5
   124b8:	e3a0202c 	mov	r2, #44	; 0x2c
   124bc:	eb001824 	bl	18554 <memcpy>
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;
   124c0:	e1d532b2 	ldrh	r3, [r5, #34]	; 0x22
    struct fat16_file_struct* fd = malloc(sizeof(*fd));
    if(!fd)
        return 0;

    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    fd->fs = fs;
   124c4:	e5846000 	str	r6, [r4]
    fd->pos = 0;
   124c8:	e5847030 	str	r7, [r4, #48]	; 0x30
    fd->pos_cluster = dir_entry->cluster;
   124cc:	e1c433b4 	strh	r3, [r4, #52]	; 0x34

    return fd;
}
   124d0:	e1a00004 	mov	r0, r4
   124d4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   124d8:	e12fff1e 	bx	lr

000124dc <fat16_close_file>:
 * \param[in] fd The file handle of the file to close.
 * \see fat16_open_file
 */
void fat16_close_file(struct fat16_file_struct* fd)
{
    if(fd)
   124dc:	e3500000 	cmp	r0, #0
 *
 * \param[in] fd The file handle of the file to close.
 * \see fat16_open_file
 */
void fat16_close_file(struct fat16_file_struct* fd)
{
   124e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if(fd)
        free(fd);
   124e4:	1b00164e 	blne	17e24 <free>
}
   124e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   124ec:	e12fff1e 	bx	lr

000124f0 <fat16_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat16_write_file
 */
int16_t fat16_read_file(struct fat16_file_struct* fd, uint8_t* buffer, uint16_t buffer_len)
{
   124f0:	e1a02802 	lsl	r2, r2, #16
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   124f4:	e3500000 	cmp	r0, #0
   124f8:	13510000 	cmpne	r1, #0
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat16_write_file
 */
int16_t fat16_read_file(struct fat16_file_struct* fd, uint8_t* buffer, uint16_t buffer_len)
{
   124fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12500:	e1a06822 	lsr	r6, r2, #16
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
   12504:	e1a09001 	mov	r9, r1
   12508:	e1a04000 	mov	r4, r0
   1250c:	0a000055 	beq	12668 <fat16_read_file+0x178>
   12510:	e3560000 	cmp	r6, #0
   12514:	0a000053 	beq	12668 <fat16_read_file+0x178>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
   12518:	e5907030 	ldr	r7, [r0, #48]	; 0x30
   1251c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   12520:	e0862007 	add	r2, r6, r7
   12524:	e1520003 	cmp	r2, r3
   12528:	9a000003 	bls	1253c <fat16_read_file+0x4c>
        buffer_len = fd->dir_entry.file_size - fd->pos;
   1252c:	e0676003 	rsb	r6, r7, r3
   12530:	e1a06806 	lsl	r6, r6, #16
    if(buffer_len == 0)
   12534:	e1b06826 	lsrs	r6, r6, #16
   12538:	0a00004b 	beq	1266c <fat16_read_file+0x17c>
        return 0;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint16_t cluster_num = fd->pos_cluster;
   1253c:	e1d453b4 	ldrh	r5, [r4, #52]	; 0x34
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
        return 0;

    uint16_t cluster_size = fd->fs->header.cluster_size;
   12540:	e5943000 	ldr	r3, [r4]
    uint16_t cluster_num = fd->pos_cluster;
    uint16_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = fd->pos % cluster_size;

    /* find cluster in which to start reading */
    if(!cluster_num)
   12544:	e3550000 	cmp	r5, #0
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
        return 0;

    uint16_t cluster_size = fd->fs->header.cluster_size;
   12548:	e1d381b2 	ldrh	r8, [r3, #18]
    uint16_t cluster_num = fd->pos_cluster;
    uint16_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = fd->pos % cluster_size;

    /* find cluster in which to start reading */
    if(!cluster_num)
   1254c:	1a000012 	bne	1259c <fat16_read_file+0xac>
    {
        cluster_num = fd->dir_entry.cluster;
   12550:	e1d452b6 	ldrh	r5, [r4, #38]	; 0x26

        if(!cluster_num)
   12554:	e3550000 	cmp	r5, #0
   12558:	1a000003 	bne	1256c <fat16_read_file+0x7c>
        {
            if(!fd->pos)
                return 0;
   1255c:	e3570000 	cmp	r7, #0
   12560:	e59f6114 	ldr	r6, [pc, #276]	; 1267c <fat16_read_file+0x18c>
   12564:	03a06000 	moveq	r6, #0
   12568:	ea00003f 	b	1266c <fat16_read_file+0x17c>
            else
                return -1;
        }

        if(fd->pos)
   1256c:	e3570000 	cmp	r7, #0
   12570:	11a0a007 	movne	sl, r7
   12574:	1a000006 	bne	12594 <fat16_read_file+0xa4>
   12578:	ea000007 	b	1259c <fat16_read_file+0xac>
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat16_get_next_cluster(fd->fs, cluster_num);
   1257c:	e1a01005 	mov	r1, r5
   12580:	e5940000 	ldr	r0, [r4]
   12584:	ebfffdef 	bl	11d48 <fat16_get_next_cluster>
                if(!cluster_num)
   12588:	e2505000 	subs	r5, r0, #0
 * \param[out] buffer The buffer into which to write.
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat16_write_file
 */
int16_t fat16_read_file(struct fat16_file_struct* fd, uint8_t* buffer, uint16_t buffer_len)
   1258c:	e068a00a 	rsb	sl, r8, sl
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat16_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
   12590:	0a000034 	beq	12668 <fat16_read_file+0x178>
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
   12594:	e15a0008 	cmp	sl, r8
   12598:	2afffff7 	bcs	1257c <fat16_read_file+0x8c>
        return 0;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    uint16_t cluster_num = fd->pos_cluster;
    uint16_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = fd->pos % cluster_size;
   1259c:	e1a00007 	mov	r0, r7
   125a0:	e1a01008 	mov	r1, r8
   125a4:	eb00481c 	bl	2461c <__umodsi3>
   125a8:	e1a00800 	lsl	r0, r0, #16
   125ac:	e1a0b820 	lsr	fp, r0, #16
   125b0:	e1a07006 	mov	r7, r6
    do
    {
        /* calculate data size to copy from cluster */
        uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
        (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
   125b4:	e06ba008 	rsb	sl, fp, r8

    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
   125b8:	e5942000 	ldr	r2, [r4]
        (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
   125bc:	e1a0a80a 	lsl	sl, sl, #16
   125c0:	e1a0a82a 	lsr	sl, sl, #16
   125c4:	e15a0007 	cmp	sl, r7
   125c8:	21a0a007 	movcs	sl, r7
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
   125cc:	e5923000 	ldr	r3, [r2]

    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
   125d0:	e5922018 	ldr	r2, [r2, #24]
        (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
   125d4:	e1a0a80a 	lsl	sl, sl, #16

    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
   125d8:	e08b2002 	add	r2, fp, r2
        (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
        uint16_t copy_length = cluster_size - first_cluster_offset;
   125dc:	e1a0a82a 	lsr	sl, sl, #16
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
        (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
   125e0:	e2450002 	sub	r0, r5, #2
        uint16_t copy_length = cluster_size - first_cluster_offset;
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
   125e4:	e0202098 	mla	r0, r8, r0, r2
   125e8:	e1a01009 	mov	r1, r9
   125ec:	e1a0200a 	mov	r2, sl
   125f0:	e593c000 	ldr	ip, [r3]
   125f4:	e1a0e00f 	mov	lr, pc
   125f8:	e12fff1c 	bx	ip
   125fc:	e3500000 	cmp	r0, #0
   12600:	0a00000f 	beq	12644 <fat16_read_file+0x154>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
        fd->pos += copy_length;
   12604:	e5943030 	ldr	r3, [r4, #48]	; 0x30
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
   12608:	e06a7007 	rsb	r7, sl, r7
        fd->pos += copy_length;
   1260c:	e083300a 	add	r3, r3, sl
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
   12610:	e089900a 	add	r9, r9, sl
        buffer_left -= copy_length;
        fd->pos += copy_length;

        if(first_cluster_offset + copy_length >= cluster_size)
   12614:	e08ba00a 	add	sl, fp, sl
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
   12618:	e1a07807 	lsl	r7, r7, #16
        fd->pos += copy_length;

        if(first_cluster_offset + copy_length >= cluster_size)
   1261c:	e15a0008 	cmp	sl, r8
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
   12620:	e1a07827 	lsr	r7, r7, #16
        fd->pos += copy_length;
   12624:	e5843030 	str	r3, [r4, #48]	; 0x30

        if(first_cluster_offset + copy_length >= cluster_size)
   12628:	ba00000a 	blt	12658 <fat16_read_file+0x168>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat16_get_next_cluster(fd->fs, cluster_num)))
   1262c:	e1a01005 	mov	r1, r5
   12630:	e5940000 	ldr	r0, [r4]
   12634:	ebfffdc3 	bl	11d48 <fat16_get_next_cluster>
   12638:	e2505000 	subs	r5, r0, #0
   1263c:	1a000004 	bne	12654 <fat16_read_file+0x164>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
   12640:	e1c453b4 	strh	r5, [r4, #52]	; 0x34
                return buffer_len - buffer_left;
   12644:	e0676006 	rsb	r6, r7, r6
   12648:	e1a06806 	lsl	r6, r6, #16
   1264c:	e1a06826 	lsr	r6, r6, #16
   12650:	ea000005 	b	1266c <fat16_read_file+0x17c>
        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat16_get_next_cluster(fd->fs, cluster_num)))
            {
                first_cluster_offset = 0;
   12654:	e3a0b000 	mov	fp, #0
        }

        fd->pos_cluster = cluster_num;

    }
    while(buffer_left > 0); /* check if we are done */
   12658:	e3570000 	cmp	r7, #0
                fd->pos_cluster = 0;
                return buffer_len - buffer_left;
            }
        }

        fd->pos_cluster = cluster_num;
   1265c:	e1c453b4 	strh	r5, [r4, #52]	; 0x34

    }
    while(buffer_left > 0); /* check if we are done */
   12660:	1affffd3 	bne	125b4 <fat16_read_file+0xc4>
   12664:	ea000000 	b	1266c <fat16_read_file+0x17c>
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat16_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
                    return -1;
   12668:	e59f600c 	ldr	r6, [pc, #12]	; 1267c <fat16_read_file+0x18c>
        fd->pos_cluster = cluster_num;

    }
    while(buffer_left > 0); /* check if we are done */

    return buffer_len;
   1266c:	e1a06806 	lsl	r6, r6, #16
}
   12670:	e1a00846 	asr	r0, r6, #16
   12674:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12678:	e12fff1e 	bx	lr
   1267c:	0000ffff 	.word	0x0000ffff

00012680 <fat16_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat16_read_file
 */
int16_t fat16_write_file(struct fat16_file_struct* fd, const uint8_t* buffer, uint16_t buffer_len)
{
   12680:	e1a02802 	lsl	r2, r2, #16
    #if FAT16_WRITE_SUPPORT
        /* check arguments */
        if(!fd || !buffer || buffer_len < 1)
   12684:	e3500000 	cmp	r0, #0
   12688:	13510000 	cmpne	r1, #0
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat16_read_file
 */
int16_t fat16_write_file(struct fat16_file_struct* fd, const uint8_t* buffer, uint16_t buffer_len)
{
   1268c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12690:	e1a0b822 	lsr	fp, r2, #16
    #if FAT16_WRITE_SUPPORT
        /* check arguments */
        if(!fd || !buffer || buffer_len < 1)
   12694:	e1a0a001 	mov	sl, r1
   12698:	e1a04000 	mov	r4, r0
   1269c:	0a000072 	beq	1286c <fat16_write_file+0x1ec>
   126a0:	e35b0000 	cmp	fp, #0
   126a4:	0a000070 	beq	1286c <fat16_write_file+0x1ec>
            return -1;
        if(fd->pos > fd->dir_entry.file_size)
   126a8:	e5908030 	ldr	r8, [r0, #48]	; 0x30
   126ac:	e5903028 	ldr	r3, [r0, #40]	; 0x28
   126b0:	e1580003 	cmp	r8, r3
   126b4:	8a00006c 	bhi	1286c <fat16_write_file+0x1ec>
            return -1;
    
        uint16_t cluster_size = fd->fs->header.cluster_size;
        uint16_t cluster_num = fd->pos_cluster;
   126b8:	e1d453b4 	ldrh	r5, [r4, #52]	; 0x34
        if(!fd || !buffer || buffer_len < 1)
            return -1;
        if(fd->pos > fd->dir_entry.file_size)
            return -1;
    
        uint16_t cluster_size = fd->fs->header.cluster_size;
   126bc:	e5900000 	ldr	r0, [r0]
        uint16_t cluster_num = fd->pos_cluster;
        uint16_t buffer_left = buffer_len;
        uint16_t first_cluster_offset = fd->pos % cluster_size;
    
        /* find cluster in which to start writing */
        if(!cluster_num)
   126c0:	e3550000 	cmp	r5, #0
        if(!fd || !buffer || buffer_len < 1)
            return -1;
        if(fd->pos > fd->dir_entry.file_size)
            return -1;
    
        uint16_t cluster_size = fd->fs->header.cluster_size;
   126c4:	e1d071b2 	ldrh	r7, [r0, #18]
        uint16_t cluster_num = fd->pos_cluster;
        uint16_t buffer_left = buffer_len;
        uint16_t first_cluster_offset = fd->pos % cluster_size;
    
        /* find cluster in which to start writing */
        if(!cluster_num)
   126c8:	1a00001f 	bne	1274c <fat16_write_file+0xcc>
        {
            cluster_num = fd->dir_entry.cluster;
   126cc:	e1d452b6 	ldrh	r5, [r4, #38]	; 0x26
    
            if(!cluster_num)
   126d0:	e3550000 	cmp	r5, #0
   126d4:	1a000009 	bne	12700 <fat16_write_file+0x80>
            {
                if(!fd->pos)
   126d8:	e3580000 	cmp	r8, #0
                    if(!cluster_num)
                        return -1;
                }
                else
                {
                    return -2;
   126dc:	159f61a4 	ldrne	r6, [pc, #420]	; 12888 <fat16_write_file+0x208>
        {
            cluster_num = fd->dir_entry.cluster;
    
            if(!cluster_num)
            {
                if(!fd->pos)
   126e0:	1a000064 	bne	12878 <fat16_write_file+0x1f8>
                {
                    /* empty file */
                    fd->dir_entry.cluster = cluster_num = fat16_append_clusters(fd->fs, 0, 1);
   126e4:	e1a01008 	mov	r1, r8
   126e8:	e3a02001 	mov	r2, #1
   126ec:	ebfffde9 	bl	11e98 <fat16_append_clusters>
                    if(!cluster_num)
   126f0:	e3500000 	cmp	r0, #0
            if(!cluster_num)
            {
                if(!fd->pos)
                {
                    /* empty file */
                    fd->dir_entry.cluster = cluster_num = fat16_append_clusters(fd->fs, 0, 1);
   126f4:	e1a05000 	mov	r5, r0
   126f8:	e1c402b6 	strh	r0, [r4, #38]	; 0x26
                    if(!cluster_num)
   126fc:	0a00005a 	beq	1286c <fat16_write_file+0x1ec>
                {
                    return -2;
                }
            }
    
            if(fd->pos)
   12700:	e5946030 	ldr	r6, [r4, #48]	; 0x30
   12704:	e3560000 	cmp	r6, #0
   12708:	1a00000d 	bne	12744 <fat16_write_file+0xc4>
   1270c:	ea00000e 	b	1274c <fat16_write_file+0xcc>
                uint32_t pos = fd->pos;
                uint16_t cluster_num_next;
                while(pos >= cluster_size)
                {
                    pos -= cluster_size;
                    cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
   12710:	e5940000 	ldr	r0, [r4]
   12714:	e1a01005 	mov	r1, r5
   12718:	ebfffd8a 	bl	11d48 <fat16_get_next_cluster>
 * \param[in] buffer The buffer from which to read the data to be written.
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat16_read_file
 */
int16_t fat16_write_file(struct fat16_file_struct* fd, const uint8_t* buffer, uint16_t buffer_len)
   1271c:	e0676006 	rsb	r6, r7, r6
                uint16_t cluster_num_next;
                while(pos >= cluster_size)
                {
                    pos -= cluster_size;
                    cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
                    if(!cluster_num_next && pos == 0)
   12720:	e3500000 	cmp	r0, #0
   12724:	03560000 	cmpeq	r6, #0
        /* the file exactly ends on a cluster boundary, and we append to it */
                        cluster_num_next = fat16_append_clusters(fd->fs, cluster_num, 1);
   12728:	05940000 	ldreq	r0, [r4]
   1272c:	01a01005 	moveq	r1, r5
   12730:	03a02001 	moveq	r2, #1
   12734:	0bfffdd7 	bleq	11e98 <fat16_append_clusters>
                    if(!cluster_num_next)
   12738:	e3500000 	cmp	r0, #0
   1273c:	0a00004c 	beq	12874 <fat16_write_file+0x1f4>
                        return -3;
    
                    cluster_num = cluster_num_next;
   12740:	e1a05000 	mov	r5, r0
    
            if(fd->pos)
            {
                uint32_t pos = fd->pos;
                uint16_t cluster_num_next;
                while(pos >= cluster_size)
   12744:	e1560007 	cmp	r6, r7
   12748:	2afffff0 	bcs	12710 <fat16_write_file+0x90>
            return -1;
    
        uint16_t cluster_size = fd->fs->header.cluster_size;
        uint16_t cluster_num = fd->pos_cluster;
        uint16_t buffer_left = buffer_len;
        uint16_t first_cluster_offset = fd->pos % cluster_size;
   1274c:	e1a00008 	mov	r0, r8
   12750:	e1a01007 	mov	r1, r7
   12754:	eb0047b0 	bl	2461c <__umodsi3>
   12758:	e1a00800 	lsl	r0, r0, #16
   1275c:	e1a09820 	lsr	r9, r0, #16
   12760:	e1a0600b 	mov	r6, fp
    
        /* write data */
        do
        {
            /* calculate data size to write to cluster */
            uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
   12764:	e5942000 	ldr	r2, [r4]
            (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
            uint16_t write_length = cluster_size - first_cluster_offset;
   12768:	e0698007 	rsb	r8, r9, r7
            if(write_length > buffer_left)
                write_length = buffer_left;
    
            /* write data which fits into the current cluster */
            if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
   1276c:	e5923000 	ldr	r3, [r2]
        do
        {
            /* calculate data size to write to cluster */
            uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
            (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
            uint16_t write_length = cluster_size - first_cluster_offset;
   12770:	e1a08808 	lsl	r8, r8, #16
    
        /* write data */
        do
        {
            /* calculate data size to write to cluster */
            uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
   12774:	e5922018 	ldr	r2, [r2, #24]
            (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
            uint16_t write_length = cluster_size - first_cluster_offset;
   12778:	e1a08828 	lsr	r8, r8, #16
   1277c:	e1580006 	cmp	r8, r6
   12780:	21a08006 	movcs	r8, r6
    
        /* write data */
        do
        {
            /* calculate data size to write to cluster */
            uint32_t cluster_offset = fd->fs->header.cluster_zero_offset +
   12784:	e0892002 	add	r2, r9, r2
            (uint32_t) (cluster_num - 2) * cluster_size + first_cluster_offset;
   12788:	e2450002 	sub	r0, r5, #2
            uint16_t write_length = cluster_size - first_cluster_offset;
            if(write_length > buffer_left)
                write_length = buffer_left;
    
            /* write data which fits into the current cluster */
            if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
   1278c:	e0202097 	mla	r0, r7, r0, r2
   12790:	e1a0100a 	mov	r1, sl
   12794:	e1a02008 	mov	r2, r8
   12798:	e593c008 	ldr	ip, [r3, #8]
   1279c:	e1a0e00f 	mov	lr, pc
   127a0:	e12fff1c 	bx	ip
   127a4:	e3500000 	cmp	r0, #0
   127a8:	0a00001d 	beq	12824 <fat16_write_file+0x1a4>
                break;
    
            /* calculate new file position */
            buffer += write_length;
            buffer_left -= write_length;
            fd->pos += write_length;
   127ac:	e5943030 	ldr	r3, [r4, #48]	; 0x30
            if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
                break;
    
            /* calculate new file position */
            buffer += write_length;
            buffer_left -= write_length;
   127b0:	e0686006 	rsb	r6, r8, r6
            fd->pos += write_length;
   127b4:	e0833008 	add	r3, r3, r8
            /* write data which fits into the current cluster */
            if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
                break;
    
            /* calculate new file position */
            buffer += write_length;
   127b8:	e08aa008 	add	sl, sl, r8
            buffer_left -= write_length;
            fd->pos += write_length;
    
            if(first_cluster_offset + write_length >= cluster_size)
   127bc:	e0898008 	add	r8, r9, r8
            if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
                break;
    
            /* calculate new file position */
            buffer += write_length;
            buffer_left -= write_length;
   127c0:	e1a06806 	lsl	r6, r6, #16
            fd->pos += write_length;
    
            if(first_cluster_offset + write_length >= cluster_size)
   127c4:	e1580007 	cmp	r8, r7
            if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
                break;
    
            /* calculate new file position */
            buffer += write_length;
            buffer_left -= write_length;
   127c8:	e1a06826 	lsr	r6, r6, #16
            fd->pos += write_length;
   127cc:	e5843030 	str	r3, [r4, #48]	; 0x30
    
            if(first_cluster_offset + write_length >= cluster_size)
   127d0:	ba000010 	blt	12818 <fat16_write_file+0x198>
            {
                /* we are on a cluster boundary, so get the next cluster */
                uint16_t cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
   127d4:	e5940000 	ldr	r0, [r4]
   127d8:	e1a01005 	mov	r1, r5
   127dc:	ebfffd59 	bl	11d48 <fat16_get_next_cluster>
                if(!cluster_num_next && buffer_left > 0)
   127e0:	e2703001 	rsbs	r3, r0, #1
   127e4:	33a03000 	movcc	r3, #0
   127e8:	e3560000 	cmp	r6, #0
   127ec:	03a03000 	moveq	r3, #0
   127f0:	e3530000 	cmp	r3, #0
        /* we reached the last cluster, append a new one */
                    cluster_num_next = fat16_append_clusters(fd->fs, cluster_num, 1);
   127f4:	15940000 	ldrne	r0, [r4]
   127f8:	11a01005 	movne	r1, r5
   127fc:	13a02001 	movne	r2, #1
   12800:	1bfffda4 	blne	11e98 <fat16_append_clusters>
                if(!cluster_num_next)
   12804:	e3500000 	cmp	r0, #0
                {
                    fd->pos_cluster = 0;
   12808:	01c403b4 	strheq	r0, [r4, #52]	; 0x34
                    break;
   1280c:	0a000004 	beq	12824 <fat16_write_file+0x1a4>
                /* we are on a cluster boundary, so get the next cluster */
                uint16_t cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next && buffer_left > 0)
        /* we reached the last cluster, append a new one */
                    cluster_num_next = fat16_append_clusters(fd->fs, cluster_num, 1);
                if(!cluster_num_next)
   12810:	e1a05000 	mov	r5, r0
                    fd->pos_cluster = 0;
                    break;
                }
    
                cluster_num = cluster_num_next;
                first_cluster_offset = 0;
   12814:	e3a09000 	mov	r9, #0
            }
    
            fd->pos_cluster = cluster_num;
    
        }
        while(buffer_left > 0); /* check if we are done */
   12818:	e3560000 	cmp	r6, #0
    
                cluster_num = cluster_num_next;
                first_cluster_offset = 0;
            }
    
            fd->pos_cluster = cluster_num;
   1281c:	e1c453b4 	strh	r5, [r4, #52]	; 0x34
    
        }
        while(buffer_left > 0); /* check if we are done */
   12820:	1affffcf 	bne	12764 <fat16_write_file+0xe4>
    
        /* update directory entry */
        if(fd->pos > fd->dir_entry.file_size)
   12824:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   12828:	e5945028 	ldr	r5, [r4, #40]	; 0x28
   1282c:	e1530005 	cmp	r3, r5
   12830:	9a000009 	bls	1285c <fat16_write_file+0x1dc>
        {
            uint32_t size_old = fd->dir_entry.file_size;
    
            /* update file size */
            fd->dir_entry.file_size = fd->pos;
   12834:	e5843028 	str	r3, [r4, #40]	; 0x28
            /* write directory entry */
            if(!fat16_write_dir_entry(fd->fs, &fd->dir_entry))
   12838:	e5940000 	ldr	r0, [r4]
   1283c:	e2841004 	add	r1, r4, #4
   12840:	ebfffdee 	bl	12000 <fat16_write_dir_entry>
   12844:	e3500000 	cmp	r0, #0
            {
                /* We do not return an error here since we actually wrote
                                                             * some data to disk. So we calculate the amount of data
                                                             * we wrote to disk and which lies within the old file size.
                                                             */
                buffer_left = fd->pos - size_old;
   12848:	05946030 	ldreq	r6, [r4, #48]	; 0x30
   1284c:	00656006 	rsbeq	r6, r5, r6
   12850:	01a06806 	lsleq	r6, r6, #16
                fd->pos = size_old;
   12854:	05845030 	streq	r5, [r4, #48]	; 0x30
            {
                /* We do not return an error here since we actually wrote
                                                             * some data to disk. So we calculate the amount of data
                                                             * we wrote to disk and which lies within the old file size.
                                                             */
                buffer_left = fd->pos - size_old;
   12858:	01a06826 	lsreq	r6, r6, #16
                fd->pos = size_old;
            }
        }
    
        return buffer_len - buffer_left;
   1285c:	e066600b 	rsb	r6, r6, fp
   12860:	e1a06806 	lsl	r6, r6, #16
   12864:	e1a06826 	lsr	r6, r6, #16
   12868:	ea000002 	b	12878 <fat16_write_file+0x1f8>
                if(!fd->pos)
                {
                    /* empty file */
                    fd->dir_entry.cluster = cluster_num = fat16_append_clusters(fd->fs, 0, 1);
                    if(!cluster_num)
                        return -1;
   1286c:	e59f6018 	ldr	r6, [pc, #24]	; 1288c <fat16_write_file+0x20c>
   12870:	ea000000 	b	12878 <fat16_write_file+0x1f8>
                    cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
                    if(!cluster_num_next && pos == 0)
        /* the file exactly ends on a cluster boundary, and we append to it */
                        cluster_num_next = fat16_append_clusters(fd->fs, cluster_num, 1);
                    if(!cluster_num_next)
                        return -3;
   12874:	e59f6014 	ldr	r6, [pc, #20]	; 12890 <fat16_write_file+0x210>
                buffer_left = fd->pos - size_old;
                fd->pos = size_old;
            }
        }
    
        return buffer_len - buffer_left;
   12878:	e1a06806 	lsl	r6, r6, #16
    
    #else
        return -4;
    #endif
}
   1287c:	e1a00846 	asr	r0, r6, #16
   12880:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12884:	e12fff1e 	bx	lr
   12888:	0000fffe 	.word	0x0000fffe
   1288c:	0000ffff 	.word	0x0000ffff
   12890:	0000fffd 	.word	0x0000fffd

00012894 <fat16_resize_file>:
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_resize_file(struct fat16_file_struct* fd, uint32_t size)
{
   12894:	e92d47f1 	push	{r0, r4, r5, r6, r7, r8, r9, sl, lr}
    #if FAT16_WRITE_SUPPORT
        if(!fd)
   12898:	e2504000 	subs	r4, r0, #0
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_resize_file(struct fat16_file_struct* fd, uint32_t size)
{
   1289c:	e1a07001 	mov	r7, r1
    #if FAT16_WRITE_SUPPORT
        if(!fd)
            return 0;
   128a0:	01a00004 	moveq	r0, r4
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_resize_file(struct fat16_file_struct* fd, uint32_t size)
{
    #if FAT16_WRITE_SUPPORT
        if(!fd)
   128a4:	0a00005a 	beq	12a14 <fat16_resize_file+0x180>
            return 0;
    
        uint16_t cluster_num = fd->dir_entry.cluster;
   128a8:	e1d452b6 	ldrh	r5, [r4, #38]	; 0x26
        uint16_t cluster_size = fd->fs->header.cluster_size;
        uint32_t size_new = size;
    
        do
        {
            if(cluster_num == 0 && size_new == 0)
   128ac:	e2719001 	rsbs	r9, r1, #1
    #if FAT16_WRITE_SUPPORT
        if(!fd)
            return 0;
    
        uint16_t cluster_num = fd->dir_entry.cluster;
        uint16_t cluster_size = fd->fs->header.cluster_size;
   128b0:	e5943000 	ldr	r3, [r4]
        uint32_t size_new = size;
    
        do
        {
            if(cluster_num == 0 && size_new == 0)
   128b4:	33a09000 	movcc	r9, #0
   128b8:	e3550000 	cmp	r5, #0
   128bc:	03510000 	cmpeq	r1, #0
    #if FAT16_WRITE_SUPPORT
        if(!fd)
            return 0;
    
        uint16_t cluster_num = fd->dir_entry.cluster;
        uint16_t cluster_size = fd->fs->header.cluster_size;
   128c0:	e1d381b2 	ldrh	r8, [r3, #18]
        uint32_t size_new = size;
    
        do
        {
            if(cluster_num == 0 && size_new == 0)
   128c4:	11a06001 	movne	r6, r1
   128c8:	1a000007 	bne	128ec <fat16_resize_file+0x58>
   128cc:	ea00004a 	b	129fc <fat16_resize_file+0x168>
    
            /* seek to the next cluster as long as we need the space */
            while(size_new > cluster_size)
            {
                /* get next cluster of file */
                uint16_t cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
   128d0:	e5940000 	ldr	r0, [r4]
   128d4:	e1a01005 	mov	r1, r5
   128d8:	ebfffd1a 	bl	11d48 <fat16_get_next_cluster>
                if(cluster_num_next)
   128dc:	e3500000 	cmp	r0, #0
   128e0:	0a000003 	beq	128f4 <fat16_resize_file+0x60>
 *
 * \param[in] fd The file decriptor of the file which to resize.
 * \param[in] size The new size of the file.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_resize_file(struct fat16_file_struct* fd, uint32_t size)
   128e4:	e0686006 	rsb	r6, r8, r6
            {
                /* get next cluster of file */
                uint16_t cluster_num_next = fat16_get_next_cluster(fd->fs, cluster_num);
                if(cluster_num_next)
                {
                    cluster_num = cluster_num_next;
   128e8:	e1a05000 	mov	r5, r0
            if(cluster_num == 0 && size_new == 0)
        /* the file stays empty */
                break;
    
            /* seek to the next cluster as long as we need the space */
            while(size_new > cluster_size)
   128ec:	e1560008 	cmp	r6, r8
   128f0:	8afffff6 	bhi	128d0 <fat16_resize_file+0x3c>
                {
                    break;
                }
            }
    
            if(size_new > cluster_size || cluster_num == 0)
   128f4:	e275a001 	rsbs	sl, r5, #1
   128f8:	33a0a000 	movcc	sl, #0
   128fc:	e1560008 	cmp	r6, r8
   12900:	91a0300a 	movls	r3, sl
   12904:	838a3001 	orrhi	r3, sl, #1
   12908:	e3530000 	cmp	r3, #0
   1290c:	0a000011 	beq	12958 <fat16_resize_file+0xc4>
            {
                /* Allocate new cluster chain and append
                                                             * it to the existing one, if available.
                                                             */
                uint16_t cluster_count = size_new / cluster_size;
   12910:	e1a01008 	mov	r1, r8
   12914:	e1a00006 	mov	r0, r6
   12918:	eb0046a7 	bl	243bc <__aeabi_uidiv>
   1291c:	e1a02800 	lsl	r2, r0, #16
   12920:	e1a02822 	lsr	r2, r2, #16
                if((uint32_t) cluster_count * cluster_size < size_new)
   12924:	e0030298 	mul	r3, r8, r2
   12928:	e1530006 	cmp	r3, r6
                    ++cluster_count;
   1292c:	32822001 	addcc	r2, r2, #1
   12930:	31a02802 	lslcc	r2, r2, #16
   12934:	31a02822 	lsrcc	r2, r2, #16
                uint16_t cluster_new_chain = fat16_append_clusters(fd->fs, cluster_num, cluster_count);
   12938:	e5940000 	ldr	r0, [r4]
   1293c:	e1a01005 	mov	r1, r5
   12940:	ebfffd54 	bl	11e98 <fat16_append_clusters>
                if(!cluster_new_chain)
   12944:	e3500000 	cmp	r0, #0
   12948:	0a000031 	beq	12a14 <fat16_resize_file+0x180>
                    return 0;
    
                if(!cluster_num)
   1294c:	e35a0000 	cmp	sl, #0
                {
                    cluster_num = cluster_new_chain;
                    fd->dir_entry.cluster = cluster_num;
   12950:	11c402b6 	strhne	r0, [r4, #38]	; 0x26
   12954:	11a05000 	movne	r5, r0
                }
            }
    
            /* write new directory entry */
            fd->dir_entry.file_size = size;
            if(size == 0)
   12958:	e3590000 	cmp	r9, #0
                fd->dir_entry.cluster = 0;
   1295c:	13a03000 	movne	r3, #0
   12960:	11c432b6 	strhne	r3, [r4, #38]	; 0x26
                    fd->dir_entry.cluster = cluster_num;
                }
            }
    
            /* write new directory entry */
            fd->dir_entry.file_size = size;
   12964:	e5847028 	str	r7, [r4, #40]	; 0x28
            if(size == 0)
                fd->dir_entry.cluster = 0;
            if(!fat16_write_dir_entry(fd->fs, &fd->dir_entry))
   12968:	e5940000 	ldr	r0, [r4]
   1296c:	e2841004 	add	r1, r4, #4
   12970:	ebfffda2 	bl	12000 <fat16_write_dir_entry>
   12974:	e3500000 	cmp	r0, #0
   12978:	0a000025 	beq	12a14 <fat16_resize_file+0x180>
                return 0;
    
            if(size == 0)
   1297c:	e3590000 	cmp	r9, #0
            {
                /* free all clusters of file */
                fat16_free_clusters(fd->fs, cluster_num);
   12980:	15940000 	ldrne	r0, [r4]
   12984:	11a01005 	movne	r1, r5
            if(size == 0)
                fd->dir_entry.cluster = 0;
            if(!fat16_write_dir_entry(fd->fs, &fd->dir_entry))
                return 0;
    
            if(size == 0)
   12988:	1a00001a 	bne	129f8 <fat16_resize_file+0x164>
            {
                /* free all clusters of file */
                fat16_free_clusters(fd->fs, cluster_num);
            }
            else if(size_new <= cluster_size)
   1298c:	e1560008 	cmp	r6, r8
   12990:	8a000019 	bhi	129fc <fat16_resize_file+0x168>
            {
                /* free all clusters no longer needed */
                fat16_terminate_clusters(fd->fs, cluster_num);
   12994:	e5946000 	ldr	r6, [r4]
 * \see fat16_free_clusters
 */
uint8_t fat16_terminate_clusters(const struct fat16_fs_struct* fs, uint16_t cluster_num)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs || cluster_num < 2)
   12998:	e3560000 	cmp	r6, #0
   1299c:	13550001 	cmpne	r5, #1
   129a0:	9a000015 	bls	129fc <fat16_resize_file+0x168>
            return 0;
    
        /* fetch next cluster before overwriting the cluster entry */
        uint16_t cluster_num_next = fat16_get_next_cluster(fs, cluster_num);
   129a4:	e1a01005 	mov	r1, r5
   129a8:	e1a00006 	mov	r0, r6
   129ac:	ebfffce5 	bl	11d48 <fat16_get_next_cluster>
    
        /* mark cluster as the last one */
        uint8_t buffer[2];
        buffer[0] = FAT16_CLUSTER_LAST_MAX & 0xff;
   129b0:	e3e03000 	mvn	r3, #0
   129b4:	e5cd3000 	strb	r3, [sp]
        buffer[1] = (FAT16_CLUSTER_LAST_MAX >> 8) & 0xff;
   129b8:	e5cd3001 	strb	r3, [sp, #1]
    #if FAT16_WRITE_SUPPORT
        if(!fs || cluster_num < 2)
            return 0;
    
        /* fetch next cluster before overwriting the cluster entry */
        uint16_t cluster_num_next = fat16_get_next_cluster(fs, cluster_num);
   129bc:	e1a08000 	mov	r8, r0
    
        /* mark cluster as the last one */
        uint8_t buffer[2];
        buffer[0] = FAT16_CLUSTER_LAST_MAX & 0xff;
        buffer[1] = (FAT16_CLUSTER_LAST_MAX >> 8) & 0xff;
        if(!fs->partition->device_write(fs->header.fat_offset + 2 * cluster_num, buffer, 2))
   129c0:	e5960008 	ldr	r0, [r6, #8]
   129c4:	e5963000 	ldr	r3, [r6]
   129c8:	e0800085 	add	r0, r0, r5, lsl #1
   129cc:	e1a0100d 	mov	r1, sp
   129d0:	e3a02002 	mov	r2, #2
   129d4:	e593c008 	ldr	ip, [r3, #8]
   129d8:	e1a0e00f 	mov	lr, pc
   129dc:	e12fff1c 	bx	ip
   129e0:	e3500000 	cmp	r0, #0
   129e4:	0a000004 	beq	129fc <fat16_resize_file+0x168>
            return 0;
    
        /* free remaining clusters */
        if(cluster_num_next)
   129e8:	e3580000 	cmp	r8, #0
   129ec:	0a000002 	beq	129fc <fat16_resize_file+0x168>
            return fat16_free_clusters(fs, cluster_num_next);
   129f0:	e1a00006 	mov	r0, r6
   129f4:	e1a01008 	mov	r1, r8
   129f8:	ebfffcf7 	bl	11ddc <fat16_free_clusters>
    
        }
        while(0);
    
        /* correct file position */
        if(size < fd->pos)
   129fc:	e5943030 	ldr	r3, [r4, #48]	; 0x30
   12a00:	e1570003 	cmp	r7, r3
        {
            fd->pos = size;
            fd->pos_cluster = 0;
   12a04:	33a03000 	movcc	r3, #0
        while(0);
    
        /* correct file position */
        if(size < fd->pos)
        {
            fd->pos = size;
   12a08:	35847030 	strcc	r7, [r4, #48]	; 0x30
            fd->pos_cluster = 0;
   12a0c:	31c433b4 	strhcc	r3, [r4, #52]	; 0x34
        }
    
        return 1;
   12a10:	e3a00001 	mov	r0, #1
    #else
        return 0;
    #endif
}
   12a14:	e8bd47f8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12a18:	e12fff1e 	bx	lr

00012a1c <fat16_seek_file>:
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_seek_file(struct fat16_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
   12a1c:	e3500000 	cmp	r0, #0
   12a20:	13510000 	cmpne	r1, #0
 *                   to this location before it returns.
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_seek_file(struct fat16_file_struct* fd, int32_t* offset, uint8_t whence)
{
   12a24:	e92d4070 	push	{r4, r5, r6, lr}
   12a28:	e20220ff 	and	r2, r2, #255	; 0xff
    if(!fd || !offset)
   12a2c:	e1a04000 	mov	r4, r0
   12a30:	e1a05001 	mov	r5, r1
   12a34:	13a00000 	movne	r0, #0
   12a38:	03a00001 	moveq	r0, #1
        return 0;
   12a3c:	03a00000 	moveq	r0, #0
 * \param[in] whence Affects the way \c offset is interpreted, see above.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat16_seek_file(struct fat16_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
   12a40:	0a000019 	beq	12aac <fat16_seek_file+0x90>
        return 0;

    uint32_t new_pos = fd->pos;
    switch(whence)
   12a44:	e3520001 	cmp	r2, #1
uint8_t fat16_seek_file(struct fat16_file_struct* fd, int32_t* offset, uint8_t whence)
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
   12a48:	e5946030 	ldr	r6, [r4, #48]	; 0x30
    switch(whence)
   12a4c:	0a000004 	beq	12a64 <fat16_seek_file+0x48>
    {
        case FAT16_SEEK_SET:
            new_pos = *offset;
   12a50:	35916000 	ldrcc	r6, [r1]
{
    if(!fd || !offset)
        return 0;

    uint32_t new_pos = fd->pos;
    switch(whence)
   12a54:	3a000007 	bcc	12a78 <fat16_seek_file+0x5c>
   12a58:	e3520002 	cmp	r2, #2
   12a5c:	1a000012 	bne	12aac <fat16_seek_file+0x90>
   12a60:	ea000001 	b	12a6c <fat16_seek_file+0x50>
    {
        case FAT16_SEEK_SET:
            new_pos = *offset;
            break;
        case FAT16_SEEK_CUR:
            new_pos += *offset;
   12a64:	e5913000 	ldr	r3, [r1]
   12a68:	ea000001 	b	12a74 <fat16_seek_file+0x58>
            break;
        case FAT16_SEEK_END:
            new_pos = fd->dir_entry.file_size + *offset;
   12a6c:	e5916000 	ldr	r6, [r1]
   12a70:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12a74:	e0866003 	add	r6, r6, r3
            break;
        default:
            return 0;
    }

    if(new_pos > fd->dir_entry.file_size && !fat16_resize_file(fd, new_pos))
   12a78:	e5943028 	ldr	r3, [r4, #40]	; 0x28
   12a7c:	e1560003 	cmp	r6, r3
   12a80:	9a000004 	bls	12a98 <fat16_seek_file+0x7c>
   12a84:	e1a00004 	mov	r0, r4
   12a88:	e1a01006 	mov	r1, r6
   12a8c:	ebffff80 	bl	12894 <fat16_resize_file>
   12a90:	e3500000 	cmp	r0, #0
   12a94:	0a000004 	beq	12aac <fat16_seek_file+0x90>
        return 0;

    fd->pos = new_pos;
    fd->pos_cluster = 0;
   12a98:	e3a03000 	mov	r3, #0
    }

    if(new_pos > fd->dir_entry.file_size && !fat16_resize_file(fd, new_pos))
        return 0;

    fd->pos = new_pos;
   12a9c:	e5846030 	str	r6, [r4, #48]	; 0x30
    fd->pos_cluster = 0;
   12aa0:	e1c433b4 	strh	r3, [r4, #52]	; 0x34

    *offset = new_pos;
   12aa4:	e5856000 	str	r6, [r5]
    return 1;
   12aa8:	e3a00001 	mov	r0, #1
}
   12aac:	e8bd4070 	pop	{r4, r5, r6, lr}
   12ab0:	e12fff1e 	bx	lr

00012ab4 <fat16_open_dir>:
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat16_close_dir
 */
struct fat16_dir_struct* fat16_open_dir(struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT16_ATTRIB_DIR))
   12ab4:	e3500000 	cmp	r0, #0
   12ab8:	13510000 	cmpne	r1, #0
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat16_close_dir
 */
struct fat16_dir_struct* fat16_open_dir(struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
   12abc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT16_ATTRIB_DIR))
   12ac0:	e1a07001 	mov	r7, r1
   12ac4:	e1a05000 	mov	r5, r0
   12ac8:	13a06000 	movne	r6, #0
   12acc:	03a06001 	moveq	r6, #1
        return 0;
   12ad0:	03a04000 	moveq	r4, #0
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat16_close_dir
 */
struct fat16_dir_struct* fat16_open_dir(struct fat16_fs_struct* fs, const struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT16_ATTRIB_DIR))
   12ad4:	0a00000c 	beq	12b0c <fat16_open_dir+0x58>
   12ad8:	e5d14020 	ldrb	r4, [r1, #32]
   12adc:	e2144010 	ands	r4, r4, #16
   12ae0:	0a000009 	beq	12b0c <fat16_open_dir+0x58>
        return 0;

    struct fat16_dir_struct* dd = malloc(sizeof(*dd));
   12ae4:	e3a00034 	mov	r0, #52	; 0x34
   12ae8:	eb0014c8 	bl	17e10 <malloc>
    if(!dd)
   12aec:	e2504000 	subs	r4, r0, #0
   12af0:	0a000005 	beq	12b0c <fat16_open_dir+0x58>
        return 0;

    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
   12af4:	e2840004 	add	r0, r4, #4
   12af8:	e1a01007 	mov	r1, r7
   12afc:	e3a0202c 	mov	r2, #44	; 0x2c
   12b00:	eb001693 	bl	18554 <memcpy>
    dd->fs = fs;
   12b04:	e5845000 	str	r5, [r4]
    dd->entry_next = 0;
   12b08:	e1c463b0 	strh	r6, [r4, #48]	; 0x30

    return dd;
}
   12b0c:	e1a00004 	mov	r0, r4
   12b10:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   12b14:	e12fff1e 	bx	lr

00012b18 <fat16_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat16_open_dir
 */
void fat16_close_dir(struct fat16_dir_struct* dd)
{
    if(dd)
   12b18:	e3500000 	cmp	r0, #0
 *
 * \param[in] dd The directory descriptor to close.
 * \see fat16_open_dir
 */
void fat16_close_dir(struct fat16_dir_struct* dd)
{
   12b1c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if(dd)
        free(dd);
   12b20:	1b0014bf 	blne	17e24 <free>
}
   12b24:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   12b28:	e12fff1e 	bx	lr

00012b2c <fat16_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat16_reset_dir
 */
uint8_t fat16_read_dir(struct fat16_dir_struct* dd, struct fat16_dir_entry_struct* dir_entry)
{
   12b2c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(!dd || !dir_entry)
   12b30:	e3500000 	cmp	r0, #0
   12b34:	13510000 	cmpne	r1, #0
   12b38:	e1a04000 	mov	r4, r0
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat16_reset_dir
 */
uint8_t fat16_read_dir(struct fat16_dir_struct* dd, struct fat16_dir_entry_struct* dir_entry)
{
   12b3c:	e24dd034 	sub	sp, sp, #52	; 0x34
    if(!dd || !dir_entry)
   12b40:	e1a06001 	mov	r6, r1
        return 0;
   12b44:	03a00000 	moveq	r0, #0
 * \returns 0 on failure, 1 on success.
 * \see fat16_reset_dir
 */
uint8_t fat16_read_dir(struct fat16_dir_struct* dd, struct fat16_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
   12b48:	0a000068 	beq	12cf0 <fat16_read_dir+0x1c4>
        return 0;

    if(dd->dir_entry.cluster == 0)
   12b4c:	e1d472b6 	ldrh	r7, [r4, #38]	; 0x26
   12b50:	e3570000 	cmp	r7, #0
   12b54:	e5945000 	ldr	r5, [r4]
   12b58:	e1d4b3b0 	ldrh	fp, [r4, #48]	; 0x30
   12b5c:	1a000026 	bne	12bfc <fat16_read_dir+0xd0>
 * \returns 0 on failure, 1 on success
 * \see fat16_read_sub_dir_entry, fat16_read_dir_entry_by_path
 */
uint8_t fat16_read_root_dir_entry(const struct fat16_fs_struct* fs, uint16_t entry_num, struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
   12b60:	e3550000 	cmp	r5, #0
   12b64:	0a00005f 	beq	12ce8 <fat16_read_dir+0x1bc>
        return 0;

    /* we read from the root directory entry */
    const struct fat16_header_struct* header = &fs->header;
    device_read_interval_t device_read_interval = fs->partition->device_read_interval;
   12b68:	e5953000 	ldr	r3, [r5]
    uint8_t buffer[32];

    /* seek to the n-th entry */
    struct fat16_read_callback_arg arg;
    memset(&arg, 0, sizeof(arg));
   12b6c:	e28da028 	add	sl, sp, #40	; 0x28
   12b70:	e1a01007 	mov	r1, r7
   12b74:	e3a0200c 	mov	r2, #12
   12b78:	e1a0000a 	mov	r0, sl
    if(!fs || !dir_entry)
        return 0;

    /* we read from the root directory entry */
    const struct fat16_header_struct* header = &fs->header;
    device_read_interval_t device_read_interval = fs->partition->device_read_interval;
   12b7c:	e5938004 	ldr	r8, [r3, #4]
    uint8_t buffer[32];

    /* seek to the n-th entry */
    struct fat16_read_callback_arg arg;
    memset(&arg, 0, sizeof(arg));
   12b80:	eb0016a9 	bl	1862c <memset>
    arg.entry_num = entry_num;
    if(!device_read_interval(header->root_dir_offset,
   12b84:	e2850014 	add	r0, r5, #20
   12b88:	e8900009 	ldm	r0, {r0, r3}
   12b8c:	e59f2168 	ldr	r2, [pc, #360]	; 12cfc <fat16_read_dir+0x1d0>
   12b90:	e0603003 	rsb	r3, r0, r3
   12b94:	e1a03803 	lsl	r3, r3, #16
   12b98:	e88d0404 	stm	sp, {r2, sl}
    uint8_t buffer[32];

    /* seek to the n-th entry */
    struct fat16_read_callback_arg arg;
    memset(&arg, 0, sizeof(arg));
    arg.entry_num = entry_num;
   12b9c:	e1cdb2ba 	strh	fp, [sp, #42]	; 0x2a
    if(!device_read_interval(header->root_dir_offset,
   12ba0:	e28d1008 	add	r1, sp, #8
   12ba4:	e3a02020 	mov	r2, #32
   12ba8:	e1a03823 	lsr	r3, r3, #16
   12bac:	e1a0e00f 	mov	lr, pc
   12bb0:	e12fff18 	bx	r8
   12bb4:	e3500000 	cmp	r0, #0
   12bb8:	0a00004a 	beq	12ce8 <fat16_read_dir+0x1bc>
        buffer,
       sizeof(buffer),
       header->cluster_zero_offset - header->root_dir_offset,
       fat16_dir_entry_seek_callback,
       &arg) ||
       arg.entry_offset == 0
   12bbc:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
    if(!device_read_interval(header->root_dir_offset,
        buffer,
       sizeof(buffer),
       header->cluster_zero_offset - header->root_dir_offset,
       fat16_dir_entry_seek_callback,
       &arg) ||
   12bc0:	e3550000 	cmp	r5, #0
   12bc4:	0a000047 	beq	12ce8 <fat16_read_dir+0x1bc>
       arg.entry_offset == 0
       )
    return 0;

    /* read entry */
    memset(dir_entry, 0, sizeof(*dir_entry));
   12bc8:	e1a01007 	mov	r1, r7
   12bcc:	e1a00006 	mov	r0, r6
   12bd0:	e3a0202c 	mov	r2, #44	; 0x2c
   12bd4:	eb001694 	bl	1862c <memset>
    if(!device_read_interval(arg.entry_offset,
   12bd8:	e59f2120 	ldr	r2, [pc, #288]	; 12d00 <fat16_read_dir+0x1d4>
   12bdc:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   12be0:	e88d0044 	stm	sp, {r2, r6}
   12be4:	e1a00005 	mov	r0, r5
   12be8:	e28d1008 	add	r1, sp, #8
   12bec:	e3a02020 	mov	r2, #32
   12bf0:	e1a0e00f 	mov	lr, pc
   12bf4:	e12fff18 	bx	r8
   12bf8:	ea000031 	b	12cc4 <fat16_read_dir+0x198>
 * \returns 0 on failure, 1 on success
 * \see fat16_read_root_dir_entry, fat16_read_dir_entry_by_path
 */
uint8_t fat16_read_sub_dir_entry(const struct fat16_fs_struct* fs, uint16_t entry_num, const struct fat16_dir_entry_struct* parent, struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !parent || !dir_entry)
   12bfc:	e3550000 	cmp	r5, #0
   12c00:	0a000038 	beq	12ce8 <fat16_read_dir+0x1bc>
        return 0;

    /* we are in a parent directory and want to search within its directory entry table */
    if(!(parent->attributes & FAT16_ATTRIB_DIR))
   12c04:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
   12c08:	e3130010 	tst	r3, #16
   12c0c:	0a000035 	beq	12ce8 <fat16_read_dir+0x1bc>
        return 0;

    /* loop through all clusters of the directory */
    uint8_t buffer[32];
    uint32_t cluster_offset;
    uint16_t cluster_size = fs->header.cluster_size;
   12c10:	e1d591b2 	ldrh	r9, [r5, #18]
    {
        /* calculate new cluster offset */
        cluster_offset = fs->header.cluster_zero_offset + (uint32_t) (cluster_num - 2) * cluster_size;

        /* seek to the n-th entry */
        memset(&arg, 0, sizeof(arg));
   12c14:	e28da028 	add	sl, sp, #40	; 0x28
    struct fat16_read_callback_arg arg;

    while(1)
    {
        /* calculate new cluster offset */
        cluster_offset = fs->header.cluster_zero_offset + (uint32_t) (cluster_num - 2) * cluster_size;
   12c18:	e5953018 	ldr	r3, [r5, #24]
   12c1c:	e2478002 	sub	r8, r7, #2
   12c20:	e0283899 	mla	r8, r9, r8, r3

        /* seek to the n-th entry */
        memset(&arg, 0, sizeof(arg));
   12c24:	e3a01000 	mov	r1, #0
   12c28:	e3a0200c 	mov	r2, #12
   12c2c:	e1a0000a 	mov	r0, sl
   12c30:	eb00167d 	bl	1862c <memset>
        arg.entry_num = entry_num;
        if(!fs->partition->device_read_interval(cluster_offset,
   12c34:	e59f30c0 	ldr	r3, [pc, #192]	; 12cfc <fat16_read_dir+0x1d0>
   12c38:	e595c000 	ldr	ip, [r5]
        /* calculate new cluster offset */
        cluster_offset = fs->header.cluster_zero_offset + (uint32_t) (cluster_num - 2) * cluster_size;

        /* seek to the n-th entry */
        memset(&arg, 0, sizeof(arg));
        arg.entry_num = entry_num;
   12c3c:	e1cdb2ba 	strh	fp, [sp, #42]	; 0x2a
        if(!fs->partition->device_read_interval(cluster_offset,
   12c40:	e88d0408 	stm	sp, {r3, sl}
   12c44:	e1a00008 	mov	r0, r8
   12c48:	e28d1008 	add	r1, sp, #8
   12c4c:	e3a02020 	mov	r2, #32
   12c50:	e1a03009 	mov	r3, r9
   12c54:	e59cc004 	ldr	ip, [ip, #4]
   12c58:	e1a0e00f 	mov	lr, pc
   12c5c:	e12fff1c 	bx	ip
   12c60:	e3500000 	cmp	r0, #0
   12c64:	0a00001f 	beq	12ce8 <fat16_read_dir+0x1bc>
           &arg)
           )
        return 0;

        /* check if we found the entry */
        if(arg.entry_offset)
   12c68:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
   12c6c:	e3580000 	cmp	r8, #0
   12c70:	1a000005 	bne	12c8c <fat16_read_dir+0x160>
            break;

        /* get number of next cluster */
        if(!(cluster_num = fat16_get_next_cluster(fs, cluster_num)))
   12c74:	e1a01007 	mov	r1, r7
   12c78:	e1a00005 	mov	r0, r5
   12c7c:	ebfffc31 	bl	11d48 <fat16_get_next_cluster>
   12c80:	e2507000 	subs	r7, r0, #0
   12c84:	1affffe3 	bne	12c18 <fat16_read_dir+0xec>
   12c88:	ea000016 	b	12ce8 <fat16_read_dir+0x1bc>
            return 0; /* directory entry not found */
    }

    memset(dir_entry, 0, sizeof(*dir_entry));
   12c8c:	e3a01000 	mov	r1, #0
   12c90:	e3a0202c 	mov	r2, #44	; 0x2c
   12c94:	e1a00006 	mov	r0, r6
   12c98:	eb001663 	bl	1862c <memset>

    /* read entry */
    if(!fs->partition->device_read_interval(arg.entry_offset,
   12c9c:	e59f205c 	ldr	r2, [pc, #92]	; 12d00 <fat16_read_dir+0x1d4>
   12ca0:	e595c000 	ldr	ip, [r5]
   12ca4:	e5dd3030 	ldrb	r3, [sp, #48]	; 0x30
   12ca8:	e88d0044 	stm	sp, {r2, r6}
   12cac:	e1a00008 	mov	r0, r8
   12cb0:	e28d1008 	add	r1, sp, #8
   12cb4:	e3a02020 	mov	r2, #32
   12cb8:	e59cc004 	ldr	ip, [ip, #4]
   12cbc:	e1a0e00f 	mov	lr, pc
   12cc0:	e12fff1c 	bx	ip
   12cc4:	e3500000 	cmp	r0, #0
   12cc8:	0a000006 	beq	12ce8 <fat16_read_dir+0x1bc>
        }
    }
    else
    {
        /* read entry from a subdirectory */
        if(fat16_read_sub_dir_entry(dd->fs, dd->entry_next, &dd->dir_entry, dir_entry))
   12ccc:	e5d63000 	ldrb	r3, [r6]
   12cd0:	e3530000 	cmp	r3, #0
        {
            ++dd->entry_next;
   12cd4:	11d433b0 	ldrhne	r3, [r4, #48]	; 0x30
   12cd8:	12833001 	addne	r3, r3, #1
   12cdc:	11c433b0 	strhne	r3, [r4, #48]	; 0x30
            return 1;
   12ce0:	13a00001 	movne	r0, #1
   12ce4:	1a000001 	bne	12cf0 <fat16_read_dir+0x1c4>
        }
    }

    /* restart reading */
    dd->entry_next = 0;
   12ce8:	e3a00000 	mov	r0, #0
   12cec:	e1c403b0 	strh	r0, [r4, #48]	; 0x30

    return 0;
}
   12cf0:	e28dd034 	add	sp, sp, #52	; 0x34
   12cf4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf8:	e12fff1e 	bx	lr
   12cfc:	00011b2c 	.word	0x00011b2c
   12d00:	00011ba0 	.word	0x00011ba0

00012d04 <fat16_get_dir_entry_of_path>:
 * \returns 0 on failure, 1 on success.
 * \see fat16_read_dir
 */
uint8_t fat16_get_dir_entry_of_path(struct fat16_fs_struct* fs, const char* path, struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
   12d04:	e3500000 	cmp	r0, #0
   12d08:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat16_read_dir
 */
uint8_t fat16_get_dir_entry_of_path(struct fat16_fs_struct* fs, const char* path, struct fat16_dir_entry_struct* dir_entry)
{
   12d0c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    if(!fs || !path || path[0] == '\0' || !dir_entry)
   12d10:	e1a07000 	mov	r7, r0
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat16_read_dir
 */
uint8_t fat16_get_dir_entry_of_path(struct fat16_fs_struct* fs, const char* path, struct fat16_dir_entry_struct* dir_entry)
{
   12d14:	e1a05002 	mov	r5, r2
    if(!fs || !path || path[0] == '\0' || !dir_entry)
   12d18:	13a00000 	movne	r0, #0
   12d1c:	03a00001 	moveq	r0, #1
   12d20:	e1a04001 	mov	r4, r1
        return 0;
   12d24:	03a00000 	moveq	r0, #0
 * \returns 0 on failure, 1 on success.
 * \see fat16_read_dir
 */
uint8_t fat16_get_dir_entry_of_path(struct fat16_fs_struct* fs, const char* path, struct fat16_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
   12d28:	0a00003e 	beq	12e28 <fat16_get_dir_entry_of_path+0x124>
   12d2c:	e5d13000 	ldrb	r3, [r1]
   12d30:	e3530000 	cmp	r3, #0
   12d34:	13520000 	cmpne	r2, #0
   12d38:	0a00003a 	beq	12e28 <fat16_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
   12d3c:	e353002f 	cmp	r3, #47	; 0x2f
        ++path;
   12d40:	02814001 	addeq	r4, r1, #1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
   12d44:	e1a00002 	mov	r0, r2
   12d48:	e3a01000 	mov	r1, #0
   12d4c:	e3a0202c 	mov	r2, #44	; 0x2c
   12d50:	eb001635 	bl	1862c <memset>
    dir_entry->attributes = FAT16_ATTRIB_DIR;
   12d54:	e3a03010 	mov	r3, #16
   12d58:	e5c53020 	strb	r3, [r5, #32]

    if(path[0] == '\0')
   12d5c:	e5d43000 	ldrb	r3, [r4]
   12d60:	e3530000 	cmp	r3, #0
   12d64:	0a00002e 	beq	12e24 <fat16_get_dir_entry_of_path+0x120>
        return 1;

    while(1)
    {
        struct fat16_dir_struct* dd = fat16_open_dir(fs, dir_entry);
   12d68:	e1a00007 	mov	r0, r7
   12d6c:	e1a01005 	mov	r1, r5
   12d70:	ebffff4f 	bl	12ab4 <fat16_open_dir>
        if(!dd)
   12d74:	e2506000 	subs	r6, r0, #0
   12d78:	0a000027 	beq	12e1c <fat16_get_dir_entry_of_path+0x118>
            break;

        /* extract the next hierarchy we will search for */
        const char* sep_pos = strchr(path, '/');
   12d7c:	e1a00004 	mov	r0, r4
   12d80:	e3a0102f 	mov	r1, #47	; 0x2f
   12d84:	eb0016c3 	bl	18898 <strchr>
        if(!sep_pos)
   12d88:	e2508000 	subs	r8, r0, #0
   12d8c:	1a000002 	bne	12d9c <fat16_get_dir_entry_of_path+0x98>
            sep_pos = path + strlen(path);
   12d90:	e1a00004 	mov	r0, r4
   12d94:	eb0017fc 	bl	18d8c <strlen>
   12d98:	e0848000 	add	r8, r4, r0
        uint8_t length_to_sep = sep_pos - path;
   12d9c:	e064a008 	rsb	sl, r4, r8
   12da0:	e20aa0ff 	and	sl, sl, #255	; 0xff

        /* read directory entries */
        while(fat16_read_dir(dd, dir_entry))
   12da4:	ea000014 	b	12dfc <fat16_get_dir_entry_of_path+0xf8>
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
   12da8:	e1a00005 	mov	r0, r5
   12dac:	eb0017f6 	bl	18d8c <strlen>
   12db0:	e150000a 	cmp	r0, sl
   12db4:	1a000010 	bne	12dfc <fat16_get_dir_entry_of_path+0xf8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
   12db8:	e1a00004 	mov	r0, r4
   12dbc:	e1a01005 	mov	r1, r5
   12dc0:	e1a0200a 	mov	r2, sl
   12dc4:	eb001842 	bl	18ed4 <strncmp>

        /* read directory entries */
        while(fat16_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
   12dc8:	e2509000 	subs	r9, r0, #0
   12dcc:	1a00000a 	bne	12dfc <fat16_get_dir_entry_of_path+0xf8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
            continue;

            fat16_close_dir(dd);
   12dd0:	e1a00006 	mov	r0, r6
   12dd4:	ebffff4f 	bl	12b18 <fat16_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
   12dd8:	e7d4300a 	ldrb	r3, [r4, sl]
   12ddc:	e3530000 	cmp	r3, #0
   12de0:	0a00000f 	beq	12e24 <fat16_get_dir_entry_of_path+0x120>
    /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT16_ATTRIB_DIR)
   12de4:	e5d50020 	ldrb	r0, [r5, #32]
   12de8:	e2100010 	ands	r0, r0, #16
   12dec:	0a00000d 	beq	12e28 <fat16_get_dir_entry_of_path+0x124>
            {
                /* we found a parent directory of the file we are searching for */
                path = sep_pos + 1;
   12df0:	e2884001 	add	r4, r8, #1
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
            continue;

            fat16_close_dir(dd);
            dd = 0;
   12df4:	e1a06009 	mov	r6, r9

            if(dir_entry->attributes & FAT16_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sep_pos + 1;
                break;
   12df8:	ea000004 	b	12e10 <fat16_get_dir_entry_of_path+0x10c>
        if(!sep_pos)
            sep_pos = path + strlen(path);
        uint8_t length_to_sep = sep_pos - path;

        /* read directory entries */
        while(fat16_read_dir(dd, dir_entry))
   12dfc:	e1a00006 	mov	r0, r6
   12e00:	e1a01005 	mov	r1, r5
   12e04:	ebffff48 	bl	12b2c <fat16_read_dir>
   12e08:	e3500000 	cmp	r0, #0
   12e0c:	1affffe5 	bne	12da8 <fat16_get_dir_entry_of_path+0xa4>

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat16_close_dir(dd);
   12e10:	e1a00006 	mov	r0, r6
   12e14:	ebffff3f 	bl	12b18 <fat16_close_dir>
    }
   12e18:	eaffffd2 	b	12d68 <fat16_get_dir_entry_of_path+0x64>

    return 0;
   12e1c:	e1a00006 	mov	r0, r6
   12e20:	ea000000 	b	12e28 <fat16_get_dir_entry_of_path+0x124>
            fat16_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
    /* we iterated through the whole path and have found the file */
                return 1;
   12e24:	e3a00001 	mov	r0, #1

        fat16_close_dir(dd);
    }

    return 0;
}
   12e28:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e2c:	e12fff1e 	bx	lr

00012e30 <fat16_reset_dir>:
 * \returns 0 on failure, 1 on success.
 * \see fat16_read_dir
 */
uint8_t fat16_reset_dir(struct fat16_dir_struct* dd)
{
    if(!dd)
   12e30:	e3500000 	cmp	r0, #0
        return 0;

    dd->entry_next = 0;
   12e34:	13a03000 	movne	r3, #0
   12e38:	11c033b0 	strhne	r3, [r0, #48]	; 0x30
    return 1;
   12e3c:	13a00001 	movne	r0, #1
}
   12e40:	e12fff1e 	bx	lr

00012e44 <fat16_set_dir>:

uint8_t fat16_set_dir(struct fat16_dir_struct* dd, uint16_t offset)
{
   12e44:	e1a01801 	lsl	r1, r1, #16
    if(!dd)
   12e48:	e3500000 	cmp	r0, #0
    dd->entry_next = 0;
    return 1;
}

uint8_t fat16_set_dir(struct fat16_dir_struct* dd, uint16_t offset)
{
   12e4c:	e1a01821 	lsr	r1, r1, #16
    if(!dd)
        return 0;

    dd->entry_next = offset;
   12e50:	11c013b0 	strhne	r1, [r0, #48]	; 0x30
    return 1;
   12e54:	13a00001 	movne	r0, #1
}
   12e58:	e12fff1e 	bx	lr

00012e5c <fat16_create_file>:
 * \see fat16_delete_file
 */
uint8_t fat16_create_file(struct fat16_dir_struct* parent, const char* file, struct fat16_dir_entry_struct* dir_entry)
{
    #if FAT16_WRITE_SUPPORT
        if(!parent || !file || !file[0])
   12e5c:	e3500000 	cmp	r0, #0
   12e60:	13510000 	cmpne	r1, #0
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat16_delete_file
 */
uint8_t fat16_create_file(struct fat16_dir_struct* parent, const char* file, struct fat16_dir_entry_struct* dir_entry)
{
   12e64:	e92d4ff1 	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    #if FAT16_WRITE_SUPPORT
        if(!parent || !file || !file[0])
   12e68:	e1a04000 	mov	r4, r0
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat16_delete_file
 */
uint8_t fat16_create_file(struct fat16_dir_struct* parent, const char* file, struct fat16_dir_entry_struct* dir_entry)
{
   12e6c:	e1a07002 	mov	r7, r2
    #if FAT16_WRITE_SUPPORT
        if(!parent || !file || !file[0])
   12e70:	e1a05001 	mov	r5, r1
            return 0;
   12e74:	03a00000 	moveq	r0, #0
 * \see fat16_delete_file
 */
uint8_t fat16_create_file(struct fat16_dir_struct* parent, const char* file, struct fat16_dir_entry_struct* dir_entry)
{
    #if FAT16_WRITE_SUPPORT
        if(!parent || !file || !file[0])
   12e78:	0a000062 	beq	13008 <fat16_create_file+0x1ac>
   12e7c:	e5d10000 	ldrb	r0, [r1]
   12e80:	e3500000 	cmp	r0, #0
   12e84:	0a00005f 	beq	13008 <fat16_create_file+0x1ac>
            return 0;
    
        /* check if the file already exists */
        while(1)
        {
            if(!fat16_read_dir(parent, dir_entry))
   12e88:	e1a00004 	mov	r0, r4
   12e8c:	e1a01007 	mov	r1, r7
   12e90:	ebffff25 	bl	12b2c <fat16_read_dir>
   12e94:	e2509000 	subs	r9, r0, #0
   12e98:	0a000007 	beq	12ebc <fat16_create_file+0x60>
                break;
    
            if(strcmp(file, dir_entry->long_name) == 0)
   12e9c:	e1a00005 	mov	r0, r5
   12ea0:	e1a01007 	mov	r1, r7
   12ea4:	eb0016f0 	bl	18a6c <strcmp>
   12ea8:	e3500000 	cmp	r0, #0
   12eac:	1afffff5 	bne	12e88 <fat16_create_file+0x2c>
uint8_t fat16_reset_dir(struct fat16_dir_struct* dd)
{
    if(!dd)
        return 0;

    dd->entry_next = 0;
   12eb0:	e1c403b0 	strh	r0, [r4, #48]	; 0x30
                break;
    
            if(strcmp(file, dir_entry->long_name) == 0)
            {
                fat16_reset_dir(parent);
                return 1;
   12eb4:	e3a00001 	mov	r0, #1
   12eb8:	ea000052 	b	13008 <fat16_create_file+0x1ac>
            }
        }
    
        memset(dir_entry, 0, sizeof(*dir_entry));
   12ebc:	e1a01009 	mov	r1, r9
   12ec0:	e3a0202c 	mov	r2, #44	; 0x2c
   12ec4:	e1a00007 	mov	r0, r7
   12ec8:	eb0015d7 	bl	1862c <memset>
        strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
   12ecc:	e1a01005 	mov	r1, r5
   12ed0:	e3a0201f 	mov	r2, #31
   12ed4:	e1a00007 	mov	r0, r7
   12ed8:	eb00184d 	bl	19014 <strncpy>
    
        /* search for a place where to write the directory entry to disk */
        uint8_t free_dir_entries_needed = strlen(file) / 13 + 1 + 1;
   12edc:	e1a00005 	mov	r0, r5
   12ee0:	eb0017a9 	bl	18d8c <strlen>
   12ee4:	e3a0100d 	mov	r1, #13
   12ee8:	eb004533 	bl	243bc <__aeabi_uidiv>
        uint8_t free_dir_entries_found = 0;
        struct fat16_fs_struct* fs = parent->fs;
        uint16_t cluster_num = parent->dir_entry.cluster;
   12eec:	e1d462b6 	ldrh	r6, [r4, #38]	; 0x26
        strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    
        /* search for a place where to write the directory entry to disk */
        uint8_t free_dir_entries_needed = strlen(file) / 13 + 1 + 1;
        uint8_t free_dir_entries_found = 0;
        struct fat16_fs_struct* fs = parent->fs;
   12ef0:	e5945000 	ldr	r5, [r4]
        uint16_t cluster_num = parent->dir_entry.cluster;
        uint32_t dir_entry_offset = 0;
        uint32_t offset = 0;
        uint32_t offset_to = 0;
    
        if(cluster_num == 0)
   12ef4:	e3560000 	cmp	r6, #0
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
            offset_to = fs->header.cluster_zero_offset;
            dir_entry_offset = offset;
   12ef8:	02858014 	addeq	r8, r5, #20
   12efc:	08980300 	ldmeq	r8, {r8, r9}
    
        memset(dir_entry, 0, sizeof(*dir_entry));
        strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    
        /* search for a place where to write the directory entry to disk */
        uint8_t free_dir_entries_needed = strlen(file) / 13 + 1 + 1;
   12f00:	e2800002 	add	r0, r0, #2
        uint8_t free_dir_entries_found = 0;
        struct fat16_fs_struct* fs = parent->fs;
        uint16_t cluster_num = parent->dir_entry.cluster;
        uint32_t dir_entry_offset = 0;
   12f04:	11a08009 	movne	r8, r9
    
        memset(dir_entry, 0, sizeof(*dir_entry));
        strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    
        /* search for a place where to write the directory entry to disk */
        uint8_t free_dir_entries_needed = strlen(file) / 13 + 1 + 1;
   12f08:	e200b0ff 	and	fp, r0, #255	; 0xff
            }
            else
            {
                offset += 32;
                dir_entry_offset = offset;
                free_dir_entries_found = 0;
   12f0c:	e1a04008 	mov	r4, r8
   12f10:	e3a0a000 	mov	sl, #0
            dir_entry_offset = offset;
        }
    
        while(1)
        {
            if(offset == offset_to)
   12f14:	e1540009 	cmp	r4, r9
   12f18:	1a00001b 	bne	12f8c <fat16_create_file+0x130>
            {
                if(cluster_num == 0)
   12f1c:	e3560000 	cmp	r6, #0
   12f20:	0a000037 	beq	13004 <fat16_create_file+0x1a8>
				/* We iterated through the whole root directory entry
                * and could not find enough space for the directory entry.
                */
                return 0;
    
                if(offset)
   12f24:	e3540000 	cmp	r4, #0
   12f28:	0a000010 	beq	12f70 <fat16_create_file+0x114>
                {
                    /* We reached a cluster boundary and have to
                    * switch to the next cluster.
                    */
    
                    uint16_t cluster_next = fat16_get_next_cluster(fs, cluster_num);
   12f2c:	e1a00005 	mov	r0, r5
   12f30:	e1a01006 	mov	r1, r6
   12f34:	ebfffb83 	bl	11d48 <fat16_get_next_cluster>
                    if(!cluster_next)
   12f38:	e3500000 	cmp	r0, #0
   12f3c:	1a00000a 	bne	12f6c <fat16_create_file+0x110>
                    {
                        cluster_next = fat16_append_clusters(fs, cluster_num, 1);
   12f40:	e1a00005 	mov	r0, r5
   12f44:	e1a01006 	mov	r1, r6
   12f48:	e3a02001 	mov	r2, #1
   12f4c:	ebfffbd1 	bl	11e98 <fat16_append_clusters>
                        if(!cluster_next)
   12f50:	e3500000 	cmp	r0, #0
   12f54:	0a00002b 	beq	13008 <fat16_create_file+0x1ac>
                            return 0;
    
                        /* we appended a new cluster and know it is free */
                        dir_entry_offset = fs->header.cluster_zero_offset +
                        (uint32_t) (cluster_next - 2) * fs->header.cluster_size;
   12f58:	e1d581b2 	ldrh	r8, [r5, #18]
                        cluster_next = fat16_append_clusters(fs, cluster_num, 1);
                        if(!cluster_next)
                            return 0;
    
                        /* we appended a new cluster and know it is free */
                        dir_entry_offset = fs->header.cluster_zero_offset +
   12f5c:	e5953018 	ldr	r3, [r5, #24]
                        (uint32_t) (cluster_next - 2) * fs->header.cluster_size;
   12f60:	e2400002 	sub	r0, r0, #2
                        cluster_next = fat16_append_clusters(fs, cluster_num, 1);
                        if(!cluster_next)
                            return 0;
    
                        /* we appended a new cluster and know it is free */
                        dir_entry_offset = fs->header.cluster_zero_offset +
   12f64:	e0283890 	mla	r8, r0, r8, r3
                        (uint32_t) (cluster_next - 2) * fs->header.cluster_size;
    
                        /* TODO: This cluster has to be zeroed in an efficient way, or at least
                        *       every 32th byte should be set to FAT16_DIRENTRY_DELETED.
                        */
                        break;
   12f68:	ea00001e 	b	12fe8 <fat16_create_file+0x18c>
                    /* We reached a cluster boundary and have to
                    * switch to the next cluster.
                    */
    
                    uint16_t cluster_next = fat16_get_next_cluster(fs, cluster_num);
                    if(!cluster_next)
   12f6c:	e1a06000 	mov	r6, r0
                    }
                    cluster_num = cluster_next;
                }
    
                offset = fs->header.cluster_zero_offset +
                (uint32_t) (cluster_num - 2) * fs->header.cluster_size;
   12f70:	e1d591b2 	ldrh	r9, [r5, #18]
                        break;
                    }
                    cluster_num = cluster_next;
                }
    
                offset = fs->header.cluster_zero_offset +
   12f74:	e5953018 	ldr	r3, [r5, #24]
                (uint32_t) (cluster_num - 2) * fs->header.cluster_size;
   12f78:	e2464002 	sub	r4, r6, #2
                        break;
                    }
                    cluster_num = cluster_next;
                }
    
                offset = fs->header.cluster_zero_offset +
   12f7c:	e0243499 	mla	r4, r9, r4, r3
                (uint32_t) (cluster_num - 2) * fs->header.cluster_size;
                offset_to = offset + fs->header.cluster_size;
                dir_entry_offset = offset;
                free_dir_entries_found = 0;
   12f80:	e3a0a000 	mov	sl, #0
                    cluster_num = cluster_next;
                }
    
                offset = fs->header.cluster_zero_offset +
                (uint32_t) (cluster_num - 2) * fs->header.cluster_size;
                offset_to = offset + fs->header.cluster_size;
   12f84:	e0849009 	add	r9, r4, r9
                dir_entry_offset = offset;
   12f88:	e1a08004 	mov	r8, r4
                free_dir_entries_found = 0;
            }
    
            /* read next lfn or 8.3 entry */
            uint8_t first_char;
            if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
   12f8c:	e5953000 	ldr	r3, [r5]
   12f90:	e1a00004 	mov	r0, r4
   12f94:	e28d1003 	add	r1, sp, #3
   12f98:	e3a02001 	mov	r2, #1
   12f9c:	e593c000 	ldr	ip, [r3]
   12fa0:	e1a0e00f 	mov	lr, pc
   12fa4:	e12fff1c 	bx	ip
   12fa8:	e3500000 	cmp	r0, #0
   12fac:	0a000015 	beq	13008 <fat16_create_file+0x1ac>
                return 0;
    
            /* check if we found a free directory entry */
            if(first_char == FAT16_DIRENTRY_DELETED || !first_char)
   12fb0:	e5dd3003 	ldrb	r3, [sp, #3]
   12fb4:	e35300e5 	cmp	r3, #229	; 0xe5
   12fb8:	13530000 	cmpne	r3, #0
   12fbc:	13a03000 	movne	r3, #0
   12fc0:	03a03001 	moveq	r3, #1
    
                offset += 32;
            }
            else
            {
                offset += 32;
   12fc4:	12844020 	addne	r4, r4, #32
                dir_entry_offset = offset;
   12fc8:	11a08004 	movne	r8, r4
                free_dir_entries_found = 0;
   12fcc:	11a0a003 	movne	sl, r3
            uint8_t first_char;
            if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
                return 0;
    
            /* check if we found a free directory entry */
            if(first_char == FAT16_DIRENTRY_DELETED || !first_char)
   12fd0:	1affffcf 	bne	12f14 <fat16_create_file+0xb8>
            {
                /* check if we have the needed number of available entries */
                ++free_dir_entries_found;
   12fd4:	e28aa001 	add	sl, sl, #1
   12fd8:	e20aa0ff 	and	sl, sl, #255	; 0xff
                if(free_dir_entries_found >= free_dir_entries_needed)
   12fdc:	e15a000b 	cmp	sl, fp
                    break;
    
                offset += 32;
   12fe0:	32844020 	addcc	r4, r4, #32
   12fe4:	3affffca 	bcc	12f14 <fat16_create_file+0xb8>
                free_dir_entries_found = 0;
            }
        }

        /* write directory entry to disk */
        dir_entry->entry_offset = dir_entry_offset;
   12fe8:	e5878028 	str	r8, [r7, #40]	; 0x28
        if(!fat16_write_dir_entry(fs, dir_entry))
   12fec:	e1a00005 	mov	r0, r5
   12ff0:	e1a01007 	mov	r1, r7
   12ff4:	ebfffc01 	bl	12000 <fat16_write_dir_entry>
 */
uint8_t fat16_create_file(struct fat16_dir_struct* parent, const char* file, struct fat16_dir_entry_struct* dir_entry)
{
    #if FAT16_WRITE_SUPPORT
        if(!parent || !file || !file[0])
            return 0;
   12ff8:	e2900000 	adds	r0, r0, #0
   12ffc:	13a00001 	movne	r0, #1
   13000:	ea000000 	b	13008 <fat16_create_file+0x1ac>
            {
                if(cluster_num == 0)
				/* We iterated through the whole root directory entry
                * and could not find enough space for the directory entry.
                */
                return 0;
   13004:	e1a00006 	mov	r0, r6
        return 1;
    
    #else
        return 0;
    #endif
}
   13008:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1300c:	e12fff1e 	bx	lr

00013010 <fat16_delete_file>:
 * \see fat16_create_file
 */
uint8_t fat16_delete_file(struct fat16_fs_struct* fs, struct fat16_dir_entry_struct* dir_entry)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs || !dir_entry)
   13010:	e3500000 	cmp	r0, #0
   13014:	13510000 	cmpne	r1, #0
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat16_create_file
 */
uint8_t fat16_delete_file(struct fat16_fs_struct* fs, struct fat16_dir_entry_struct* dir_entry)
{
   13018:	e92d40f7 	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    #if FAT16_WRITE_SUPPORT
        if(!fs || !dir_entry)
   1301c:	e1a05000 	mov	r5, r0
   13020:	e1a06001 	mov	r6, r1
            return 0;
   13024:	03a00000 	moveq	r0, #0
 * \see fat16_create_file
 */
uint8_t fat16_delete_file(struct fat16_fs_struct* fs, struct fat16_dir_entry_struct* dir_entry)
{
    #if FAT16_WRITE_SUPPORT
        if(!fs || !dir_entry)
   13028:	0a00001e 	beq	130a8 <fat16_delete_file+0x98>
            return 0;
    
        /* get offset of the file's directory entry */
        uint32_t dir_entry_offset = dir_entry->entry_offset;
   1302c:	e5914028 	ldr	r4, [r1, #40]	; 0x28
        if(!dir_entry_offset)
   13030:	e3540000 	cmp	r4, #0
            return 0;
   13034:	01a00004 	moveq	r0, r4
        if(!fs || !dir_entry)
            return 0;
    
        /* get offset of the file's directory entry */
        uint32_t dir_entry_offset = dir_entry->entry_offset;
        if(!dir_entry_offset)
   13038:	0a00001a 	beq	130a8 <fat16_delete_file+0x98>
            /* read directory entry */
            if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
                return 0;
    
            /* mark the directory entry as deleted */
            buffer[0] = FAT16_DIRENTRY_DELETED;
   1303c:	e3e0701a 	mvn	r7, #26
    
        uint8_t buffer[12];
        while(1)
        {
            /* read directory entry */
            if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
   13040:	e5953000 	ldr	r3, [r5]
   13044:	e1a00004 	mov	r0, r4
   13048:	e1a0100d 	mov	r1, sp
   1304c:	e3a0200c 	mov	r2, #12
   13050:	e593c000 	ldr	ip, [r3]
   13054:	e1a0e00f 	mov	lr, pc
   13058:	e12fff1c 	bx	ip
   1305c:	e3500000 	cmp	r0, #0
   13060:	0a000010 	beq	130a8 <fat16_delete_file+0x98>
                return 0;
    
            /* mark the directory entry as deleted */
            buffer[0] = FAT16_DIRENTRY_DELETED;
   13064:	e5cd7000 	strb	r7, [sp]
    
            /* write back entry */
            if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
   13068:	e5953000 	ldr	r3, [r5]
   1306c:	e1a00004 	mov	r0, r4
   13070:	e1a0100d 	mov	r1, sp
   13074:	e3a0200c 	mov	r2, #12
   13078:	e593c008 	ldr	ip, [r3, #8]
   1307c:	e1a0e00f 	mov	lr, pc
   13080:	e12fff1c 	bx	ip
   13084:	e3500000 	cmp	r0, #0
   13088:	0a000006 	beq	130a8 <fat16_delete_file+0x98>
                return 0;
    
            /* check if we deleted the whole entry */
            if(buffer[11] != 0x0f)
   1308c:	e5dd300b 	ldrb	r3, [sp, #11]
   13090:	e353000f 	cmp	r3, #15
                break;
    
            dir_entry_offset += 32;
   13094:	02844020 	addeq	r4, r4, #32
        }
   13098:	0affffe8 	beq	13040 <fat16_delete_file+0x30>
    
        /* We deleted the directory entry. The next thing to do is
                             * marking all occupied clusters as free.
                             */
        return fat16_free_clusters(fs, dir_entry->cluster);
   1309c:	e1a00005 	mov	r0, r5
   130a0:	e1d612b2 	ldrh	r1, [r6, #34]	; 0x22
   130a4:	ebfffb4c 	bl	11ddc <fat16_free_clusters>
    #else
        return 0;
    #endif
}
   130a8:	e8bd40fe 	pop	{r1, r2, r3, r4, r5, r6, r7, lr}
   130ac:	e12fff1e 	bx	lr

000130b0 <fat16_get_fs_size>:
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
uint32_t fat16_get_fs_size(const struct fat16_fs_struct* fs)
{
    if(!fs)
   130b0:	e3500000 	cmp	r0, #0
   130b4:	012fff1e 	bxeq	lr
        return 0;

    return (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
   130b8:	e590300c 	ldr	r3, [r0, #12]
   130bc:	e1d001b2 	ldrh	r0, [r0, #18]
   130c0:	e1a030a3 	lsr	r3, r3, #1
   130c4:	e2433002 	sub	r3, r3, #2
   130c8:	e0000093 	mul	r0, r3, r0
}
   130cc:	e12fff1e 	bx	lr

000130d0 <fat16_get_fs_free>:
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
uint32_t fat16_get_fs_free(const struct fat16_fs_struct* fs)
{
   130d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if(!fs)
   130d4:	e2504000 	subs	r4, r0, #0
 *
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
uint32_t fat16_get_fs_free(const struct fat16_fs_struct* fs)
{
   130d8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    if(!fs)
        return 0;
   130dc:	01a00004 	moveq	r0, r4
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the free filesystem space in bytes otherwise.
 */
uint32_t fat16_get_fs_free(const struct fat16_fs_struct* fs)
{
    if(!fs)
   130e0:	0a000020 	beq	13168 <fat16_get_fs_free+0x98>
        return 0;

    uint8_t fat[32];
    struct fat16_usage_count_callback_arg count_arg;
    count_arg.cluster_count = 0;
   130e4:	e3a03000 	mov	r3, #0
   130e8:	e1cd32b8 	strh	r3, [sp, #40]	; 0x28
    count_arg.buffer_size = sizeof(fat);
   130ec:	e3a03020 	mov	r3, #32
   130f0:	e5cd302a 	strb	r3, [sp, #42]	; 0x2a

    uint32_t fat_offset = fs->header.fat_offset;
   130f4:	e5947008 	ldr	r7, [r4, #8]
    uint32_t fat_size = fs->header.fat_size;
   130f8:	e594500c 	ldr	r5, [r4, #12]
    while(fat_size > 0)
    {
        uint16_t length = UINT16_MAX - 1;
        if(fat_size < length)
   130fc:	e59f8070 	ldr	r8, [pc, #112]	; 13174 <fat16_get_fs_free+0xa4>
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    uint32_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
   13100:	ea000013 	b	13154 <fat16_get_fs_free+0x84>
    {
        uint16_t length = UINT16_MAX - 1;
        if(fat_size < length)
   13104:	e1550008 	cmp	r5, r8
            length = fat_size;

        if(!fs->partition->device_read_interval(fat_offset,
   13108:	e59f3068 	ldr	r3, [pc, #104]	; 13178 <fat16_get_fs_free+0xa8>
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uint16_t length = UINT16_MAX - 1;
        if(fat_size < length)
            length = fat_size;
   1310c:	91a06805 	lslls	r6, r5, #16

    uint32_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
    {
        uint16_t length = UINT16_MAX - 1;
   13110:	859f6064 	ldrhi	r6, [pc, #100]	; 1317c <fat16_get_fs_free+0xac>
        if(fat_size < length)
            length = fat_size;
   13114:	91a06826 	lsrls	r6, r6, #16

        if(!fs->partition->device_read_interval(fat_offset,
   13118:	e594c000 	ldr	ip, [r4]
   1311c:	e58d3000 	str	r3, [sp]
   13120:	e28d3028 	add	r3, sp, #40	; 0x28
   13124:	e58d3004 	str	r3, [sp, #4]
   13128:	e1a00007 	mov	r0, r7
   1312c:	e28d1008 	add	r1, sp, #8
   13130:	e3a02020 	mov	r2, #32
   13134:	e1a03006 	mov	r3, r6
   13138:	e59cc004 	ldr	ip, [ip, #4]
   1313c:	e1a0e00f 	mov	lr, pc
   13140:	e12fff1c 	bx	ip
   13144:	e3500000 	cmp	r0, #0
   13148:	0a000006 	beq	13168 <fat16_get_fs_free+0x98>
           &count_arg
           )
           )
        return 0;

        fat_offset += length;
   1314c:	e0877006 	add	r7, r7, r6
        fat_size -= length;
   13150:	e0665005 	rsb	r5, r6, r5
    count_arg.cluster_count = 0;
    count_arg.buffer_size = sizeof(fat);

    uint32_t fat_offset = fs->header.fat_offset;
    uint32_t fat_size = fs->header.fat_size;
    while(fat_size > 0)
   13154:	e3550000 	cmp	r5, #0
   13158:	1affffe9 	bne	13104 <fat16_get_fs_free+0x34>

        fat_offset += length;
        fat_size -= length;
    }

    return (uint32_t) count_arg.cluster_count * fs->header.cluster_size;
   1315c:	e1d431b2 	ldrh	r3, [r4, #18]
   13160:	e1dd02b8 	ldrh	r0, [sp, #40]	; 0x28
   13164:	e0000093 	mul	r0, r3, r0
}
   13168:	e28dd02c 	add	sp, sp, #44	; 0x2c
   1316c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13170:	e12fff1e 	bx	lr
   13174:	0000fffd 	.word	0x0000fffd
   13178:	00011ae4 	.word	0x00011ae4
   1317c:	0000fffe 	.word	0x0000fffe

00013180 <find_file_in_dir>:

    return 1;
}

uint8_t find_file_in_dir(struct fat16_fs_struct* fs, struct fat16_dir_struct* dd, const char* name, struct fat16_dir_entry_struct* dir_entry)
{
   13180:	e92d4070 	push	{r4, r5, r6, lr}
   13184:	e1a04001 	mov	r4, r1
   13188:	e1a05002 	mov	r5, r2
   1318c:	e1a06003 	mov	r6, r3
    while(fat16_read_dir(dd, dir_entry))
   13190:	ea000008 	b	131b8 <find_file_in_dir+0x38>
    {
        if(strcmp(dir_entry->long_name, name) == 0)
   13194:	e1a00006 	mov	r0, r6
   13198:	e1a01005 	mov	r1, r5
   1319c:	eb001632 	bl	18a6c <strcmp>
   131a0:	e3500000 	cmp	r0, #0
   131a4:	1a000003 	bne	131b8 <find_file_in_dir+0x38>
 * \returns 0 on failure, 1 on success.
 * \see fat16_read_dir
 */
uint8_t fat16_reset_dir(struct fat16_dir_struct* dd)
{
    if(!dd)
   131a8:	e3540000 	cmp	r4, #0
        return 0;

    dd->entry_next = 0;
   131ac:	11c403b0 	strhne	r0, [r4, #48]	; 0x30
    while(fat16_read_dir(dd, dir_entry))
    {
        if(strcmp(dir_entry->long_name, name) == 0)
        {
            fat16_reset_dir(dd);
            return 1;
   131b0:	e3a00001 	mov	r0, #1
   131b4:	ea000004 	b	131cc <find_file_in_dir+0x4c>
    return 1;
}

uint8_t find_file_in_dir(struct fat16_fs_struct* fs, struct fat16_dir_struct* dd, const char* name, struct fat16_dir_entry_struct* dir_entry)
{
    while(fat16_read_dir(dd, dir_entry))
   131b8:	e1a00004 	mov	r0, r4
   131bc:	e1a01006 	mov	r1, r6
   131c0:	ebfffe59 	bl	12b2c <fat16_read_dir>
   131c4:	e3500000 	cmp	r0, #0
   131c8:	1afffff1 	bne	13194 <find_file_in_dir+0x14>
            return 1;
        }
    }

    return 0;
}
   131cc:	e8bd4070 	pop	{r4, r5, r6, lr}
   131d0:	e12fff1e 	bx	lr

000131d4 <open_file_in_dir>:

struct fat16_file_struct* open_file_in_dir(struct fat16_fs_struct* fs, struct fat16_dir_struct* dd, const char* name)
{
   131d4:	e92d4010 	push	{r4, lr}
   131d8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    struct fat16_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
   131dc:	e1a0300d 	mov	r3, sp

    return 0;
}

struct fat16_file_struct* open_file_in_dir(struct fat16_fs_struct* fs, struct fat16_dir_struct* dd, const char* name)
{
   131e0:	e1a04000 	mov	r4, r0
    struct fat16_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
   131e4:	ebffffe5 	bl	13180 <find_file_in_dir>
   131e8:	e3500000 	cmp	r0, #0
        return 0;

    return fat16_open_file(fs, &file_entry);
   131ec:	11a00004 	movne	r0, r4
   131f0:	11a0100d 	movne	r1, sp
   131f4:	1bfffc9d 	blne	12470 <fat16_open_file>
}
   131f8:	e28dd02c 	add	sp, sp, #44	; 0x2c
   131fc:	e8bd4010 	pop	{r4, lr}
   13200:	e12fff1e 	bx	lr

00013204 <fat16_file_size>:

int fat16_file_size(struct fat16_file_struct * file)
{
    return(file->dir_entry.file_size);
}
   13204:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   13208:	e12fff1e 	bx	lr

0001320c <HandleClassRequest>:
        Handle mass storage class request

**************************************************************************/
static BOOL HandleClassRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    if (pSetup->wIndex != 0)
   1320c:	e1d0c0b4 	ldrh	ip, [r0, #4]
   13210:	e35c0000 	cmp	ip, #0
    ==================
        Handle mass storage class request

**************************************************************************/
static BOOL HandleClassRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
   13214:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if (pSetup->wIndex != 0)
    {
        DBG("Invalid idx %X\n", pSetup->wIndex);
        return FALSE;
   13218:	13a00000 	movne	r0, #0
        Handle mass storage class request

**************************************************************************/
static BOOL HandleClassRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    if (pSetup->wIndex != 0)
   1321c:	1a000015 	bne	13278 <HandleClassRequest+0x6c>
    {
        DBG("Invalid idx %X\n", pSetup->wIndex);
        return FALSE;
    }
    if (pSetup->wValue != 0)
   13220:	e1d030b2 	ldrh	r3, [r0, #2]
   13224:	e3530000 	cmp	r3, #0
    {
        DBG("Invalid val %X\n", pSetup->wValue);
        return FALSE;
   13228:	11a0000c 	movne	r0, ip
    if (pSetup->wIndex != 0)
    {
        DBG("Invalid idx %X\n", pSetup->wIndex);
        return FALSE;
    }
    if (pSetup->wValue != 0)
   1322c:	1a000011 	bne	13278 <HandleClassRequest+0x6c>
    {
        DBG("Invalid val %X\n", pSetup->wValue);
        return FALSE;
    }

    switch (pSetup->bRequest)
   13230:	e5d0c001 	ldrb	ip, [r0, #1]
   13234:	e35c00fe 	cmp	ip, #254	; 0xfe
   13238:	0a000002 	beq	13248 <HandleClassRequest+0x3c>
   1323c:	e35c00ff 	cmp	ip, #255	; 0xff
   13240:	1a00000b 	bne	13274 <HandleClassRequest+0x68>
   13244:	ea000004 	b	1325c <HandleClassRequest+0x50>
    {

        // get max LUN
        case 0xFE:
            *ppbData[0] = 0;        // No LUNs
   13248:	e5922000 	ldr	r2, [r2]
            *piLen = 1;
   1324c:	e3a00001 	mov	r0, #1
    switch (pSetup->bRequest)
    {

        // get max LUN
        case 0xFE:
            *ppbData[0] = 0;        // No LUNs
   13250:	e5c23000 	strb	r3, [r2]
            *piLen = 1;
   13254:	e5810000 	str	r0, [r1]
            break;
   13258:	ea000006 	b	13278 <HandleClassRequest+0x6c>

        // MSC reset
        case 0xFF:
            if (pSetup->wLength > 0)
   1325c:	e1d020b6 	ldrh	r2, [r0, #6]
   13260:	e3520000 	cmp	r2, #0
   13264:	1a000002 	bne	13274 <HandleClassRequest+0x68>
            {
                return FALSE;
            }
            MSCBotReset();
   13268:	eb000073 	bl	1343c <MSCBotReset>

        default:
            DBG("Unhandled class\n");
            return FALSE;
        }
    return TRUE;
   1326c:	e3a00001 	mov	r0, #1
   13270:	ea000000 	b	13278 <HandleClassRequest+0x6c>
            MSCBotReset();
            break;

        default:
            DBG("Unhandled class\n");
            return FALSE;
   13274:	e1a00003 	mov	r0, r3
        }
    return TRUE;
}
   13278:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   1327c:	e12fff1e 	bx	lr

00013280 <main_msc>:
/*************************************************************************
    msc_main
    ====
**************************************************************************/
int main_msc(void)
{
   13280:	e92d4010 	push	{r4, lr}
    // initialise the SD card
    BlockDevInit();
   13284:	eb00025c 	bl	13bfc <BlockDevInit>

    rprintf("Initialising USB stack\n");
   13288:	e59f006c 	ldr	r0, [pc, #108]	; 132fc <main_msc+0x7c>
   1328c:	ebfff3ec 	bl	10244 <rprintf>

    // initialise stack
    USBInit();
   13290:	eb000388 	bl	140b8 <USBInit>

    // enable bulk-in interrupts on NAKs
    // these are required to get the BOT protocol going again after a STALL
    USBHwNakIntEnable(INACK_BI);
   13294:	e3a00020 	mov	r0, #32
   13298:	eb00040e 	bl	142d8 <USBHwNakIntEnable>

    // register descriptors
    USBRegisterDescriptors(abDescriptors);
   1329c:	e59f005c 	ldr	r0, [pc, #92]	; 13300 <main_msc+0x80>
   132a0:	eb000544 	bl	147b8 <USBRegisterDescriptors>

    // register class request handler
    USBRegisterRequestHandler(REQTYPE_TYPE_CLASS, HandleClassRequest, abClassReqData);
   132a4:	e59f2058 	ldr	r2, [pc, #88]	; 13304 <main_msc+0x84>
   132a8:	e3a00001 	mov	r0, #1
   132ac:	e59f1054 	ldr	r1, [pc, #84]	; 13308 <main_msc+0x88>
   132b0:	eb00053a 	bl	147a0 <USBRegisterRequestHandler>

    // register endpoint handlers
    USBHwRegisterEPIntHandler(MSC_BULK_IN_EP, MSCBotBulkIn);
   132b4:	e3a00085 	mov	r0, #133	; 0x85
   132b8:	e59f104c 	ldr	r1, [pc, #76]	; 1330c <main_msc+0x8c>
   132bc:	eb0003d9 	bl	14228 <USBHwRegisterEPIntHandler>
    USBHwRegisterEPIntHandler(MSC_BULK_OUT_EP, MSCBotBulkOut);
   132c0:	e59f1048 	ldr	r1, [pc, #72]	; 13310 <main_msc+0x90>
   132c4:	e3a00002 	mov	r0, #2
   132c8:	eb0003d6 	bl	14228 <USBHwRegisterEPIntHandler>

    rprintf("Starting USB communication\n");
   132cc:	e59f0040 	ldr	r0, [pc, #64]	; 13314 <main_msc+0x94>
   132d0:	ebfff3db 	bl	10244 <rprintf>
	
    // connect to bus
    USBHwConnect(TRUE);
   132d4:	e3a00001 	mov	r0, #1
   132d8:	eb0003fa 	bl	142c8 <USBHwConnect>

    // call USB interrupt handler continuously
    while (IOPIN0 & (1<<23))
   132dc:	e59f4034 	ldr	r4, [pc, #52]	; 13318 <main_msc+0x98>
   132e0:	ea000000 	b	132e8 <main_msc+0x68>
	{
		USBHwISR();
   132e4:	eb000457 	bl	14448 <USBHwISR>
	
    // connect to bus
    USBHwConnect(TRUE);

    // call USB interrupt handler continuously
    while (IOPIN0 & (1<<23))
   132e8:	e5940000 	ldr	r0, [r4]
   132ec:	e2100502 	ands	r0, r0, #8388608	; 0x800000
   132f0:	1afffffb 	bne	132e4 <main_msc+0x64>
	{
		USBHwISR();
    }

    return 0;
}
   132f4:	e8bd4010 	pop	{r4, lr}
   132f8:	e12fff1e 	bx	lr
   132fc:	00025f41 	.word	0x00025f41
   13300:	40000000 	.word	0x40000000
   13304:	40000b98 	.word	0x40000b98
   13308:	0001320c 	.word	0x0001320c
   1330c:	00013670 	.word	0x00013670
   13310:	0001345c 	.word	0x0001345c
   13314:	00025f59 	.word	0x00025f59
   13318:	e0028000 	.word	0xe0028000

0001331c <SendCSW>:

static void SendCSW(U8 bStatus)
{
    int iResidue;

    iResidue = CBW.dwCBWDataTransferLength - dwTransferSize;
   1331c:	e59f3030 	ldr	r3, [pc, #48]	; 13354 <SendCSW+0x38>
   13320:	e5931008 	ldr	r1, [r3, #8]
   13324:	e5932020 	ldr	r2, [r3, #32]
   13328:	e0622001 	rsb	r2, r2, r1

    // construct CSW
    CSW.dwCSWSignature      = CSW_SIGNATURE;
   1332c:	e59f1024 	ldr	r1, [pc, #36]	; 13358 <SendCSW+0x3c>
    CSW.dwCSWTag            = CBW.dwCBWTag;
    CSW.dwCSWDataResidue    = MAX(iResidue, 0);
   13330:	e1c22fc2 	bic	r2, r2, r2, asr #31
    int iResidue;

    iResidue = CBW.dwCBWDataTransferLength - dwTransferSize;

    // construct CSW
    CSW.dwCSWSignature      = CSW_SIGNATURE;
   13334:	e5831024 	str	r1, [r3, #36]	; 0x24
    CSW.dwCSWTag            = CBW.dwCBWTag;
   13338:	e5931004 	ldr	r1, [r3, #4]
    CSW.dwCSWDataResidue    = MAX(iResidue, 0);
   1333c:	e583202c 	str	r2, [r3, #44]	; 0x2c
    CSW.bmCSWStatus         = bStatus;

    DBG("CSW: status=%x, residue=%d\n", bStatus, CSW.dwCSWDataResidue);

    // next state
    eState = eCSW;
   13340:	e3a02003 	mov	r2, #3

    iResidue = CBW.dwCBWDataTransferLength - dwTransferSize;

    // construct CSW
    CSW.dwCSWSignature      = CSW_SIGNATURE;
    CSW.dwCSWTag            = CBW.dwCBWTag;
   13344:	e5831028 	str	r1, [r3, #40]	; 0x28
    CSW.dwCSWDataResidue    = MAX(iResidue, 0);
    CSW.bmCSWStatus         = bStatus;
   13348:	e5c30030 	strb	r0, [r3, #48]	; 0x30

    DBG("CSW: status=%x, residue=%d\n", bStatus, CSW.dwCSWDataResidue);

    // next state
    eState = eCSW;
   1334c:	e5832034 	str	r2, [r3, #52]	; 0x34
}
   13350:	e12fff1e 	bx	lr
   13354:	40000b9c 	.word	0x40000b9c
   13358:	53425355 	.word	0x53425355

0001335c <BOTStall>:
    Which endpoint to stall is determined by looking at the transfer
    direction intended by the host.

**************************************************************************/
static void BOTStall(void)
{
   1335c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    if ((CBW.bmCBWFlags & 0x80) || (CBW.dwCBWDataTransferLength == 0))
   13360:	e59f302c 	ldr	r3, [pc, #44]	; 13394 <BOTStall+0x38>
   13364:	e1d320dc 	ldrsb	r2, [r3, #12]
   13368:	e3520000 	cmp	r2, #0
   1336c:	ba000003 	blt	13380 <BOTStall+0x24>
   13370:	e5933008 	ldr	r3, [r3, #8]
   13374:	e3530000 	cmp	r3, #0
        USBHwEPStall(MSC_BULK_IN_EP, TRUE);
    }
    else
    {
        // stall data-out
        USBHwEPStall(MSC_BULK_OUT_EP, TRUE);
   13378:	13a00002 	movne	r0, #2
    direction intended by the host.

**************************************************************************/
static void BOTStall(void)
{
    if ((CBW.bmCBWFlags & 0x80) || (CBW.dwCBWDataTransferLength == 0))
   1337c:	1a000000 	bne	13384 <BOTStall+0x28>
    {
        // stall data-in or CSW
        USBHwEPStall(MSC_BULK_IN_EP, TRUE);
   13380:	e3a00085 	mov	r0, #133	; 0x85
    }
    else
    {
        // stall data-out
        USBHwEPStall(MSC_BULK_OUT_EP, TRUE);
   13384:	e3a01001 	mov	r1, #1
   13388:	eb0003da 	bl	142f8 <USBHwEPStall>
    }
}
   1338c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   13390:	e12fff1e 	bx	lr
   13394:	40000b9c 	.word	0x40000b9c

00013398 <HandleDataIn>:
    ============
        Handles data from device-to-host

**************************************************************************/
static void HandleDataIn(void)
{
   13398:	e92d4030 	push	{r4, r5, lr}
    int iChunk;

    // process data for host in SCSI layer
    pbData = SCSIHandleData(CBW.CBWCB, CBW.bCBWCBLength, pbData, dwOffset);
   1339c:	e59f4094 	ldr	r4, [pc, #148]	; 13438 <HandleDataIn+0xa0>
   133a0:	e2842038 	add	r2, r4, #56	; 0x38
   133a4:	e5d4100e 	ldrb	r1, [r4, #14]
   133a8:	e284000f 	add	r0, r4, #15
   133ac:	e892000c 	ldm	r2, {r2, r3}
   133b0:	eb000110 	bl	137f8 <SCSIHandleData>
    if (pbData == NULL)
   133b4:	e3500000 	cmp	r0, #0
static void HandleDataIn(void)
{
    int iChunk;

    // process data for host in SCSI layer
    pbData = SCSIHandleData(CBW.CBWCB, CBW.bCBWCBLength, pbData, dwOffset);
   133b8:	e1a01000 	mov	r1, r0
   133bc:	e5840038 	str	r0, [r4, #56]	; 0x38
    if (pbData == NULL)
   133c0:	1a000002 	bne	133d0 <HandleDataIn+0x38>
    {
        BOTStall();
   133c4:	ebffffe4 	bl	1335c <BOTStall>
        SendCSW(STATUS_FAILED);
   133c8:	e3a00001 	mov	r0, #1
   133cc:	ea000015 	b	13428 <HandleDataIn+0x90>
        return;
    }

    // send data to host?
    if (dwOffset < dwTransferSize)
   133d0:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   133d4:	e5945020 	ldr	r5, [r4, #32]
   133d8:	e1530005 	cmp	r3, r5
   133dc:	2a000008 	bcs	13404 <HandleDataIn+0x6c>
    {
        iChunk = MIN(64, dwTransferSize - dwOffset);
   133e0:	e0635005 	rsb	r5, r3, r5
   133e4:	e3550040 	cmp	r5, #64	; 0x40
   133e8:	23a05040 	movcs	r5, #64	; 0x40
        USBHwEPWrite(MSC_BULK_IN_EP, pbData, iChunk);
   133ec:	e1a02005 	mov	r2, r5
   133f0:	e3a00085 	mov	r0, #133	; 0x85
   133f4:	eb0003c7 	bl	14318 <USBHwEPWrite>
        dwOffset += iChunk;
   133f8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
   133fc:	e0855003 	add	r5, r5, r3
   13400:	e584503c 	str	r5, [r4, #60]	; 0x3c
    }

    // are we done now?
    if (dwOffset == dwTransferSize)
   13404:	e59f302c 	ldr	r3, [pc, #44]	; 13438 <HandleDataIn+0xa0>
   13408:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   1340c:	e5931020 	ldr	r1, [r3, #32]
   13410:	e1520001 	cmp	r2, r1
   13414:	1a000005 	bne	13430 <HandleDataIn+0x98>
    {
        if (dwOffset != CBW.dwCBWDataTransferLength)
   13418:	e5933008 	ldr	r3, [r3, #8]
   1341c:	e1520003 	cmp	r2, r3
        {
            // stall pipe
            DBG("stalling DIN");
            BOTStall();
   13420:	1bffffcd 	blne	1335c <BOTStall>
        }
        // done
        SendCSW(STATUS_PASSED);
   13424:	e3a00000 	mov	r0, #0
    }
}
   13428:	e8bd4030 	pop	{r4, r5, lr}
            // stall pipe
            DBG("stalling DIN");
            BOTStall();
        }
        // done
        SendCSW(STATUS_PASSED);
   1342c:	eaffffba 	b	1331c <SendCSW>
    }
}
   13430:	e8bd4030 	pop	{r4, r5, lr}
   13434:	e12fff1e 	bx	lr
   13438:	40000b9c 	.word	0x40000b9c

0001343c <MSCBotReset>:

void MSCBotReset(void)
{
    DBG("BOT reset in state %d\n", eState);
    // reset BOT state
    eState = eCBW;
   1343c:	e59f3014 	ldr	r3, [pc, #20]	; 13458 <MSCBotReset+0x1c>
   13440:	e3a02000 	mov	r2, #0
static U8           *pbData;



void MSCBotReset(void)
{
   13444:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    DBG("BOT reset in state %d\n", eState);
    // reset BOT state
    eState = eCBW;
   13448:	e5832034 	str	r2, [r3, #52]	; 0x34
    // reset SCSI
    SCSIReset();
   1344c:	eb0000a0 	bl	136d4 <SCSIReset>
}
   13450:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   13454:	e12fff1e 	bx	lr
   13458:	40000b9c 	.word	0x40000b9c

0001345c <MSCBotBulkOut>:
{
    int     iLen, iChunk;
    BOOL    fHostIn, fDevIn;

    // ignore events on stalled EP
    if (bEPStatus & EP_STATUS_STALLED)
   1345c:	e3110002 	tst	r1, #2
    IN      bEP         Endpoint number
            bEPStatus   Endpoint status (indicates NAK, STALL, etc)

**************************************************************************/
void MSCBotBulkOut(U8 bEP, U8 bEPStatus)
{
   13460:	e92d4033 	push	{r0, r1, r4, r5, lr}
   13464:	e20000ff 	and	r0, r0, #255	; 0xff
    int     iLen, iChunk;
    BOOL    fHostIn, fDevIn;

    // ignore events on stalled EP
    if (bEPStatus & EP_STATUS_STALLED)
   13468:	1a00007c 	bne	13660 <MSCBotBulkOut+0x204>
    {
        return;
    }

    switch (eState)
   1346c:	e59f51f4 	ldr	r5, [pc, #500]	; 13668 <MSCBotBulkOut+0x20c>
   13470:	e5953034 	ldr	r3, [r5, #52]	; 0x34
   13474:	e3530004 	cmp	r3, #4
   13478:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1347c:	ea000077 	b	13660 <MSCBotBulkOut+0x204>
   13480:	00013494 	.word	0x00013494
   13484:	00013580 	.word	0x00013580
   13488:	0001360c 	.word	0x0001360c
   1348c:	0001360c 	.word	0x0001360c
   13490:	00013624 	.word	0x00013624
    {

        case eCBW:
            iLen = USBHwEPRead(bEP, (U8 *)&CBW, sizeof(CBW));
   13494:	e59f41cc 	ldr	r4, [pc, #460]	; 13668 <MSCBotBulkOut+0x20c>
   13498:	e3a02020 	mov	r2, #32
   1349c:	e1a01004 	mov	r1, r4
   134a0:	eb0003bc 	bl	14398 <USBHwEPRead>
    Returns TRUE if valid and meaningful
**************************************************************************/
static BOOL CheckCBW(TCBW *pCBW, int iLen)
{
    // CBW valid?
    if (iLen != 31)
   134a4:	e350001f 	cmp	r0, #31

    switch (eState)
    {

        case eCBW:
            iLen = USBHwEPRead(bEP, (U8 *)&CBW, sizeof(CBW));
   134a8:	e58d0000 	str	r0, [sp]
    Returns TRUE if valid and meaningful
**************************************************************************/
static BOOL CheckCBW(TCBW *pCBW, int iLen)
{
    // CBW valid?
    if (iLen != 31)
   134ac:	1a00000a 	bne	134dc <MSCBotBulkOut+0x80>
    {
        DBG("Invalid length (%d)\n", iLen);
        return FALSE;
    }
    if (pCBW->dwCBWSignature != CBW_SIGNATURE)
   134b0:	e5942000 	ldr	r2, [r4]
   134b4:	e59f31b0 	ldr	r3, [pc, #432]	; 1366c <MSCBotBulkOut+0x210>
   134b8:	e1520003 	cmp	r2, r3
   134bc:	1a000006 	bne	134dc <MSCBotBulkOut+0x80>
        DBG("Invalid signature %x\n", pCBW->dwCBWSignature);
        return FALSE;
    }

    // CBW meaningful?
    if (pCBW->bCBWLun != 0)
   134c0:	e5d4300d 	ldrb	r3, [r4, #13]
   134c4:	e3530000 	cmp	r3, #0
   134c8:	1a000003 	bne	134dc <MSCBotBulkOut+0x80>
    {
        DBG("Invalid LUN %d\n", pCBW->bCBWLun);
        return FALSE;
    }
    if ((pCBW->bCBWCBLength < 1) || (pCBW->bCBWCBLength > 16))
   134cc:	e5d4100e 	ldrb	r1, [r4, #14]
   134d0:	e2412001 	sub	r2, r1, #1
   134d4:	e352000f 	cmp	r2, #15
   134d8:	9a000055 	bls	13634 <MSCBotBulkOut+0x1d8>

            // check if we got a good CBW
            if (!CheckCBW(&CBW, iLen))
            {
                // see 6.6.1
                USBHwEPStall(MSC_BULK_IN_EP, TRUE);
   134dc:	e3a00085 	mov	r0, #133	; 0x85
   134e0:	e3a01001 	mov	r1, #1
   134e4:	eb000383 	bl	142f8 <USBHwEPStall>
                USBHwEPStall(MSC_BULK_OUT_EP, TRUE);
   134e8:	e3a00002 	mov	r0, #2
   134ec:	e3a01001 	mov	r1, #1
   134f0:	eb000380 	bl	142f8 <USBHwEPStall>
                eState = eStalled;
   134f4:	e3a02004 	mov	r2, #4
   134f8:	e59f3168 	ldr	r3, [pc, #360]	; 13668 <MSCBotBulkOut+0x20c>
   134fc:	ea00001d 	b	13578 <MSCBotBulkOut+0x11c>
                SendCSW(STATUS_FAILED);
                break;
            }

            // rule: if device and host disagree on direction, send CSW with status 2
            if ((iLen > 0) &&
   13500:	e59d2000 	ldr	r2, [sp]
   13504:	e3520000 	cmp	r2, #0
   13508:	da000007 	ble	1352c <MSCBotBulkOut+0xd0>
   1350c:	e3150080 	tst	r5, #128	; 0x80
   13510:	e59d3004 	ldr	r3, [sp, #4]
   13514:	0a000002 	beq	13524 <MSCBotBulkOut+0xc8>
                ((fHostIn && !fDevIn) ||
   13518:	e3530000 	cmp	r3, #0
   1351c:	1a000002 	bne	1352c <MSCBotBulkOut+0xd0>
   13520:	ea000006 	b	13540 <MSCBotBulkOut+0xe4>
                (!fHostIn && fDevIn)))
   13524:	e3530000 	cmp	r3, #0
   13528:	1a000004 	bne	13540 <MSCBotBulkOut+0xe4>
                SendCSW(STATUS_PHASE_ERR);
                break;
            }

            // rule: if D > H, send CSW with status 2
            if (iLen > CBW.dwCBWDataTransferLength)
   1352c:	e59f3134 	ldr	r3, [pc, #308]	; 13668 <MSCBotBulkOut+0x20c>
   13530:	e5931008 	ldr	r1, [r3, #8]
   13534:	e1520001 	cmp	r2, r1
   13538:	e1a01003 	mov	r1, r3
   1353c:	9a000002 	bls	1354c <MSCBotBulkOut+0xf0>
            {
                DBG("Negative residue\n");
                BOTStall();
   13540:	ebffff85 	bl	1335c <BOTStall>
                SendCSW(STATUS_PHASE_ERR);
   13544:	e3a00002 	mov	r0, #2
   13548:	ea00002d 	b	13604 <MSCBotBulkOut+0x1a8>
                break;
            }

            dwTransferSize = iLen;
            if ((dwTransferSize == 0) || fDevIn)
   1354c:	e3520000 	cmp	r2, #0
                BOTStall();
                SendCSW(STATUS_PHASE_ERR);
                break;
            }

            dwTransferSize = iLen;
   13550:	e5832020 	str	r2, [r3, #32]
            if ((dwTransferSize == 0) || fDevIn)
   13554:	0a000003 	beq	13568 <MSCBotBulkOut+0x10c>
   13558:	e59d2004 	ldr	r2, [sp, #4]
   1355c:	e3520000 	cmp	r2, #0
                HandleDataIn();
            }
            else
            {
                // data from host-to-device
                eState = eDataOut;
   13560:	03a02001 	moveq	r2, #1
                SendCSW(STATUS_PHASE_ERR);
                break;
            }

            dwTransferSize = iLen;
            if ((dwTransferSize == 0) || fDevIn)
   13564:	0a000003 	beq	13578 <MSCBotBulkOut+0x11c>
            {
                // data from device-to-host
                eState = eDataIn;
   13568:	e3a03002 	mov	r3, #2
   1356c:	e5813034 	str	r3, [r1, #52]	; 0x34
                HandleDataIn();
   13570:	ebffff88 	bl	13398 <HandleDataIn>
   13574:	ea000039 	b	13660 <MSCBotBulkOut+0x204>
            }
            else
            {
                // data from host-to-device
                eState = eDataOut;
   13578:	e5832034 	str	r2, [r3, #52]	; 0x34
   1357c:	ea000037 	b	13660 <MSCBotBulkOut+0x204>
**************************************************************************/
static void HandleDataOut(void)
{
    int iChunk;

    if (dwOffset < dwTransferSize)
   13580:	e595303c 	ldr	r3, [r5, #60]	; 0x3c
   13584:	e5952020 	ldr	r2, [r5, #32]
   13588:	e1530002 	cmp	r3, r2
   1358c:	e59f40d4 	ldr	r4, [pc, #212]	; 13668 <MSCBotBulkOut+0x20c>
   13590:	2a000012 	bcs	135e0 <MSCBotBulkOut+0x184>
    {
        // get data from host
        iChunk = USBHwEPRead(MSC_BULK_OUT_EP, pbData, dwTransferSize - dwOffset);
   13594:	e0632002 	rsb	r2, r3, r2
   13598:	e5941038 	ldr	r1, [r4, #56]	; 0x38
   1359c:	e3a00002 	mov	r0, #2
   135a0:	eb00037c 	bl	14398 <USBHwEPRead>
        // process data in SCSI layer
        pbData = SCSIHandleData(CBW.CBWCB, CBW.bCBWCBLength, pbData, dwOffset);
   135a4:	e2842038 	add	r2, r4, #56	; 0x38
    int iChunk;

    if (dwOffset < dwTransferSize)
    {
        // get data from host
        iChunk = USBHwEPRead(MSC_BULK_OUT_EP, pbData, dwTransferSize - dwOffset);
   135a8:	e1a05000 	mov	r5, r0
        // process data in SCSI layer
        pbData = SCSIHandleData(CBW.CBWCB, CBW.bCBWCBLength, pbData, dwOffset);
   135ac:	e892000c 	ldm	r2, {r2, r3}
   135b0:	e284000f 	add	r0, r4, #15
   135b4:	e5d4100e 	ldrb	r1, [r4, #14]
   135b8:	eb00008e 	bl	137f8 <SCSIHandleData>
        if (pbData == NULL)
   135bc:	e3500000 	cmp	r0, #0
        {
            BOTStall();
            SendCSW(STATUS_FAILED);
            return;
        }
        dwOffset += iChunk;
   135c0:	1594303c 	ldrne	r3, [r4, #60]	; 0x3c
   135c4:	10855003 	addne	r5, r5, r3
    if (dwOffset < dwTransferSize)
    {
        // get data from host
        iChunk = USBHwEPRead(MSC_BULK_OUT_EP, pbData, dwTransferSize - dwOffset);
        // process data in SCSI layer
        pbData = SCSIHandleData(CBW.CBWCB, CBW.bCBWCBLength, pbData, dwOffset);
   135c8:	e5840038 	str	r0, [r4, #56]	; 0x38
        {
            BOTStall();
            SendCSW(STATUS_FAILED);
            return;
        }
        dwOffset += iChunk;
   135cc:	1584503c 	strne	r5, [r4, #60]	; 0x3c
    {
        // get data from host
        iChunk = USBHwEPRead(MSC_BULK_OUT_EP, pbData, dwTransferSize - dwOffset);
        // process data in SCSI layer
        pbData = SCSIHandleData(CBW.CBWCB, CBW.bCBWCBLength, pbData, dwOffset);
        if (pbData == NULL)
   135d0:	1a000002 	bne	135e0 <MSCBotBulkOut+0x184>
        {
            BOTStall();
   135d4:	ebffff60 	bl	1335c <BOTStall>
            SendCSW(STATUS_FAILED);
   135d8:	e3a00001 	mov	r0, #1
   135dc:	ea000008 	b	13604 <MSCBotBulkOut+0x1a8>
        }
        dwOffset += iChunk;
    }

    // are we done now?
    if (dwOffset == dwTransferSize)
   135e0:	e59f3080 	ldr	r3, [pc, #128]	; 13668 <MSCBotBulkOut+0x20c>
   135e4:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
   135e8:	e5931020 	ldr	r1, [r3, #32]
   135ec:	e1520001 	cmp	r2, r1
   135f0:	1a00001a 	bne	13660 <MSCBotBulkOut+0x204>
    {
        if (dwOffset != CBW.dwCBWDataTransferLength)
   135f4:	e5933008 	ldr	r3, [r3, #8]
   135f8:	e1520003 	cmp	r2, r3
        {
            // stall pipe
            DBG("stalling DOUT");
            BOTStall();
   135fc:	1bffff56 	blne	1335c <BOTStall>
        }
        SendCSW(STATUS_PASSED);
   13600:	e3a00000 	mov	r0, #0
   13604:	ebffff44 	bl	1331c <SendCSW>
   13608:	ea000014 	b	13660 <MSCBotBulkOut+0x204>
            HandleDataOut();
            break;

        case eDataIn:
        case eCSW:
            iChunk = USBHwEPRead(bEP, NULL, 0);
   1360c:	e3a01000 	mov	r1, #0
   13610:	e1a02001 	mov	r2, r1
   13614:	eb00035f 	bl	14398 <USBHwEPRead>
            DBG("Phase error in state %d, %d bytes\n", eState, iChunk);
            eState = eCBW;
   13618:	e3a03000 	mov	r3, #0
   1361c:	e5853034 	str	r3, [r5, #52]	; 0x34
            break;
   13620:	ea00000e 	b	13660 <MSCBotBulkOut+0x204>

        case eStalled:
        // keep stalling
            USBHwEPStall(MSC_BULK_OUT_EP, TRUE);
   13624:	e3a00002 	mov	r0, #2
   13628:	e3a01001 	mov	r1, #1
   1362c:	eb000331 	bl	142f8 <USBHwEPStall>
            break;
   13630:	ea00000a 	b	13660 <MSCBotBulkOut+0x204>
            }

            DBG("CBW: len=%d, flags=%x, cmd=%x, cmdlen=%d\n",
                    CBW.dwCBWDataTransferLength, CBW.bmCBWFlags, CBW.CBWCB[0], CBW.bCBWCBLength);

            dwOffset = 0;
   13634:	e584303c 	str	r3, [r4, #60]	; 0x3c
            dwTransferSize = 0;
   13638:	e5843020 	str	r3, [r4, #32]
            fHostIn = ((CBW.bmCBWFlags & 0x80) != 0);

            // verify request
            pbData = SCSIHandleCmd(CBW.CBWCB, CBW.bCBWCBLength, &iLen, &fDevIn);
   1363c:	e284000f 	add	r0, r4, #15
   13640:	e1a0200d 	mov	r2, sp
   13644:	e28d3004 	add	r3, sp, #4
            DBG("CBW: len=%d, flags=%x, cmd=%x, cmdlen=%d\n",
                    CBW.dwCBWDataTransferLength, CBW.bmCBWFlags, CBW.CBWCB[0], CBW.bCBWCBLength);

            dwOffset = 0;
            dwTransferSize = 0;
            fHostIn = ((CBW.bmCBWFlags & 0x80) != 0);
   13648:	e5d4500c 	ldrb	r5, [r4, #12]

            // verify request
            pbData = SCSIHandleCmd(CBW.CBWCB, CBW.bCBWCBLength, &iLen, &fDevIn);
   1364c:	eb000025 	bl	136e8 <SCSIHandleCmd>
            if (pbData == NULL)
   13650:	e3500000 	cmp	r0, #0
            dwOffset = 0;
            dwTransferSize = 0;
            fHostIn = ((CBW.bmCBWFlags & 0x80) != 0);

            // verify request
            pbData = SCSIHandleCmd(CBW.CBWCB, CBW.bCBWCBLength, &iLen, &fDevIn);
   13654:	e5840038 	str	r0, [r4, #56]	; 0x38
            if (pbData == NULL)
   13658:	1affffa8 	bne	13500 <MSCBotBulkOut+0xa4>
   1365c:	eaffffdc 	b	135d4 <MSCBotBulkOut+0x178>
        default:
            DBG("Invalid state %d\n", eState);
//            ASSERT(FALSE);
            break;
    }
}
   13660:	e8bd403c 	pop	{r2, r3, r4, r5, lr}
   13664:	e12fff1e 	bx	lr
   13668:	40000b9c 	.word	0x40000b9c
   1366c:	43425355 	.word	0x43425355

00013670 <MSCBotBulkIn>:
    IN      bEP         Endpoint number
            bEPStatus   Endpoint status (indicates NAK, STALL, etc)

**************************************************************************/
void MSCBotBulkIn(U8 bEP, U8 bEPStatus)
{
   13670:	e92d4030 	push	{r4, r5, lr}
    // ignore events on stalled EP
    if (bEPStatus & EP_STATUS_STALLED)
   13674:	e2115002 	ands	r5, r1, #2
   13678:	1a000012 	bne	136c8 <MSCBotBulkIn+0x58>
    {
        return;
    }

    switch (eState)
   1367c:	e59f404c 	ldr	r4, [pc, #76]	; 136d0 <MSCBotBulkIn+0x60>
   13680:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   13684:	e3530003 	cmp	r3, #3
   13688:	0a000005 	beq	136a4 <MSCBotBulkIn+0x34>
   1368c:	e3530004 	cmp	r3, #4
   13690:	0a000009 	beq	136bc <MSCBotBulkIn+0x4c>
   13694:	e3530002 	cmp	r3, #2
   13698:	1a00000a 	bne	136c8 <MSCBotBulkIn+0x58>
        default:
            DBG("Invalid state %d\n", eState);
//            ASSERT(FALSE);
            break;
    }
}
   1369c:	e8bd4030 	pop	{r4, r5, lr}
        case eDataOut:
        // ignore possibly old ACKs
            break;

        case eDataIn:
            HandleDataIn();
   136a0:	eaffff3c 	b	13398 <HandleDataIn>
            break;

        case eCSW:
        // wait for an IN token, then send the CSW
            USBHwEPWrite(MSC_BULK_IN_EP, (U8 *)&CSW, 13);
   136a4:	e3a00085 	mov	r0, #133	; 0x85
   136a8:	e2841024 	add	r1, r4, #36	; 0x24
   136ac:	e3a0200d 	mov	r2, #13
   136b0:	eb000318 	bl	14318 <USBHwEPWrite>
            eState = eCBW;
   136b4:	e5845034 	str	r5, [r4, #52]	; 0x34
            break;
   136b8:	ea000002 	b	136c8 <MSCBotBulkIn+0x58>

        case eStalled:
        // keep stalling
            USBHwEPStall(MSC_BULK_IN_EP, TRUE);
   136bc:	e3a00085 	mov	r0, #133	; 0x85
   136c0:	e3a01001 	mov	r1, #1
   136c4:	eb00030b 	bl	142f8 <USBHwEPStall>
        default:
            DBG("Invalid state %d\n", eState);
//            ASSERT(FALSE);
            break;
    }
}
   136c8:	e8bd4030 	pop	{r4, r5, lr}
   136cc:	e12fff1e 	bx	lr
   136d0:	40000b9c 	.word	0x40000b9c

000136d4 <SCSIReset>:
        Resets any SCSI state

**************************************************************************/
void SCSIReset(void)
{
    dwSense = 0;
   136d4:	e59f3008 	ldr	r3, [pc, #8]	; 136e4 <SCSIReset+0x10>
   136d8:	e3a02000 	mov	r2, #0
   136dc:	e5832000 	str	r2, [r3]
}
   136e0:	e12fff1e 	bx	lr
   136e4:	40000bdc 	.word	0x40000bdc

000136e8 <SCSIHandleCmd>:

    Returns a pointer to the data exchange buffer if successful,
    return NULL otherwise.
**************************************************************************/
U8 * SCSIHandleCmd(U8 *pbCDB, int iCDBLen, int *piRspLen, BOOL *pfDevIn)
{
   136e8:	e92d41f3 	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   136ec:	e1a05000 	mov	r5, r0

	//pCDB = (TCDB6 *)pbCDB;
	//Compiler warning fix
    TCDB6 cdb;
	pCDB = &cdb;
	memcpy(pCDB, pbCDB, sizeof(TCDB6));
   136f0:	e3a08008 	mov	r8, #8

    Returns a pointer to the data exchange buffer if successful,
    return NULL otherwise.
**************************************************************************/
U8 * SCSIHandleCmd(U8 *pbCDB, int iCDBLen, int *piRspLen, BOOL *pfDevIn)
{
   136f4:	e1a06001 	mov	r6, r1
   136f8:	e1a04002 	mov	r4, r2

	//pCDB = (TCDB6 *)pbCDB;
	//Compiler warning fix
    TCDB6 cdb;
	pCDB = &cdb;
	memcpy(pCDB, pbCDB, sizeof(TCDB6));
   136fc:	e1a0000d 	mov	r0, sp
   13700:	e1a01005 	mov	r1, r5
   13704:	e1a02008 	mov	r2, r8

    Returns a pointer to the data exchange buffer if successful,
    return NULL otherwise.
**************************************************************************/
U8 * SCSIHandleCmd(U8 *pbCDB, int iCDBLen, int *piRspLen, BOOL *pfDevIn)
{
   13708:	e1a07003 	mov	r7, r3

	//pCDB = (TCDB6 *)pbCDB;
	//Compiler warning fix
    TCDB6 cdb;
	pCDB = &cdb;
	memcpy(pCDB, pbCDB, sizeof(TCDB6));
   1370c:	eb001390 	bl	18554 <memcpy>
	
    // default direction is from device to host
    *pfDevIn = TRUE;
   13710:	e3a03001 	mov	r3, #1
   13714:	e5873000 	str	r3, [r7]

    switch (pCDB->bOperationCode)
   13718:	e5dd3000 	ldrb	r3, [sp]
   1371c:	e3530012 	cmp	r3, #18
   13720:	0a000010 	beq	13768 <SCSIHandleCmd+0x80>
   13724:	8a000004 	bhi	1373c <SCSIHandleCmd+0x54>
   13728:	e3530000 	cmp	r3, #0
   1372c:	0a000010 	beq	13774 <SCSIHandleCmd+0x8c>
   13730:	e3530003 	cmp	r3, #3
   13734:	1a000024 	bne	137cc <SCSIHandleCmd+0xe4>
   13738:	ea000006 	b	13758 <SCSIHandleCmd+0x70>
   1373c:	e3530028 	cmp	r3, #40	; 0x28
   13740:	0a00000f 	beq	13784 <SCSIHandleCmd+0x9c>
   13744:	e353002a 	cmp	r3, #42	; 0x2a
   13748:	0a000014 	beq	137a0 <SCSIHandleCmd+0xb8>
   1374c:	e3530025 	cmp	r3, #37	; 0x25
   13750:	1a00001d 	bne	137cc <SCSIHandleCmd+0xe4>
   13754:	ea000008 	b	1377c <SCSIHandleCmd+0x94>

        // request sense (6)
        case SCSI_CMD_REQUEST_SENSE:
            DBG("REQUEST SENSE (%06X)\n", dwSense);
            // check params
            *piRspLen = MIN(18, pCDB->bLength);
   13758:	e5dd3004 	ldrb	r3, [sp, #4]
   1375c:	e3530012 	cmp	r3, #18
   13760:	23a03012 	movcs	r3, #18
   13764:	ea000002 	b	13774 <SCSIHandleCmd+0x8c>

        // inquiry (6)
        case SCSI_CMD_INQUIRY:
            DBG("INQUIRY\n");
            // see SPC20r20, 4.3.4.6
            *piRspLen = MIN(36, pCDB->bLength);
   13768:	e5dd3004 	ldrb	r3, [sp, #4]
   1376c:	e3530024 	cmp	r3, #36	; 0x24
   13770:	23a03024 	movcs	r3, #36	; 0x24
   13774:	e5843000 	str	r3, [r4]
   13778:	ea000011 	b	137c4 <SCSIHandleCmd+0xdc>
            break;

        // read capacity (10)
        case SCSI_CMD_READ_CAPACITY:
            DBG("READ CAPACITY\n");
            *piRspLen = 8;
   1377c:	e5848000 	str	r8, [r4]
   13780:	ea00000f 	b	137c4 <SCSIHandleCmd+0xdc>
            break;

        // read (10)
        case SCSI_CMD_READ_10:
            if (iCDBLen != 10)
   13784:	e356000a 	cmp	r6, #10
   13788:	1a000015 	bne	137e4 <SCSIHandleCmd+0xfc>
            {
                return NULL;
            }
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
            dwLen = (pbCDB[7] << 8) | pbCDB[8];
   1378c:	e5d52007 	ldrb	r2, [r5, #7]
   13790:	e5d53008 	ldrb	r3, [r5, #8]
   13794:	e1833402 	orr	r3, r3, r2, lsl #8
            DBG("READ10, LBA=%d, len=%d\n", dwLBA, dwLen);
            *piRspLen = dwLen * BLOCKSIZE;
   13798:	e1a03483 	lsl	r3, r3, #9
   1379c:	eafffff4 	b	13774 <SCSIHandleCmd+0x8c>
            break;

        // write (10)
        case SCSI_CMD_WRITE_10:
            if (iCDBLen != 10)
   137a0:	e356000a 	cmp	r6, #10
   137a4:	1a00000e 	bne	137e4 <SCSIHandleCmd+0xfc>
            {
                return NULL;
            }
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
            dwLen = (pbCDB[7] << 8) | pbCDB[8];
   137a8:	e5d52007 	ldrb	r2, [r5, #7]
   137ac:	e5d53008 	ldrb	r3, [r5, #8]
   137b0:	e1833402 	orr	r3, r3, r2, lsl #8
            DBG("WRITE10, LBA=%d, len=%d\n", dwLBA, dwLen);
            *piRspLen = dwLen * BLOCKSIZE;
   137b4:	e1a03483 	lsl	r3, r3, #9
   137b8:	e5843000 	str	r3, [r4]
            *pfDevIn = FALSE;
   137bc:	e3a03000 	mov	r3, #0
   137c0:	e5873000 	str	r3, [r7]
            *piRspLen = 0;
            return NULL;
        }


    return abBlockBuf;
   137c4:	e59f0024 	ldr	r0, [pc, #36]	; 137f0 <SCSIHandleCmd+0x108>
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
            dwLen = (pbCDB[7] << 8) | pbCDB[8];
            DBG("WRITE10, LBA=%d, len=%d\n", dwLBA, dwLen);
            *piRspLen = dwLen * BLOCKSIZE;
            *pfDevIn = FALSE;
            break;
   137c8:	ea000006 	b	137e8 <SCSIHandleCmd+0x100>
            {
                DBG(" %02X", pbCDB[i]);
            }
            DBG("\n");
            // unsupported command
            dwSense = INVALID_CMD_OPCODE;
   137cc:	e59f3020 	ldr	r3, [pc, #32]	; 137f4 <SCSIHandleCmd+0x10c>
   137d0:	e3a02a52 	mov	r2, #335872	; 0x52000
            *piRspLen = 0;
   137d4:	e3a00000 	mov	r0, #0
            {
                DBG(" %02X", pbCDB[i]);
            }
            DBG("\n");
            // unsupported command
            dwSense = INVALID_CMD_OPCODE;
   137d8:	e5832000 	str	r2, [r3]
            *piRspLen = 0;
   137dc:	e5840000 	str	r0, [r4]
            return NULL;
   137e0:	ea000000 	b	137e8 <SCSIHandleCmd+0x100>

        // write (10)
        case SCSI_CMD_WRITE_10:
            if (iCDBLen != 10)
            {
                return NULL;
   137e4:	e3a00000 	mov	r0, #0
            return NULL;
        }


    return abBlockBuf;
}
   137e8:	e8bd41fc 	pop	{r2, r3, r4, r5, r6, r7, r8, lr}
   137ec:	e12fff1e 	bx	lr
   137f0:	40000be0 	.word	0x40000be0
   137f4:	40000bdc 	.word	0x40000bdc

000137f8 <SCSIHandleData>:

    Returns a pointer to the next data to be exchanged if successful,
    returns NULL otherwise.
**************************************************************************/
U8 * SCSIHandleData(U8 *pbCDB, int iCDBLen, U8 *pbData, U32 dwOffset)
{
   137f8:	e92d4077 	push	{r0, r1, r2, r4, r5, r6, lr}
   137fc:	e1a05000 	mov	r5, r0
   13800:	e1a04002 	mov	r4, r2

	//pCDB = (TCDB6 *)pbCDB;
	//Compiler warning fix
    TCDB6 cdb;
	pCDB = &cdb;
	memcpy(pCDB, pbCDB, sizeof(TCDB6));
   13804:	e1a0000d 	mov	r0, sp
   13808:	e1a01005 	mov	r1, r5
   1380c:	e3a02008 	mov	r2, #8

    Returns a pointer to the next data to be exchanged if successful,
    returns NULL otherwise.
**************************************************************************/
U8 * SCSIHandleData(U8 *pbCDB, int iCDBLen, U8 *pbData, U32 dwOffset)
{
   13810:	e1a06003 	mov	r6, r3

	//pCDB = (TCDB6 *)pbCDB;
	//Compiler warning fix
    TCDB6 cdb;
	pCDB = &cdb;
	memcpy(pCDB, pbCDB, sizeof(TCDB6));
   13814:	eb00134e 	bl	18554 <memcpy>
	
    switch (pCDB->bOperationCode)
   13818:	e5dd3000 	ldrb	r3, [sp]
   1381c:	e3530012 	cmp	r3, #18
   13820:	0a00001e 	beq	138a0 <SCSIHandleData+0xa8>
   13824:	8a000005 	bhi	13840 <SCSIHandleData+0x48>
   13828:	e3530000 	cmp	r3, #0
   1382c:	e59f5194 	ldr	r5, [pc, #404]	; 139c8 <SCSIHandleData+0x1d0>
   13830:	0a000009 	beq	1385c <SCSIHandleData+0x64>
   13834:	e3530003 	cmp	r3, #3
   13838:	1a00005b 	bne	139ac <SCSIHandleData+0x1b4>
   1383c:	ea00000a 	b	1386c <SCSIHandleData+0x74>
   13840:	e3530028 	cmp	r3, #40	; 0x28
   13844:	0a00002d 	beq	13900 <SCSIHandleData+0x108>
   13848:	e353002a 	cmp	r3, #42	; 0x2a
   1384c:	0a00003e 	beq	1394c <SCSIHandleData+0x154>
   13850:	e3530025 	cmp	r3, #37	; 0x25
   13854:	1a000054 	bne	139ac <SCSIHandleData+0x1b4>
   13858:	ea000015 	b	138b4 <SCSIHandleData+0xbc>
    {

        // test unit ready
        case 0x00:
            if (dwSense != 0)
   1385c:	e4953004 	ldr	r3, [r5], #4
            dwSense = INVALID_CMD_OPCODE;
            return NULL;
        }

    // default: return pointer to start of block buffer
    return abBlockBuf;
   13860:	e3530000 	cmp	r3, #0
   13864:	13a05000 	movne	r5, #0
   13868:	ea000053 	b	139bc <SCSIHandleData+0x1c4>
            }
            break;

        // request sense
        case SCSI_CMD_REQUEST_SENSE:
            memcpy(pbData, abSense, 18);
   1386c:	e3a02012 	mov	r2, #18
   13870:	e1a00004 	mov	r0, r4
   13874:	e59f1150 	ldr	r1, [pc, #336]	; 139cc <SCSIHandleData+0x1d4>
   13878:	eb001335 	bl	18554 <memcpy>
            // fill in KEY/ASC/ASCQ
            pbData[2] = (dwSense >> 16) & 0xFF;
   1387c:	e5953000 	ldr	r3, [r5]
   13880:	e1a02823 	lsr	r2, r3, #16
   13884:	e5c42002 	strb	r2, [r4, #2]
            pbData[12] = (dwSense >> 8) & 0xFF;
            pbData[13] = (dwSense >> 0) & 0xFF;
   13888:	e5c4300d 	strb	r3, [r4, #13]
        // request sense
        case SCSI_CMD_REQUEST_SENSE:
            memcpy(pbData, abSense, 18);
            // fill in KEY/ASC/ASCQ
            pbData[2] = (dwSense >> 16) & 0xFF;
            pbData[12] = (dwSense >> 8) & 0xFF;
   1388c:	e1a02423 	lsr	r2, r3, #8
            pbData[13] = (dwSense >> 0) & 0xFF;
            // reset sense data
            dwSense = 0;
   13890:	e3a03000 	mov	r3, #0
        // request sense
        case SCSI_CMD_REQUEST_SENSE:
            memcpy(pbData, abSense, 18);
            // fill in KEY/ASC/ASCQ
            pbData[2] = (dwSense >> 16) & 0xFF;
            pbData[12] = (dwSense >> 8) & 0xFF;
   13894:	e5c4200c 	strb	r2, [r4, #12]
            pbData[13] = (dwSense >> 0) & 0xFF;
            // reset sense data
            dwSense = 0;
   13898:	e4853004 	str	r3, [r5], #4
            break;
   1389c:	ea000046 	b	139bc <SCSIHandleData+0x1c4>

        // inquiry
        case SCSI_CMD_INQUIRY:
            memcpy(pbData, abInquiry, sizeof(abInquiry));
   138a0:	e1a00004 	mov	r0, r4
   138a4:	e59f1124 	ldr	r1, [pc, #292]	; 139d0 <SCSIHandleData+0x1d8>
   138a8:	e3a02024 	mov	r2, #36	; 0x24
   138ac:	eb001328 	bl	18554 <memcpy>
   138b0:	ea000010 	b	138f8 <SCSIHandleData+0x100>
            break;

        // read capacity
        case SCSI_CMD_READ_CAPACITY:
        // get size of drive (bytes)
            BlockDevGetSize(&dwNumBlocks);
   138b4:	e28d0008 	add	r0, sp, #8
   138b8:	eb000094 	bl	13b10 <BlockDevGetSize>
            // calculate highest LBA
            dwMaxBlock = (dwNumBlocks - 1) / 512;
   138bc:	e59d2008 	ldr	r2, [sp, #8]
   138c0:	e2422001 	sub	r2, r2, #1
   138c4:	e1a014a2 	lsr	r1, r2, #9

            pbData[0] = (dwMaxBlock >> 24) & 0xFF;
            pbData[1] = (dwMaxBlock >> 16) & 0xFF;
   138c8:	e1a00ca2 	lsr	r0, r2, #25
            pbData[2] = (dwMaxBlock >> 8) & 0xFF;
   138cc:	e1a028a2 	lsr	r2, r2, #17
        // get size of drive (bytes)
            BlockDevGetSize(&dwNumBlocks);
            // calculate highest LBA
            dwMaxBlock = (dwNumBlocks - 1) / 512;

            pbData[0] = (dwMaxBlock >> 24) & 0xFF;
   138d0:	e3a03000 	mov	r3, #0
            pbData[1] = (dwMaxBlock >> 16) & 0xFF;
            pbData[2] = (dwMaxBlock >> 8) & 0xFF;
   138d4:	e5c42002 	strb	r2, [r4, #2]
            pbData[3] = (dwMaxBlock >> 0) & 0xFF;
            pbData[4] = (BLOCKSIZE >> 24) & 0xFF;
            pbData[5] = (BLOCKSIZE >> 16) & 0xFF;
            pbData[6] = (BLOCKSIZE >> 8) & 0xFF;
   138d8:	e3a02002 	mov	r2, #2
        // get size of drive (bytes)
            BlockDevGetSize(&dwNumBlocks);
            // calculate highest LBA
            dwMaxBlock = (dwNumBlocks - 1) / 512;

            pbData[0] = (dwMaxBlock >> 24) & 0xFF;
   138dc:	e5c43000 	strb	r3, [r4]
            pbData[1] = (dwMaxBlock >> 16) & 0xFF;
   138e0:	e5c40001 	strb	r0, [r4, #1]
            pbData[2] = (dwMaxBlock >> 8) & 0xFF;
            pbData[3] = (dwMaxBlock >> 0) & 0xFF;
   138e4:	e5c41003 	strb	r1, [r4, #3]
            pbData[4] = (BLOCKSIZE >> 24) & 0xFF;
   138e8:	e5c43004 	strb	r3, [r4, #4]
            pbData[5] = (BLOCKSIZE >> 16) & 0xFF;
   138ec:	e5c43005 	strb	r3, [r4, #5]
            pbData[6] = (BLOCKSIZE >> 8) & 0xFF;
   138f0:	e5c42006 	strb	r2, [r4, #6]
            pbData[7] = (BLOCKSIZE >> 0) & 0xFF;
   138f4:	e5c43007 	strb	r3, [r4, #7]
            dwSense = INVALID_CMD_OPCODE;
            return NULL;
        }

    // default: return pointer to start of block buffer
    return abBlockBuf;
   138f8:	e59f50d4 	ldr	r5, [pc, #212]	; 139d4 <SCSIHandleData+0x1dc>
            pbData[3] = (dwMaxBlock >> 0) & 0xFF;
            pbData[4] = (BLOCKSIZE >> 24) & 0xFF;
            pbData[5] = (BLOCKSIZE >> 16) & 0xFF;
            pbData[6] = (BLOCKSIZE >> 8) & 0xFF;
            pbData[7] = (BLOCKSIZE >> 0) & 0xFF;
            break;
   138fc:	ea00002e 	b	139bc <SCSIHandleData+0x1c4>

        // read10
        case SCSI_CMD_READ_10:
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
   13900:	e5d51002 	ldrb	r1, [r5, #2]
   13904:	e5d50003 	ldrb	r0, [r5, #3]
   13908:	e5d53004 	ldrb	r3, [r5, #4]
   1390c:	e5d52005 	ldrb	r2, [r5, #5]

            // copy data from block buffer
            dwBufPos = (dwOffset & (BLOCKSIZE - 1));
   13910:	e1a05b86 	lsl	r5, r6, #23
            if (dwBufPos == 0)
   13914:	e1b05ba5 	lsrs	r5, r5, #23
   13918:	1a000020 	bne	139a0 <SCSIHandleData+0x1a8>
            pbData[7] = (BLOCKSIZE >> 0) & 0xFF;
            break;

        // read10
        case SCSI_CMD_READ_10:
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
   1391c:	e1a00800 	lsl	r0, r0, #16
   13920:	e1801c01 	orr	r1, r0, r1, lsl #24
   13924:	e1812002 	orr	r2, r1, r2
            if (dwBufPos == 0)
            {
                // read new block
                dwBlockNr = dwLBA + (dwOffset / BLOCKSIZE);
                DBG("R");
                if (BlockDevRead(dwBlockNr, abBlockBuf) < 0)
   13928:	e59f4098 	ldr	r4, [pc, #152]	; 139c8 <SCSIHandleData+0x1d0>
            pbData[7] = (BLOCKSIZE >> 0) & 0xFF;
            break;

        // read10
        case SCSI_CMD_READ_10:
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
   1392c:	e1823403 	orr	r3, r2, r3, lsl #8
            if (dwBufPos == 0)
            {
                // read new block
                dwBlockNr = dwLBA + (dwOffset / BLOCKSIZE);
                DBG("R");
                if (BlockDevRead(dwBlockNr, abBlockBuf) < 0)
   13930:	e08304a6 	add	r0, r3, r6, lsr #9
   13934:	e2841004 	add	r1, r4, #4
   13938:	eb000140 	bl	13e40 <BlockDevRead>
   1393c:	e3500000 	cmp	r0, #0
                {
                    dwSense = READ_ERROR;
   13940:	b59f3090 	ldrlt	r3, [pc, #144]	; 139d8 <SCSIHandleData+0x1e0>
            if (dwBufPos == 0)
            {
                // read new block
                dwBlockNr = dwLBA + (dwOffset / BLOCKSIZE);
                DBG("R");
                if (BlockDevRead(dwBlockNr, abBlockBuf) < 0)
   13944:	aa000015 	bge	139a0 <SCSIHandleData+0x1a8>
   13948:	ea000012 	b	13998 <SCSIHandleData+0x1a0>
            // return pointer to data
            return abBlockBuf + dwBufPos;

            // write10
            case SCSI_CMD_WRITE_10:
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
   1394c:	e5d51002 	ldrb	r1, [r5, #2]
   13950:	e5d50003 	ldrb	r0, [r5, #3]
   13954:	e5d53004 	ldrb	r3, [r5, #4]
   13958:	e5d52005 	ldrb	r2, [r5, #5]

            // copy data to block buffer
            dwBufPos = ((dwOffset + 64) & (BLOCKSIZE - 1));
   1395c:	e2865040 	add	r5, r6, #64	; 0x40
   13960:	e1a05b85 	lsl	r5, r5, #23
            if (dwBufPos == 0)
   13964:	e1b05ba5 	lsrs	r5, r5, #23
   13968:	1a00000c 	bne	139a0 <SCSIHandleData+0x1a8>
            // return pointer to data
            return abBlockBuf + dwBufPos;

            // write10
            case SCSI_CMD_WRITE_10:
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
   1396c:	e1a00800 	lsl	r0, r0, #16
   13970:	e1801c01 	orr	r1, r0, r1, lsl #24
   13974:	e1812002 	orr	r2, r1, r2
            if (dwBufPos == 0)
            {
                // write new block
                dwBlockNr = dwLBA + (dwOffset / BLOCKSIZE);
                DBG("W");
                if (BlockDevWrite(dwBlockNr, abBlockBuf) < 0)
   13978:	e59f4048 	ldr	r4, [pc, #72]	; 139c8 <SCSIHandleData+0x1d0>
            // return pointer to data
            return abBlockBuf + dwBufPos;

            // write10
            case SCSI_CMD_WRITE_10:
            dwLBA = (pbCDB[2] << 24) | (pbCDB[3] << 16) | (pbCDB[4] << 8) | (pbCDB[5]);
   1397c:	e1823403 	orr	r3, r2, r3, lsl #8
            if (dwBufPos == 0)
            {
                // write new block
                dwBlockNr = dwLBA + (dwOffset / BLOCKSIZE);
                DBG("W");
                if (BlockDevWrite(dwBlockNr, abBlockBuf) < 0)
   13980:	e08304a6 	add	r0, r3, r6, lsr #9
   13984:	e2841004 	add	r1, r4, #4
   13988:	eb000114 	bl	13de0 <BlockDevWrite>
   1398c:	e3500000 	cmp	r0, #0
   13990:	aa000002 	bge	139a0 <SCSIHandleData+0x1a8>
                {
                    dwSense = WRITE_ERROR;
   13994:	e3a03bc3 	mov	r3, #199680	; 0x30c00
   13998:	e5843000 	str	r3, [r4]
                    DBG("BlockDevWrite failed\n");
                    return NULL;
   1399c:	ea000006 	b	139bc <SCSIHandleData+0x1c4>
                }
            }
            // return pointer to next data
            return abBlockBuf + dwBufPos;
   139a0:	e59f302c 	ldr	r3, [pc, #44]	; 139d4 <SCSIHandleData+0x1dc>
   139a4:	e0835005 	add	r5, r3, r5
   139a8:	ea000003 	b	139bc <SCSIHandleData+0x1c4>

            default:
            // unsupported command
            dwSense = INVALID_CMD_OPCODE;
   139ac:	e59f3014 	ldr	r3, [pc, #20]	; 139c8 <SCSIHandleData+0x1d0>
   139b0:	e3a02a52 	mov	r2, #335872	; 0x52000
   139b4:	e5832000 	str	r2, [r3]
            return NULL;
   139b8:	e3a05000 	mov	r5, #0
        }

    // default: return pointer to start of block buffer
    return abBlockBuf;
}
   139bc:	e1a00005 	mov	r0, r5
   139c0:	e8bd407e 	pop	{r1, r2, r3, r4, r5, r6, lr}
   139c4:	e12fff1e 	bx	lr
   139c8:	40000bdc 	.word	0x40000bdc
   139cc:	000258d4 	.word	0x000258d4
   139d0:	000258e6 	.word	0x000258e6
   139d4:	40000be0 	.word	0x40000be0
   139d8:	00031100 	.word	0x00031100

000139dc <Resp8b>:
}

/*****************************************************************************/

static U8 Resp8b(void)
{
   139dc:	e92d4010 	push	{r4, lr}
   139e0:	e3a04008 	mov	r4, #8
    U8 resp;

    /* Respone will come after 1 - 8 pings */
    for (i = 0; i < 8; i++)
    {
        resp = SPISend(0xff);
   139e4:	e3a000ff 	mov	r0, #255	; 0xff
   139e8:	eb00016a 	bl	13f98 <SPISend>
        if (resp != 0xff)
   139ec:	e35000ff 	cmp	r0, #255	; 0xff
   139f0:	1a000002 	bne	13a00 <Resp8b+0x24>
   139f4:	e2444001 	sub	r4, r4, #1
{
    U8 i;
    U8 resp;

    /* Respone will come after 1 - 8 pings */
    for (i = 0; i < 8; i++)
   139f8:	e21440ff 	ands	r4, r4, #255	; 0xff
   139fc:	1afffff8 	bne	139e4 <Resp8b+0x8>
            return resp;
        }
    }

    return resp;
}
   13a00:	e8bd4010 	pop	{r4, lr}
   13a04:	e12fff1e 	bx	lr

00013a08 <Command>:
#define CMD_READSINGLEBLOCK 17
#define CMD_WRITE           24
#define CMD_WRITE_MULTIPLE  25

static void Command(U8 cmd, U32 param)
{
   13a08:	e92d4003 	push	{r0, r1, lr}
    U8  abCmd[8];

    // create buffer
    abCmd[0] = 0xff;
    abCmd[1] = 0x40 | cmd;
    abCmd[2] = (U8)(param >> 24);
   13a0c:	e1a02c21 	lsr	r2, r1, #24
   13a10:	e5cd2002 	strb	r2, [sp, #2]
    abCmd[3] = (U8)(param >> 16);
   13a14:	e1a02821 	lsr	r2, r1, #16
{
    U8  abCmd[8];

    // create buffer
    abCmd[0] = 0xff;
    abCmd[1] = 0x40 | cmd;
   13a18:	e3800040 	orr	r0, r0, #64	; 0x40
    abCmd[2] = (U8)(param >> 24);
    abCmd[3] = (U8)(param >> 16);
   13a1c:	e5cd2003 	strb	r2, [sp, #3]
    abCmd[4] = (U8)(param >> 8);
   13a20:	e1a02421 	lsr	r2, r1, #8
static void Command(U8 cmd, U32 param)
{
    U8  abCmd[8];

    // create buffer
    abCmd[0] = 0xff;
   13a24:	e3e03000 	mvn	r3, #0
    abCmd[1] = 0x40 | cmd;
   13a28:	e5cd0001 	strb	r0, [sp, #1]
    abCmd[2] = (U8)(param >> 24);
    abCmd[3] = (U8)(param >> 16);
    abCmd[4] = (U8)(param >> 8);
   13a2c:	e5cd2004 	strb	r2, [sp, #4]
    abCmd[5] = (U8)(param);
   13a30:	e5cd1005 	strb	r1, [sp, #5]
    abCmd[6] = 0x95;            /* Checksum (should be only valid for first command (0) */
   13a34:	e3e0206a 	mvn	r2, #106	; 0x6a
    abCmd[7] = 0xff;            /* eat empty command - response */

    SPISendN(abCmd, 8);
   13a38:	e1a0000d 	mov	r0, sp
   13a3c:	e3a01008 	mov	r1, #8
static void Command(U8 cmd, U32 param)
{
    U8  abCmd[8];

    // create buffer
    abCmd[0] = 0xff;
   13a40:	e5cd3000 	strb	r3, [sp]
    abCmd[1] = 0x40 | cmd;
    abCmd[2] = (U8)(param >> 24);
    abCmd[3] = (U8)(param >> 16);
    abCmd[4] = (U8)(param >> 8);
    abCmd[5] = (U8)(param);
    abCmd[6] = 0x95;            /* Checksum (should be only valid for first command (0) */
   13a44:	e5cd2006 	strb	r2, [sp, #6]
    abCmd[7] = 0xff;            /* eat empty command - response */
   13a48:	e5cd3007 	strb	r3, [sp, #7]

    SPISendN(abCmd, 8);
   13a4c:	eb000164 	bl	13fe4 <SPISendN>
}
   13a50:	e8bd400c 	pop	{r2, r3, lr}
   13a54:	e12fff1e 	bx	lr

00013a58 <Resp8bError>:

/*****************************************************************************/

static void Resp8bError(U8 value)
{
    switch (value)
   13a58:	e3500008 	cmp	r0, #8
}

/*****************************************************************************/

static void Resp8bError(U8 value)
{
   13a5c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   13a60:	e1a01000 	mov	r1, r0
    switch (value)
   13a64:	0a000014 	beq	13abc <Resp8bError+0x64>
   13a68:	8a000006 	bhi	13a88 <Resp8bError+0x30>
   13a6c:	e3500002 	cmp	r0, #2
   13a70:	0a000015 	beq	13acc <Resp8bError+0x74>
   13a74:	e3500004 	cmp	r0, #4
   13a78:	0a000011 	beq	13ac4 <Resp8bError+0x6c>
   13a7c:	e3500001 	cmp	r0, #1
   13a80:	1a000016 	bne	13ae0 <Resp8bError+0x88>
   13a84:	ea000012 	b	13ad4 <Resp8bError+0x7c>
   13a88:	e3500020 	cmp	r0, #32
   13a8c:	0a000006 	beq	13aac <Resp8bError+0x54>
   13a90:	e3500040 	cmp	r0, #64	; 0x40
   13a94:	0a000002 	beq	13aa4 <Resp8bError+0x4c>
   13a98:	e3500010 	cmp	r0, #16
   13a9c:	1a00000f 	bne	13ae0 <Resp8bError+0x88>
   13aa0:	ea000003 	b	13ab4 <Resp8bError+0x5c>
    {
        case 0x40:  rprintf("Argument out of bounds.\n");               break;
   13aa4:	e59f0044 	ldr	r0, [pc, #68]	; 13af0 <Resp8bError+0x98>
   13aa8:	ea00000a 	b	13ad8 <Resp8bError+0x80>
        case 0x20:  rprintf("Address out of bounds.\n");                break;
   13aac:	e59f0040 	ldr	r0, [pc, #64]	; 13af4 <Resp8bError+0x9c>
   13ab0:	ea000008 	b	13ad8 <Resp8bError+0x80>
        case 0x10:  rprintf("Error during erase sequence.\n");          break;
   13ab4:	e59f003c 	ldr	r0, [pc, #60]	; 13af8 <Resp8bError+0xa0>
   13ab8:	ea000006 	b	13ad8 <Resp8bError+0x80>
        case 0x08:  rprintf("CRC failed.\n");                           break;
   13abc:	e59f0038 	ldr	r0, [pc, #56]	; 13afc <Resp8bError+0xa4>
   13ac0:	ea000004 	b	13ad8 <Resp8bError+0x80>
        case 0x04:  rprintf("Illegal command.\n");                      break;
   13ac4:	e59f0034 	ldr	r0, [pc, #52]	; 13b00 <Resp8bError+0xa8>
   13ac8:	ea000002 	b	13ad8 <Resp8bError+0x80>
        case 0x02:  rprintf("Erase reset (see SanDisk docs p5-13).\n"); break;
   13acc:	e59f0030 	ldr	r0, [pc, #48]	; 13b04 <Resp8bError+0xac>
   13ad0:	ea000000 	b	13ad8 <Resp8bError+0x80>
//        case 0x01:  rprintf("Card is initialising.\n");                 break;
        case 0x01:  rprintf(".");                 break;
   13ad4:	e59f002c 	ldr	r0, [pc, #44]	; 13b08 <Resp8bError+0xb0>
   13ad8:	ebfff1d9 	bl	10244 <rprintf>
   13adc:	ea000001 	b	13ae8 <Resp8bError+0x90>
            default:
            rprintf("Unknown error 0x%x (see SanDisk docs p5-13).\n", value);
   13ae0:	e59f0024 	ldr	r0, [pc, #36]	; 13b0c <Resp8bError+0xb4>
   13ae4:	ebfff1d6 	bl	10244 <rprintf>
            break;
    }
}
   13ae8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   13aec:	e12fff1e 	bx	lr
   13af0:	00025f75 	.word	0x00025f75
   13af4:	00025f8e 	.word	0x00025f8e
   13af8:	00025fa6 	.word	0x00025fa6
   13afc:	00025fc4 	.word	0x00025fc4
   13b00:	00025fd1 	.word	0x00025fd1
   13b04:	00025fe3 	.word	0x00025fe3
   13b08:	0002628a 	.word	0x0002628a
   13b0c:	0002600a 	.word	0x0002600a

00013b10 <BlockDevGetSize>:
/* ****************************************************************************
 calculates size of card from CSD
 (extension by Martin Thomas, inspired by code from Holger Klabunde)
 */
int BlockDevGetSize(U32 *pdwDriveSize)
{
   13b10:	e92d403f 	push	{r0, r1, r2, r3, r4, r5, lr}
   13b14:	e1a05000 	mov	r5, r0
    U8 cardresp, i, by;
    U8 iob[16];
    U16 c_size, c_size_mult, read_bl_len;

    Command(CMD_READCSD, 0);
   13b18:	e3a01000 	mov	r1, #0
   13b1c:	e3a00009 	mov	r0, #9
   13b20:	ebffffb8 	bl	13a08 <Command>
    do
    {
        cardresp = Resp8b();
   13b24:	ebffffac 	bl	139dc <Resp8b>
    }
    while (cardresp != 0xFE);
   13b28:	e35000fe 	cmp	r0, #254	; 0xfe
   13b2c:	1afffffc 	bne	13b24 <BlockDevGetSize+0x14>

    rprintf("CSD:");
   13b30:	e59f00b8 	ldr	r0, [pc, #184]	; 13bf0 <BlockDevGetSize+0xe0>
   13b34:	ebfff1c2 	bl	10244 <rprintf>
   13b38:	e3a04000 	mov	r4, #0
    for (i = 0; i < 16; i++)
    {
        iob[i] = SPISend(0xFF);
   13b3c:	e3a000ff 	mov	r0, #255	; 0xff
   13b40:	eb000114 	bl	13f98 <SPISend>
   13b44:	e7cd0004 	strb	r0, [sp, r4]
   13b48:	e1a01000 	mov	r1, r0
        rprintf(" %02x", iob[i]);
   13b4c:	e2844001 	add	r4, r4, #1
   13b50:	e59f009c 	ldr	r0, [pc, #156]	; 13bf4 <BlockDevGetSize+0xe4>
   13b54:	ebfff1ba 	bl	10244 <rprintf>
        cardresp = Resp8b();
    }
    while (cardresp != 0xFE);

    rprintf("CSD:");
    for (i = 0; i < 16; i++)
   13b58:	e3540010 	cmp	r4, #16
   13b5c:	1afffff6 	bne	13b3c <BlockDevGetSize+0x2c>
    {
        iob[i] = SPISend(0xFF);
        rprintf(" %02x", iob[i]);
    }
    rprintf("\n");
   13b60:	e59f0090 	ldr	r0, [pc, #144]	; 13bf8 <BlockDevGetSize+0xe8>
   13b64:	ebfff1b6 	bl	10244 <rprintf>

    SPISend(0xff);
   13b68:	e3a000ff 	mov	r0, #255	; 0xff
   13b6c:	eb000109 	bl	13f98 <SPISend>
    SPISend(0xff);
   13b70:	e3a000ff 	mov	r0, #255	; 0xff
   13b74:	eb000107 	bl	13f98 <SPISend>

    c_size = iob[6] & 0x03;     // bits 1..0
    c_size <<= 10;
    c_size += (U16) iob[7] << 2;
   13b78:	e5dd2007 	ldrb	r2, [sp, #7]
    c_size += iob[8] >> 6;
   13b7c:	e5dd3008 	ldrb	r3, [sp, #8]
    rprintf("\n");

    SPISend(0xff);
    SPISend(0xff);

    c_size = iob[6] & 0x03;     // bits 1..0
   13b80:	e5dd1006 	ldrb	r1, [sp, #6]
    c_size <<= 10;
    c_size += (U16) iob[7] << 2;
   13b84:	e1a02102 	lsl	r2, r2, #2
   13b88:	e0822323 	add	r2, r2, r3, lsr #6
    rprintf("\n");

    SPISend(0xff);
    SPISend(0xff);

    c_size = iob[6] & 0x03;     // bits 1..0
   13b8c:	e2011003 	and	r1, r1, #3
    by <<= 1;
    by += iob[10] >> 7;

    c_size_mult = 1 << (2 + by);

    *pdwDriveSize = (U32) (c_size + 1) * (U32) c_size_mult *(U32) read_bl_len;
   13b90:	e0821501 	add	r1, r2, r1, lsl #10
    c_size = iob[6] & 0x03;     // bits 1..0
    c_size <<= 10;
    c_size += (U16) iob[7] << 2;
    c_size += iob[8] >> 6;

    by = iob[5] & 0x0F;
   13b94:	e5dd2005 	ldrb	r2, [sp, #5]
    read_bl_len = 1 << by;
   13b98:	e3a03001 	mov	r3, #1
    c_size = iob[6] & 0x03;     // bits 1..0
    c_size <<= 10;
    c_size += (U16) iob[7] << 2;
    c_size += iob[8] >> 6;

    by = iob[5] & 0x0F;
   13b9c:	e202200f 	and	r2, r2, #15
    read_bl_len = 1 << by;
   13ba0:	e1a02213 	lsl	r2, r3, r2
    by <<= 1;
    by += iob[10] >> 7;

    c_size_mult = 1 << (2 + by);

    *pdwDriveSize = (U32) (c_size + 1) * (U32) c_size_mult *(U32) read_bl_len;
   13ba4:	e1a02802 	lsl	r2, r2, #16
   13ba8:	e2811001 	add	r1, r1, #1
   13bac:	e1a02822 	lsr	r2, r2, #16
   13bb0:	e0020291 	mul	r2, r1, r2
    c_size += iob[8] >> 6;

    by = iob[5] & 0x0F;
    read_bl_len = 1 << by;

    by = iob[9] & 0x03;
   13bb4:	e5dd0009 	ldrb	r0, [sp, #9]
    by <<= 1;
    by += iob[10] >> 7;
   13bb8:	e5dd100a 	ldrb	r1, [sp, #10]
    c_size += iob[8] >> 6;

    by = iob[5] & 0x0F;
    read_bl_len = 1 << by;

    by = iob[9] & 0x03;
   13bbc:	e2000003 	and	r0, r0, #3
    by <<= 1;
    by += iob[10] >> 7;
   13bc0:	e1a013a1 	lsr	r1, r1, #7

    c_size_mult = 1 << (2 + by);
   13bc4:	e0811080 	add	r1, r1, r0, lsl #1
   13bc8:	e2811002 	add	r1, r1, #2
   13bcc:	e1a03113 	lsl	r3, r3, r1

    *pdwDriveSize = (U32) (c_size + 1) * (U32) c_size_mult *(U32) read_bl_len;
   13bd0:	e1a03803 	lsl	r3, r3, #16
   13bd4:	e1a03823 	lsr	r3, r3, #16
   13bd8:	e0030392 	mul	r3, r2, r3

    return 0;
}
   13bdc:	e3a00000 	mov	r0, #0
    by <<= 1;
    by += iob[10] >> 7;

    c_size_mult = 1 << (2 + by);

    *pdwDriveSize = (U32) (c_size + 1) * (U32) c_size_mult *(U32) read_bl_len;
   13be0:	e5853000 	str	r3, [r5]

    return 0;
}
   13be4:	e28dd010 	add	sp, sp, #16
   13be8:	e8bd4030 	pop	{r4, r5, lr}
   13bec:	e12fff1e 	bx	lr
   13bf0:	00026038 	.word	0x00026038
   13bf4:	0002603d 	.word	0x0002603d
   13bf8:	00026577 	.word	0x00026577

00013bfc <BlockDevInit>:

/*****************************************************************************/


int BlockDevInit(void)
{
   13bfc:	e92d4030 	push	{r4, r5, lr}
    int i;
    U8 resp;

    SPIInit();              /* init at low speed */
   13c00:	eb0000b5 	bl	13edc <SPIInit>
   13c04:	e3a04065 	mov	r4, #101	; 0x65

    /* Try to send reset command up to 100 times */
    i = 100;
    do
    {
        Command(CMD_GOIDLESTATE, 0);
   13c08:	e3a00000 	mov	r0, #0
   13c0c:	e1a01000 	mov	r1, r0
   13c10:	ebffff7c 	bl	13a08 <Command>
        resp = Resp8b();
   13c14:	ebffff70 	bl	139dc <Resp8b>
    }
    while (resp != 1 && i--);
   13c18:	e3500001 	cmp	r0, #1
   13c1c:	0a000009 	beq	13c48 <BlockDevInit+0x4c>
   13c20:	e2544001 	subs	r4, r4, #1
   13c24:	1afffff7 	bne	13c08 <BlockDevInit+0xc>
   13c28:	ea000057 	b	13d8c <BlockDevInit+0x190>

    if (resp != 1)
    {
        if (resp == 0xff)
        {
            rprintf("resp=0xff\n");
   13c2c:	e59f0174 	ldr	r0, [pc, #372]	; 13da8 <BlockDevInit+0x1ac>
   13c30:	ebfff183 	bl	10244 <rprintf>
            return -1;
   13c34:	e3e00000 	mvn	r0, #0
   13c38:	ea000051 	b	13d84 <BlockDevInit+0x188>
        }
        else
        {
            Resp8bError(resp);
   13c3c:	ebffff85 	bl	13a58 <Resp8bError>
            rprintf("resp!=0xff\n");
   13c40:	e59f0164 	ldr	r0, [pc, #356]	; 13dac <BlockDevInit+0x1b0>
   13c44:	ea000054 	b	13d9c <BlockDevInit+0x1a0>
    do
    {
        Command(CMD_GOIDLESTATE, 0);
        resp = Resp8b();
    }
    while (resp != 1 && i--);
   13c48:	e59f5160 	ldr	r5, [pc, #352]	; 13db0 <BlockDevInit+0x1b4>
    /* Wait till card is ready initialising (returns 0 on CMD_1) */
    /* Try up to 32000 times. */
    i = 32000;
    do
    {
        Command(CMD_SENDOPCOND, 0);
   13c4c:	e3a00001 	mov	r0, #1
   13c50:	e3a01000 	mov	r1, #0
   13c54:	ebffff6b 	bl	13a08 <Command>

        resp = Resp8b();
   13c58:	ebffff5f 	bl	139dc <Resp8b>
        if (resp != 0)
   13c5c:	e2504000 	subs	r4, r0, #0
   13c60:	0a000005 	beq	13c7c <BlockDevInit+0x80>
        {
            Resp8bError(resp);
   13c64:	ebffff7b 	bl	13a58 <Resp8bError>
        }
    }
    while (resp == 1 && i--);
   13c68:	e3540001 	cmp	r4, #1
   13c6c:	1a000024 	bne	13d04 <BlockDevInit+0x108>
   13c70:	e2555001 	subs	r5, r5, #1
   13c74:	1afffff4 	bne	13c4c <BlockDevInit+0x50>
   13c78:	ea000021 	b	13d04 <BlockDevInit+0x108>
        Resp8bError(resp);
        return -3;
    }

    /* increase speed after init */
    SPISetSpeed(SPI_PRESCALE_MIN);
   13c7c:	e3a00008 	mov	r0, #8
   13c80:	eb00008e 	bl	13ec0 <SPISetSpeed>

static int State(void)
{
    U16 value;

    Command(CMD_SENDSTATUS, 0);
   13c84:	e1a01004 	mov	r1, r4
   13c88:	e3a0000d 	mov	r0, #13
   13c8c:	ebffff5d 	bl	13a08 <Command>

static U16 Resp16b(void)
{
    U16 resp;

    resp = (Resp8b() << 8) & 0xff00;
   13c90:	ebffff51 	bl	139dc <Resp8b>
   13c94:	e1a05000 	mov	r5, r0
    resp |= SPISend(0xff);
   13c98:	e3a000ff 	mov	r0, #255	; 0xff
   13c9c:	eb0000bd 	bl	13f98 <SPISend>
   13ca0:	e1801405 	orr	r1, r0, r5, lsl #8
   13ca4:	e1a01801 	lsl	r1, r1, #16
   13ca8:	e1a01821 	lsr	r1, r1, #16
    U16 value;

    Command(CMD_SENDSTATUS, 0);
    value = Resp16b();

    switch (value)
   13cac:	e3510008 	cmp	r1, #8
   13cb0:	0a00001d 	beq	13d2c <BlockDevInit+0x130>
   13cb4:	8a000007 	bhi	13cd8 <BlockDevInit+0xdc>
   13cb8:	e3510001 	cmp	r1, #1
   13cbc:	0a000014 	beq	13d14 <BlockDevInit+0x118>
   13cc0:	3a00002c 	bcc	13d78 <BlockDevInit+0x17c>
   13cc4:	e3510002 	cmp	r1, #2
   13cc8:	0a000013 	beq	13d1c <BlockDevInit+0x120>
   13ccc:	e3510004 	cmp	r1, #4
   13cd0:	1a000020 	bne	13d58 <BlockDevInit+0x15c>
   13cd4:	ea000012 	b	13d24 <BlockDevInit+0x128>
   13cd8:	e3510020 	cmp	r1, #32
   13cdc:	0a000016 	beq	13d3c <BlockDevInit+0x140>
   13ce0:	8a000002 	bhi	13cf0 <BlockDevInit+0xf4>
   13ce4:	e3510010 	cmp	r1, #16
   13ce8:	1a00001a 	bne	13d58 <BlockDevInit+0x15c>
   13cec:	ea000010 	b	13d34 <BlockDevInit+0x138>
   13cf0:	e3510040 	cmp	r1, #64	; 0x40
   13cf4:	0a000012 	beq	13d44 <BlockDevInit+0x148>
   13cf8:	e3510080 	cmp	r1, #128	; 0x80
   13cfc:	1a000015 	bne	13d58 <BlockDevInit+0x15c>
   13d00:	ea000011 	b	13d4c <BlockDevInit+0x150>
    }
    while (resp == 1 && i--);

    if (resp != 0)
    {
        Resp8bError(resp);
   13d04:	e1a00004 	mov	r0, r4
   13d08:	ebffff52 	bl	13a58 <Resp8bError>
        return -3;
   13d0c:	e3e00002 	mvn	r0, #2
   13d10:	ea00001b 	b	13d84 <BlockDevInit+0x188>
    value = Resp16b();

    switch (value)
    {
        case 0x0000: return 1;
        case 0x0001: rprintf("Card is Locked.\n");                                                  break;
   13d14:	e59f0098 	ldr	r0, [pc, #152]	; 13db4 <BlockDevInit+0x1b8>
   13d18:	ea00000c 	b	13d50 <BlockDevInit+0x154>
        case 0x0002: rprintf("WP Erase Skip, Lock/Unlock Cmd Failed.\n");                           break;
   13d1c:	e59f0094 	ldr	r0, [pc, #148]	; 13db8 <BlockDevInit+0x1bc>
   13d20:	ea00000a 	b	13d50 <BlockDevInit+0x154>
        case 0x0004: rprintf("General / Unknown error -- card broken?.\n");                         break;
   13d24:	e59f0090 	ldr	r0, [pc, #144]	; 13dbc <BlockDevInit+0x1c0>
   13d28:	ea000008 	b	13d50 <BlockDevInit+0x154>
        case 0x0008: rprintf("Internal card controller error.\n");                                  break;
   13d2c:	e59f008c 	ldr	r0, [pc, #140]	; 13dc0 <BlockDevInit+0x1c4>
   13d30:	ea000006 	b	13d50 <BlockDevInit+0x154>
        case 0x0010: rprintf("Card internal ECC was applied, but failed to correct the data.\n");   break;
   13d34:	e59f0088 	ldr	r0, [pc, #136]	; 13dc4 <BlockDevInit+0x1c8>
   13d38:	ea000004 	b	13d50 <BlockDevInit+0x154>
        case 0x0020: rprintf("Write protect violation.\n");                                         break;
   13d3c:	e59f0084 	ldr	r0, [pc, #132]	; 13dc8 <BlockDevInit+0x1cc>
   13d40:	ea000002 	b	13d50 <BlockDevInit+0x154>
        case 0x0040: rprintf("An invalid selection, sectors for erase.\n");                         break;
   13d44:	e59f0080 	ldr	r0, [pc, #128]	; 13dcc <BlockDevInit+0x1d0>
   13d48:	ea000000 	b	13d50 <BlockDevInit+0x154>
        case 0x0080: rprintf("Out of Range, CSD_Overwrite.\n");                                     break;
   13d4c:	e59f007c 	ldr	r0, [pc, #124]	; 13dd0 <BlockDevInit+0x1d4>
   13d50:	ebfff13b 	bl	10244 <rprintf>
   13d54:	ea00000f 	b	13d98 <BlockDevInit+0x19c>
            default:
            if (value > 0x00FF)
   13d58:	e35100ff 	cmp	r1, #255	; 0xff
   13d5c:	9a000002 	bls	13d6c <BlockDevInit+0x170>
            {
                Resp8bError((U8) (value >> 8));
   13d60:	e1a00421 	lsr	r0, r1, #8
   13d64:	ebffff3b 	bl	13a58 <Resp8bError>
   13d68:	ea00000a 	b	13d98 <BlockDevInit+0x19c>
            }
            else
            {
                rprintf("Unknown error: 0x%x (see SanDisk docs p5-14).\n", value);
   13d6c:	e59f0060 	ldr	r0, [pc, #96]	; 13dd4 <BlockDevInit+0x1d8>
   13d70:	ebfff133 	bl	10244 <rprintf>
   13d74:	ea000007 	b	13d98 <BlockDevInit+0x19c>
    {
        rprintf("Card didn't return the ready state, breaking up...\n");
        return -2;
    }

    rprintf("SD Init done...\n");
   13d78:	e59f0058 	ldr	r0, [pc, #88]	; 13dd8 <BlockDevInit+0x1dc>
   13d7c:	ebfff130 	bl	10244 <rprintf>

    return 0;
   13d80:	e1a00004 	mov	r0, r4
}
   13d84:	e8bd4030 	pop	{r4, r5, lr}
   13d88:	e12fff1e 	bx	lr
    }
    while (resp != 1 && i--);

    if (resp != 1)
    {
        if (resp == 0xff)
   13d8c:	e35000ff 	cmp	r0, #255	; 0xff
   13d90:	1affffa9 	bne	13c3c <BlockDevInit+0x40>
   13d94:	eaffffa4 	b	13c2c <BlockDevInit+0x30>
    /* increase speed after init */
    SPISetSpeed(SPI_PRESCALE_MIN);

    if (State() < 0)
    {
        rprintf("Card didn't return the ready state, breaking up...\n");
   13d98:	e59f003c 	ldr	r0, [pc, #60]	; 13ddc <BlockDevInit+0x1e0>
   13d9c:	ebfff128 	bl	10244 <rprintf>
        return -2;
   13da0:	e3e00001 	mvn	r0, #1
   13da4:	eafffff6 	b	13d84 <BlockDevInit+0x188>
   13da8:	00026043 	.word	0x00026043
   13dac:	0002604e 	.word	0x0002604e
   13db0:	00007d01 	.word	0x00007d01
   13db4:	0002605a 	.word	0x0002605a
   13db8:	0002606b 	.word	0x0002606b
   13dbc:	00026093 	.word	0x00026093
   13dc0:	000260bd 	.word	0x000260bd
   13dc4:	000260de 	.word	0x000260de
   13dc8:	0002611e 	.word	0x0002611e
   13dcc:	00026138 	.word	0x00026138
   13dd0:	00026162 	.word	0x00026162
   13dd4:	00026180 	.word	0x00026180
   13dd8:	000261af 	.word	0x000261af
   13ddc:	000261c0 	.word	0x000261c0

00013de0 <BlockDevWrite>:
 *      CHKS (2B)
 * BUSY...
 */

int BlockDevWrite(U32 dwAddress, U8 * pbBuf)
{
   13de0:	e92d4010 	push	{r4, lr}
   13de4:	e1a04001 	mov	r4, r1
    U32 place;
    U16 t = 0;

    place = 512 * dwAddress;
   13de8:	e1a01480 	lsl	r1, r0, #9
    Command(CMD_WRITE, place);
   13dec:	e3a00018 	mov	r0, #24
   13df0:	ebffff04 	bl	13a08 <Command>

    Resp8b();               /* Card response */
   13df4:	ebfffef8 	bl	139dc <Resp8b>

    SPISend(0xfe);          /* Start block */
   13df8:	e3a000fe 	mov	r0, #254	; 0xfe
   13dfc:	eb000065 	bl	13f98 <SPISend>
    SPISendN(pbBuf, 512);
   13e00:	e3a01c02 	mov	r1, #512	; 0x200
   13e04:	e1a00004 	mov	r0, r4
   13e08:	eb000075 	bl	13fe4 <SPISendN>
    SPISend(0xff);          /* Checksum part 1 */
   13e0c:	e3a000ff 	mov	r0, #255	; 0xff
   13e10:	eb000060 	bl	13f98 <SPISend>
    SPISend(0xff);          /* Checksum part 2 */
   13e14:	e3a000ff 	mov	r0, #255	; 0xff
   13e18:	eb00005e 	bl	13f98 <SPISend>

    SPISend(0xff);
   13e1c:	e3a000ff 	mov	r0, #255	; 0xff
   13e20:	eb00005c 	bl	13f98 <SPISend>

    while (SPISend(0xff) != 0xff)
   13e24:	e3a000ff 	mov	r0, #255	; 0xff
   13e28:	eb00005a 	bl	13f98 <SPISend>
   13e2c:	e35000ff 	cmp	r0, #255	; 0xff
   13e30:	1afffffb 	bne	13e24 <BlockDevWrite+0x44>
    {
        t++;
    }

    return 0;
}
   13e34:	e3a00000 	mov	r0, #0
   13e38:	e8bd4010 	pop	{r4, lr}
   13e3c:	e12fff1e 	bx	lr

00013e40 <BlockDevRead>:
 *      DATA
 *      CHKS (2B)
 */

int BlockDevRead(U32 dwAddress, U8 * pbBuf)
{
   13e40:	e92d4070 	push	{r4, r5, r6, lr}
   13e44:	e1a05001 	mov	r5, r1
    U8 cardresp;
    U8 firstblock;
    U16 fb_timeout = 0xffff;
    U32 place;

    place = 512 * dwAddress;
   13e48:	e1a01480 	lsl	r1, r0, #9
    Command(CMD_READSINGLEBLOCK, place);
   13e4c:	e3a00011 	mov	r0, #17
   13e50:	ebfffeec 	bl	13a08 <Command>

    cardresp = Resp8b();        /* Card response */
   13e54:	ebfffee0 	bl	139dc <Resp8b>
   13e58:	e3a06000 	mov	r6, #0
   13e5c:	e1a04000 	mov	r4, r0

    /* Wait for startblock */
    do
    {
        firstblock = Resp8b();
   13e60:	ebfffedd 	bl	139dc <Resp8b>
    }
    while (firstblock == 0xff && fb_timeout--);
   13e64:	e35000ff 	cmp	r0, #255	; 0xff
   13e68:	1a000002 	bne	13e78 <BlockDevRead+0x38>
   13e6c:	e2866001 	add	r6, r6, #1
   13e70:	e3560801 	cmp	r6, #65536	; 0x10000
   13e74:	1afffff9 	bne	13e60 <BlockDevRead+0x20>

    if (cardresp != 0x00 || firstblock != 0xfe)
   13e78:	e3540000 	cmp	r4, #0
   13e7c:	035000fe 	cmpeq	r0, #254	; 0xfe
   13e80:	03a04000 	moveq	r4, #0
   13e84:	13a04001 	movne	r4, #1
   13e88:	0a000002 	beq	13e98 <BlockDevRead+0x58>
    {
        Resp8bError(firstblock);
   13e8c:	ebfffef1 	bl	13a58 <Resp8bError>
        return -1;
   13e90:	e3e00000 	mvn	r0, #0
   13e94:	ea000007 	b	13eb8 <BlockDevRead+0x78>
    }

    SPIRecvN(pbBuf, 512);
   13e98:	e3a01c02 	mov	r1, #512	; 0x200
   13e9c:	e1a00005 	mov	r0, r5
   13ea0:	eb000068 	bl	14048 <SPIRecvN>

    /* Checksum (2 byte) - ignore for now */
    SPISend(0xff);
   13ea4:	e3a000ff 	mov	r0, #255	; 0xff
   13ea8:	eb00003a 	bl	13f98 <SPISend>
    SPISend(0xff);
   13eac:	e3a000ff 	mov	r0, #255	; 0xff
   13eb0:	eb000038 	bl	13f98 <SPISend>

    return 0;
   13eb4:	e1a00004 	mov	r0, r4
}
   13eb8:	e8bd4070 	pop	{r4, r5, r6, lr}
   13ebc:	e12fff1e 	bx	lr

00013ec0 <SPISetSpeed>:

/*****************************************************************************/

void SPISetSpeed(U8 speed)
{
    speed &= 0xFE;
   13ec0:	e20000fe 	and	r0, r0, #254	; 0xfe
    if (speed < SPI_PRESCALE_MIN)
    {
        speed = SPI_PRESCALE_MIN;
   13ec4:	e3500007 	cmp	r0, #7
    }
    SPI_PRESCALE_REG = speed;
   13ec8:	e59f3008 	ldr	r3, [pc, #8]	; 13ed8 <SPISetSpeed+0x18>
void SPISetSpeed(U8 speed)
{
    speed &= 0xFE;
    if (speed < SPI_PRESCALE_MIN)
    {
        speed = SPI_PRESCALE_MIN;
   13ecc:	93a00008 	movls	r0, #8
    }
    SPI_PRESCALE_REG = speed;
   13ed0:	e583000c 	str	r0, [r3, #12]
}
   13ed4:	e12fff1e 	bx	lr
   13ed8:	e0020000 	.word	0xe0020000

00013edc <SPIInit>:


void SPIInit(void)
{
   13edc:	e92d4010 	push	{r4, lr}
    U8 i;
    //U32 j;

    rprintf("spiInit for SPI(0)\n");
   13ee0:	e59f00a0 	ldr	r0, [pc, #160]	; 13f88 <SPIInit+0xac>
   13ee4:	ebfff0d6 	bl	10244 <rprintf>

    // setup GPIO
    PINSEL2 = 0;
   13ee8:	e59f209c 	ldr	r2, [pc, #156]	; 13f8c <SPIInit+0xb0>
   13eec:	e3a03000 	mov	r3, #0
   13ef0:	e5823014 	str	r3, [r2, #20]

	SPI_IODIR |= (1 << SPI_SCK_PIN) | (1 << SPI_MOSI_PIN);
   13ef4:	e59f3094 	ldr	r3, [pc, #148]	; 13f90 <SPIInit+0xb4>
   13ef8:	e5931008 	ldr	r1, [r3, #8]
   13efc:	e3811050 	orr	r1, r1, #80	; 0x50
   13f00:	e5831008 	str	r1, [r3, #8]
    SPI_SS_IODIR |= (1 << SPI_SS_PIN);
   13f04:	e5931008 	ldr	r1, [r3, #8]
   13f08:	e3811080 	orr	r1, r1, #128	; 0x80
   13f0c:	e5831008 	str	r1, [r3, #8]
    SPI_IODIR &= ~(1 << SPI_MISO_PIN);
   13f10:	e5931008 	ldr	r1, [r3, #8]
   13f14:	e3c11020 	bic	r1, r1, #32
   13f18:	e5831008 	str	r1, [r3, #8]

    // reset Pin-Functions
    SPI_PINSEL &= ~((3 << SPI_SCK_FUNCBIT) | (3 << SPI_MISO_FUNCBIT) | (3 << SPI_MOSI_FUNCBIT));
   13f1c:	e5921000 	ldr	r1, [r2]
   13f20:	e3c11c3f 	bic	r1, r1, #16128	; 0x3f00
   13f24:	e5821000 	str	r1, [r2]
    SPI_PINSEL |= ((1 << SPI_SCK_FUNCBIT) | (1 << SPI_MISO_FUNCBIT) | (1 << SPI_MOSI_FUNCBIT));
   13f28:	e5921000 	ldr	r1, [r2]
   13f2c:	e3811c15 	orr	r1, r1, #5376	; 0x1500
   13f30:	e5821000 	str	r1, [r2]

    // set Chip-Select high - unselect card
    UNSELECT_CARD();
   13f34:	e5932004 	ldr	r2, [r3, #4]

    // enable SPI-Master
    S0SPCR = (1 << MSTR) | (0 << CPOL);   // TODO: check CPOL
   13f38:	e59f4054 	ldr	r4, [pc, #84]	; 13f94 <SPIInit+0xb8>
    // reset Pin-Functions
    SPI_PINSEL &= ~((3 << SPI_SCK_FUNCBIT) | (3 << SPI_MISO_FUNCBIT) | (3 << SPI_MOSI_FUNCBIT));
    SPI_PINSEL |= ((1 << SPI_SCK_FUNCBIT) | (1 << SPI_MISO_FUNCBIT) | (1 << SPI_MOSI_FUNCBIT));

    // set Chip-Select high - unselect card
    UNSELECT_CARD();
   13f3c:	e3822080 	orr	r2, r2, #128	; 0x80
   13f40:	e5832004 	str	r2, [r3, #4]

    // enable SPI-Master
    S0SPCR = (1 << MSTR) | (0 << CPOL);   // TODO: check CPOL
   13f44:	e3a03020 	mov	r3, #32
   13f48:	e5843000 	str	r3, [r4]

    // low speed during init
    SPISetSpeed(254);
   13f4c:	e3a000fe 	mov	r0, #254	; 0xfe
   13f50:	ebffffda 	bl	13ec0 <SPISetSpeed>
   13f54:	e3a02015 	mov	r2, #21
// Only needed during card-init. During init
// the automatic chip-select is disabled for SSP

static U8 my_SPISend(U8 outgoing)
{
    S0SPDR = outgoing;
   13f58:	e3a010ff 	mov	r1, #255	; 0xff
   13f5c:	e1a03004 	mov	r3, r4
   13f60:	e5841008 	str	r1, [r4, #8]
    while (!(S0SPSR & (1 << SPIF)));
   13f64:	e5930004 	ldr	r0, [r3, #4]
   13f68:	e3100080 	tst	r0, #128	; 0x80
   13f6c:	0afffffc 	beq	13f64 <SPIInit+0x88>
    return S0SPDR;
   13f70:	e2422001 	sub	r2, r2, #1

    // low speed during init
    SPISetSpeed(254);

    /* Send 20 spi commands with card not selected */
    for (i = 0; i < 21; i++)
   13f74:	e21220ff 	ands	r2, r2, #255	; 0xff

static U8 my_SPISend(U8 outgoing)
{
    S0SPDR = outgoing;
    while (!(S0SPSR & (1 << SPIF)));
    return S0SPDR;
   13f78:	e5930008 	ldr	r0, [r3, #8]

    // low speed during init
    SPISetSpeed(254);

    /* Send 20 spi commands with card not selected */
    for (i = 0; i < 21; i++)
   13f7c:	1afffff7 	bne	13f60 <SPIInit+0x84>
    {
        my_SPISend(0xff);
    }
}
   13f80:	e8bd4010 	pop	{r4, lr}
   13f84:	e12fff1e 	bx	lr
   13f88:	000261f4 	.word	0x000261f4
   13f8c:	e002c000 	.word	0xe002c000
   13f90:	e0028000 	.word	0xe0028000
   13f94:	e0020000 	.word	0xe0020000

00013f98 <SPISend>:

U8 SPISend(U8 outgoing)
{
    U8 incoming;

    SELECT_CARD();
   13f98:	e59f303c 	ldr	r3, [pc, #60]	; 13fdc <SPISend+0x44>
   13f9c:	e593200c 	ldr	r2, [r3, #12]
   13fa0:	e3822080 	orr	r2, r2, #128	; 0x80
   13fa4:	e583200c 	str	r2, [r3, #12]
    S0SPDR = outgoing;
   13fa8:	e59f2030 	ldr	r2, [pc, #48]	; 13fe0 <SPISend+0x48>
/*****************************************************************************/

/*****************************************************************************/

U8 SPISend(U8 outgoing)
{
   13fac:	e20000ff 	and	r0, r0, #255	; 0xff
    U8 incoming;

    SELECT_CARD();
    S0SPDR = outgoing;
   13fb0:	e5820008 	str	r0, [r2, #8]
    while (!(S0SPSR & (1 << SPIF)));
   13fb4:	e5921004 	ldr	r1, [r2, #4]
   13fb8:	e3110080 	tst	r1, #128	; 0x80
   13fbc:	0afffffc 	beq	13fb4 <SPISend+0x1c>
    incoming = S0SPDR;
   13fc0:	e59f2018 	ldr	r2, [pc, #24]	; 13fe0 <SPISend+0x48>
   13fc4:	e5920008 	ldr	r0, [r2, #8]
    UNSELECT_CARD();
   13fc8:	e5932004 	ldr	r2, [r3, #4]
   13fcc:	e3822080 	orr	r2, r2, #128	; 0x80
   13fd0:	e5832004 	str	r2, [r3, #4]

    return incoming;
   13fd4:	e20000ff 	and	r0, r0, #255	; 0xff
}
   13fd8:	e12fff1e 	bx	lr
   13fdc:	e0028000 	.word	0xe0028000
   13fe0:	e0020000 	.word	0xe0020000

00013fe4 <SPISendN>:

void SPISendN(U8 * pbBuf, int iLen)
{
    int i;

    SELECT_CARD();
   13fe4:	e59f3054 	ldr	r3, [pc, #84]	; 14040 <SPISendN+0x5c>
   13fe8:	e593200c 	ldr	r2, [r3, #12]
   13fec:	e3822080 	orr	r2, r2, #128	; 0x80

    return incoming;
}

void SPISendN(U8 * pbBuf, int iLen)
{
   13ff0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
    int i;

    SELECT_CARD();
   13ff4:	e583200c 	str	r2, [r3, #12]
    for (i = 0; i < iLen; i++)
    {
        S0SPDR = pbBuf[i];
   13ff8:	e59f2044 	ldr	r2, [pc, #68]	; 14044 <SPISendN+0x60>
void SPISendN(U8 * pbBuf, int iLen)
{
    int i;

    SELECT_CARD();
    for (i = 0; i < iLen; i++)
   13ffc:	e3a03000 	mov	r3, #0
   14000:	e1a0c002 	mov	ip, r2
   14004:	ea000005 	b	14020 <SPISendN+0x3c>
    {
        S0SPDR = pbBuf[i];
   14008:	e7d04003 	ldrb	r4, [r0, r3]
   1400c:	e5824008 	str	r4, [r2, #8]
        while (!(S0SPSR & (1 << SPIF)));
   14010:	e59c4004 	ldr	r4, [ip, #4]
   14014:	e3140080 	tst	r4, #128	; 0x80
   14018:	0afffffc 	beq	14010 <SPISendN+0x2c>
void SPISendN(U8 * pbBuf, int iLen)
{
    int i;

    SELECT_CARD();
    for (i = 0; i < iLen; i++)
   1401c:	e2833001 	add	r3, r3, #1
   14020:	e1530001 	cmp	r3, r1
   14024:	bafffff7 	blt	14008 <SPISendN+0x24>
    {
        S0SPDR = pbBuf[i];
        while (!(S0SPSR & (1 << SPIF)));
    }
    UNSELECT_CARD();
   14028:	e59f3010 	ldr	r3, [pc, #16]	; 14040 <SPISendN+0x5c>
   1402c:	e5932004 	ldr	r2, [r3, #4]
   14030:	e3822080 	orr	r2, r2, #128	; 0x80
   14034:	e5832004 	str	r2, [r3, #4]
}
   14038:	e8bd0010 	pop	{r4}
   1403c:	e12fff1e 	bx	lr
   14040:	e0028000 	.word	0xe0028000
   14044:	e0020000 	.word	0xe0020000

00014048 <SPIRecvN>:

void SPIRecvN(U8 * pbBuf, int iLen)
{
    int i;

    SELECT_CARD();
   14048:	e59f305c 	ldr	r3, [pc, #92]	; 140ac <SPIRecvN+0x64>
   1404c:	e593200c 	ldr	r2, [r3, #12]
    for (i = 0; i < iLen; i++)
    {
        S0SPDR = 0xFF;
   14050:	e59fc058 	ldr	ip, [pc, #88]	; 140b0 <SPIRecvN+0x68>

void SPIRecvN(U8 * pbBuf, int iLen)
{
    int i;

    SELECT_CARD();
   14054:	e3822080 	orr	r2, r2, #128	; 0x80
    }
    UNSELECT_CARD();
}

void SPIRecvN(U8 * pbBuf, int iLen)
{
   14058:	e92d0030 	push	{r4, r5}
    int i;

    SELECT_CARD();
   1405c:	e583200c 	str	r2, [r3, #12]
    for (i = 0; i < iLen; i++)
    {
        S0SPDR = 0xFF;
   14060:	e3a040ff 	mov	r4, #255	; 0xff
void SPIRecvN(U8 * pbBuf, int iLen)
{
    int i;

    SELECT_CARD();
    for (i = 0; i < iLen; i++)
   14064:	e3a03000 	mov	r3, #0
   14068:	e1a0200c 	mov	r2, ip
   1406c:	ea000006 	b	1408c <SPIRecvN+0x44>
    {
        S0SPDR = 0xFF;
   14070:	e58c4008 	str	r4, [ip, #8]
        while (!(S0SPSR & (1 << SPIF)));
   14074:	e5925004 	ldr	r5, [r2, #4]
   14078:	e3150080 	tst	r5, #128	; 0x80
   1407c:	0afffffc 	beq	14074 <SPIRecvN+0x2c>
        pbBuf[i] = S0SPDR;
   14080:	e5925008 	ldr	r5, [r2, #8]
   14084:	e7c05003 	strb	r5, [r0, r3]
void SPIRecvN(U8 * pbBuf, int iLen)
{
    int i;

    SELECT_CARD();
    for (i = 0; i < iLen; i++)
   14088:	e2833001 	add	r3, r3, #1
   1408c:	e1530001 	cmp	r3, r1
   14090:	bafffff6 	blt	14070 <SPIRecvN+0x28>
    {
        S0SPDR = 0xFF;
        while (!(S0SPSR & (1 << SPIF)));
        pbBuf[i] = S0SPDR;
    }
    UNSELECT_CARD();
   14094:	e59f3010 	ldr	r3, [pc, #16]	; 140ac <SPIRecvN+0x64>
   14098:	e5932004 	ldr	r2, [r3, #4]
   1409c:	e3822080 	orr	r2, r2, #128	; 0x80
   140a0:	e5832004 	str	r2, [r3, #4]
}
   140a4:	e8bd0030 	pop	{r4, r5}
   140a8:	e12fff1e 	bx	lr
   140ac:	e0028000 	.word	0xe0028000
   140b0:	e0020000 	.word	0xe0020000

000140b4 <HandleUsbReset>:
static void HandleUsbReset(U8 bDevStatus)
{
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
   140b4:	e12fff1e 	bx	lr

000140b8 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
   140b8:	e92d4010 	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
   140bc:	e59f4054 	ldr	r4, [pc, #84]	; 14118 <USBInit+0x60>
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
   140c0:	eb00011d 	bl	1453c <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
   140c4:	e59f0050 	ldr	r0, [pc, #80]	; 1411c <USBInit+0x64>
   140c8:	eb000067 	bl	1426c <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
   140cc:	e1a01004 	mov	r1, r4
   140d0:	e3a00000 	mov	r0, #0
   140d4:	eb000053 	bl	14228 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
   140d8:	e1a01004 	mov	r1, r4
   140dc:	e3a00080 	mov	r0, #128	; 0x80
   140e0:	eb000050 	bl	14228 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
   140e4:	e3a00000 	mov	r0, #0
   140e8:	e3a01040 	mov	r1, #64	; 0x40
   140ec:	eb000038 	bl	141d4 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
   140f0:	e3a00080 	mov	r0, #128	; 0x80
   140f4:	e3a01040 	mov	r1, #64	; 0x40
   140f8:	eb000035 	bl	141d4 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
   140fc:	e3a00000 	mov	r0, #0
   14100:	e59f1018 	ldr	r1, [pc, #24]	; 14120 <USBInit+0x68>
   14104:	e59f2018 	ldr	r2, [pc, #24]	; 14124 <USBInit+0x6c>
   14108:	eb0001a4 	bl	147a0 <USBRegisterRequestHandler>

	return TRUE;
}
   1410c:	e3a00001 	mov	r0, #1
   14110:	e8bd4010 	pop	{r4, lr}
   14114:	e12fff1e 	bx	lr
   14118:	00014644 	.word	0x00014644
   1411c:	000140b4 	.word	0x000140b4
   14120:	00014844 	.word	0x00014844
   14124:	40000de0 	.word	0x40000de0

00014128 <Wait4DevInt>:
	@param [in]	dwIntr		Bitmask of interrupts to wait for	
 */
static void Wait4DevInt(U32 dwIntr)
{
	// wait for specific interrupt
	while ((USBDevIntSt & dwIntr) != dwIntr);
   14128:	e59f3018 	ldr	r3, [pc, #24]	; 14148 <Wait4DevInt+0x20>
   1412c:	e5932000 	ldr	r2, [r3]
   14130:	e0002002 	and	r2, r0, r2
   14134:	e1520000 	cmp	r2, r0
   14138:	1afffffb 	bne	1412c <Wait4DevInt+0x4>
	// clear the interrupt bits
	USBDevIntClr = dwIntr;
   1413c:	e59f3004 	ldr	r3, [pc, #4]	; 14148 <Wait4DevInt+0x20>
   14140:	e5830008 	str	r0, [r3, #8]
}
   14144:	e12fff1e 	bx	lr
   14148:	e0090000 	.word	0xe0090000

0001414c <USBHwCmd>:
	@param [in]	bCmd		Command to send
 */
static void USBHwCmd(U8 bCmd)
{
	// clear CDFULL/CCEMTY
	USBDevIntClr = CDFULL | CCEMTY;
   1414c:	e59f3018 	ldr	r3, [pc, #24]	; 1416c <USBHwCmd+0x20>
	// write command code
	USBCmdCode = 0x00000500 | (bCmd << 16);
   14150:	e1a00800 	lsl	r0, r0, #16
	@param [in]	bCmd		Command to send
 */
static void USBHwCmd(U8 bCmd)
{
	// clear CDFULL/CCEMTY
	USBDevIntClr = CDFULL | CCEMTY;
   14154:	e3a02030 	mov	r2, #48	; 0x30
	// write command code
	USBCmdCode = 0x00000500 | (bCmd << 16);
   14158:	e3800c05 	orr	r0, r0, #1280	; 0x500
	@param [in]	bCmd		Command to send
 */
static void USBHwCmd(U8 bCmd)
{
	// clear CDFULL/CCEMTY
	USBDevIntClr = CDFULL | CCEMTY;
   1415c:	e5832008 	str	r2, [r3, #8]
	// write command code
	USBCmdCode = 0x00000500 | (bCmd << 16);
   14160:	e5830010 	str	r0, [r3, #16]
	Wait4DevInt(CCEMTY);
   14164:	e3a00010 	mov	r0, #16
   14168:	eaffffee 	b	14128 <Wait4DevInt>
   1416c:	e0090000 	.word	0xe0090000

00014170 <USBHwCmdWrite>:
		
	@param [in]	bCmd		Command to send
	@param [in]	bData		Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
   14170:	e92d4010 	push	{r4, lr}
   14174:	e1a04001 	mov	r4, r1
	// write command code
	USBHwCmd(bCmd);
   14178:	ebfffff3 	bl	1414c <USBHwCmd>

	// write command data
	USBCmdCode = 0x00000100 | (bData << 16);
   1417c:	e1a04804 	lsl	r4, r4, #16
   14180:	e59f3010 	ldr	r3, [pc, #16]	; 14198 <USBHwCmdWrite+0x28>
   14184:	e3844c01 	orr	r4, r4, #256	; 0x100
	Wait4DevInt(CCEMTY);
   14188:	e3a00010 	mov	r0, #16
{
	// write command code
	USBHwCmd(bCmd);

	// write command data
	USBCmdCode = 0x00000100 | (bData << 16);
   1418c:	e5834010 	str	r4, [r3, #16]
	Wait4DevInt(CCEMTY);
}
   14190:	e8bd4010 	pop	{r4, lr}
	// write command code
	USBHwCmd(bCmd);

	// write command data
	USBCmdCode = 0x00000100 | (bData << 16);
	Wait4DevInt(CCEMTY);
   14194:	eaffffe3 	b	14128 <Wait4DevInt>
   14198:	e0090000 	.word	0xe0090000

0001419c <USBHwCmdRead>:
	@param [in]	bCmd		Command to send

	@return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
   1419c:	e92d4010 	push	{r4, lr}
   141a0:	e1a04000 	mov	r4, r0
	// write command code
	USBHwCmd(bCmd);
	
	// get data
	USBCmdCode = 0x00000200 | (bCmd << 16);
   141a4:	e1a04804 	lsl	r4, r4, #16
	@return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
	// write command code
	USBHwCmd(bCmd);
   141a8:	ebffffe7 	bl	1414c <USBHwCmd>
	
	// get data
	USBCmdCode = 0x00000200 | (bCmd << 16);
   141ac:	e3843c02 	orr	r3, r4, #512	; 0x200
   141b0:	e59f4018 	ldr	r4, [pc, #24]	; 141d0 <USBHwCmdRead+0x34>
	Wait4DevInt(CDFULL);
   141b4:	e3a00020 	mov	r0, #32
{
	// write command code
	USBHwCmd(bCmd);
	
	// get data
	USBCmdCode = 0x00000200 | (bCmd << 16);
   141b8:	e5843010 	str	r3, [r4, #16]
	Wait4DevInt(CDFULL);
   141bc:	ebffffd9 	bl	14128 <Wait4DevInt>
	return USBCmdData;
   141c0:	e5940014 	ldr	r0, [r4, #20]
   141c4:	e20000ff 	and	r0, r0, #255	; 0xff
}
   141c8:	e8bd4010 	pop	{r4, lr}
   141cc:	e12fff1e 	bx	lr
   141d0:	e0090000 	.word	0xe0090000

000141d4 <USBHwEPConfig>:
		
	@param [in]	bEP				Endpoint number
	@param [in]	wMaxPacketSize	Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
   141d4:	e20030ff 	and	r3, r0, #255	; 0xff
   141d8:	e92d4010 	push	{r4, lr}
	int idx;
	
	idx = EP2IDX(bEP);
   141dc:	e1a033a3 	lsr	r3, r3, #7
   141e0:	e200400f 	and	r4, r0, #15
   141e4:	e1834084 	orr	r4, r3, r4, lsl #1
	@param [in]	idx			Endpoint index
	@param [in] wMaxPSize	Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
	USBReEP |= (1 << idx);
   141e8:	e59f3034 	ldr	r3, [pc, #52]	; 14224 <USBHwEPConfig+0x50>
   141ec:	e5932044 	ldr	r2, [r3, #68]	; 0x44
   141f0:	e3a00001 	mov	r0, #1
   141f4:	e1822410 	orr	r2, r2, r0, lsl r4
		
	@param [in]	bEP				Endpoint number
	@param [in]	wMaxPacketSize	Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
   141f8:	e1a01801 	lsl	r1, r1, #16
   141fc:	e1a01821 	lsr	r1, r1, #16
	@param [in]	idx			Endpoint index
	@param [in] wMaxPSize	Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
	USBReEP |= (1 << idx);
   14200:	e5832044 	str	r2, [r3, #68]	; 0x44
	USBEpInd = idx;
	USBMaxPSize = wMaxPSize;
	Wait4DevInt(EP_RLZED);
   14204:	e3a00c01 	mov	r0, #256	; 0x100
	@param [in] wMaxPSize	Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
	USBReEP |= (1 << idx);
	USBEpInd = idx;
   14208:	e5834048 	str	r4, [r3, #72]	; 0x48
	USBMaxPSize = wMaxPSize;
   1420c:	e583104c 	str	r1, [r3, #76]	; 0x4c
	Wait4DevInt(EP_RLZED);
   14210:	ebffffc4 	bl	14128 <Wait4DevInt>
	@param [in]	idx		Endpoint index
	@param [in]	fEnable	TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
	USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
   14214:	e3840040 	orr	r0, r4, #64	; 0x40
   14218:	e3a01000 	mov	r1, #0
	// realise EP
	USBHwEPRealize(idx, wMaxPacketSize);

	// enable EP
	USBHwEPEnable(idx, TRUE);
}
   1421c:	e8bd4010 	pop	{r4, lr}
	@param [in]	idx		Endpoint index
	@param [in]	fEnable	TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
	USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
   14220:	eaffffd2 	b	14170 <USBHwCmdWrite>
   14224:	e0090000 	.word	0xe0090000

00014228 <USBHwRegisterEPIntHandler>:
	idx = EP2IDX(bEP);

	ASSERT(idx<32);

	/* add handler to list of EP handlers */
	_apfnEPIntHandlers[idx / 2] = pfnHandler;
   14228:	e59f2034 	ldr	r2, [pc, #52]	; 14264 <USBHwRegisterEPIntHandler+0x3c>
		
	@param [in]	bEP				Endpoint number
	@param [in]	pfnHandler		Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
   1422c:	e20030ff 	and	r3, r0, #255	; 0xff
	int idx;
	
	idx = EP2IDX(bEP);
   14230:	e200000f 	and	r0, r0, #15

	ASSERT(idx<32);

	/* add handler to list of EP handlers */
	_apfnEPIntHandlers[idx / 2] = pfnHandler;
   14234:	e7821100 	str	r1, [r2, r0, lsl #2]
	
	/* enable EP interrupt */
	USBEpIntEn |= (1 << idx);
   14238:	e59f2028 	ldr	r2, [pc, #40]	; 14268 <USBHwRegisterEPIntHandler+0x40>
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
	int idx;
	
	idx = EP2IDX(bEP);
   1423c:	e1a033a3 	lsr	r3, r3, #7

	/* add handler to list of EP handlers */
	_apfnEPIntHandlers[idx / 2] = pfnHandler;
	
	/* enable EP interrupt */
	USBEpIntEn |= (1 << idx);
   14240:	e5921034 	ldr	r1, [r2, #52]	; 0x34
	idx = EP2IDX(bEP);

	ASSERT(idx<32);

	/* add handler to list of EP handlers */
	_apfnEPIntHandlers[idx / 2] = pfnHandler;
   14244:	e1833080 	orr	r3, r3, r0, lsl #1
	
	/* enable EP interrupt */
	USBEpIntEn |= (1 << idx);
   14248:	e3a00001 	mov	r0, #1
   1424c:	e1813310 	orr	r3, r1, r0, lsl r3
   14250:	e5823034 	str	r3, [r2, #52]	; 0x34
	USBDevIntEn |= EP_SLOW;
   14254:	e5923004 	ldr	r3, [r2, #4]
   14258:	e3833004 	orr	r3, r3, #4
   1425c:	e5823004 	str	r3, [r2, #4]
	
	DBG("Registered handler for EP 0x%x\n", bEP);
}
   14260:	e12fff1e 	bx	lr
   14264:	40000de8 	.word	0x40000de8
   14268:	e0090000 	.word	0xe0090000

0001426c <USBHwRegisterDevIntHandler>:
		
	@param [in]	pfnHandler	Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
	_pfnDevIntHandler = pfnHandler;
   1426c:	e59f3014 	ldr	r3, [pc, #20]	; 14288 <USBHwRegisterDevIntHandler+0x1c>
   14270:	e5830040 	str	r0, [r3, #64]	; 0x40
	
	// enable device interrupt
	USBDevIntEn |= DEV_STAT;
   14274:	e59f3010 	ldr	r3, [pc, #16]	; 1428c <USBHwRegisterDevIntHandler+0x20>
   14278:	e5932004 	ldr	r2, [r3, #4]
   1427c:	e3822008 	orr	r2, r2, #8
   14280:	e5832004 	str	r2, [r3, #4]

	DBG("Registered handler for device status\n");
}
   14284:	e12fff1e 	bx	lr
   14288:	40000de8 	.word	0x40000de8
   1428c:	e0090000 	.word	0xe0090000

00014290 <USBHwRegisterFrameHandler>:
		
	@param [in]	pfnHandler	Callback function
 */
void USBHwRegisterFrameHandler(TFnFrameHandler *pfnHandler)
{
	_pfnFrameHandler = pfnHandler;
   14290:	e59f3014 	ldr	r3, [pc, #20]	; 142ac <USBHwRegisterFrameHandler+0x1c>
   14294:	e5830044 	str	r0, [r3, #68]	; 0x44
	
	// enable device interrupt
	USBDevIntEn |= FRAME;
   14298:	e59f3010 	ldr	r3, [pc, #16]	; 142b0 <USBHwRegisterFrameHandler+0x20>
   1429c:	e5932004 	ldr	r2, [r3, #4]
   142a0:	e3822001 	orr	r2, r2, #1
   142a4:	e5832004 	str	r2, [r3, #4]

	DBG("Registered handler for frame\n");
}
   142a8:	e12fff1e 	bx	lr
   142ac:	40000de8 	.word	0x40000de8
   142b0:	e0090000 	.word	0xe0090000

000142b4 <USBHwSetAddress>:
		
	@param [in]	bAddr		Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
	USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
   142b4:	e1e01c80 	mvn	r1, r0, lsl #25
   142b8:	e1e01ca1 	mvn	r1, r1, lsr #25
   142bc:	e20110ff 	and	r1, r1, #255	; 0xff
   142c0:	e3a000d0 	mov	r0, #208	; 0xd0
   142c4:	eaffffa9 	b	14170 <USBHwCmdWrite>

000142c8 <USBHwConnect>:
		
	@param [in]	fConnect	If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
	USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
   142c8:	e2901000 	adds	r1, r0, #0
   142cc:	13a01001 	movne	r1, #1
   142d0:	e3a000fe 	mov	r0, #254	; 0xfe
   142d4:	eaffffa5 	b	14170 <USBHwCmdWrite>

000142d8 <USBHwNakIntEnable>:
	from NAK interrupt by checking the bits in their bEPStatus argument.
	
	@param [in]	bIntBits	Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
   142d8:	e20010ff 	and	r1, r0, #255	; 0xff
	USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
   142dc:	e3a000f3 	mov	r0, #243	; 0xf3
   142e0:	eaffffa2 	b	14170 <USBHwCmdWrite>

000142e4 <USBHwEPGetStatus>:
		
	@param [in]	bEP		Endpoint number
	@return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8	USBHwEPGetStatus(U8 bEP)
{
   142e4:	e20030ff 	and	r3, r0, #255	; 0xff
	int idx = EP2IDX(bEP);
   142e8:	e1a033a3 	lsr	r3, r3, #7
   142ec:	e200000f 	and	r0, r0, #15

	return USBHwCmdRead(CMD_EP_SELECT | idx);
   142f0:	e1830080 	orr	r0, r3, r0, lsl #1
   142f4:	eaffffa8 	b	1419c <USBHwCmdRead>

000142f8 <USBHwEPStall>:
		
	@param [in]	bEP		Endpoint number
	@param [in]	fStall	TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
   142f8:	e20030ff 	and	r3, r0, #255	; 0xff
	int idx = EP2IDX(bEP);
   142fc:	e1a033a3 	lsr	r3, r3, #7
   14300:	e200000f 	and	r0, r0, #15
   14304:	e1830080 	orr	r0, r3, r0, lsl #1

	USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
   14308:	e2911000 	adds	r1, r1, #0
   1430c:	e3800040 	orr	r0, r0, #64	; 0x40
   14310:	13a01001 	movne	r1, #1
   14314:	eaffff95 	b	14170 <USBHwCmdWrite>

00014318 <USBHwEPWrite>:
	@param [in]	iLen	Number of bytes to write
			
	@return TRUE if the data was successfully written or <0 in case of error.
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, int iLen)
{
   14318:	e92d4010 	push	{r4, lr}
   1431c:	e1a04002 	mov	r4, r2
   14320:	e20020ff 	and	r2, r0, #255	; 0xff
	int idx;
	
	idx = EP2IDX(bEP);
   14324:	e200300f 	and	r3, r0, #15
   14328:	e1a003a2 	lsr	r0, r2, #7
   1432c:	e1800083 	orr	r0, r0, r3, lsl #1
	
	// set write enable for specific endpoint
	USBCtrl = WR_EN | ((bEP & 0xF) << 2);
   14330:	e1a03103 	lsl	r3, r3, #2
   14334:	e3832002 	orr	r2, r3, #2
   14338:	e59f3054 	ldr	r3, [pc, #84]	; 14394 <USBHwEPWrite+0x7c>
   1433c:	e5832028 	str	r2, [r3, #40]	; 0x28
	
	// set packet length
	USBTxPLen = iLen;
   14340:	e5834024 	str	r4, [r3, #36]	; 0x24
	
	// write data
	while (USBCtrl & WR_EN) {
   14344:	ea000009 	b	14370 <USBHwEPWrite+0x58>
		USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
   14348:	e5d12002 	ldrb	r2, [r1, #2]
   1434c:	e5d1c003 	ldrb	ip, [r1, #3]
   14350:	e1a02802 	lsl	r2, r2, #16
   14354:	e1822c0c 	orr	r2, r2, ip, lsl #24
   14358:	e5d1c000 	ldrb	ip, [r1]
   1435c:	e182200c 	orr	r2, r2, ip
   14360:	e5d1c001 	ldrb	ip, [r1, #1]
   14364:	e182240c 	orr	r2, r2, ip, lsl #8
   14368:	e583201c 	str	r2, [r3, #28]
		pbBuf += 4;
   1436c:	e2811004 	add	r1, r1, #4
	
	// set packet length
	USBTxPLen = iLen;
	
	// write data
	while (USBCtrl & WR_EN) {
   14370:	e5932028 	ldr	r2, [r3, #40]	; 0x28
   14374:	e3120002 	tst	r2, #2
   14378:	1afffff2 	bne	14348 <USBHwEPWrite+0x30>
		USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
		pbBuf += 4;
	}

	// select endpoint and validate buffer
	USBHwCmd(CMD_EP_SELECT | idx);
   1437c:	ebffff72 	bl	1414c <USBHwCmd>
	USBHwCmd(CMD_EP_VALIDATE_BUFFER);
   14380:	e3a000fa 	mov	r0, #250	; 0xfa
   14384:	ebffff70 	bl	1414c <USBHwCmd>
	
	return iLen;
}
   14388:	e1a00004 	mov	r0, r4
   1438c:	e8bd4010 	pop	{r4, lr}
   14390:	e12fff1e 	bx	lr
   14394:	e0090000 	.word	0xe0090000

00014398 <USBHwEPRead>:
			
	@return the number of bytes available in the EP (possibly more than iMaxLen),
	or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, int iMaxLen)
{
   14398:	e200c0ff 	and	ip, r0, #255	; 0xff
	int i, idx;
	U32	dwData, dwLen;
	
	idx = EP2IDX(bEP);
   1439c:	e200000f 	and	r0, r0, #15
			
	@return the number of bytes available in the EP (possibly more than iMaxLen),
	or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, int iMaxLen)
{
   143a0:	e92d4030 	push	{r4, r5, lr}
	U32	dwData, dwLen;
	
	idx = EP2IDX(bEP);
	
	// set read enable bit for specific endpoint
	USBCtrl = RD_EN | ((bEP & 0xF) << 2);
   143a4:	e59f3088 	ldr	r3, [pc, #136]	; 14434 <USBHwEPRead+0x9c>
   143a8:	e1a04100 	lsl	r4, r0, #2
   143ac:	e3844001 	orr	r4, r4, #1
   143b0:	e5834028 	str	r4, [r3, #40]	; 0x28
	
	// wait for PKT_RDY
	do {
		dwLen = USBRxPLen;
   143b4:	e5934020 	ldr	r4, [r3, #32]
	} while ((dwLen & PKT_RDY) == 0);
   143b8:	e3140b02 	tst	r4, #2048	; 0x800
   143bc:	0afffffc 	beq	143b4 <USBHwEPRead+0x1c>
	
	// packet valid?
	if ((dwLen & DV) == 0) {
   143c0:	e3140b01 	tst	r4, #1024	; 0x400
		return -1;
   143c4:	03e04000 	mvneq	r4, #0
	do {
		dwLen = USBRxPLen;
	} while ((dwLen & PKT_RDY) == 0);
	
	// packet valid?
	if ((dwLen & DV) == 0) {
   143c8:	0a000016 	beq	14428 <USBHwEPRead+0x90>
		return -1;
	}
	
	// get length
	dwLen &= PKT_LNGTH_MASK;
   143cc:	e1a04b04 	lsl	r4, r4, #22
	
	// get data
	dwData = 0;
   143d0:	e3a0e000 	mov	lr, #0
	if ((dwLen & DV) == 0) {
		return -1;
	}
	
	// get length
	dwLen &= PKT_LNGTH_MASK;
   143d4:	e1a04b24 	lsr	r4, r4, #22
	
	// get data
	dwData = 0;
	for (i = 0; i < dwLen; i++) {
   143d8:	e1a0300e 	mov	r3, lr
		if ((i % 4) == 0) {
			dwData = USBRxData;
   143dc:	e59f5050 	ldr	r5, [pc, #80]	; 14434 <USBHwEPRead+0x9c>
	// get length
	dwLen &= PKT_LNGTH_MASK;
	
	// get data
	dwData = 0;
	for (i = 0; i < dwLen; i++) {
   143e0:	ea000006 	b	14400 <USBHwEPRead+0x68>
		if ((i % 4) == 0) {
   143e4:	e3130003 	tst	r3, #3
			dwData = USBRxData;
   143e8:	0595e018 	ldreq	lr, [r5, #24]
		}
		if ((pbBuf != NULL) && (i < iMaxLen)) {
   143ec:	e3510000 	cmp	r1, #0
   143f0:	11530002 	cmpne	r3, r2
			pbBuf[i] = dwData & 0xFF;
   143f4:	b7c1e003 	strblt	lr, [r1, r3]
		}
		dwData >>= 8;
   143f8:	e1a0e42e 	lsr	lr, lr, #8
	// get length
	dwLen &= PKT_LNGTH_MASK;
	
	// get data
	dwData = 0;
	for (i = 0; i < dwLen; i++) {
   143fc:	e2833001 	add	r3, r3, #1
   14400:	e1530004 	cmp	r3, r4
   14404:	1afffff6 	bne	143e4 <USBHwEPRead+0x4c>
		}
		dwData >>= 8;
	}

	// make sure RD_EN is clear
	USBCtrl = 0;
   14408:	e59f3024 	ldr	r3, [pc, #36]	; 14434 <USBHwEPRead+0x9c>
   1440c:	e3a02000 	mov	r2, #0
int USBHwEPRead(U8 bEP, U8 *pbBuf, int iMaxLen)
{
	int i, idx;
	U32	dwData, dwLen;
	
	idx = EP2IDX(bEP);
   14410:	e1a0c3ac 	lsr	ip, ip, #7

	// make sure RD_EN is clear
	USBCtrl = 0;

	// select endpoint and clear buffer
	USBHwCmd(CMD_EP_SELECT | idx);
   14414:	e18c0080 	orr	r0, ip, r0, lsl #1
		}
		dwData >>= 8;
	}

	// make sure RD_EN is clear
	USBCtrl = 0;
   14418:	e5832028 	str	r2, [r3, #40]	; 0x28

	// select endpoint and clear buffer
	USBHwCmd(CMD_EP_SELECT | idx);
   1441c:	ebffff4a 	bl	1414c <USBHwCmd>
	USBHwCmd(CMD_EP_CLEAR_BUFFER);
   14420:	e3a000f2 	mov	r0, #242	; 0xf2
   14424:	ebffff48 	bl	1414c <USBHwCmd>
	
	return dwLen;
}
   14428:	e1a00004 	mov	r0, r4
   1442c:	e8bd4030 	pop	{r4, r5, lr}
   14430:	e12fff1e 	bx	lr
   14434:	e0090000 	.word	0xe0090000

00014438 <USBHwConfigDevice>:
	@param [in]	fConfigured	If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
	// set configured bit
	USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
   14438:	e2901000 	adds	r1, r0, #0
   1443c:	13a01001 	movne	r1, #1
   14440:	e3a000d8 	mov	r0, #216	; 0xd8
   14444:	eaffff49 	b	14170 <USBHwCmdWrite>

00014448 <USBHwISR>:

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

	// handle device interrupts
	dwStatus = USBDevIntSt;
   14448:	e59f30e4 	ldr	r3, [pc, #228]	; 14534 <USBHwISR+0xec>
	@todo Get all 11 bits of frame number instead of just 8

	Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
   1444c:	e92d40f0 	push	{r4, r5, r6, r7, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

	// handle device interrupts
	dwStatus = USBDevIntSt;
   14450:	e5934000 	ldr	r4, [r3]
	
	// frame interrupt
	if (dwStatus & FRAME) {
   14454:	e3140001 	tst	r4, #1
   14458:	0a000009 	beq	14484 <USBHwISR+0x3c>
		// clear int
		USBDevIntClr = FRAME;
   1445c:	e3a02001 	mov	r2, #1
   14460:	e5832008 	str	r2, [r3, #8]
		// call handler
		if (_pfnFrameHandler != NULL) {
   14464:	e59f30cc 	ldr	r3, [pc, #204]	; 14538 <USBHwISR+0xf0>
   14468:	e5935044 	ldr	r5, [r3, #68]	; 0x44
   1446c:	e3550000 	cmp	r5, #0
   14470:	0a000003 	beq	14484 <USBHwISR+0x3c>
			wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
   14474:	e3a000f5 	mov	r0, #245	; 0xf5
   14478:	ebffff47 	bl	1419c <USBHwCmdRead>
			_pfnFrameHandler(wFrame);
   1447c:	e1a0e00f 	mov	lr, pc
   14480:	e12fff15 	bx	r5
		}
	}
	
	// device status interrupt
	if (dwStatus & DEV_STAT) {
   14484:	e3140008 	tst	r4, #8
   14488:	0a00000c 	beq	144c0 <USBHwISR+0x78>
		/*	Clear DEV_STAT interrupt before reading DEV_STAT register.
			This prevents corrupted device status reads, see
			LPC2148 User manual revision 2, 25 july 2006.
		*/
		USBDevIntClr = DEV_STAT;
   1448c:	e59f30a0 	ldr	r3, [pc, #160]	; 14534 <USBHwISR+0xec>
   14490:	e3a02008 	mov	r2, #8
   14494:	e5832008 	str	r2, [r3, #8]
		bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
   14498:	e3a000fe 	mov	r0, #254	; 0xfe
   1449c:	ebffff3e 	bl	1419c <USBHwCmdRead>
		if (bDevStat & (CON_CH | SUS_CH | RST)) {
   144a0:	e310001a 	tst	r0, #26
   144a4:	0a000005 	beq	144c0 <USBHwISR+0x78>
			// convert device status into something HW independent
			bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
					((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
					((bDevStat & RST) ? DEV_STATUS_RESET : 0);
			// call handler
			if (_pfnDevIntHandler != NULL) {
   144a8:	e59f3088 	ldr	r3, [pc, #136]	; 14538 <USBHwISR+0xf0>
   144ac:	e5933040 	ldr	r3, [r3, #64]	; 0x40
   144b0:	e3530000 	cmp	r3, #0
DEBUG_LED_ON(8);		
				_pfnDevIntHandler(bStat);
   144b4:	12000015 	andne	r0, r0, #21
   144b8:	11a0e00f 	movne	lr, pc
   144bc:	112fff13 	bxne	r3
			}
		}
	}
	
	// endpoint interrupt
	if (dwStatus & EP_SLOW) {
   144c0:	e3140004 	tst	r4, #4
   144c4:	0a000018 	beq	1452c <USBHwISR+0xe4>
		// clear EP_SLOW
		USBDevIntClr = EP_SLOW;
   144c8:	e59f5064 	ldr	r5, [pc, #100]	; 14534 <USBHwISR+0xec>
   144cc:	e3a03004 	mov	r3, #4
   144d0:	e5853008 	str	r3, [r5, #8]
						((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
						((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
						((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
						((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
				// call handler
				if (_apfnEPIntHandlers[i / 2] != NULL) {
   144d4:	e59f605c 	ldr	r6, [pc, #92]	; 14538 <USBHwISR+0xf0>
	// endpoint interrupt
	if (dwStatus & EP_SLOW) {
		// clear EP_SLOW
		USBDevIntClr = EP_SLOW;
		// check all endpoints
		for (i = 0; i < 32; i++) {
   144d8:	e3a04000 	mov	r4, #0
			dwIntBit = (1 << i);
   144dc:	e3a07001 	mov	r7, #1
   144e0:	e1a03417 	lsl	r3, r7, r4
			if (USBEpIntSt & dwIntBit) {
   144e4:	e5952030 	ldr	r2, [r5, #48]	; 0x30
   144e8:	e1130002 	tst	r3, r2
   144ec:	0a00000b 	beq	14520 <USBHwISR+0xd8>
				// clear int (and retrieve status)
				USBEpIntClr = dwIntBit;
   144f0:	e5853038 	str	r3, [r5, #56]	; 0x38
				Wait4DevInt(CDFULL);
   144f4:	e3a00020 	mov	r0, #32
   144f8:	ebffff0a 	bl	14128 <Wait4DevInt>
						((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
						((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
						((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
						((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
				// call handler
				if (_apfnEPIntHandlers[i / 2] != NULL) {
   144fc:	e1a000c4 	asr	r0, r4, #1
   14500:	e7963100 	ldr	r3, [r6, r0, lsl #2]
   14504:	e3530000 	cmp	r3, #0
			dwIntBit = (1 << i);
			if (USBEpIntSt & dwIntBit) {
				// clear int (and retrieve status)
				USBEpIntClr = dwIntBit;
				Wait4DevInt(CDFULL);
				bEPStat = USBCmdData;
   14508:	e5951014 	ldr	r1, [r5, #20]
						((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
						((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
				// call handler
				if (_apfnEPIntHandlers[i / 2] != NULL) {
DEBUG_LED_ON(10);		
					_apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
   1450c:	11800384 	orrne	r0, r0, r4, lsl #7
   14510:	120000ff 	andne	r0, r0, #255	; 0xff
   14514:	1201101f 	andne	r1, r1, #31
   14518:	11a0e00f 	movne	lr, pc
   1451c:	112fff13 	bxne	r3
	// endpoint interrupt
	if (dwStatus & EP_SLOW) {
		// clear EP_SLOW
		USBDevIntClr = EP_SLOW;
		// check all endpoints
		for (i = 0; i < 32; i++) {
   14520:	e2844001 	add	r4, r4, #1
   14524:	e3540020 	cmp	r4, #32
   14528:	1affffec 	bne	144e0 <USBHwISR+0x98>
			}
		}
	}
	
DEBUG_LED_OFF(9);		
}
   1452c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   14530:	e12fff1e 	bx	lr
   14534:	e0090000 	.word	0xe0090000
   14538:	40000de8 	.word	0x40000de8

0001453c <USBHwInit>:
	@return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
	// configure P0.23 for Vbus sense
	PINSEL1 = (PINSEL1 & ~(3 << 14)) | (1 << 14);	// P0.23
   1453c:	e59f30ac 	ldr	r3, [pc, #172]	; 145f0 <USBHwInit+0xb4>
   14540:	e5932004 	ldr	r2, [r3, #4]
   14544:	e3c22903 	bic	r2, r2, #49152	; 0xc000
   14548:	e3822901 	orr	r2, r2, #16384	; 0x4000
	acts as a pull-up and so prevents detection of USB disconnect.
		
	@return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
   1454c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	// configure P0.23 for Vbus sense
	PINSEL1 = (PINSEL1 & ~(3 << 14)) | (1 << 14);	// P0.23
   14550:	e5832004 	str	r2, [r3, #4]
	// configure P0.31 for CONNECT
	PINSEL1 = (PINSEL1 & ~(3 << 30)) | (2 << 30);	// P0.31
   14554:	e5932004 	ldr	r2, [r3, #4]
   14558:	e3c22103 	bic	r2, r2, #-1073741824	; 0xc0000000
   1455c:	e3822102 	orr	r2, r2, #-2147483648	; 0x80000000
   14560:	e5832004 	str	r2, [r3, #4]

	// enable PUSB
	PCONP |= (1 << 31);		
   14564:	e283381d 	add	r3, r3, #1900544	; 0x1d0000
   14568:	e59320c4 	ldr	r2, [r3, #196]	; 0xc4
   1456c:	e3822102 	orr	r2, r2, #-2147483648	; 0x80000000
   14570:	e58320c4 	str	r2, [r3, #196]	; 0xc4
	
	// initialise PLL
	PLL1CON = 1;			// enable PLL
   14574:	e3a02001 	mov	r2, #1
   14578:	e58320a0 	str	r2, [r3, #160]	; 0xa0
	PLL1CFG = (1 << 5) | 3; // P = 2, M = 4
   1457c:	e3a02023 	mov	r2, #35	; 0x23
   14580:	e58320a4 	str	r2, [r3, #164]	; 0xa4
	PLL1FEED = 0xAA;
   14584:	e3a020aa 	mov	r2, #170	; 0xaa
   14588:	e58320ac 	str	r2, [r3, #172]	; 0xac
	PLL1FEED = 0x55;
   1458c:	e3a02055 	mov	r2, #85	; 0x55
   14590:	e58320ac 	str	r2, [r3, #172]	; 0xac
	while ((PLL1STAT & (1 << 10)) == 0);
   14594:	e59310a8 	ldr	r1, [r3, #168]	; 0xa8
   14598:	e3110b01 	tst	r1, #1024	; 0x400
   1459c:	e59f2050 	ldr	r2, [pc, #80]	; 145f4 <USBHwInit+0xb8>
   145a0:	0afffffb 	beq	14594 <USBHwInit+0x58>

	PLL1CON = 3;			// enable and connect
   145a4:	e3a03003 	mov	r3, #3
   145a8:	e58230a0 	str	r3, [r2, #160]	; 0xa0
	PLL1FEED = 0xAA;
   145ac:	e3a030aa 	mov	r3, #170	; 0xaa
   145b0:	e58230ac 	str	r3, [r2, #172]	; 0xac
	PLL1FEED = 0x55;
   145b4:	e3a03055 	mov	r3, #85	; 0x55
   145b8:	e58230ac 	str	r3, [r2, #172]	; 0xac
	
	// disable/clear all interrupts for now
	USBDevIntEn = 0;
   145bc:	e59f3034 	ldr	r3, [pc, #52]	; 145f8 <USBHwInit+0xbc>
   145c0:	e3a00000 	mov	r0, #0
	USBDevIntClr = 0xFFFFFFFF;
   145c4:	e3e02000 	mvn	r2, #0
	PLL1CON = 3;			// enable and connect
	PLL1FEED = 0xAA;
	PLL1FEED = 0x55;
	
	// disable/clear all interrupts for now
	USBDevIntEn = 0;
   145c8:	e5830004 	str	r0, [r3, #4]
	USBDevIntClr = 0xFFFFFFFF;
   145cc:	e5832008 	str	r2, [r3, #8]
	USBDevIntPri = 0;
   145d0:	e583002c 	str	r0, [r3, #44]	; 0x2c

	USBEpIntEn = 0;
   145d4:	e5830034 	str	r0, [r3, #52]	; 0x34
	USBEpIntClr = 0xFFFFFFFF;
   145d8:	e5832038 	str	r2, [r3, #56]	; 0x38
	USBEpIntPri = 0;
   145dc:	e5830040 	str	r0, [r3, #64]	; 0x40

	// by default, only ACKs generate interrupts
	USBHwNakIntEnable(0);
   145e0:	ebffff3c 	bl	142d8 <USBHwNakIntEnable>
	DEBUG_LED_INIT(8);
	DEBUG_LED_INIT(9);
	DEBUG_LED_INIT(10);

	return TRUE;
}
   145e4:	e3a00001 	mov	r0, #1
   145e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   145ec:	e12fff1e 	bx	lr
   145f0:	e002c000 	.word	0xe002c000
   145f4:	e01fc000 	.word	0xe01fc000
   145f8:	e0090000 	.word	0xe0090000

000145fc <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
   145fc:	e92d4030 	push	{r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
   14600:	e59f4038 	ldr	r4, [pc, #56]	; 14640 <DataIn+0x44>
   14604:	e5945000 	ldr	r5, [r4]
   14608:	e3550040 	cmp	r5, #64	; 0x40
   1460c:	a3a05040 	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
   14610:	e1a02005 	mov	r2, r5
   14614:	e3a00080 	mov	r0, #128	; 0x80
   14618:	e5941004 	ldr	r1, [r4, #4]
   1461c:	ebffff3d 	bl	14318 <USBHwEPWrite>
	pbData += iChunk;
   14620:	e5943004 	ldr	r3, [r4, #4]
   14624:	e0833005 	add	r3, r3, r5
   14628:	e5843004 	str	r3, [r4, #4]
	iResidue -= iChunk;
   1462c:	e5943000 	ldr	r3, [r4]
   14630:	e0655003 	rsb	r5, r5, r3
   14634:	e5845000 	str	r5, [r4]
}
   14638:	e8bd4030 	pop	{r4, r5, lr}
   1463c:	e12fff1e 	bx	lr
   14640:	40000e30 	.word	0x40000e30

00014644 <USBHandleControlTransfer>:
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
	int iChunk, iType;

	if (bEP == 0x00) {
   14644:	e21030ff 	ands	r3, r0, #255	; 0xff
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
   14648:	e92d4010 	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
   1464c:	1a00004c 	bne	14784 <USBHandleControlTransfer+0x140>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
   14650:	e2110004 	ands	r0, r1, #4
   14654:	e59f4140 	ldr	r4, [pc, #320]	; 1479c <USBHandleControlTransfer+0x158>
   14658:	0a000022 	beq	146e8 <USBHandleControlTransfer+0xa4>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
   1465c:	e1a00003 	mov	r0, r3
   14660:	e2841008 	add	r1, r4, #8
   14664:	e3a02008 	mov	r2, #8
   14668:	ebffff4a 	bl	14398 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
   1466c:	e5d41008 	ldrb	r1, [r4, #8]
   14670:	e1a022a1 	lsr	r2, r1, #5
   14674:	e2022003 	and	r2, r2, #3
			pbData = apbDataStore[iType];
   14678:	e0843102 	add	r3, r4, r2, lsl #2
   1467c:	e5933010 	ldr	r3, [r3, #16]
   14680:	e5843004 	str	r3, [r4, #4]
			iResidue = Setup.wLength;
   14684:	e1d430be 	ldrh	r3, [r4, #14]
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
   14688:	e3530000 	cmp	r3, #0
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
   1468c:	e5843000 	str	r3, [r4]
			iLen = Setup.wLength;
   14690:	e5843020 	str	r3, [r4, #32]

			if ((Setup.wLength == 0) ||
   14694:	0a000001 	beq	146a0 <USBHandleControlTransfer+0x5c>
   14698:	e1b013a1 	lsrs	r1, r1, #7
   1469c:	0a00003c 	beq	14794 <USBHandleControlTransfer+0x150>
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
	pfnHandler = apfnReqHandlers[iType];
   146a0:	e59f40f4 	ldr	r4, [pc, #244]	; 1479c <USBHandleControlTransfer+0x158>
   146a4:	e0842102 	add	r2, r4, r2, lsl #2
   146a8:	e5923024 	ldr	r3, [r2, #36]	; 0x24
	if (pfnHandler == NULL) {
   146ac:	e3530000 	cmp	r3, #0
   146b0:	0a00002b 	beq	14764 <USBHandleControlTransfer+0x120>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
   146b4:	e2840008 	add	r0, r4, #8
   146b8:	e2841020 	add	r1, r4, #32
   146bc:	e2842004 	add	r2, r4, #4
   146c0:	e1a0e00f 	mov	lr, pc
   146c4:	e12fff13 	bx	r3
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
   146c8:	e3500000 	cmp	r0, #0
   146cc:	0a000024 	beq	14764 <USBHandleControlTransfer+0x120>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
   146d0:	e1d420be 	ldrh	r2, [r4, #14]
   146d4:	e5943020 	ldr	r3, [r4, #32]
   146d8:	e1520003 	cmp	r2, r3
   146dc:	d5842000 	strle	r2, [r4]
   146e0:	c5843000 	strgt	r3, [r4]
   146e4:	ea000028 	b	1478c <USBHandleControlTransfer+0x148>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
   146e8:	e5942000 	ldr	r2, [r4]
   146ec:	e3520000 	cmp	r2, #0
   146f0:	da00001f 	ble	14774 <USBHandleControlTransfer+0x130>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
   146f4:	e5941004 	ldr	r1, [r4, #4]
   146f8:	ebffff26 	bl	14398 <USBHwEPRead>
				if (iChunk < 0) {
   146fc:	e3500000 	cmp	r0, #0
   14700:	ba000017 	blt	14764 <USBHandleControlTransfer+0x120>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
   14704:	e5943004 	ldr	r3, [r4, #4]
   14708:	e0833000 	add	r3, r3, r0
   1470c:	e5843004 	str	r3, [r4, #4]
				iResidue -= iChunk;
   14710:	e5943000 	ldr	r3, [r4]
   14714:	e0600003 	rsb	r0, r0, r3
				if (iResidue == 0) {
   14718:	e3500000 	cmp	r0, #0
				if (iChunk < 0) {
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
				iResidue -= iChunk;
   1471c:	e5840000 	str	r0, [r4]
				if (iResidue == 0) {
   14720:	1a00001b 	bne	14794 <USBHandleControlTransfer+0x150>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
   14724:	e5d43008 	ldrb	r3, [r4, #8]
   14728:	e1a031a3 	lsr	r3, r3, #3
					pbData = apbDataStore[iType];
   1472c:	e203300c 	and	r3, r3, #12
   14730:	e0843003 	add	r3, r4, r3
   14734:	e5932010 	ldr	r2, [r3, #16]
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
	pfnHandler = apfnReqHandlers[iType];
   14738:	e5933024 	ldr	r3, [r3, #36]	; 0x24
	if (pfnHandler == NULL) {
   1473c:	e3530000 	cmp	r3, #0
				pbData += iChunk;
				iResidue -= iChunk;
				if (iResidue == 0) {
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
					pbData = apbDataStore[iType];
   14740:	e5842004 	str	r2, [r4, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
   14744:	0a000006 	beq	14764 <USBHandleControlTransfer+0x120>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
   14748:	e2840008 	add	r0, r4, #8
   1474c:	e2841020 	add	r1, r4, #32
   14750:	e2842004 	add	r2, r4, #4
   14754:	e1a0e00f 	mov	lr, pc
   14758:	e12fff13 	bx	r3
				iResidue -= iChunk;
				if (iResidue == 0) {
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
					pbData = apbDataStore[iType];
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
   1475c:	e3500000 	cmp	r0, #0
   14760:	1a000009 	bne	1478c <USBHandleControlTransfer+0x148>
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
   14764:	e3a00080 	mov	r0, #128	; 0x80
   14768:	e3a01001 	mov	r1, #1
   1476c:	ebfffee1 	bl	142f8 <USBHwEPStall>
   14770:	ea000007 	b	14794 <USBHandleControlTransfer+0x150>
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
   14774:	e1a01000 	mov	r1, r0
   14778:	e1a02000 	mov	r2, r0
   1477c:	ebffff05 	bl	14398 <USBHwEPRead>
   14780:	ea000003 	b	14794 <USBHandleControlTransfer+0x150>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
   14784:	e3530080 	cmp	r3, #128	; 0x80
   14788:	1a000001 	bne	14794 <USBHandleControlTransfer+0x150>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
   1478c:	e8bd4010 	pop	{r4, lr}
		}
	}
	else if (bEP == 0x80) {
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
   14790:	eaffff99 	b	145fc <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
   14794:	e8bd4010 	pop	{r4, lr}
   14798:	e12fff1e 	bx	lr
   1479c:	40000e30 	.word	0x40000e30

000147a0 <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
   147a0:	e59f300c 	ldr	r3, [pc, #12]	; 147b4 <USBRegisterRequestHandler+0x14>
   147a4:	e0833100 	add	r3, r3, r0, lsl #2
   147a8:	e5831024 	str	r1, [r3, #36]	; 0x24
	apbDataStore[iType] = pbDataStore;
   147ac:	e5832010 	str	r2, [r3, #16]
}
   147b0:	e12fff1e 	bx	lr
   147b4:	40000e30 	.word	0x40000e30

000147b8 <USBRegisterDescriptors>:
	@param [in]	pabDescriptors	The descriptor byte array
 */
//void USBRegisterDescriptors(const U8 *pabDescriptors)
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
   147b8:	e59f3004 	ldr	r3, [pc, #4]	; 147c4 <USBRegisterDescriptors+0xc>
   147bc:	e5830000 	str	r0, [r3]
}
   147c0:	e12fff1e 	bx	lr
   147c4:	40000e64 	.word	0x40000e64

000147c8 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
   147c8:	e1a00800 	lsl	r0, r0, #16
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
	pab = (U8 *)pabDescrip;
   147cc:	e59f106c 	ldr	r1, [pc, #108]	; 14840 <USBGetDescriptor+0x78>
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
   147d0:	e92d0070 	push	{r4, r5, r6}
   147d4:	e1a05820 	lsr	r5, r0, #16
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
   147d8:	e1a04c20 	lsr	r4, r0, #24
	bIndex = GET_DESC_INDEX(wTypeIndex);
   147dc:	e20550ff 	and	r5, r5, #255	; 0xff
	
	pab = (U8 *)pabDescrip;
   147e0:	e5911000 	ldr	r1, [r1]
	iCurIndex = 0;
   147e4:	e3a0c000 	mov	ip, #0
	
	while (pab[DESC_bLength] != 0) {
   147e8:	ea00000f 	b	1482c <USBGetDescriptor+0x64>
		if (pab[DESC_bDescriptorType] == bType) {
   147ec:	e5d16001 	ldrb	r6, [r1, #1]
   147f0:	e1560004 	cmp	r6, r4
   147f4:	1a00000b 	bne	14828 <USBGetDescriptor+0x60>
			if (iCurIndex == bIndex) {
   147f8:	e15c0005 	cmp	ip, r5
   147fc:	1a000008 	bne	14824 <USBGetDescriptor+0x5c>
				// set data pointer
				*ppbData = pab;
   14800:	e5831000 	str	r1, [r3]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
   14804:	e3540002 	cmp	r4, #2
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
   14808:	05d10003 	ldrbeq	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
   1480c:	05d13002 	ldrbeq	r3, [r1, #2]
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
   14810:	15d13000 	ldrbne	r3, [r1]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
   14814:	01833400 	orreq	r3, r3, r0, lsl #8
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
   14818:	e5823000 	str	r3, [r2]
				}
				return TRUE;
   1481c:	e3a00001 	mov	r0, #1
   14820:	ea000004 	b	14838 <USBGetDescriptor+0x70>
			}
			iCurIndex++;
   14824:	e28cc001 	add	ip, ip, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
   14828:	e0811000 	add	r1, r1, r0
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
   1482c:	e5d10000 	ldrb	r0, [r1]
   14830:	e3500000 	cmp	r0, #0
   14834:	1affffec 	bne	147ec <USBGetDescriptor+0x24>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
   14838:	e8bd0070 	pop	{r4, r5, r6}
   1483c:	e12fff1e 	bx	lr
   14840:	40000e64 	.word	0x40000e64

00014844 <USBHandleStandardRequest>:
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
   14844:	e59f3254 	ldr	r3, [pc, #596]	; 14aa0 <USBHandleStandardRequest+0x25c>
   14848:	e5933004 	ldr	r3, [r3, #4]
   1484c:	e3530000 	cmp	r3, #0
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
   14850:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   14854:	e1a04000 	mov	r4, r0
   14858:	e1a05001 	mov	r5, r1
   1485c:	e1a06002 	mov	r6, r2
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
   14860:	0a000003 	beq	14874 <USBHandleStandardRequest+0x30>
   14864:	e1a0e00f 	mov	lr, pc
   14868:	e12fff13 	bx	r3
   1486c:	e3500000 	cmp	r0, #0
   14870:	1a000084 	bne	14a88 <USBHandleStandardRequest+0x244>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
   14874:	e5d47000 	ldrb	r7, [r4]
   14878:	e207701f 	and	r7, r7, #31
   1487c:	e3570001 	cmp	r7, #1
   14880:	0a00004c 	beq	149b8 <USBHandleStandardRequest+0x174>
   14884:	e3570002 	cmp	r7, #2
   14888:	0a00005f 	beq	14a0c <USBHandleStandardRequest+0x1c8>
   1488c:	e3570000 	cmp	r7, #0
   14890:	1a00007e 	bne	14a90 <USBHandleStandardRequest+0x24c>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
   14894:	e5d42001 	ldrb	r2, [r4, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
   14898:	e5963000 	ldr	r3, [r6]

	switch (pSetup->bRequest) {
   1489c:	e3520009 	cmp	r2, #9
   148a0:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
   148a4:	ea000079 	b	14a90 <USBHandleStandardRequest+0x24c>
   148a8:	000148d0 	.word	0x000148d0
   148ac:	00014a90 	.word	0x00014a90
   148b0:	00014a90 	.word	0x00014a90
   148b4:	00014a90 	.word	0x00014a90
   148b8:	00014a90 	.word	0x00014a90
   148bc:	000148e8 	.word	0x000148e8
   148c0:	000148f4 	.word	0x000148f4
   148c4:	00014a90 	.word	0x00014a90
   148c8:	0001490c 	.word	0x0001490c
   148cc:	00014920 	.word	0x00014920
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
   148d0:	e3a02000 	mov	r2, #0
   148d4:	e5c32000 	strb	r2, [r3]
		pbData[1] = 0;
   148d8:	e5c32001 	strb	r2, [r3, #1]
		*piLen = 2;
   148dc:	e3a03002 	mov	r3, #2
   148e0:	e5853000 	str	r3, [r5]
   148e4:	ea000067 	b	14a88 <USBHandleStandardRequest+0x244>
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
   148e8:	e5d40002 	ldrb	r0, [r4, #2]
   148ec:	ebfffe70 	bl	142b4 <USBHwSetAddress>
   148f0:	ea000064 	b	14a88 <USBHandleStandardRequest+0x244>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
   148f4:	e1d400b2 	ldrh	r0, [r4, #2]
   148f8:	e1d410b4 	ldrh	r1, [r4, #4]
   148fc:	e1a02005 	mov	r2, r5
   14900:	e1a03006 	mov	r3, r6
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
   14904:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
   14908:	eaffffae 	b	147c8 <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
   1490c:	e59f218c 	ldr	r2, [pc, #396]	; 14aa0 <USBHandleStandardRequest+0x25c>
   14910:	e5d22008 	ldrb	r2, [r2, #8]
		*piLen = 1;
   14914:	e3a07001 	mov	r7, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
   14918:	e5c32000 	strb	r2, [r3]
   1491c:	ea000033 	b	149f0 <USBHandleStandardRequest+0x1ac>
		*piLen = 1;
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
   14920:	e5d46002 	ldrb	r6, [r4, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
   14924:	e3560000 	cmp	r6, #0
		// unconfigure device
		USBHwConfigDevice(FALSE);
   14928:	01a00006 	moveq	r0, r6
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
   1492c:	0a00001c 	beq	149a4 <USBHandleStandardRequest+0x160>
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
   14930:	e59f3168 	ldr	r3, [pc, #360]	; 14aa0 <USBHandleStandardRequest+0x25c>
   14934:	e5935000 	ldr	r5, [r3]
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
   14938:	e3a030ff 	mov	r3, #255	; 0xff
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
   1493c:	e1a07003 	mov	r7, r3
   14940:	ea000013 	b	14994 <USBHandleStandardRequest+0x150>
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {

			switch (pab[DESC_bDescriptorType]) {
   14944:	e5d52001 	ldrb	r2, [r5, #1]
   14948:	e3520004 	cmp	r2, #4
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
   1494c:	05d53003 	ldrbeq	r3, [r5, #3]
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {

			switch (pab[DESC_bDescriptorType]) {
   14950:	0a00000d 	beq	1498c <USBHandleStandardRequest+0x148>
   14954:	e3520005 	cmp	r2, #5
   14958:	0a000002 	beq	14968 <USBHandleStandardRequest+0x124>
   1495c:	e3520002 	cmp	r2, #2

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
   14960:	05d57005 	ldrbeq	r7, [r5, #5]
   14964:	ea000008 	b	1498c <USBHandleStandardRequest+0x148>
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
   14968:	e3530000 	cmp	r3, #0
   1496c:	01570006 	cmpeq	r7, r6
   14970:	1a000005 	bne	1498c <USBHandleStandardRequest+0x148>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
   14974:	e5d53004 	ldrb	r3, [r5, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
   14978:	e5d51005 	ldrb	r1, [r5, #5]
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
   1497c:	e5d50002 	ldrb	r0, [r5, #2]
   14980:	e1831401 	orr	r1, r3, r1, lsl #8
   14984:	ebfffe12 	bl	141d4 <USBHwEPConfig>
   14988:	e3a03000 	mov	r3, #0

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
   1498c:	e5d52000 	ldrb	r2, [r5]
   14990:	e0855002 	add	r5, r5, r2
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
   14994:	e5d52000 	ldrb	r2, [r5]
   14998:	e3520000 	cmp	r2, #0
   1499c:	1affffe8 	bne	14944 <USBHandleStandardRequest+0x100>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
   149a0:	e3a00001 	mov	r0, #1
   149a4:	ebfffea3 	bl	14438 <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
   149a8:	e1d420b2 	ldrh	r2, [r4, #2]
   149ac:	e59f30ec 	ldr	r3, [pc, #236]	; 14aa0 <USBHandleStandardRequest+0x25c>
   149b0:	e5c32008 	strb	r2, [r3, #8]
   149b4:	ea000033 	b	14a88 <USBHandleStandardRequest+0x244>
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
   149b8:	e5d43001 	ldrb	r3, [r4, #1]
	@param [in]	pfnHandler	Callback function pointer
 */
void USBRegisterCustomReqHandler(TFnHandleRequest *pfnHandler)
{
	pfnHandleCustomReq = pfnHandler;
}
   149bc:	e5962000 	ldr	r2, [r6]
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
   149c0:	e3530000 	cmp	r3, #0

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
   149c4:	05c23000 	strbeq	r3, [r2]
		pbData[1] = 0;
   149c8:	05c23001 	strbeq	r3, [r2, #1]
		*piLen = 2;
   149cc:	03a03002 	moveq	r3, #2
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
   149d0:	0a00000b 	beq	14a04 <USBHandleStandardRequest+0x1c0>
   149d4:	e353000a 	cmp	r3, #10
   149d8:	0a000002 	beq	149e8 <USBHandleStandardRequest+0x1a4>
   149dc:	e353000b 	cmp	r3, #11
   149e0:	1a00002a 	bne	14a90 <USBHandleStandardRequest+0x24c>
   149e4:	ea000003 	b	149f8 <USBHandleStandardRequest+0x1b4>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
   149e8:	e3a03000 	mov	r3, #0
   149ec:	e5c23000 	strb	r3, [r2]
		*piLen = 1;
   149f0:	e5857000 	str	r7, [r5]
   149f4:	ea000026 	b	14a94 <USBHandleStandardRequest+0x250>
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
   149f8:	e1d430b2 	ldrh	r3, [r4, #2]
   149fc:	e3530000 	cmp	r3, #0
   14a00:	1a000022 	bne	14a90 <USBHandleStandardRequest+0x24c>
			return FALSE;
		}
		*piLen = 0;
   14a04:	e5853000 	str	r3, [r5]
   14a08:	ea000021 	b	14a94 <USBHandleStandardRequest+0x250>
	@param [in]	pfnHandler	Callback function pointer
 */
void USBRegisterCustomReqHandler(TFnHandleRequest *pfnHandler)
{
	pfnHandleCustomReq = pfnHandler;
}
   14a0c:	e5968000 	ldr	r8, [r6]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
   14a10:	e5d46001 	ldrb	r6, [r4, #1]
   14a14:	e3560001 	cmp	r6, #1
   14a18:	0a00000d 	beq	14a54 <USBHandleStandardRequest+0x210>
   14a1c:	3a000002 	bcc	14a2c <USBHandleStandardRequest+0x1e8>
   14a20:	e3560003 	cmp	r6, #3
   14a24:	1a000019 	bne	14a90 <USBHandleStandardRequest+0x24c>
   14a28:	ea000010 	b	14a70 <USBHandleStandardRequest+0x22c>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
   14a2c:	e5d40004 	ldrb	r0, [r4, #4]
   14a30:	ebfffe2b 	bl	142e4 <USBHwEPGetStatus>
   14a34:	e3100002 	tst	r0, #2
   14a38:	03a03000 	moveq	r3, #0
   14a3c:	13a03001 	movne	r3, #1
   14a40:	e5c83000 	strb	r3, [r8]
		pbData[1] = 0;
   14a44:	e3a03000 	mov	r3, #0
   14a48:	e5c83001 	strb	r3, [r8, #1]
		*piLen = 2;
   14a4c:	e5857000 	str	r7, [r5]
   14a50:	ea00000c 	b	14a88 <USBHandleStandardRequest+0x244>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
   14a54:	e1d410b2 	ldrh	r1, [r4, #2]
   14a58:	e3510000 	cmp	r1, #0
   14a5c:	1a00000b 	bne	14a90 <USBHandleStandardRequest+0x24c>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
   14a60:	e5d40004 	ldrb	r0, [r4, #4]
   14a64:	ebfffe23 	bl	142f8 <USBHwEPStall>
	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
	}
	
	return TRUE;
   14a68:	e1a07006 	mov	r7, r6
   14a6c:	ea000008 	b	14a94 <USBHandleStandardRequest+0x250>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
   14a70:	e1d430b2 	ldrh	r3, [r4, #2]
   14a74:	e3530000 	cmp	r3, #0
   14a78:	1a000004 	bne	14a90 <USBHandleStandardRequest+0x24c>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
   14a7c:	e5d40004 	ldrb	r0, [r4, #4]
   14a80:	e3a01001 	mov	r1, #1
   14a84:	ebfffe1b 	bl	142f8 <USBHwEPStall>
	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
	}
	
	return TRUE;
   14a88:	e3a07001 	mov	r7, #1
   14a8c:	ea000000 	b	14a94 <USBHandleStandardRequest+0x250>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
			break;
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
   14a90:	e3a07000 	mov	r7, #0
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
   14a94:	e1a00007 	mov	r0, r7
   14a98:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   14a9c:	e12fff1e 	bx	lr
   14aa0:	40000e64 	.word	0x40000e64

00014aa4 <USBRegisterCustomReqHandler>:
		
	@param [in]	pfnHandler	Callback function pointer
 */
void USBRegisterCustomReqHandler(TFnHandleRequest *pfnHandler)
{
	pfnHandleCustomReq = pfnHandler;
   14aa4:	e59f3004 	ldr	r3, [pc, #4]	; 14ab0 <USBRegisterCustomReqHandler+0xc>
   14aa8:	e5830004 	str	r0, [r3, #4]
}
   14aac:	e12fff1e 	bx	lr
   14ab0:	40000e64 	.word	0x40000e64

00014ab4 <bootUp()>:

//Usage: bootUp();
//Inputs: None
//This function initializes the serial port, the SD card, the I/O pins and the interrupts
void bootUp(void)
{
   14ab4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	//Initialize UART for RPRINTF
    rprintf_devopen(putc_serial0); //Init rprintf
   14ab8:	e59f0068 	ldr	r0, [pc, #104]	; 14b28 <bootUp()+0x74>
   14abc:	ebffeddc 	bl	10234 <rprintf_devopen>
	init_serial0(9600);		
   14ac0:	e3a00d96 	mov	r0, #9600	; 0x2580
   14ac4:	ebffee69 	bl	10470 <init_serial0>
	
	//Initialize I/O Ports and Peripherals
	IODIR0 |= (LED| XBEE_EN);
   14ac8:	e59f305c 	ldr	r3, [pc, #92]	; 14b2c <bootUp()+0x78>
   14acc:	e5932008 	ldr	r2, [r3, #8]
   14ad0:	e3822b21 	orr	r2, r2, #33792	; 0x8400
   14ad4:	e5832008 	str	r2, [r3, #8]
	
    //Setup the Interrupts
	//Enable Interrupts
	VPBDIV=1;										// Set PCLK equal to the System Clock	
   14ad8:	e3a02001 	mov	r2, #1
   14adc:	e2833975 	add	r3, r3, #1916928	; 0x1d4000
   14ae0:	e5832100 	str	r2, [r3, #256]	; 0x100
	VICIntSelect = ~(INT_TIMER0|INT_UART1|INT_UART0);
   14ae4:	e3e03000 	mvn	r3, #0
   14ae8:	e3e020d0 	mvn	r2, #208	; 0xd0
   14aec:	e5032ff3 	str	r2, [r3, #-4083]	; 0xff3
	VICVectCntl0 = 0x20 | 4;						//Timer 0 Interrupt
   14af0:	e3a02024 	mov	r2, #36	; 0x24
   14af4:	e5032dff 	str	r2, [r3, #-3583]	; 0xdff
	VICVectAddr0 = (unsigned int)ISR_Timer0;
   14af8:	e59f2030 	ldr	r2, [pc, #48]	; 14b30 <bootUp()+0x7c>
   14afc:	e5032eff 	str	r2, [r3, #-3839]	; 0xeff
	VICVectCntl1 = (0x20 | 7);
   14b00:	e3a02027 	mov	r2, #39	; 0x27
   14b04:	e5032dfb 	str	r2, [r3, #-3579]	; 0xdfb
	VICVectAddr1 = (unsigned int)ISR_UART1;			//UART 1 Interrupt
   14b08:	e59f2024 	ldr	r2, [pc, #36]	; 14b34 <bootUp()+0x80>
   14b0c:	e5032efb 	str	r2, [r3, #-3835]	; 0xefb
	VICVectCntl2 = (0x20 | 6);
   14b10:	e3a02026 	mov	r2, #38	; 0x26
   14b14:	e5032df7 	str	r2, [r3, #-3575]	; 0xdf7
	VICVectAddr2 = (unsigned int)ISR_UART0;			//UART 1 Interrupt
   14b18:	e59f2018 	ldr	r2, [pc, #24]	; 14b38 <bootUp()+0x84>
   14b1c:	e5032ef7 	str	r2, [r3, #-3831]	; 0xef7
}
   14b20:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   14b24:	e12fff1e 	bx	lr
   14b28:	00010560 	.word	0x00010560
   14b2c:	e0028000 	.word	0xe0028000
   14b30:	000106e4 	.word	0x000106e4
   14b34:	000108e8 	.word	0x000108e8
   14b38:	000109b4 	.word	0x000109b4

00014b3c <reset()>:
//Inputs: None
//Description: Resets the LPC2148
void reset(void)
{
    // Intentionally fault Watchdog to trigger a reset condition
    WDMOD |= 3;
   14b3c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
   14b40:	e5932000 	ldr	r2, [r3]
   14b44:	e3822003 	orr	r2, r2, #3
   14b48:	e5832000 	str	r2, [r3]
    WDFEED = 0xAA;
    WDFEED = 0x55;
   14b4c:	e3a01055 	mov	r1, #85	; 0x55
//Description: Resets the LPC2148
void reset(void)
{
    // Intentionally fault Watchdog to trigger a reset condition
    WDMOD |= 3;
    WDFEED = 0xAA;
   14b50:	e3a020aa 	mov	r2, #170	; 0xaa
   14b54:	e5832008 	str	r2, [r3, #8]
    WDFEED = 0x55;
   14b58:	e5831008 	str	r1, [r3, #8]
    WDFEED = 0xAA;
   14b5c:	e5832008 	str	r2, [r3, #8]
    WDFEED = 0x00;
   14b60:	e3a02000 	mov	r2, #0
   14b64:	e5832008 	str	r2, [r3, #8]
}
   14b68:	e12fff1e 	bx	lr

00014b6c <initPeripherals()>:

void initPeripherals(void)
{
   14b6c:	e92d4030 	push	{r4, r5, lr}
	//Configure the sensor settings.
	accelerometer.begin(configuration.range_accel);
   14b70:	e59f40b4 	ldr	r4, [pc, #180]	; 14c2c <initPeripherals()+0xc0>
   14b74:	e59f00b4 	ldr	r0, [pc, #180]	; 14c30 <initPeripherals()+0xc4>
   14b78:	e5d41002 	ldrb	r1, [r4, #2]
   14b7c:	eb00075b 	bl	168f0 <cADXL345::begin(char)>
	gyro.begin();
   14b80:	e59f00ac 	ldr	r0, [pc, #172]	; 14c34 <initPeripherals()+0xc8>
   14b84:	eb0009c5 	bl	172a0 <cITG3200::begin()>
	compass.begin(configuration.range_compass);	
   14b88:	e5d41003 	ldrb	r1, [r4, #3]
   14b8c:	e59f00a4 	ldr	r0, [pc, #164]	; 14c38 <initPeripherals()+0xcc>
   14b90:	eb0008cd 	bl	16ecc <cHMC5843::begin(char)>
	
	//set the sensor offsets
	accelerometer.setCalibrationValues(configuration.cal_ax, configuration.cal_ay, configuration.cal_az);
   14b94:	e2841010 	add	r1, r4, #16
   14b98:	e8910006 	ldm	r1, {r1, r2}
   14b9c:	e5943018 	ldr	r3, [r4, #24]
   14ba0:	e59f0088 	ldr	r0, [pc, #136]	; 14c30 <initPeripherals()+0xc4>
   14ba4:	eb0007c6 	bl	16ac4 <cADXL345::setCalibrationValues(int, int, float)>
	gyro.setCalibrationValues(configuration.cal_gx, configuration.cal_gy, configuration.cal_gz);
   14ba8:	e284101c 	add	r1, r4, #28
   14bac:	e891000e 	ldm	r1, {r1, r2, r3}
   14bb0:	e59f007c 	ldr	r0, [pc, #124]	; 14c34 <initPeripherals()+0xc8>
   14bb4:	eb000a7c 	bl	175ac <cITG3200::setCalibrationValues(int, int, int)>
	
	gps.begin(9600);
   14bb8:	e3a01d96 	mov	r1, #9600	; 0x2580
   14bbc:	e59f0078 	ldr	r0, [pc, #120]	; 14c3c <initPeripherals()+0xd0>
   14bc0:	eb000a8e 	bl	17600 <cEM408::begin(unsigned int)>
	delay_ms(100);
   14bc4:	e3a00064 	mov	r0, #100	; 0x64
   14bc8:	ebffef22 	bl	10858 <delay_ms>
	gps.on();
   14bcc:	e59f0068 	ldr	r0, [pc, #104]	; 14c3c <initPeripherals()+0xd0>
   14bd0:	eb000aa8 	bl	17678 <cEM408::on()>
	delay_ms(500);
   14bd4:	e3a00f7d 	mov	r0, #500	; 0x1f4
   14bd8:	ebffef1e 	bl	10858 <delay_ms>
	gps.disable();
   14bdc:	e59f0058 	ldr	r0, [pc, #88]	; 14c3c <initPeripherals()+0xd0>
   14be0:	eb000b57 	bl	17944 <cEM408::disable()>
	delay_ms(50);
   14be4:	e3a00032 	mov	r0, #50	; 0x32
   14be8:	ebffef1a 	bl	10858 <delay_ms>
   14bec:	e2844003 	add	r4, r4, #3
	for(int i=0; i<6; i++)
   14bf0:	e3a05000 	mov	r5, #0
	{
		if(configuration.gps_messages[i]==1)gps.enable(i, 1);
   14bf4:	e5f42001 	ldrb	r2, [r4, #1]!
   14bf8:	e3520001 	cmp	r2, #1
   14bfc:	059f0038 	ldreq	r0, [pc, #56]	; 14c3c <initPeripherals()+0xd0>
   14c00:	01a01005 	moveq	r1, r5
   14c04:	0b000b66 	bleq	179a4 <cEM408::enable(unsigned char, unsigned char)>
		delay_ms(50);
   14c08:	e3a00032 	mov	r0, #50	; 0x32
	delay_ms(100);
	gps.on();
	delay_ms(500);
	gps.disable();
	delay_ms(50);
	for(int i=0; i<6; i++)
   14c0c:	e2855001 	add	r5, r5, #1
	{
		if(configuration.gps_messages[i]==1)gps.enable(i, 1);
		delay_ms(50);
   14c10:	ebffef10 	bl	10858 <delay_ms>
	delay_ms(100);
	gps.on();
	delay_ms(500);
	gps.disable();
	delay_ms(50);
	for(int i=0; i<6; i++)
   14c14:	e3550006 	cmp	r5, #6
   14c18:	1afffff5 	bne	14bf4 <initPeripherals()+0x88>
	{
		if(configuration.gps_messages[i]==1)gps.enable(i, 1);
		delay_ms(50);
	}
	
	delay_ms(100);
   14c1c:	e3a00064 	mov	r0, #100	; 0x64
   14c20:	ebffef0c 	bl	10858 <delay_ms>
}
   14c24:	e8bd4030 	pop	{r4, r5, lr}
   14c28:	e12fff1e 	bx	lr
   14c2c:	40001024 	.word	0x40001024
   14c30:	400010b4 	.word	0x400010b4
   14c34:	40001104 	.word	0x40001104
   14c38:	400010e0 	.word	0x400010e0
   14c3c:	4000112c 	.word	0x4000112c

00014c40 <runTest()>:
{
	char value;
	int gpstest;
	
	//Set the UART0 pins to I/O for initial XBee test
	PINSEL0 &= ~((3<<0) | (3<<2));	//Set P0.0 and P0.1 to GPIO
   14c40:	e59f3158 	ldr	r3, [pc, #344]	; 14da0 <runTest()+0x160>
   14c44:	e5932000 	ldr	r2, [r3]
   14c48:	e3c2200f 	bic	r2, r2, #15
	
	delay_ms(100);
}

void runTest(void)
{
   14c4c:	e92d41f1 	push	{r0, r4, r5, r6, r7, r8, lr}
	char value;
	int gpstest;
	
	//Set the UART0 pins to I/O for initial XBee test
	PINSEL0 &= ~((3<<0) | (3<<2));	//Set P0.0 and P0.1 to GPIO
   14c50:	e5832000 	str	r2, [r3]
	IODIR0 |= (1<<0)|(1<<1);	//Set P0.0 and P0.1 to outputs
   14c54:	e59f7148 	ldr	r7, [pc, #328]	; 14da4 <runTest()+0x164>
   14c58:	e5973008 	ldr	r3, [r7, #8]
   14c5c:	e3833003 	orr	r3, r3, #3
	
	for(int blink=0; blink < 10; blink++)
	{
		IOSET0 = (1<<0)|(1<<1);	//Turn on P0.0 and P0.1
   14c60:	e3a04003 	mov	r4, #3
	char value;
	int gpstest;
	
	//Set the UART0 pins to I/O for initial XBee test
	PINSEL0 &= ~((3<<0) | (3<<2));	//Set P0.0 and P0.1 to GPIO
	IODIR0 |= (1<<0)|(1<<1);	//Set P0.0 and P0.1 to outputs
   14c64:	e5873008 	str	r3, [r7, #8]
   14c68:	e3a0500a 	mov	r5, #10
	
	for(int blink=0; blink < 10; blink++)
	{
		IOSET0 = (1<<0)|(1<<1);	//Turn on P0.0 and P0.1
   14c6c:	e1a08004 	mov	r8, r4
		delay_ms(50);
   14c70:	e3a00032 	mov	r0, #50	; 0x32
	PINSEL0 &= ~((3<<0) | (3<<2));	//Set P0.0 and P0.1 to GPIO
	IODIR0 |= (1<<0)|(1<<1);	//Set P0.0 and P0.1 to outputs
	
	for(int blink=0; blink < 10; blink++)
	{
		IOSET0 = (1<<0)|(1<<1);	//Turn on P0.0 and P0.1
   14c74:	e5878004 	str	r8, [r7, #4]
		delay_ms(50);
   14c78:	ebffeef6 	bl	10858 <delay_ms>
		IOCLR0 = (1<<0)|(1<<1);
   14c7c:	e587400c 	str	r4, [r7, #12]
		delay_ms(50);
   14c80:	e3a00032 	mov	r0, #50	; 0x32
   14c84:	ebffeef3 	bl	10858 <delay_ms>
	
	//Set the UART0 pins to I/O for initial XBee test
	PINSEL0 &= ~((3<<0) | (3<<2));	//Set P0.0 and P0.1 to GPIO
	IODIR0 |= (1<<0)|(1<<1);	//Set P0.0 and P0.1 to outputs
	
	for(int blink=0; blink < 10; blink++)
   14c88:	e2555001 	subs	r5, r5, #1
	{
		IOSET0 = (1<<0)|(1<<1);	//Turn on P0.0 and P0.1
   14c8c:	e59f6110 	ldr	r6, [pc, #272]	; 14da4 <runTest()+0x164>
	
	//Set the UART0 pins to I/O for initial XBee test
	PINSEL0 &= ~((3<<0) | (3<<2));	//Set P0.0 and P0.1 to GPIO
	IODIR0 |= (1<<0)|(1<<1);	//Set P0.0 and P0.1 to outputs
	
	for(int blink=0; blink < 10; blink++)
   14c90:	1afffff6 	bne	14c70 <runTest()+0x30>
		delay_ms(50);
	}	
	
	//Enable the serial port
	//Initialize UART for RPRINTF
    rprintf_devopen(putc_serial0); //Init rprintf
   14c94:	e59f010c 	ldr	r0, [pc, #268]	; 14da8 <runTest()+0x168>
   14c98:	ebffed65 	bl	10234 <rprintf_devopen>
	init_serial0(9600);	
   14c9c:	e3a00d96 	mov	r0, #9600	; 0x2580
   14ca0:	ebffedf2 	bl	10470 <init_serial0>

	//Test the GPS I/O
	IODIR0 &= ~((1<<8)|(1<<9)|(1<<12));	//Set P0.8, P0.9 and P0.12 to inputs
   14ca4:	e5963008 	ldr	r3, [r6, #8]
   14ca8:	e3c33c13 	bic	r3, r3, #4864	; 0x1300
   14cac:	e5863008 	str	r3, [r6, #8]
	gpstest = IOPIN0;
   14cb0:	e5963000 	ldr	r3, [r6]
	gpstest = (gpstest>>8)&0x13;
   14cb4:	e1a03443 	asr	r3, r3, #8
   14cb8:	e2033013 	and	r3, r3, #19
	if(gpstest != 0x11)
   14cbc:	e3530011 	cmp	r3, #17
   14cc0:	0a000002 	beq	14cd0 <runTest()+0x90>
	{
		rprintf("GPS Failed.");
   14cc4:	e59f00e0 	ldr	r0, [pc, #224]	; 14dac <runTest()+0x16c>
   14cc8:	ebffed5d 	bl	10244 <rprintf>
   14ccc:	eafffffe 	b	14ccc <runTest()+0x8c>
		while(1);
	}
	
	//Test the Accelerometer
	accelerometer.begin(1);
   14cd0:	e59f00d8 	ldr	r0, [pc, #216]	; 14db0 <runTest()+0x170>
   14cd4:	e3a01001 	mov	r1, #1
	//Get the Device ID from the accelerometer
	value = DEVID;
   14cd8:	e28d4004 	add	r4, sp, #4
		rprintf("GPS Failed.");
		while(1);
	}
	
	//Test the Accelerometer
	accelerometer.begin(1);
   14cdc:	eb000703 	bl	168f0 <cADXL345::begin(char)>
	//Get the Device ID from the accelerometer
	value = DEVID;
   14ce0:	e5645001 	strb	r5, [r4, #-1]!
	accelerometer.read(&value, 1);
   14ce4:	e59f00c4 	ldr	r0, [pc, #196]	; 14db0 <runTest()+0x170>
   14ce8:	e1a01004 	mov	r1, r4
   14cec:	e3a02001 	mov	r2, #1
   14cf0:	eb0006f0 	bl	168b8 <cADXL345::read(char*, char)>
	if(value != 0xE5)
   14cf4:	e5dd3003 	ldrb	r3, [sp, #3]
   14cf8:	e35300e5 	cmp	r3, #229	; 0xe5
   14cfc:	0a000002 	beq	14d0c <runTest()+0xcc>
	{
		rprintf("Accel Failed to ping");
   14d00:	e59f00ac 	ldr	r0, [pc, #172]	; 14db4 <runTest()+0x174>
   14d04:	ebffed4e 	bl	10244 <rprintf>
   14d08:	eafffffe 	b	14d08 <runTest()+0xc8>
		while(1);
	}
	
	//Test the Gyroscope
	gyro.begin();
   14d0c:	e59f00a4 	ldr	r0, [pc, #164]	; 14db8 <runTest()+0x178>
   14d10:	eb000962 	bl	172a0 <cITG3200::begin()>
	//Get the Device ID from the gyro
	value = WHO_AM_I;
	gyro.read(&value, 1);
   14d14:	e59f009c 	ldr	r0, [pc, #156]	; 14db8 <runTest()+0x178>
   14d18:	e1a01004 	mov	r1, r4
   14d1c:	e3a02001 	mov	r2, #1
	}
	
	//Test the Gyroscope
	gyro.begin();
	//Get the Device ID from the gyro
	value = WHO_AM_I;
   14d20:	e5cd5003 	strb	r5, [sp, #3]
	gyro.read(&value, 1);
   14d24:	eb00094f 	bl	17268 <cITG3200::read(char*, char)>
	if((value & 0x68) != 0x68)
   14d28:	e5dd3003 	ldrb	r3, [sp, #3]
   14d2c:	e2033068 	and	r3, r3, #104	; 0x68
   14d30:	e3530068 	cmp	r3, #104	; 0x68
   14d34:	0a000002 	beq	14d44 <runTest()+0x104>
	{
		rprintf("Gyro failed to ping");
   14d38:	e59f007c 	ldr	r0, [pc, #124]	; 14dbc <runTest()+0x17c>
   14d3c:	ebffed40 	bl	10244 <rprintf>
   14d40:	eafffffe 	b	14d40 <runTest()+0x100>
		while(1);
	}
	
	//Test the compass
	compass.begin(1);
   14d44:	e59f0074 	ldr	r0, [pc, #116]	; 14dc0 <runTest()+0x180>
   14d48:	e3a01001 	mov	r1, #1
   14d4c:	eb00085e 	bl	16ecc <cHMC5843::begin(char)>
	//Get the device ID from the compass
	value = ID_REGA;
   14d50:	e3a0300a 	mov	r3, #10
	compass.read(&value, 1);
   14d54:	e59f0064 	ldr	r0, [pc, #100]	; 14dc0 <runTest()+0x180>
   14d58:	e1a01004 	mov	r1, r4
   14d5c:	e3a02001 	mov	r2, #1
	}
	
	//Test the compass
	compass.begin(1);
	//Get the device ID from the compass
	value = ID_REGA;
   14d60:	e5cd3003 	strb	r3, [sp, #3]
	compass.read(&value, 1);
   14d64:	eb00084a 	bl	16e94 <cHMC5843::read(char*, char)>
	if(value != 0x48)
   14d68:	e5dd3003 	ldrb	r3, [sp, #3]
   14d6c:	e3530048 	cmp	r3, #72	; 0x48
   14d70:	0a000002 	beq	14d80 <runTest()+0x140>
	{
		rprintf("Compass failed to ping");
   14d74:	e59f0048 	ldr	r0, [pc, #72]	; 14dc4 <runTest()+0x184>
   14d78:	ebffed31 	bl	10244 <rprintf>
   14d7c:	eafffffe 	b	14d7c <runTest()+0x13c>
		while(1);
	}
	
	rprintf("Pass!");
   14d80:	e59f0040 	ldr	r0, [pc, #64]	; 14dc8 <runTest()+0x188>
   14d84:	ebffed2e 	bl	10244 <rprintf>
	LEDon();
   14d88:	e3a03902 	mov	r3, #32768	; 0x8000
   14d8c:	e5863004 	str	r3, [r6, #4]
	memoryDelete("Test.txt");
   14d90:	e59f0034 	ldr	r0, [pc, #52]	; 14dcc <runTest()+0x18c>
   14d94:	eb000b9b 	bl	17c08 <memoryDelete(char*)>
}
   14d98:	e8bd41f8 	pop	{r3, r4, r5, r6, r7, r8, lr}
   14d9c:	e12fff1e 	bx	lr
   14da0:	e002c000 	.word	0xe002c000
   14da4:	e0028000 	.word	0xe0028000
   14da8:	00010560 	.word	0x00010560
   14dac:	00026208 	.word	0x00026208
   14db0:	400010b4 	.word	0x400010b4
   14db4:	00026214 	.word	0x00026214
   14db8:	40001104 	.word	0x40001104
   14dbc:	00026229 	.word	0x00026229
   14dc0:	400010e0 	.word	0x400010e0
   14dc4:	0002623d 	.word	0x0002623d
   14dc8:	00026254 	.word	0x00026254
   14dcc:	0002625a 	.word	0x0002625a

00014dd0 <main>:

//*******************************************************
//					Main Code
//*******************************************************
int main (void)
{
   14dd0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dd4:	e24dd068 	sub	sp, sp, #104	; 0x68
	//Initialize ARM I/O
	bootUp();			//Init. I/O ports, Comm protocols and interrupts
   14dd8:	ebffff35 	bl	14ab4 <bootUp()>
	if(!memoryBegin())
   14ddc:	eb000b92 	bl	17c2c <memoryBegin()>
   14de0:	e3500000 	cmp	r0, #0
	{
		rprintf("SD Card Initialization Failed");
   14de4:	059f0dac 	ldreq	r0, [pc, #3500]	; 15b98 <main+0xdc8>
   14de8:	0bffed15 	bleq	10244 <rprintf>

	}
	XBEEon();	//XBee can always be enabled. To get battery savings...take the XBEE module off!
   14dec:	e59f3da8 	ldr	r3, [pc, #3496]	; 15b9c <main+0xdcc>
   14df0:	e3a02b01 	mov	r2, #1024	; 0x400
   14df4:	e5832004 	str	r2, [r3, #4]
	LEDoff();
   14df8:	e3a02902 	mov	r2, #32768	; 0x8000
   14dfc:	e583200c 	str	r2, [r3, #12]

	timer0Init(1000000);
   14e00:	e59f0d98 	ldr	r0, [pc, #3480]	; 15ba0 <main+0xdd0>
	timer0Match(0, 1000, interruptOnMatch | resetOnMatch);
	//Timer 1 doesn't need to be initialized. It's being used for delay_ms()
	
	//Find out if the device needs to go through the test procedure for QA.
	if(configuration.sd_enabled){
   14e04:	e59f4d98 	ldr	r4, [pc, #3480]	; 15ba4 <main+0xdd4>

	}
	XBEEon();	//XBee can always be enabled. To get battery savings...take the XBEE module off!
	LEDoff();

	timer0Init(1000000);
   14e08:	ebffee03 	bl	1061c <timer0Init>
	timer0Match(0, 1000, interruptOnMatch | resetOnMatch);
   14e0c:	e3a00000 	mov	r0, #0
   14e10:	e3a01ffa 	mov	r1, #1000	; 0x3e8
   14e14:	e3a02003 	mov	r2, #3
   14e18:	ebffee11 	bl	10664 <timer0Match>
	//Timer 1 doesn't need to be initialized. It's being used for delay_ms()
	
	//Find out if the device needs to go through the test procedure for QA.
	if(configuration.sd_enabled){
   14e1c:	e5d4300a 	ldrb	r3, [r4, #10]
   14e20:	e3530000 	cmp	r3, #0
   14e24:	0a000007 	beq	14e48 <main+0x78>
		if(memoryExists("Test.txt")){
   14e28:	e59f0d78 	ldr	r0, [pc, #3448]	; 15ba8 <main+0xdd8>
   14e2c:	eb000b79 	bl	17c18 <memoryExists(char*)>
   14e30:	e3500000 	cmp	r0, #0
   14e34:	0a000003 	beq	14e48 <main+0x78>
			rprintf("Testing...");	
   14e38:	e59f0d6c 	ldr	r0, [pc, #3436]	; 15bac <main+0xddc>
   14e3c:	ebffed00 	bl	10244 <rprintf>
			runTest();
   14e40:	ebffff7e 	bl	14c40 <runTest()>
   14e44:	eafffffe 	b	14e44 <main+0x74>
			while(1);
		}
	}
	
	//Get the configuration settings
	if(configuration.sd_enabled){
   14e48:	e5d4300a 	ldrb	r3, [r4, #10]
   14e4c:	e3530000 	cmp	r3, #0
   14e50:	0a00000f 	beq	14e94 <main+0xc4>
		if(memoryExists("configuration.txt")){
   14e54:	e59f0d54 	ldr	r0, [pc, #3412]	; 15bb0 <main+0xde0>
   14e58:	eb000b6e 	bl	17c18 <memoryExists(char*)>
   14e5c:	e59fcd50 	ldr	ip, [pc, #3408]	; 15bb4 <main+0xde4>
			readConfigFile(configData);
   14e60:	e28c4010 	add	r4, ip, #16
		}
	}
	
	//Get the configuration settings
	if(configuration.sd_enabled){
		if(memoryExists("configuration.txt")){
   14e64:	e3500000 	cmp	r0, #0
			readConfigFile(configData);
   14e68:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
   14e6c:	e1a0e00d 	mov	lr, sp
   14e70:	e8ae000f 	stmia	lr!, {r0, r1, r2, r3}
   14e74:	e5943000 	ldr	r3, [r4]
   14e78:	e58e3000 	str	r3, [lr]
   14e7c:	e89c000f 	ldm	ip, {r0, r1, r2, r3}
		}
	}
	
	//Get the configuration settings
	if(configuration.sd_enabled){
		if(memoryExists("configuration.txt")){
   14e80:	0a000001 	beq	14e8c <main+0xbc>
			readConfigFile(configData);
   14e84:	eb000394 	bl	15cdc <readConfigFile(cMemory)>
   14e88:	ea000001 	b	14e94 <main+0xc4>
		}
		//If the configuration file doesn't exist, create it with default settings and reset the device.
		else
		{
			createConfigFile(configData);
   14e8c:	eb0004c9 	bl	161b8 <createConfigFile(cMemory)>
			reset();
   14e90:	ebffff29 	bl	14b3c <reset()>
		}
	}

	LEDon();
   14e94:	e59f3d00 	ldr	r3, [pc, #3328]	; 15b9c <main+0xdcc>
   14e98:	e3a02902 	mov	r2, #32768	; 0x8000
   14e9c:	e5832004 	str	r2, [r3, #4]
	//Initialize peripherals with settings from configuration file.
	initPeripherals();
	delay_ms(100);	

	//Create the necessary log files
	if(configuration.log_sensor)sensorData.create("Sensor", ".csv");
   14ea0:	e59f4cfc 	ldr	r4, [pc, #3324]	; 15ba4 <main+0xdd4>
		}
	}

	LEDon();
	//Initialize peripherals with settings from configuration file.
	initPeripherals();
   14ea4:	ebffff30 	bl	14b6c <initPeripherals()>
	delay_ms(100);	
   14ea8:	e3a00064 	mov	r0, #100	; 0x64
   14eac:	ebffee69 	bl	10858 <delay_ms>

	//Create the necessary log files
	if(configuration.log_sensor)sensorData.create("Sensor", ".csv");
   14eb0:	e5d43000 	ldrb	r3, [r4]
   14eb4:	e3530000 	cmp	r3, #0
   14eb8:	159f0cf8 	ldrne	r0, [pc, #3320]	; 15bb8 <main+0xde8>
   14ebc:	159f1cf8 	ldrne	r1, [pc, #3320]	; 15bbc <main+0xdec>
   14ec0:	159f2cf8 	ldrne	r2, [pc, #3320]	; 15bc0 <main+0xdf0>
   14ec4:	1b000ac3 	blne	179d8 <cMemory::create(char const*, char const*)>
	if(configuration.log_gps)gpsData.create("NMEA", ".csv");
   14ec8:	e5d43001 	ldrb	r3, [r4, #1]
   14ecc:	e3530000 	cmp	r3, #0
   14ed0:	159f0cec 	ldrne	r0, [pc, #3308]	; 15bc4 <main+0xdf4>
   14ed4:	159f1cec 	ldrne	r1, [pc, #3308]	; 15bc8 <main+0xdf8>
   14ed8:	159f2ce0 	ldrne	r2, [pc, #3296]	; 15bc0 <main+0xdf0>
   14edc:	1b000abd 	blne	179d8 <cMemory::create(char const*, char const*)>

	//Set the UART interrupts to trigger when a single character is received
	uart1RxInt(RX1_TRIG_LEV_0);
   14ee0:	e3a00000 	mov	r0, #0
   14ee4:	ebffee72 	bl	108b4 <uart1RxInt>
	uart0RxInt(RX0_TRIG_LEV_0);
   14ee8:	e3a00000 	mov	r0, #0
   14eec:	ebffeea3 	bl	10980 <uart0RxInt>
	
	LEDoff();
   14ef0:	e59f3ca4 	ldr	r3, [pc, #3236]	; 15b9c <main+0xdcc>
   14ef4:	e3a02902 	mov	r2, #32768	; 0x8000
   14ef8:	e583200c 	str	r2, [r3, #12]
	VICIntEnable |= INT_UART0;
   14efc:	e3e03000 	mvn	r3, #0
   14f00:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfef
   14f04:	e3822040 	orr	r2, r2, #64	; 0x40
   14f08:	e5032fef 	str	r2, [r3, #-4079]	; 0xfef
	if(configuration.log_gps)VICIntEnable |= INT_UART1;
   14f0c:	e59f2c90 	ldr	r2, [pc, #3216]	; 15ba4 <main+0xdd4>
   14f10:	e5d21001 	ldrb	r1, [r2, #1]
   14f14:	e3510000 	cmp	r1, #0
   14f18:	15131fef 	ldrne	r1, [r3, #-4079]	; 0xfef
   14f1c:	13811080 	orrne	r1, r1, #128	; 0x80
   14f20:	15031fef 	strne	r1, [r3, #-4079]	; 0xfef
	if(configuration.log_sensor)VICIntEnable |= INT_TIMER0;
   14f24:	e5d23000 	ldrb	r3, [r2]
   14f28:	e3530000 	cmp	r3, #0
   14f2c:	13e03000 	mvnne	r3, #0
   14f30:	15132fef 	ldrne	r2, [r3, #-4079]	; 0xfef
   14f34:	13822010 	orrne	r2, r2, #16
   14f38:	15032fef 	strne	r2, [r3, #-4079]	; 0xfef
						accelerometer.getX(), accelerometer.getY(), accelerometer.getZ(),
						compass.getX(), compass.getY(), compass.getZ());
			}
			else{
				//Calculate Euler Angles and tilt compensated heading
				filter.last_time=filter.this_time;
   14f3c:	e59f4c88 	ldr	r4, [pc, #3208]	; 15bcc <main+0xdfc>
	VICIntEnable |= INT_UART0;
	if(configuration.log_gps)VICIntEnable |= INT_UART1;
	if(configuration.log_sensor)VICIntEnable |= INT_TIMER0;
	while(1)
	{
		if(timer0IntFlag>10)
   14f40:	e59f3c88 	ldr	r3, [pc, #3208]	; 15bd0 <main+0xe00>
   14f44:	e5d33000 	ldrb	r3, [r3]
   14f48:	e353000a 	cmp	r3, #10
   14f4c:	9a000018 	bls	14fb4 <main+0x1e4>
		{
			VICIntEnClr |= INT_TIMER0;
   14f50:	e3e02000 	mvn	r2, #0
   14f54:	e5121feb 	ldr	r1, [r2, #-4075]	; 0xfeb
			
			if(timer0IntFlag >= 20)LEDon();
   14f58:	e3530013 	cmp	r3, #19
	if(configuration.log_sensor)VICIntEnable |= INT_TIMER0;
	while(1)
	{
		if(timer0IntFlag>10)
		{
			VICIntEnClr |= INT_TIMER0;
   14f5c:	e3811010 	orr	r1, r1, #16
   14f60:	e59f3c34 	ldr	r3, [pc, #3124]	; 15b9c <main+0xdcc>
   14f64:	e5021feb 	str	r1, [r2, #-4075]	; 0xfeb
   14f68:	e3a02902 	mov	r2, #32768	; 0x8000
			
			if(timer0IntFlag >= 20)LEDon();
   14f6c:	85832004 	strhi	r2, [r3, #4]
			else LEDoff();
   14f70:	9583200c 	strls	r2, [r3, #12]
			
			timer0IntFlag=0;
   14f74:	e59f3c54 	ldr	r3, [pc, #3156]	; 15bd0 <main+0xe00>
   14f78:	e3a02000 	mov	r2, #0
   14f7c:	e5c32000 	strb	r2, [r3]
			
			accelerometer.update();
   14f80:	e59f0c4c 	ldr	r0, [pc, #3148]	; 15bd4 <main+0xe04>
   14f84:	eb000684 	bl	1699c <cADXL345::update()>
			gyro.update();
   14f88:	e59f0c48 	ldr	r0, [pc, #3144]	; 15bd8 <main+0xe08>
   14f8c:	eb0008f1 	bl	17358 <cITG3200::update()>
			compass.update();
   14f90:	e59f0c44 	ldr	r0, [pc, #3140]	; 15bdc <main+0xe0c>
   14f94:	eb000809 	bl	16fc0 <cHMC5843::update()>
			sensors_updated=1;	
   14f98:	e59f0c14 	ldr	r0, [pc, #3092]	; 15bb4 <main+0xde4>
   14f9c:	e3a03001 	mov	r3, #1
   14fa0:	e5c0306c 	strb	r3, [r0, #108]	; 0x6c
			
			VICIntEnable |= INT_TIMER0;
   14fa4:	e3e03000 	mvn	r3, #0
   14fa8:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfef
   14fac:	e3822010 	orr	r2, r2, #16
   14fb0:	e5032fef 	str	r2, [r3, #-4079]	; 0xfef
		}
		
		if(uart1MessageComplete)
   14fb4:	e59f3c24 	ldr	r3, [pc, #3108]	; 15be0 <main+0xe10>
   14fb8:	e5d32000 	ldrb	r2, [r3]
   14fbc:	e3520000 	cmp	r2, #0
   14fc0:	0a000018 	beq	15028 <main+0x258>
		{
			VICIntEnClr |= INT_UART1;
   14fc4:	e3e02000 	mvn	r2, #0
   14fc8:	e5121feb 	ldr	r1, [r2, #-4075]	; 0xfeb
   14fcc:	e3811080 	orr	r1, r1, #128	; 0x80
   14fd0:	e5021feb 	str	r1, [r2, #-4075]	; 0xfeb
			uart1MessageComplete=0;
			
			if(configuration.log_gps){
   14fd4:	e59f5bc8 	ldr	r5, [pc, #3016]	; 15ba4 <main+0xdd4>
		}
		
		if(uart1MessageComplete)
		{
			VICIntEnClr |= INT_UART1;
			uart1MessageComplete=0;
   14fd8:	e3a02000 	mov	r2, #0
   14fdc:	e5c32000 	strb	r2, [r3]
			
			if(configuration.log_gps){
   14fe0:	e5d53001 	ldrb	r3, [r5, #1]
   14fe4:	e1530002 	cmp	r3, r2
   14fe8:	0a000005 	beq	15004 <main+0x234>
				strcpy(gps.message, uart1Message);
   14fec:	e59f1bf0 	ldr	r1, [pc, #3056]	; 15be4 <main+0xe14>
   14ff0:	e59f0bf0 	ldr	r0, [pc, #3056]	; 15be8 <main+0xe18>
   14ff4:	eb000f28 	bl	18c9c <strcpy>
				gpsData.save(gps.message);
   14ff8:	e59f0bc4 	ldr	r0, [pc, #3012]	; 15bc4 <main+0xdf4>
   14ffc:	e59f1be4 	ldr	r1, [pc, #3044]	; 15be8 <main+0xe18>
   15000:	eb000aad 	bl	17abc <cMemory::save(char*)>
			}

			if(configuration.output_messages >=2)rprintf("%s\n", gps.message);
   15004:	e5d5300c 	ldrb	r3, [r5, #12]
   15008:	e3530001 	cmp	r3, #1
   1500c:	859f0bd8 	ldrhi	r0, [pc, #3032]	; 15bec <main+0xe1c>
   15010:	859f1bd0 	ldrhi	r1, [pc, #3024]	; 15be8 <main+0xe18>
   15014:	8bffec8a 	blhi	10244 <rprintf>
			
			VICIntEnable |= INT_UART1;
   15018:	e3e03000 	mvn	r3, #0
   1501c:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfef
   15020:	e3822080 	orr	r2, r2, #128	; 0x80
   15024:	e5032fef 	str	r2, [r3, #-4079]	; 0xfef
		}
		
		if(uart0MessageComplete)
   15028:	e59f3bc0 	ldr	r3, [pc, #3008]	; 15bf0 <main+0xe20>
   1502c:	e5d32000 	ldrb	r2, [r3]
   15030:	e3520000 	cmp	r2, #0
   15034:	0a000032 	beq	15104 <main+0x334>
		{
			VICIntEnClr |= INT_TIMER0|INT_UART1|INT_UART0;
   15038:	e3e02000 	mvn	r2, #0
   1503c:	e5121feb 	ldr	r1, [r2, #-4075]	; 0xfeb
   15040:	e38110d0 	orr	r1, r1, #208	; 0xd0
   15044:	e5021feb 	str	r1, [r2, #-4075]	; 0xfeb
			uart0MessageComplete=0;
			
			//Save all the current data and close the files.
			if(configuration.log_gps)gpsData.close();
   15048:	e59f5b54 	ldr	r5, [pc, #2900]	; 15ba4 <main+0xdd4>
		}
		
		if(uart0MessageComplete)
		{
			VICIntEnClr |= INT_TIMER0|INT_UART1|INT_UART0;
			uart0MessageComplete=0;
   1504c:	e3a02000 	mov	r2, #0
   15050:	e5c32000 	strb	r2, [r3]
			
			//Save all the current data and close the files.
			if(configuration.log_gps)gpsData.close();
   15054:	e5d53001 	ldrb	r3, [r5, #1]
   15058:	e1530002 	cmp	r3, r2
   1505c:	159f0b60 	ldrne	r0, [pc, #2912]	; 15bc4 <main+0xdf4>
   15060:	1b000ab6 	blne	17b40 <cMemory::close()>
			if(configuration.log_sensor){
   15064:	e5d53000 	ldrb	r3, [r5]
   15068:	e3530000 	cmp	r3, #0
   1506c:	0a000007 	beq	15090 <main+0x2c0>
				sensorData.save(sensor_log_string);
   15070:	e59f0b40 	ldr	r0, [pc, #2880]	; 15bb8 <main+0xde8>
   15074:	e2801049 	add	r1, r0, #73	; 0x49
   15078:	eb000a8f 	bl	17abc <cMemory::save(char*)>
				strcpy(sensor_log_string, "");
   1507c:	e59f0b70 	ldr	r0, [pc, #2928]	; 15bf4 <main+0xe24>
   15080:	e59f1b70 	ldr	r1, [pc, #2928]	; 15bf8 <main+0xe28>
   15084:	eb000f04 	bl	18c9c <strcpy>
				sensorData.close();
   15088:	e59f0b28 	ldr	r0, [pc, #2856]	; 15bb8 <main+0xde8>
   1508c:	eb000aab 	bl	17b40 <cMemory::close()>
			}
			
			configMenu(configData);
   15090:	e59f5b64 	ldr	r5, [pc, #2916]	; 15bfc <main+0xe2c>
   15094:	e8b5000f 	ldm	r5!, {r0, r1, r2, r3}
   15098:	e1a0c00d 	mov	ip, sp
   1509c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   150a0:	e5953000 	ldr	r3, [r5]
   150a4:	e58c3000 	str	r3, [ip]
   150a8:	e245c020 	sub	ip, r5, #32
   150ac:	e89c000f 	ldm	ip, {r0, r1, r2, r3}
			
			//Configure the sensors with the new settings
			initPeripherals();
			
			//Create new files, if needed.
			if(configuration.log_sensor)sensorData.create("Sensor", ".csv");
   150b0:	e59f6aec 	ldr	r6, [pc, #2796]	; 15ba4 <main+0xdd4>
				sensorData.save(sensor_log_string);
				strcpy(sensor_log_string, "");
				sensorData.close();
			}
			
			configMenu(configData);
   150b4:	eb000458 	bl	1621c <configMenu(cMemory)>
			configData.close();
   150b8:	e2450020 	sub	r0, r5, #32
   150bc:	eb000a9f 	bl	17b40 <cMemory::close()>
			
			//Configure the sensors with the new settings
			initPeripherals();
   150c0:	ebfffea9 	bl	14b6c <initPeripherals()>
			
			//Create new files, if needed.
			if(configuration.log_sensor)sensorData.create("Sensor", ".csv");
   150c4:	e5d63000 	ldrb	r3, [r6]
   150c8:	e3530000 	cmp	r3, #0
   150cc:	12850004 	addne	r0, r5, #4
   150d0:	159f1ae4 	ldrne	r1, [pc, #2788]	; 15bbc <main+0xdec>
   150d4:	159f2ae4 	ldrne	r2, [pc, #2788]	; 15bc0 <main+0xdf0>
   150d8:	1b000a3e 	blne	179d8 <cMemory::create(char const*, char const*)>
			if(configuration.log_gps)gpsData.create("NMEA", ".csv");			
   150dc:	e5d63001 	ldrb	r3, [r6, #1]
   150e0:	e3530000 	cmp	r3, #0
   150e4:	159f0ad8 	ldrne	r0, [pc, #2776]	; 15bc4 <main+0xdf4>
   150e8:	159f1ad8 	ldrne	r1, [pc, #2776]	; 15bc8 <main+0xdf8>
   150ec:	159f2acc 	ldrne	r2, [pc, #2764]	; 15bc0 <main+0xdf0>
   150f0:	1b000a38 	blne	179d8 <cMemory::create(char const*, char const*)>
			
			VICIntEnable |= INT_TIMER0|INT_UART1|INT_UART0;
   150f4:	e3e03000 	mvn	r3, #0
   150f8:	e5132fef 	ldr	r2, [r3, #-4079]	; 0xfef
   150fc:	e38220d0 	orr	r2, r2, #208	; 0xd0
   15100:	e5032fef 	str	r2, [r3, #-4079]	; 0xfef
		}
		
		if(sensors_updated)
   15104:	e59f0aa8 	ldr	r0, [pc, #2728]	; 15bb4 <main+0xde4>
   15108:	e5d0306c 	ldrb	r3, [r0, #108]	; 0x6c
   1510c:	e3530000 	cmp	r3, #0
   15110:	0a000296 	beq	15b70 <main+0xda0>
		{
			sensors_updated=0;
			
			//If we're not supposed to output the euler angles, just copy the time and sensor values to the string.
			//(Sensor Values are in engineering units - g's, degrees/sec, and Ga)
			if(!configuration.output_euler){
   15114:	e59f3a88 	ldr	r3, [pc, #2696]	; 15ba4 <main+0xdd4>
   15118:	e5d3300b 	ldrb	r3, [r3, #11]
			VICIntEnable |= INT_TIMER0|INT_UART1|INT_UART0;
		}
		
		if(sensors_updated)
		{
			sensors_updated=0;
   1511c:	e3a05000 	mov	r5, #0
			
			//If we're not supposed to output the euler angles, just copy the time and sensor values to the string.
			//(Sensor Values are in engineering units - g's, degrees/sec, and Ga)
			if(!configuration.output_euler){
   15120:	e1530005 	cmp	r3, r5
			VICIntEnable |= INT_TIMER0|INT_UART1|INT_UART0;
		}
		
		if(sensors_updated)
		{
			sensors_updated=0;
   15124:	e5c0506c 	strb	r5, [r0, #108]	; 0x6c
			
			//If we're not supposed to output the euler angles, just copy the time and sensor values to the string.
			//(Sensor Values are in engineering units - g's, degrees/sec, and Ga)
			if(!configuration.output_euler){
   15128:	1a00004a 	bne	15258 <main+0x488>
				sprintf(sensor_string, "%06ld,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f\n\r",
						millis(),
						gyro.getX(), gyro.getY(), gyro.getZ(),
						accelerometer.getX(), accelerometer.getY(), accelerometer.getZ(),
						compass.getX(), compass.getY(), compass.getZ());
   1512c:	ebffed7c 	bl	10724 <millis>
   15130:	e1a02000 	mov	r2, r0
			//If we're not supposed to output the euler angles, just copy the time and sensor values to the string.
			//(Sensor Values are in engineering units - g's, degrees/sec, and Ga)
			if(!configuration.output_euler){
				sprintf(sensor_string, "%06ld,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f,%5.2f\n\r",
						millis(),
						gyro.getX(), gyro.getY(), gyro.getZ(),
   15134:	e59f0a9c 	ldr	r0, [pc, #2716]	; 15bd8 <main+0xe08>
   15138:	e58d2044 	str	r2, [sp, #68]	; 0x44
   1513c:	eb0008e4 	bl	174d4 <cITG3200::getX()>
   15140:	e1a05000 	mov	r5, r0
   15144:	e59f0a8c 	ldr	r0, [pc, #2700]	; 15bd8 <main+0xe08>
   15148:	eb0008ee 	bl	17508 <cITG3200::getY()>
   1514c:	e1a07000 	mov	r7, r0
   15150:	e59f0a80 	ldr	r0, [pc, #2688]	; 15bd8 <main+0xe08>
   15154:	eb0008f8 	bl	1753c <cITG3200::getZ()>
   15158:	e1a08000 	mov	r8, r0
						accelerometer.getX(), accelerometer.getY(), accelerometer.getZ(),
						compass.getX(), compass.getY(), compass.getZ());
   1515c:	e59f0a70 	ldr	r0, [pc, #2672]	; 15bd4 <main+0xe04>
   15160:	eb000632 	bl	16a30 <cADXL345::getX()>
   15164:	e58d0048 	str	r0, [sp, #72]	; 0x48
   15168:	e58d104c 	str	r1, [sp, #76]	; 0x4c
   1516c:	e59f0a60 	ldr	r0, [pc, #2656]	; 15bd4 <main+0xe04>
   15170:	eb00063b 	bl	16a64 <cADXL345::getY()>
   15174:	e58d0050 	str	r0, [sp, #80]	; 0x50
   15178:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1517c:	e59f0a50 	ldr	r0, [pc, #2640]	; 15bd4 <main+0xe04>
   15180:	eb000644 	bl	16a98 <cADXL345::getZ()>
   15184:	e58d0058 	str	r0, [sp, #88]	; 0x58
   15188:	e58d105c 	str	r1, [sp, #92]	; 0x5c
   1518c:	e59f0a48 	ldr	r0, [pc, #2632]	; 15bdc <main+0xe0c>
   15190:	eb0007ab 	bl	17044 <cHMC5843::getX()>
   15194:	e1a0a000 	mov	sl, r0
   15198:	e59f0a3c 	ldr	r0, [pc, #2620]	; 15bdc <main+0xe0c>
   1519c:	eb0007b2 	bl	1706c <cHMC5843::getY()>
   151a0:	e1a09000 	mov	r9, r0
   151a4:	e59f0a30 	ldr	r0, [pc, #2608]	; 15bdc <main+0xe0c>
   151a8:	eb0007b9 	bl	17094 <cHMC5843::getZ()>
   151ac:	e1a0b000 	mov	fp, r0
   151b0:	e1a00005 	mov	r0, r5
   151b4:	eb003e1c 	bl	24a2c <__aeabi_f2d>
   151b8:	e1a06000 	mov	r6, r0
   151bc:	e1a00007 	mov	r0, r7
   151c0:	e1a05001 	mov	r5, r1
   151c4:	eb003e18 	bl	24a2c <__aeabi_f2d>
   151c8:	e98d0003 	stmib	sp, {r0, r1}
   151cc:	e1a00008 	mov	r0, r8
   151d0:	eb003e15 	bl	24a2c <__aeabi_f2d>
   151d4:	e58d000c 	str	r0, [sp, #12]
   151d8:	e58d1010 	str	r1, [sp, #16]
   151dc:	e28d1048 	add	r1, sp, #72	; 0x48
   151e0:	e8910003 	ldm	r1, {r0, r1}
   151e4:	e58d0014 	str	r0, [sp, #20]
   151e8:	e58d1018 	str	r1, [sp, #24]
   151ec:	e28d1050 	add	r1, sp, #80	; 0x50
   151f0:	e8910003 	ldm	r1, {r0, r1}
   151f4:	e58d001c 	str	r0, [sp, #28]
   151f8:	e58d1020 	str	r1, [sp, #32]
   151fc:	e28d1058 	add	r1, sp, #88	; 0x58
   15200:	e8910003 	ldm	r1, {r0, r1}
   15204:	e58d0024 	str	r0, [sp, #36]	; 0x24
   15208:	e58d1028 	str	r1, [sp, #40]	; 0x28
   1520c:	e1a0000a 	mov	r0, sl
   15210:	eb003e05 	bl	24a2c <__aeabi_f2d>
   15214:	e58d002c 	str	r0, [sp, #44]	; 0x2c
   15218:	e58d1030 	str	r1, [sp, #48]	; 0x30
   1521c:	e1a00009 	mov	r0, r9
   15220:	eb003e01 	bl	24a2c <__aeabi_f2d>
   15224:	e58d0034 	str	r0, [sp, #52]	; 0x34
   15228:	e58d1038 	str	r1, [sp, #56]	; 0x38
   1522c:	e1a0000b 	mov	r0, fp
   15230:	eb003dfd 	bl	24a2c <__aeabi_f2d>
   15234:	e1a03006 	mov	r3, r6
   15238:	e58d003c 	str	r0, [sp, #60]	; 0x3c
   1523c:	e58d1040 	str	r1, [sp, #64]	; 0x40
   15240:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   15244:	e59f19b4 	ldr	r1, [pc, #2484]	; 15c00 <main+0xe30>
   15248:	e59f09b4 	ldr	r0, [pc, #2484]	; 15c04 <main+0xe34>
   1524c:	e58d5000 	str	r5, [sp]
   15250:	eb000d4d 	bl	1878c <sprintf>
   15254:	ea00022d 	b	15b10 <main+0xd40>
			}
			else{
				//Calculate Euler Angles and tilt compensated heading
				filter.last_time=filter.this_time;
   15258:	e59430a0 	ldr	r3, [r4, #160]	; 0xa0
   1525c:	e584309c 	str	r3, [r4, #156]	; 0x9c
				filter.this_time=millis();	//Get the current number of milliseconds
   15260:	ebffed2f 	bl	10724 <millis>
				//Calculate Interval Time in milliseconds
				filter.interval=filter.this_time-filter.last_time;
   15264:	e594309c 	ldr	r3, [r4, #156]	; 0x9c
						compass.getX(), compass.getY(), compass.getZ());
			}
			else{
				//Calculate Euler Angles and tilt compensated heading
				filter.last_time=filter.this_time;
				filter.this_time=millis();	//Get the current number of milliseconds
   15268:	e58400a0 	str	r0, [r4, #160]	; 0xa0
				//Calculate Interval Time in milliseconds
				filter.interval=filter.this_time-filter.last_time;
   1526c:	e0630000 	rsb	r0, r3, r0
   15270:	eb003dd8 	bl	249d8 <__aeabi_ui2d>
   15274:	e58400a4 	str	r0, [r4, #164]	; 0xa4
   15278:	e58410a8 	str	r1, [r4, #168]	; 0xa8
				
				//Populate the RwAcc Array
				filter.fillRwAcc(accelerometer.getX(), accelerometer.getY(), accelerometer.getZ());		
   1527c:	e59f0950 	ldr	r0, [pc, #2384]	; 15bd4 <main+0xe04>
   15280:	eb0005ea 	bl	16a30 <cADXL345::getX()>
   15284:	e1a06000 	mov	r6, r0
   15288:	e59f0944 	ldr	r0, [pc, #2372]	; 15bd4 <main+0xe04>
   1528c:	e1a07001 	mov	r7, r1
   15290:	eb0005f3 	bl	16a64 <cADXL345::getY()>
   15294:	e1a08000 	mov	r8, r0
   15298:	e59f0934 	ldr	r0, [pc, #2356]	; 15bd4 <main+0xe04>
   1529c:	e1a09001 	mov	r9, r1
   152a0:	eb0005fc 	bl	16a98 <cADXL345::getZ()>
   152a4:	e1a0a000 	mov	sl, r0
   152a8:	e1a0b001 	mov	fp, r1
   152ac:	e1a00006 	mov	r0, r6
   152b0:	e1a01007 	mov	r1, r7
   152b4:	eb003f9f 	bl	25138 <__aeabi_d2f>
   152b8:	e1a01009 	mov	r1, r9
   152bc:	e1a06000 	mov	r6, r0
   152c0:	e1a00008 	mov	r0, r8
   152c4:	eb003f9b 	bl	25138 <__aeabi_d2f>
   152c8:	e1a0100b 	mov	r1, fp
   152cc:	e1a07000 	mov	r7, r0
   152d0:	e1a0000a 	mov	r0, sl
   152d4:	eb003f97 	bl	25138 <__aeabi_d2f>
   152d8:	e1a01006 	mov	r1, r6
   152dc:	e1a03000 	mov	r3, r0
   152e0:	e1a02007 	mov	r2, r7
   152e4:	e59f08e0 	ldr	r0, [pc, #2272]	; 15bcc <main+0xdfc>
   152e8:	eb000a76 	bl	17cc8 <cSensor::fillRwAcc(float, float, float)>
				
				//Normalize the Accelerometers gravity vector
				filter.normalizeVector(filter.RwAcc);
   152ec:	e59f08d8 	ldr	r0, [pc, #2264]	; 15bcc <main+0xdfc>
   152f0:	e2801018 	add	r1, r0, #24
   152f4:	eb000a85 	bl	17d10 <cSensor::normalizeVector(double*)>
				
				//The measurements of the first run get screwed up since we don't have a previous angle
				//to derive the current angle from. So, we skip the calculation on the first time through this loop.
				if(filter.first_run)
   152f8:	e5d430e4 	ldrb	r3, [r4, #228]	; 0xe4
   152fc:	e3530000 	cmp	r3, #0
   15300:	0a00000d 	beq	1533c <main+0x56c>
				{
					for(int w=0; w<3; w++)filter.RwGyro[w] = filter.RwAcc[w];
   15304:	e2843018 	add	r3, r4, #24
   15308:	e893000c 	ldm	r3, {r2, r3}
   1530c:	e5842030 	str	r2, [r4, #48]	; 0x30
   15310:	e5843034 	str	r3, [r4, #52]	; 0x34
   15314:	e2843020 	add	r3, r4, #32
   15318:	e893000c 	ldm	r3, {r2, r3}
   1531c:	e5842038 	str	r2, [r4, #56]	; 0x38
   15320:	e584303c 	str	r3, [r4, #60]	; 0x3c
   15324:	e2843028 	add	r3, r4, #40	; 0x28
   15328:	e893000c 	ldm	r3, {r2, r3}
					filter.first_run=0;			
   1532c:	e5c450e4 	strb	r5, [r4, #228]	; 0xe4
				
				//The measurements of the first run get screwed up since we don't have a previous angle
				//to derive the current angle from. So, we skip the calculation on the first time through this loop.
				if(filter.first_run)
				{
					for(int w=0; w<3; w++)filter.RwGyro[w] = filter.RwAcc[w];
   15330:	e5842040 	str	r2, [r4, #64]	; 0x40
   15334:	e5843044 	str	r3, [r4, #68]	; 0x44
   15338:	ea0000d9 	b	156a4 <main+0x8d4>
					filter.first_run=0;			
				}
				else
				{
					//If the previous estimated values is too small, don't calc. a new one as the error will be large.
					if(filter.RwEst[2] < 0.1)
   1533c:	e2841010 	add	r1, r4, #16
   15340:	e8910003 	ldm	r1, {r0, r1}
   15344:	e59f28bc 	ldr	r2, [pc, #2236]	; 15c08 <main+0xe38>
   15348:	e59f38bc 	ldr	r3, [pc, #2236]	; 15c0c <main+0xe3c>
   1534c:	eb003f04 	bl	24f64 <__ledf2>
   15350:	e3500000 	cmp	r0, #0
					{
						for(int w=0; w<3; w++)filter.RwGyro[w]=filter.RwEst[w];
   15354:	b2843008 	addlt	r3, r4, #8
   15358:	b893000c 	ldmlt	r3, {r2, r3}
   1535c:	b5842038 	strlt	r2, [r4, #56]	; 0x38
   15360:	b584303c 	strlt	r3, [r4, #60]	; 0x3c
   15364:	b2843010 	addlt	r3, r4, #16
   15368:	b893000c 	ldmlt	r3, {r2, r3}
   1536c:	b5842040 	strlt	r2, [r4, #64]	; 0x40
   15370:	b5843044 	strlt	r3, [r4, #68]	; 0x44
   15374:	ba00003f 	blt	15478 <main+0x6a8>
					}
					//Else, find the 'gyro angle' and calculate the weighted average to find attitude of device.
					else
					{
						//Get the current deg/sec from gyroscope.
						filter.x_rate=gyro.getX();	
   15378:	e59f0858 	ldr	r0, [pc, #2136]	; 15bd8 <main+0xe08>
   1537c:	eb000854 	bl	174d4 <cITG3200::getX()>
   15380:	eb003da9 	bl	24a2c <__aeabi_f2d>
   15384:	e58400b4 	str	r0, [r4, #180]	; 0xb4
   15388:	e58410b8 	str	r1, [r4, #184]	; 0xb8
						filter.y_rate=gyro.getY();
   1538c:	e59f0844 	ldr	r0, [pc, #2116]	; 15bd8 <main+0xe08>
   15390:	eb00085c 	bl	17508 <cITG3200::getY()>
   15394:	eb003da4 	bl	24a2c <__aeabi_f2d>
   15398:	e1a06000 	mov	r6, r0
   1539c:	e1a07001 	mov	r7, r1
						//find the Angle difference between the last reading and this one.
						filter.x_angle=filter.x_rate*(filter.interval/1000.0);	//degree/sec * seconds == degrees
   153a0:	e59f2868 	ldr	r2, [pc, #2152]	; 15c10 <main+0xe40>
   153a4:	e28410a4 	add	r1, r4, #164	; 0xa4
   153a8:	e8910003 	ldm	r1, {r0, r1}
   153ac:	e3a03000 	mov	r3, #0
					//Else, find the 'gyro angle' and calculate the weighted average to find attitude of device.
					else
					{
						//Get the current deg/sec from gyroscope.
						filter.x_rate=gyro.getX();	
						filter.y_rate=gyro.getY();
   153b0:	e58460c4 	str	r6, [r4, #196]	; 0xc4
   153b4:	e58470c8 	str	r7, [r4, #200]	; 0xc8
						//find the Angle difference between the last reading and this one.
						filter.x_angle=filter.x_rate*(filter.interval/1000.0);	//degree/sec * seconds == degrees
   153b8:	eb003e66 	bl	24d58 <__aeabi_ddiv>
   153bc:	e1a08000 	mov	r8, r0
   153c0:	e1a09001 	mov	r9, r1
   153c4:	e1a02008 	mov	r2, r8
   153c8:	e28410b4 	add	r1, r4, #180	; 0xb4
   153cc:	e8910003 	ldm	r1, {r0, r1}
   153d0:	e1a03009 	mov	r3, r9
   153d4:	eb003dc4 	bl	24aec <__aeabi_dmul>
						filter.y_angle=filter.y_rate*(filter.interval/1000.0);
   153d8:	e1a02008 	mov	r2, r8
					{
						//Get the current deg/sec from gyroscope.
						filter.x_rate=gyro.getX();	
						filter.y_rate=gyro.getY();
						//find the Angle difference between the last reading and this one.
						filter.x_angle=filter.x_rate*(filter.interval/1000.0);	//degree/sec * seconds == degrees
   153dc:	e58400ac 	str	r0, [r4, #172]	; 0xac
   153e0:	e58410b0 	str	r1, [r4, #176]	; 0xb0
						filter.y_angle=filter.y_rate*(filter.interval/1000.0);
   153e4:	e1a03009 	mov	r3, r9
   153e8:	e1a00006 	mov	r0, r6
   153ec:	e1a01007 	mov	r1, r7
   153f0:	eb003dbd 	bl	24aec <__aeabi_dmul>
						
						//Find the current angle based on the previously measured angle
						filter.Axz = atan2(filter.RwEst[0], filter.RwEst[2])*180/PI;	//Get previous angle in degrees
   153f4:	e2843010 	add	r3, r4, #16
   153f8:	e893000c 	ldm	r3, {r2, r3}
						//Get the current deg/sec from gyroscope.
						filter.x_rate=gyro.getX();	
						filter.y_rate=gyro.getY();
						//find the Angle difference between the last reading and this one.
						filter.x_angle=filter.x_rate*(filter.interval/1000.0);	//degree/sec * seconds == degrees
						filter.y_angle=filter.y_rate*(filter.interval/1000.0);
   153fc:	e58400bc 	str	r0, [r4, #188]	; 0xbc
   15400:	e58410c0 	str	r1, [r4, #192]	; 0xc0
						
						//Find the current angle based on the previously measured angle
						filter.Axz = atan2(filter.RwEst[0], filter.RwEst[2])*180/PI;	//Get previous angle in degrees
   15404:	e8940003 	ldm	r4, {r0, r1}
   15408:	eb003156 	bl	21968 <atan2>
   1540c:	e59f2800 	ldr	r2, [pc, #2048]	; 15c14 <main+0xe44>
   15410:	e3a03000 	mov	r3, #0
   15414:	eb003db4 	bl	24aec <__aeabi_dmul>
   15418:	e59f27f8 	ldr	r2, [pc, #2040]	; 15c18 <main+0xe48>
   1541c:	e59f37f8 	ldr	r3, [pc, #2040]	; 15c1c <main+0xe4c>
   15420:	eb003e4c 	bl	24d58 <__aeabi_ddiv>
						filter.Axz += filter.x_angle;	//Add the current angle to the previous one to get current angle.
   15424:	e28430ac 	add	r3, r4, #172	; 0xac
   15428:	e893000c 	ldm	r3, {r2, r3}
   1542c:	eb003cb1 	bl	246f8 <__adddf3>
						filter.Ayz = atan2(filter.RwEst[1], filter.RwEst[2])*180/PI;
   15430:	e2843010 	add	r3, r4, #16
   15434:	e893000c 	ldm	r3, {r2, r3}
						filter.x_angle=filter.x_rate*(filter.interval/1000.0);	//degree/sec * seconds == degrees
						filter.y_angle=filter.y_rate*(filter.interval/1000.0);
						
						//Find the current angle based on the previously measured angle
						filter.Axz = atan2(filter.RwEst[0], filter.RwEst[2])*180/PI;	//Get previous angle in degrees
						filter.Axz += filter.x_angle;	//Add the current angle to the previous one to get current angle.
   15438:	e5840060 	str	r0, [r4, #96]	; 0x60
   1543c:	e5841064 	str	r1, [r4, #100]	; 0x64
						filter.Ayz = atan2(filter.RwEst[1], filter.RwEst[2])*180/PI;
   15440:	e2841008 	add	r1, r4, #8
   15444:	e8910003 	ldm	r1, {r0, r1}
   15448:	eb003146 	bl	21968 <atan2>
   1544c:	e59f27c0 	ldr	r2, [pc, #1984]	; 15c14 <main+0xe44>
   15450:	e3a03000 	mov	r3, #0
   15454:	eb003da4 	bl	24aec <__aeabi_dmul>
   15458:	e59f27b8 	ldr	r2, [pc, #1976]	; 15c18 <main+0xe48>
   1545c:	e59f37b8 	ldr	r3, [pc, #1976]	; 15c1c <main+0xe4c>
   15460:	eb003e3c 	bl	24d58 <__aeabi_ddiv>
						filter.Ayz += filter.y_angle;
   15464:	e28430bc 	add	r3, r4, #188	; 0xbc
   15468:	e893000c 	ldm	r3, {r2, r3}
   1546c:	eb003ca1 	bl	246f8 <__adddf3>
   15470:	e5840068 	str	r0, [r4, #104]	; 0x68
   15474:	e584106c 	str	r1, [r4, #108]	; 0x6c
					}
					
					if(filter.RwAcc[2] >=0)filter.signRzGyro=1;
   15478:	e2841028 	add	r1, r4, #40	; 0x28
   1547c:	e8910003 	ldm	r1, {r0, r1}
   15480:	e3a02000 	mov	r2, #0
   15484:	e3a03000 	mov	r3, #0
   15488:	eb003eb3 	bl	24f5c <__gedf2>
					else filter.signRzGyro=-1;
   1548c:	e3500000 	cmp	r0, #0
   15490:	a3a00001 	movge	r0, #1
   15494:	b3a000ff 	movlt	r0, #255	; 0xff

					//Use Axz to find RxGyro
					filter.RwGyro[0] = sin(filter.Axz * (PI/180));
   15498:	e59f2780 	ldr	r2, [pc, #1920]	; 15c20 <main+0xe50>
   1549c:	e59f3780 	ldr	r3, [pc, #1920]	; 15c24 <main+0xe54>
						filter.Axz += filter.x_angle;	//Add the current angle to the previous one to get current angle.
						filter.Ayz = atan2(filter.RwEst[1], filter.RwEst[2])*180/PI;
						filter.Ayz += filter.y_angle;
					}
					
					if(filter.RwAcc[2] >=0)filter.signRzGyro=1;
   154a0:	e5c40088 	strb	r0, [r4, #136]	; 0x88
					else filter.signRzGyro=-1;

					//Use Axz to find RxGyro
					filter.RwGyro[0] = sin(filter.Axz * (PI/180));
   154a4:	e2841060 	add	r1, r4, #96	; 0x60
   154a8:	e8910003 	ldm	r1, {r0, r1}
   154ac:	eb003d8e 	bl	24aec <__aeabi_dmul>
   154b0:	e1a06000 	mov	r6, r0
   154b4:	e1a07001 	mov	r7, r1
   154b8:	eb0030c3 	bl	217cc <sin>
   154bc:	e1a08000 	mov	r8, r0
   154c0:	e1a09001 	mov	r9, r1
   154c4:	e5848030 	str	r8, [r4, #48]	; 0x30
   154c8:	e5849034 	str	r9, [r4, #52]	; 0x34
					filter.RwGyro[0] /= sqrt(1+cos(filter.Axz * (PI/180))*cos(filter.Axz * (PI/180))
   154cc:	e1a00006 	mov	r0, r6
   154d0:	e1a01007 	mov	r1, r7
   154d4:	eb003081 	bl	216e0 <cos>
											*tan(filter.Ayz*(PI/180))*tan(filter.Ayz*(PI/180)));
   154d8:	e59f2740 	ldr	r2, [pc, #1856]	; 15c20 <main+0xe50>
					if(filter.RwAcc[2] >=0)filter.signRzGyro=1;
					else filter.signRzGyro=-1;

					//Use Axz to find RxGyro
					filter.RwGyro[0] = sin(filter.Axz * (PI/180));
					filter.RwGyro[0] /= sqrt(1+cos(filter.Axz * (PI/180))*cos(filter.Axz * (PI/180))
   154dc:	e1a0a000 	mov	sl, r0
   154e0:	e1a0b001 	mov	fp, r1
											*tan(filter.Ayz*(PI/180))*tan(filter.Ayz*(PI/180)));
   154e4:	e59f3738 	ldr	r3, [pc, #1848]	; 15c24 <main+0xe54>
   154e8:	e2841068 	add	r1, r4, #104	; 0x68
   154ec:	e8910003 	ldm	r1, {r0, r1}
   154f0:	eb003d7d 	bl	24aec <__aeabi_dmul>
   154f4:	eb0030f8 	bl	218dc <tan>
   154f8:	e1a0200a 	mov	r2, sl
   154fc:	e1a06000 	mov	r6, r0
   15500:	e1a07001 	mov	r7, r1
   15504:	e1a0300b 	mov	r3, fp
   15508:	e1a0000a 	mov	r0, sl
   1550c:	e1a0100b 	mov	r1, fp
   15510:	eb003d75 	bl	24aec <__aeabi_dmul>
   15514:	e1a02006 	mov	r2, r6
   15518:	e1a03007 	mov	r3, r7
   1551c:	eb003d72 	bl	24aec <__aeabi_dmul>
   15520:	e1a02006 	mov	r2, r6
   15524:	e1a03007 	mov	r3, r7
   15528:	eb003d6f 	bl	24aec <__aeabi_dmul>
   1552c:	e59f26f4 	ldr	r2, [pc, #1780]	; 15c28 <main+0xe58>
   15530:	e3a03000 	mov	r3, #0
   15534:	eb003c6f 	bl	246f8 <__adddf3>
   15538:	eb00310b 	bl	2196c <sqrt>
   1553c:	e1a02000 	mov	r2, r0
   15540:	e1a03001 	mov	r3, r1
   15544:	e1a00008 	mov	r0, r8
   15548:	e1a01009 	mov	r1, r9
   1554c:	eb003e01 	bl	24d58 <__aeabi_ddiv>
					//Use Ayz to find RyGyro
					filter.RwGyro[1] = sin(filter.Ayz * (PI/180));
   15550:	e59f26c8 	ldr	r2, [pc, #1736]	; 15c20 <main+0xe50>
   15554:	e59f36c8 	ldr	r3, [pc, #1736]	; 15c24 <main+0xe54>
					else filter.signRzGyro=-1;

					//Use Axz to find RxGyro
					filter.RwGyro[0] = sin(filter.Axz * (PI/180));
					filter.RwGyro[0] /= sqrt(1+cos(filter.Axz * (PI/180))*cos(filter.Axz * (PI/180))
											*tan(filter.Ayz*(PI/180))*tan(filter.Ayz*(PI/180)));
   15558:	e5840030 	str	r0, [r4, #48]	; 0x30
   1555c:	e5841034 	str	r1, [r4, #52]	; 0x34
					//Use Ayz to find RyGyro
					filter.RwGyro[1] = sin(filter.Ayz * (PI/180));
   15560:	e2841068 	add	r1, r4, #104	; 0x68
   15564:	e8910003 	ldm	r1, {r0, r1}
   15568:	eb003d5f 	bl	24aec <__aeabi_dmul>
   1556c:	e1a06000 	mov	r6, r0
   15570:	e1a07001 	mov	r7, r1
   15574:	eb003094 	bl	217cc <sin>
   15578:	e1a08000 	mov	r8, r0
   1557c:	e1a09001 	mov	r9, r1
   15580:	e5848038 	str	r8, [r4, #56]	; 0x38
   15584:	e584903c 	str	r9, [r4, #60]	; 0x3c
					filter.RwGyro[1] /= sqrt(1+cos(filter.Ayz * (PI/180))*cos(filter.Ayz * (PI/180))
   15588:	e1a00006 	mov	r0, r6
   1558c:	e1a01007 	mov	r1, r7
   15590:	eb003052 	bl	216e0 <cos>
											*tan(filter.Axz*(PI/180))*tan(filter.Axz*(PI/180)));
   15594:	e59f2684 	ldr	r2, [pc, #1668]	; 15c20 <main+0xe50>
					filter.RwGyro[0] = sin(filter.Axz * (PI/180));
					filter.RwGyro[0] /= sqrt(1+cos(filter.Axz * (PI/180))*cos(filter.Axz * (PI/180))
											*tan(filter.Ayz*(PI/180))*tan(filter.Ayz*(PI/180)));
					//Use Ayz to find RyGyro
					filter.RwGyro[1] = sin(filter.Ayz * (PI/180));
					filter.RwGyro[1] /= sqrt(1+cos(filter.Ayz * (PI/180))*cos(filter.Ayz * (PI/180))
   15598:	e1a0a000 	mov	sl, r0
   1559c:	e1a0b001 	mov	fp, r1
											*tan(filter.Axz*(PI/180))*tan(filter.Axz*(PI/180)));
   155a0:	e59f367c 	ldr	r3, [pc, #1660]	; 15c24 <main+0xe54>
   155a4:	e2841060 	add	r1, r4, #96	; 0x60
   155a8:	e8910003 	ldm	r1, {r0, r1}
   155ac:	eb003d4e 	bl	24aec <__aeabi_dmul>
   155b0:	eb0030c9 	bl	218dc <tan>
   155b4:	e1a0200a 	mov	r2, sl
   155b8:	e1a06000 	mov	r6, r0
   155bc:	e1a07001 	mov	r7, r1
   155c0:	e1a0300b 	mov	r3, fp
   155c4:	e1a0000a 	mov	r0, sl
   155c8:	e1a0100b 	mov	r1, fp
   155cc:	eb003d46 	bl	24aec <__aeabi_dmul>
   155d0:	e1a02006 	mov	r2, r6
   155d4:	e1a03007 	mov	r3, r7
   155d8:	eb003d43 	bl	24aec <__aeabi_dmul>
   155dc:	e1a02006 	mov	r2, r6
   155e0:	e1a03007 	mov	r3, r7
   155e4:	eb003d40 	bl	24aec <__aeabi_dmul>
   155e8:	e59f2638 	ldr	r2, [pc, #1592]	; 15c28 <main+0xe58>
   155ec:	e3a03000 	mov	r3, #0
   155f0:	eb003c40 	bl	246f8 <__adddf3>
   155f4:	eb0030dc 	bl	2196c <sqrt>
   155f8:	e1a02000 	mov	r2, r0
   155fc:	e1a03001 	mov	r3, r1
   15600:	e1a00008 	mov	r0, r8
   15604:	e1a01009 	mov	r1, r9
   15608:	eb003dd2 	bl	24d58 <__aeabi_ddiv>
   1560c:	e1a06000 	mov	r6, r0
   15610:	e1a07001 	mov	r7, r1
   15614:	e5846038 	str	r6, [r4, #56]	; 0x38
   15618:	e584703c 	str	r7, [r4, #60]	; 0x3c
					
					filter.RwGyro[2] = filter.signRzGyro * sqrt(1-pow(filter.RwGyro[0],2)-pow(filter.RwGyro[1],2));	
   1561c:	e5d40088 	ldrb	r0, [r4, #136]	; 0x88
   15620:	eb003cf6 	bl	24a00 <__aeabi_i2d>
   15624:	e1a0a000 	mov	sl, r0
   15628:	e1a0b001 	mov	fp, r1
   1562c:	e2841030 	add	r1, r4, #48	; 0x30
   15630:	e8910003 	ldm	r1, {r0, r1}
   15634:	e1a02000 	mov	r2, r0
   15638:	e1a03001 	mov	r3, r1
   1563c:	eb003d2a 	bl	24aec <__aeabi_dmul>
   15640:	e1a02006 	mov	r2, r6
   15644:	e1a03007 	mov	r3, r7
   15648:	e1a08000 	mov	r8, r0
   1564c:	e1a09001 	mov	r9, r1
   15650:	e1a00006 	mov	r0, r6
   15654:	e1a01007 	mov	r1, r7
   15658:	eb003d23 	bl	24aec <__aeabi_dmul>
   1565c:	e1a02008 	mov	r2, r8
   15660:	e1a06000 	mov	r6, r0
   15664:	e1a07001 	mov	r7, r1
   15668:	e1a03009 	mov	r3, r9
   1566c:	e59f05b4 	ldr	r0, [pc, #1460]	; 15c28 <main+0xe58>
   15670:	e3a01000 	mov	r1, #0
   15674:	eb003c1e 	bl	246f4 <__aeabi_dsub>
   15678:	e1a02006 	mov	r2, r6
   1567c:	e1a03007 	mov	r3, r7
   15680:	eb003c1b 	bl	246f4 <__aeabi_dsub>
   15684:	eb0030b8 	bl	2196c <sqrt>
   15688:	e1a02000 	mov	r2, r0
   1568c:	e1a03001 	mov	r3, r1
   15690:	e1a0000a 	mov	r0, sl
   15694:	e1a0100b 	mov	r1, fp
   15698:	eb003d13 	bl	24aec <__aeabi_dmul>
   1569c:	e5840040 	str	r0, [r4, #64]	; 0x40
   156a0:	e5841044 	str	r1, [r4, #68]	; 0x44
				}
				//Now we have the gravity force vector from both accelerometer and gyro. Combine them using weighted average
				//to find Rw
				for(int w=0; w<3; w++)
				{
					filter.RwEst[w] = (filter.RwAcc[w] + filter.RwGyro[w] * filter.gyro_weight)/(1+filter.gyro_weight);
   156a4:	e2847080 	add	r7, r4, #128	; 0x80
   156a8:	e89700c0 	ldm	r7, {r6, r7}
   156ac:	e59f2574 	ldr	r2, [pc, #1396]	; 15c28 <main+0xe58>
   156b0:	e1a00006 	mov	r0, r6
   156b4:	e1a01007 	mov	r1, r7
   156b8:	e3a03000 	mov	r3, #0
   156bc:	eb003c0d 	bl	246f8 <__adddf3>
   156c0:	e59f5564 	ldr	r5, [pc, #1380]	; 15c2c <main+0xe5c>
   156c4:	e1a0a000 	mov	sl, r0
   156c8:	e1a0b001 	mov	fp, r1
   156cc:	e8b50300 	ldm	r5!, {r8, r9}
   156d0:	e1a00006 	mov	r0, r6
   156d4:	e2853010 	add	r3, r5, #16
   156d8:	e893000c 	ldm	r3, {r2, r3}
   156dc:	e1a01007 	mov	r1, r7
   156e0:	eb003d01 	bl	24aec <__aeabi_dmul>
   156e4:	e1a02000 	mov	r2, r0
   156e8:	e1a03001 	mov	r3, r1
   156ec:	e1a00008 	mov	r0, r8
   156f0:	e1a01009 	mov	r1, r9
   156f4:	eb003bff 	bl	246f8 <__adddf3>
   156f8:	e1a0200a 	mov	r2, sl
   156fc:	e1a0300b 	mov	r3, fp
   15700:	eb003d94 	bl	24d58 <__aeabi_ddiv>
   15704:	e5050020 	str	r0, [r5, #-32]
   15708:	e505101c 	str	r1, [r5, #-28]
					
					filter.RwGyro[2] = filter.signRzGyro * sqrt(1-pow(filter.RwGyro[0],2)-pow(filter.RwGyro[1],2));	
				}
				//Now we have the gravity force vector from both accelerometer and gyro. Combine them using weighted average
				//to find Rw
				for(int w=0; w<3; w++)
   1570c:	e59f151c 	ldr	r1, [pc, #1308]	; 15c30 <main+0xe60>
   15710:	e1550001 	cmp	r5, r1
   15714:	1affffec 	bne	156cc <main+0x8fc>
				{
					filter.RwEst[w] = (filter.RwAcc[w] + filter.RwGyro[w] * filter.gyro_weight)/(1+filter.gyro_weight);
				}	
				filter.normalizeVector(filter.RwEst);
   15718:	e2410030 	sub	r0, r1, #48	; 0x30
   1571c:	e1a01000 	mov	r1, r0
   15720:	eb00097a 	bl	17d10 <cSensor::normalizeVector(double*)>
				
				//filter.AccTheta=atan2(filter.RwAcc[0], filter.RwAcc[2])*180/PI;
				filter.EstAxz=atan2(filter.RwEst[0], filter.RwEst[2])*180/PI;
   15724:	e2843010 	add	r3, r4, #16
   15728:	e893000c 	ldm	r3, {r2, r3}
   1572c:	e8940003 	ldm	r4, {r0, r1}
   15730:	eb00308c 	bl	21968 <atan2>
   15734:	e59f24d8 	ldr	r2, [pc, #1240]	; 15c14 <main+0xe44>
   15738:	e3a03000 	mov	r3, #0
   1573c:	eb003cea 	bl	24aec <__aeabi_dmul>
   15740:	e59f24d0 	ldr	r2, [pc, #1232]	; 15c18 <main+0xe48>
   15744:	e59f34d0 	ldr	r3, [pc, #1232]	; 15c1c <main+0xe4c>
   15748:	eb003d82 	bl	24d58 <__aeabi_ddiv>
				filter.EstAyz=atan2(filter.RwEst[1], filter.RwEst[2])*180/PI;
   1574c:	e2843010 	add	r3, r4, #16
   15750:	e893000c 	ldm	r3, {r2, r3}
					filter.RwEst[w] = (filter.RwAcc[w] + filter.RwGyro[w] * filter.gyro_weight)/(1+filter.gyro_weight);
				}	
				filter.normalizeVector(filter.RwEst);
				
				//filter.AccTheta=atan2(filter.RwAcc[0], filter.RwAcc[2])*180/PI;
				filter.EstAxz=atan2(filter.RwEst[0], filter.RwEst[2])*180/PI;
   15754:	e5840070 	str	r0, [r4, #112]	; 0x70
   15758:	e5841074 	str	r1, [r4, #116]	; 0x74
				filter.EstAyz=atan2(filter.RwEst[1], filter.RwEst[2])*180/PI;
   1575c:	e2841008 	add	r1, r4, #8
   15760:	e8910003 	ldm	r1, {r0, r1}
   15764:	eb00307f 	bl	21968 <atan2>
   15768:	e59f24a4 	ldr	r2, [pc, #1188]	; 15c14 <main+0xe44>
   1576c:	e3a03000 	mov	r3, #0
   15770:	eb003cdd 	bl	24aec <__aeabi_dmul>
   15774:	e59f249c 	ldr	r2, [pc, #1180]	; 15c18 <main+0xe48>
   15778:	e59f349c 	ldr	r3, [pc, #1180]	; 15c1c <main+0xe4c>
   1577c:	eb003d75 	bl	24d58 <__aeabi_ddiv>
   15780:	e5840078 	str	r0, [r4, #120]	; 0x78
   15784:	e584107c 	str	r1, [r4, #124]	; 0x7c
				
				//Now that we have the euler angles, calculate the tilt-compensated heading.
				filter.RwMag[0] = compass.getX();
   15788:	e59f044c 	ldr	r0, [pc, #1100]	; 15bdc <main+0xe0c>
   1578c:	eb00062c 	bl	17044 <cHMC5843::getX()>
   15790:	eb003ca5 	bl	24a2c <__aeabi_f2d>
   15794:	e5840048 	str	r0, [r4, #72]	; 0x48
   15798:	e584104c 	str	r1, [r4, #76]	; 0x4c
				filter.RwMag[1] = compass.getY();
   1579c:	e59f0438 	ldr	r0, [pc, #1080]	; 15bdc <main+0xe0c>
   157a0:	eb000631 	bl	1706c <cHMC5843::getY()>
   157a4:	eb003ca0 	bl	24a2c <__aeabi_f2d>
   157a8:	e5840050 	str	r0, [r4, #80]	; 0x50
   157ac:	e5841054 	str	r1, [r4, #84]	; 0x54
				filter.RwMag[2] = compass.getZ();
   157b0:	e59f0424 	ldr	r0, [pc, #1060]	; 15bdc <main+0xe0c>
   157b4:	eb000636 	bl	17094 <cHMC5843::getZ()>
   157b8:	eb003c9b 	bl	24a2c <__aeabi_f2d>
   157bc:	e1a0a000 	mov	sl, r0
   157c0:	e1a0b001 	mov	fp, r1
				
				//Find the X and Y heading values using the tilt information
				filter.x_h = filter.RwMag[0]*cos(filter.EstAyz*(PI/180))+
   157c4:	e59f2454 	ldr	r2, [pc, #1108]	; 15c20 <main+0xe50>
   157c8:	e59f3454 	ldr	r3, [pc, #1108]	; 15c24 <main+0xe54>
				filter.EstAyz=atan2(filter.RwEst[1], filter.RwEst[2])*180/PI;
				
				//Now that we have the euler angles, calculate the tilt-compensated heading.
				filter.RwMag[0] = compass.getX();
				filter.RwMag[1] = compass.getY();
				filter.RwMag[2] = compass.getZ();
   157cc:	e584a058 	str	sl, [r4, #88]	; 0x58
   157d0:	e584b05c 	str	fp, [r4, #92]	; 0x5c
				
				//Find the X and Y heading values using the tilt information
				filter.x_h = filter.RwMag[0]*cos(filter.EstAyz*(PI/180))+
   157d4:	e2841078 	add	r1, r4, #120	; 0x78
   157d8:	e8910003 	ldm	r1, {r0, r1}
   157dc:	eb003cc2 	bl	24aec <__aeabi_dmul>
   157e0:	e1a06000 	mov	r6, r0
   157e4:	e1a07001 	mov	r7, r1
   157e8:	eb002fbc 	bl	216e0 <cos>
					filter.RwMag[1]*sin(filter.EstAxz*(PI/180))*sin(filter.EstAyz*(PI/180))-
   157ec:	e2843050 	add	r3, r4, #80	; 0x50
   157f0:	e893000c 	ldm	r3, {r2, r3}
				filter.RwMag[0] = compass.getX();
				filter.RwMag[1] = compass.getY();
				filter.RwMag[2] = compass.getZ();
				
				//Find the X and Y heading values using the tilt information
				filter.x_h = filter.RwMag[0]*cos(filter.EstAyz*(PI/180))+
   157f4:	e58d0060 	str	r0, [sp, #96]	; 0x60
   157f8:	e58d1064 	str	r1, [sp, #100]	; 0x64
					filter.RwMag[1]*sin(filter.EstAxz*(PI/180))*sin(filter.EstAyz*(PI/180))-
   157fc:	e58d2048 	str	r2, [sp, #72]	; 0x48
   15800:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   15804:	e2841070 	add	r1, r4, #112	; 0x70
   15808:	e8910003 	ldm	r1, {r0, r1}
   1580c:	e59f240c 	ldr	r2, [pc, #1036]	; 15c20 <main+0xe50>
   15810:	e59f340c 	ldr	r3, [pc, #1036]	; 15c24 <main+0xe54>
   15814:	eb003cb4 	bl	24aec <__aeabi_dmul>
   15818:	e1a08000 	mov	r8, r0
   1581c:	e1a09001 	mov	r9, r1
   15820:	eb002fe9 	bl	217cc <sin>
   15824:	e58d0050 	str	r0, [sp, #80]	; 0x50
   15828:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1582c:	e1a00006 	mov	r0, r6
   15830:	e1a01007 	mov	r1, r7
   15834:	eb002fe4 	bl	217cc <sin>
   15838:	e1a06000 	mov	r6, r0
   1583c:	e1a07001 	mov	r7, r1
					filter.RwMag[2]*cos(filter.EstAxz*(PI/180))*sin(filter.EstAyz*(PI/180));
   15840:	e1a00008 	mov	r0, r8
   15844:	e1a01009 	mov	r1, r9
   15848:	eb002fa4 	bl	216e0 <cos>
   1584c:	e2843048 	add	r3, r4, #72	; 0x48
   15850:	e893000c 	ldm	r3, {r2, r3}
   15854:	e58d0058 	str	r0, [sp, #88]	; 0x58
   15858:	e58d105c 	str	r1, [sp, #92]	; 0x5c
   1585c:	e28d1060 	add	r1, sp, #96	; 0x60
   15860:	e8910003 	ldm	r1, {r0, r1}
   15864:	eb003ca0 	bl	24aec <__aeabi_dmul>
   15868:	e28d3050 	add	r3, sp, #80	; 0x50
   1586c:	e893000c 	ldm	r3, {r2, r3}
   15870:	e1a08000 	mov	r8, r0
   15874:	e1a09001 	mov	r9, r1
   15878:	e28d1048 	add	r1, sp, #72	; 0x48
   1587c:	e8910003 	ldm	r1, {r0, r1}
   15880:	eb003c99 	bl	24aec <__aeabi_dmul>
   15884:	e1a02006 	mov	r2, r6
   15888:	e1a03007 	mov	r3, r7
   1588c:	eb003c96 	bl	24aec <__aeabi_dmul>
   15890:	e1a02000 	mov	r2, r0
   15894:	e1a03001 	mov	r3, r1
   15898:	e1a00008 	mov	r0, r8
   1589c:	e1a01009 	mov	r1, r9
   158a0:	eb003b94 	bl	246f8 <__adddf3>
   158a4:	e28d3058 	add	r3, sp, #88	; 0x58
   158a8:	e893000c 	ldm	r3, {r2, r3}
   158ac:	e1a08000 	mov	r8, r0
   158b0:	e1a09001 	mov	r9, r1
   158b4:	e1a0000a 	mov	r0, sl
   158b8:	e1a0100b 	mov	r1, fp
   158bc:	eb003c8a 	bl	24aec <__aeabi_dmul>
   158c0:	e1a02006 	mov	r2, r6
   158c4:	e1a03007 	mov	r3, r7
   158c8:	eb003c87 	bl	24aec <__aeabi_dmul>
   158cc:	e1a02000 	mov	r2, r0
   158d0:	e1a03001 	mov	r3, r1
   158d4:	e1a00008 	mov	r0, r8
   158d8:	e1a01009 	mov	r1, r9
   158dc:	eb003b84 	bl	246f4 <__aeabi_dsub>
   158e0:	e1a08000 	mov	r8, r0
   158e4:	e1a09001 	mov	r9, r1
					
				filter.y_h=filter.RwMag[1]*cos(filter.EstAxz*(PI/180))+filter.RwMag[2]*sin(filter.EstAxz*(PI/180));
   158e8:	e28d3058 	add	r3, sp, #88	; 0x58
   158ec:	e893000c 	ldm	r3, {r2, r3}
				filter.RwMag[2] = compass.getZ();
				
				//Find the X and Y heading values using the tilt information
				filter.x_h = filter.RwMag[0]*cos(filter.EstAyz*(PI/180))+
					filter.RwMag[1]*sin(filter.EstAxz*(PI/180))*sin(filter.EstAyz*(PI/180))-
					filter.RwMag[2]*cos(filter.EstAxz*(PI/180))*sin(filter.EstAyz*(PI/180));
   158f0:	e58480cc 	str	r8, [r4, #204]	; 0xcc
   158f4:	e58490d0 	str	r9, [r4, #208]	; 0xd0
					
				filter.y_h=filter.RwMag[1]*cos(filter.EstAxz*(PI/180))+filter.RwMag[2]*sin(filter.EstAxz*(PI/180));
   158f8:	e28d1048 	add	r1, sp, #72	; 0x48
   158fc:	e8910003 	ldm	r1, {r0, r1}
   15900:	eb003c79 	bl	24aec <__aeabi_dmul>
   15904:	e28d3050 	add	r3, sp, #80	; 0x50
   15908:	e893000c 	ldm	r3, {r2, r3}
   1590c:	e1a06000 	mov	r6, r0
   15910:	e1a07001 	mov	r7, r1
   15914:	e1a0000a 	mov	r0, sl
   15918:	e1a0100b 	mov	r1, fp
   1591c:	eb003c72 	bl	24aec <__aeabi_dmul>
   15920:	e1a02000 	mov	r2, r0
   15924:	e1a03001 	mov	r3, r1
   15928:	e1a00006 	mov	r0, r6
   1592c:	e1a01007 	mov	r1, r7
   15930:	eb003b70 	bl	246f8 <__adddf3>
   15934:	e1a06000 	mov	r6, r0
   15938:	e1a07001 	mov	r7, r1
   1593c:	e58460d4 	str	r6, [r4, #212]	; 0xd4
   15940:	e58470d8 	str	r7, [r4, #216]	; 0xd8
				
				//Find the heading.
				if(filter.x_h < 0)filter.heading = 180 - atan2(filter.y_h, filter.x_h)*180/PI;
   15944:	e1a00008 	mov	r0, r8
   15948:	e1a01009 	mov	r1, r9
   1594c:	e3a02000 	mov	r2, #0
   15950:	e3a03000 	mov	r3, #0
   15954:	eb003d82 	bl	24f64 <__ledf2>
   15958:	e3500000 	cmp	r0, #0
   1595c:	aa00000e 	bge	1599c <main+0xbcc>
   15960:	e1a02008 	mov	r2, r8
   15964:	e1a03009 	mov	r3, r9
   15968:	e1a00006 	mov	r0, r6
   1596c:	e1a01007 	mov	r1, r7
   15970:	eb002ffc 	bl	21968 <atan2>
   15974:	e59f2298 	ldr	r2, [pc, #664]	; 15c14 <main+0xe44>
   15978:	e3a03000 	mov	r3, #0
   1597c:	eb003c5a 	bl	24aec <__aeabi_dmul>
   15980:	e59f2290 	ldr	r2, [pc, #656]	; 15c18 <main+0xe48>
   15984:	e59f3290 	ldr	r3, [pc, #656]	; 15c1c <main+0xe4c>
   15988:	eb003cf2 	bl	24d58 <__aeabi_ddiv>
   1598c:	e1a02000 	mov	r2, r0
   15990:	e1a03001 	mov	r3, r1
   15994:	e59f0278 	ldr	r0, [pc, #632]	; 15c14 <main+0xe44>
   15998:	ea000030 	b	15a60 <main+0xc90>
				else if((filter.x_h > 0) && (filter.y_h < 0))filter.heading = -atan2(filter.y_h, filter.x_h)*180/PI;
   1599c:	e1a00008 	mov	r0, r8
   159a0:	e1a01009 	mov	r1, r9
   159a4:	e3a02000 	mov	r2, #0
   159a8:	e3a03000 	mov	r3, #0
   159ac:	eb003d6a 	bl	24f5c <__gedf2>
   159b0:	e3500000 	cmp	r0, #0
   159b4:	da00002c 	ble	15a6c <main+0xc9c>
   159b8:	e1a01007 	mov	r1, r7
   159bc:	e1a00006 	mov	r0, r6
   159c0:	e3a02000 	mov	r2, #0
   159c4:	e3a03000 	mov	r3, #0
   159c8:	eb003d65 	bl	24f64 <__ledf2>
   159cc:	e3500000 	cmp	r0, #0
   159d0:	e1a01007 	mov	r1, r7
   159d4:	e1a00006 	mov	r0, r6
   159d8:	aa00000d 	bge	15a14 <main+0xc44>
   159dc:	e1a02008 	mov	r2, r8
   159e0:	e1a03009 	mov	r3, r9
   159e4:	eb002fdf 	bl	21968 <atan2>
   159e8:	e2802102 	add	r2, r0, #-2147483648	; 0x80000000
   159ec:	e1a00002 	mov	r0, r2
   159f0:	e3a03000 	mov	r3, #0
   159f4:	e59f2218 	ldr	r2, [pc, #536]	; 15c14 <main+0xe44>
   159f8:	eb003c3b 	bl	24aec <__aeabi_dmul>
   159fc:	e59f2214 	ldr	r2, [pc, #532]	; 15c18 <main+0xe48>
   15a00:	e59f3214 	ldr	r3, [pc, #532]	; 15c1c <main+0xe4c>
   15a04:	eb003cd3 	bl	24d58 <__aeabi_ddiv>
   15a08:	e58400dc 	str	r0, [r4, #220]	; 0xdc
   15a0c:	e58410e0 	str	r1, [r4, #224]	; 0xe0
   15a10:	ea00002f 	b	15ad4 <main+0xd04>
				else if((filter.x_h > 0) && (filter.y_h > 0))filter.heading = 360 - atan2(filter.y_h, filter.x_h)*180/PI;
   15a14:	e3a02000 	mov	r2, #0
   15a18:	e3a03000 	mov	r3, #0
   15a1c:	eb003d4e 	bl	24f5c <__gedf2>
   15a20:	e3500000 	cmp	r0, #0
   15a24:	da000010 	ble	15a6c <main+0xc9c>
   15a28:	e1a02008 	mov	r2, r8
   15a2c:	e1a03009 	mov	r3, r9
   15a30:	e1a00006 	mov	r0, r6
   15a34:	e1a01007 	mov	r1, r7
   15a38:	eb002fca 	bl	21968 <atan2>
   15a3c:	e59f21d0 	ldr	r2, [pc, #464]	; 15c14 <main+0xe44>
   15a40:	e3a03000 	mov	r3, #0
   15a44:	eb003c28 	bl	24aec <__aeabi_dmul>
   15a48:	e59f21c8 	ldr	r2, [pc, #456]	; 15c18 <main+0xe48>
   15a4c:	e59f31c8 	ldr	r3, [pc, #456]	; 15c1c <main+0xe4c>
   15a50:	eb003cc0 	bl	24d58 <__aeabi_ddiv>
   15a54:	e1a02000 	mov	r2, r0
   15a58:	e59f01d4 	ldr	r0, [pc, #468]	; 15c34 <main+0xe64>
   15a5c:	e1a03001 	mov	r3, r1
   15a60:	e3a01000 	mov	r1, #0
   15a64:	eb003b22 	bl	246f4 <__aeabi_dsub>
   15a68:	eaffffe6 	b	15a08 <main+0xc38>
				else if((filter.x_h == 0)&& (filter.y_h < 0))filter.heading = 90;
   15a6c:	e1a00008 	mov	r0, r8
   15a70:	e1a01009 	mov	r1, r9
   15a74:	e3a02000 	mov	r2, #0
   15a78:	e3a03000 	mov	r3, #0
   15a7c:	eb003d3a 	bl	24f6c <__cmpdf2>
   15a80:	e3500000 	cmp	r0, #0
   15a84:	1a000012 	bne	15ad4 <main+0xd04>
   15a88:	e1a01007 	mov	r1, r7
   15a8c:	e1a00006 	mov	r0, r6
   15a90:	e3a02000 	mov	r2, #0
   15a94:	e3a03000 	mov	r3, #0
   15a98:	eb003d31 	bl	24f64 <__ledf2>
   15a9c:	e3500000 	cmp	r0, #0
   15aa0:	b59f0190 	ldrlt	r0, [pc, #400]	; 15c38 <main+0xe68>
   15aa4:	b3a01000 	movlt	r1, #0
   15aa8:	baffffd6 	blt	15a08 <main+0xc38>
				else if((filter.x_h == 0)&& (filter.y_h > 0))filter.heading = 270;
   15aac:	e1a00006 	mov	r0, r6
   15ab0:	e1a01007 	mov	r1, r7
   15ab4:	e3a02000 	mov	r2, #0
   15ab8:	e3a03000 	mov	r3, #0
   15abc:	eb003d26 	bl	24f5c <__gedf2>
   15ac0:	e3500000 	cmp	r0, #0
   15ac4:	c59f1170 	ldrgt	r1, [pc, #368]	; 15c3c <main+0xe6c>
   15ac8:	c3a02000 	movgt	r2, #0
   15acc:	c58410dc 	strgt	r1, [r4, #220]	; 0xdc
   15ad0:	c58420e0 	strgt	r2, [r4, #224]	; 0xe0
				
				sprintf(sensor_string, "%06ld,%5.2f,%5.2f,%5.2f\n\r", millis(), filter.EstAxz, filter.EstAyz, filter.heading);	
   15ad4:	ebffeb12 	bl	10724 <millis>
   15ad8:	e2847078 	add	r7, r4, #120	; 0x78
   15adc:	e89700c0 	ldm	r7, {r6, r7}
   15ae0:	e5941074 	ldr	r1, [r4, #116]	; 0x74
   15ae4:	e5943070 	ldr	r3, [r4, #112]	; 0x70
   15ae8:	e98d00c0 	stmib	sp, {r6, r7}
   15aec:	e28470dc 	add	r7, r4, #220	; 0xdc
   15af0:	e89700c0 	ldm	r7, {r6, r7}
   15af4:	e1a02000 	mov	r2, r0
   15af8:	e58d1000 	str	r1, [sp]
   15afc:	e59f0100 	ldr	r0, [pc, #256]	; 15c04 <main+0xe34>
   15b00:	e59f1138 	ldr	r1, [pc, #312]	; 15c40 <main+0xe70>
   15b04:	e58d600c 	str	r6, [sp, #12]
   15b08:	e58d7010 	str	r7, [sp, #16]
   15b0c:	eb000b1e 	bl	1878c <sprintf>
			}
			
			if(configuration.log_sensor){
   15b10:	e59f308c 	ldr	r3, [pc, #140]	; 15ba4 <main+0xdd4>
   15b14:	e5d33000 	ldrb	r3, [r3]
   15b18:	e3530000 	cmp	r3, #0
   15b1c:	0a00000c 	beq	15b54 <main+0xd84>
				//Copy the data to a larger buffer. This keeps the number of 'saves' lower, which results
				//in less overruns in reading the sensors.
				strcat(sensor_log_string, sensor_string);
   15b20:	e59f00cc 	ldr	r0, [pc, #204]	; 15bf4 <main+0xe24>
   15b24:	e28010ff 	add	r1, r0, #255	; 0xff
   15b28:	eb000b34 	bl	18800 <strcat>
				if(strlen(sensor_log_string) > 195)
   15b2c:	e59f00c0 	ldr	r0, [pc, #192]	; 15bf4 <main+0xe24>
   15b30:	eb000c95 	bl	18d8c <strlen>
   15b34:	e35000c3 	cmp	r0, #195	; 0xc3
   15b38:	9a000005 	bls	15b54 <main+0xd84>
				{
					sensorData.save(sensor_log_string);
   15b3c:	e59f0074 	ldr	r0, [pc, #116]	; 15bb8 <main+0xde8>
   15b40:	e2801049 	add	r1, r0, #73	; 0x49
   15b44:	eb0007dc 	bl	17abc <cMemory::save(char*)>
					strcpy(sensor_log_string, "");
   15b48:	e59f00a4 	ldr	r0, [pc, #164]	; 15bf4 <main+0xe24>
   15b4c:	e59f10a4 	ldr	r1, [pc, #164]	; 15bf8 <main+0xe28>
   15b50:	eb000c51 	bl	18c9c <strcpy>
				}
			}
			
			if(configuration.output_messages == 1 || configuration.output_messages ==3){
   15b54:	e59f3048 	ldr	r3, [pc, #72]	; 15ba4 <main+0xdd4>
   15b58:	e5d3300c 	ldrb	r3, [r3, #12]
   15b5c:	e3530001 	cmp	r3, #1
   15b60:	13530003 	cmpne	r3, #3
				rprintf("%s", sensor_string);
   15b64:	059f00d8 	ldreq	r0, [pc, #216]	; 15c44 <main+0xe74>
   15b68:	059f1094 	ldreq	r1, [pc, #148]	; 15c04 <main+0xe34>
   15b6c:	0bffe9b4 	bleq	10244 <rprintf>
			}
			
		}
		
		//If a USB Cable gets plugged in, stop everything!
		if(IOPIN0 & (1<<23))
   15b70:	e59f3024 	ldr	r3, [pc, #36]	; 15b9c <main+0xdcc>
   15b74:	e5933000 	ldr	r3, [r3]
   15b78:	e3130502 	tst	r3, #8388608	; 0x800000
   15b7c:	0afffcef 	beq	14f40 <main+0x170>
		{
			VICIntEnClr = INT_TIMER0 |INT_UART1;	//Stop all running interrupts			
   15b80:	e3a02090 	mov	r2, #144	; 0x90
   15b84:	e3e03000 	mvn	r3, #0
   15b88:	e5032feb 	str	r2, [r3, #-4075]	; 0xfeb
			main_msc();								//Open the mass storage device
   15b8c:	ebfff5bb 	bl	13280 <main_msc>
			reset();								//Reset to check for new FW
   15b90:	ebfffbe9 	bl	14b3c <reset()>
   15b94:	eafffce9 	b	14f40 <main+0x170>
   15b98:	00026263 	.word	0x00026263
   15b9c:	e0028000 	.word	0xe0028000
   15ba0:	000f4240 	.word	0x000f4240
   15ba4:	40001024 	.word	0x40001024
   15ba8:	0002625a 	.word	0x0002625a
   15bac:	00026281 	.word	0x00026281
   15bb0:	0002628c 	.word	0x0002628c
   15bb4:	40000e70 	.word	0x40000e70
   15bb8:	40000e94 	.word	0x40000e94
   15bbc:	0002629e 	.word	0x0002629e
   15bc0:	000262a5 	.word	0x000262a5
   15bc4:	40000eb8 	.word	0x40000eb8
   15bc8:	000262aa 	.word	0x000262aa
   15bcc:	400011c8 	.word	0x400011c8
   15bd0:	40000968 	.word	0x40000968
   15bd4:	400010b4 	.word	0x400010b4
   15bd8:	40001104 	.word	0x40001104
   15bdc:	400010e0 	.word	0x400010e0
   15be0:	40000980 	.word	0x40000980
   15be4:	400012f0 	.word	0x400012f0
   15be8:	40001158 	.word	0x40001158
   15bec:	000262af 	.word	0x000262af
   15bf0:	40000988 	.word	0x40000988
   15bf4:	40000edd 	.word	0x40000edd
   15bf8:	00026578 	.word	0x00026578
   15bfc:	40000e80 	.word	0x40000e80
   15c00:	000262b3 	.word	0x000262b3
   15c04:	40000fdc 	.word	0x40000fdc
   15c08:	3fb99999 	.word	0x3fb99999
   15c0c:	9999999a 	.word	0x9999999a
   15c10:	408f4000 	.word	0x408f4000
   15c14:	40668000 	.word	0x40668000
   15c18:	400921ca 	.word	0x400921ca
   15c1c:	c083126f 	.word	0xc083126f
   15c20:	3f91df24 	.word	0x3f91df24
   15c24:	171ea105 	.word	0x171ea105
   15c28:	3ff00000 	.word	0x3ff00000
   15c2c:	400011e0 	.word	0x400011e0
   15c30:	400011f8 	.word	0x400011f8
   15c34:	40768000 	.word	0x40768000
   15c38:	40568000 	.word	0x40568000
   15c3c:	4070e000 	.word	0x4070e000
   15c40:	000262f1 	.word	0x000262f1
   15c44:	0002630b 	.word	0x0002630b

00015c48 <_GLOBAL__sub_I_major_version>:
	}
	
	rprintf("Pass!");
	LEDon();
	memoryDelete("Test.txt");
}
   15c48:	e92d4010 	push	{r4, lr}

char sensors_updated=0;
char sensor_string[70]="";
char sensor_log_string[255]="";

cMemory sensorData;
   15c4c:	e59f401c 	ldr	r4, [pc, #28]	; 15c70 <_GLOBAL__sub_I_major_version+0x28>
   15c50:	e2840024 	add	r0, r4, #36	; 0x24
   15c54:	eb00075c 	bl	179cc <cMemory::cMemory()>
cMemory gpsData;
   15c58:	e2840048 	add	r0, r4, #72	; 0x48
   15c5c:	eb00075a 	bl	179cc <cMemory::cMemory()>
cMemory configData;
   15c60:	e1a00004 	mov	r0, r4
   15c64:	eb000758 	bl	179cc <cMemory::cMemory()>
	}
	
	rprintf("Pass!");
	LEDon();
	memoryDelete("Test.txt");
}
   15c68:	e8bd4010 	pop	{r4, lr}
   15c6c:	e12fff1e 	bx	lr
   15c70:	40000e70 	.word	0x40000e70

00015c74 <cConfig::cConfig()>:
cConfig configuration;
char log_string[101];

cConfig::cConfig(void)
{
	configuration.log_sensor=1;
   15c74:	e59f305c 	ldr	r3, [pc, #92]	; 15cd8 <cConfig::cConfig()+0x64>
   15c78:	e3a01001 	mov	r1, #1
   15c7c:	e5c31000 	strb	r1, [r3]
	configuration.log_gps=0;
	configuration.range_accel=1;
   15c80:	e5c31002 	strb	r1, [r3, #2]
	configuration.range_compass=1;
   15c84:	e5c31003 	strb	r1, [r3, #3]
	for(int i=0; i<6; i++)configuration.gps_messages[i]=0;
	configuration.gps_messages[4]=1;
   15c88:	e5c31008 	strb	r1, [r3, #8]
	configuration.sd_enabled=1;
   15c8c:	e5c3100a 	strb	r1, [r3, #10]
	configuration.output_euler=1;
   15c90:	e5c3100b 	strb	r1, [r3, #11]
	configuration.output_messages=2;
   15c94:	e3a01002 	mov	r1, #2
char log_string[101];

cConfig::cConfig(void)
{
	configuration.log_sensor=1;
	configuration.log_gps=0;
   15c98:	e3a02000 	mov	r2, #0
	configuration.range_compass=1;
	for(int i=0; i<6; i++)configuration.gps_messages[i]=0;
	configuration.gps_messages[4]=1;
	configuration.sd_enabled=1;
	configuration.output_euler=1;
	configuration.output_messages=2;
   15c9c:	e5c3100c 	strb	r1, [r3, #12]
	configuration.cal_ax=0;
	configuration.cal_ay=0;
	configuration.cal_az=0;
   15ca0:	e3a01000 	mov	r1, #0
char log_string[101];

cConfig::cConfig(void)
{
	configuration.log_sensor=1;
	configuration.log_gps=0;
   15ca4:	e5c32001 	strb	r2, [r3, #1]
	configuration.range_accel=1;
	configuration.range_compass=1;
	for(int i=0; i<6; i++)configuration.gps_messages[i]=0;
   15ca8:	e5c32004 	strb	r2, [r3, #4]
   15cac:	e5c32005 	strb	r2, [r3, #5]
   15cb0:	e5c32006 	strb	r2, [r3, #6]
   15cb4:	e5c32007 	strb	r2, [r3, #7]
   15cb8:	e5c32009 	strb	r2, [r3, #9]
	configuration.gps_messages[4]=1;
	configuration.sd_enabled=1;
	configuration.output_euler=1;
	configuration.output_messages=2;
	configuration.cal_ax=0;
   15cbc:	e5832010 	str	r2, [r3, #16]
	configuration.cal_ay=0;
   15cc0:	e5832014 	str	r2, [r3, #20]
	configuration.cal_az=0;
   15cc4:	e5831018 	str	r1, [r3, #24]
	configuration.cal_gx=0;
   15cc8:	e583201c 	str	r2, [r3, #28]
	configuration.cal_gy=0;
   15ccc:	e5832020 	str	r2, [r3, #32]
	configuration.cal_gz=0;
   15cd0:	e5832024 	str	r2, [r3, #36]	; 0x24
}
   15cd4:	e12fff1e 	bx	lr
   15cd8:	40001024 	.word	0x40001024

00015cdc <readConfigFile(cMemory)>:
	configData.open();
	saveConfigData(configData);
	configData.close();
}

void readConfigFile(cMemory configData){
   15cdc:	e24dd010 	sub	sp, sp, #16
   15ce0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   15ce4:	e24dd018 	sub	sp, sp, #24
   15ce8:	e28d402c 	add	r4, sp, #44	; 0x2c
	char fileData[20];
	char error=0;
	int index=0;
	char delim[]="=,";
   15cec:	e28d6014 	add	r6, sp, #20
	configData.open();
	saveConfigData(configData);
	configData.close();
}

void readConfigFile(cMemory configData){
   15cf0:	e884000f 	stm	r4, {r0, r1, r2, r3}
	char fileData[20];
	char error=0;
	int index=0;
	char delim[]="=,";
   15cf4:	e3a02003 	mov	r2, #3
   15cf8:	e59f137c 	ldr	r1, [pc, #892]	; 1607c <readConfigFile(cMemory)+0x3a0>
   15cfc:	e1a00006 	mov	r0, r6
   15d00:	eb000a13 	bl	18554 <memcpy>
	char * result = NULL;


	configData.open("configuration.txt");
   15d04:	e1a00004 	mov	r0, r4
   15d08:	e59f1370 	ldr	r1, [pc, #880]	; 16080 <readConfigFile(cMemory)+0x3a4>
   15d0c:	eb000796 	bl	17b6c <cMemory::open(char*)>
	
	//Get the 'Log Sensor Data' parameter
	if(!configData.readLine(fileData))error=1;
   15d10:	e1a00004 	mov	r0, r4
   15d14:	e1a0100d 	mov	r1, sp
   15d18:	eb0007a1 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15d1c:	e1a01006 	mov	r1, r6


	configData.open("configuration.txt");
	
	//Get the 'Log Sensor Data' parameter
	if(!configData.readLine(fileData))error=1;
   15d20:	e1a05000 	mov	r5, r0
	result = strtok(fileData, delim);
   15d24:	e1a0000d 	mov	r0, sp
   15d28:	eb0012a3 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15d2c:	e1a01006 	mov	r1, r6
   15d30:	e3a00000 	mov	r0, #0
   15d34:	eb0012a0 	bl	1a7bc <strtok>
	configuration.log_sensor = strtol((const char *)result, NULL, 10);
   15d38:	e3a01000 	mov	r1, #0
   15d3c:	e3a0200a 	mov	r2, #10
   15d40:	eb001347 	bl	1aa64 <strtol>
   15d44:	e59f3338 	ldr	r3, [pc, #824]	; 16084 <readConfigFile(cMemory)+0x3a8>

	//Get the 'Log GPS Data' parameter
	if(!configData.readLine(fileData))error=1;
   15d48:	e1a0100d 	mov	r1, sp
	
	//Get the 'Log Sensor Data' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.log_sensor = strtol((const char *)result, NULL, 10);
   15d4c:	e5c30000 	strb	r0, [r3]

	//Get the 'Log GPS Data' parameter
	if(!configData.readLine(fileData))error=1;
   15d50:	e1a00004 	mov	r0, r4
   15d54:	eb000792 	bl	17ba4 <cMemory::readLine(char*)>
   15d58:	e3500000 	cmp	r0, #0
   15d5c:	03a04001 	moveq	r4, #1
   15d60:	0a000001 	beq	15d6c <readConfigFile(cMemory)+0x90>
	configData.close();
}

void readConfigFile(cMemory configData){
	char fileData[20];
	char error=0;
   15d64:	e2754001 	rsbs	r4, r5, #1
   15d68:	33a04000 	movcc	r4, #0
	result = strtok(NULL, delim);
	configuration.log_sensor = strtol((const char *)result, NULL, 10);

	//Get the 'Log GPS Data' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
   15d6c:	e1a01006 	mov	r1, r6
   15d70:	e1a0000d 	mov	r0, sp
   15d74:	eb001290 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15d78:	e1a01006 	mov	r1, r6
   15d7c:	e3a00000 	mov	r0, #0
   15d80:	eb00128d 	bl	1a7bc <strtok>
	configuration.log_gps = strtol((const char *)result, NULL, 10);	
   15d84:	e3a0200a 	mov	r2, #10
   15d88:	e3a01000 	mov	r1, #0
   15d8c:	eb001334 	bl	1aa64 <strtol>
   15d90:	e59f72ec 	ldr	r7, [pc, #748]	; 16084 <readConfigFile(cMemory)+0x3a8>

	//Get the 'Accelerometer Range' parameter
	if(!configData.readLine(fileData))error=1;
   15d94:	e1a0100d 	mov	r1, sp

	//Get the 'Log GPS Data' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.log_gps = strtol((const char *)result, NULL, 10);	
   15d98:	e5c70001 	strb	r0, [r7, #1]

	//Get the 'Accelerometer Range' parameter
	if(!configData.readLine(fileData))error=1;
   15d9c:	e28d002c 	add	r0, sp, #44	; 0x2c
   15da0:	eb00077f 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15da4:	e1a01006 	mov	r1, r6
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.log_gps = strtol((const char *)result, NULL, 10);	

	//Get the 'Accelerometer Range' parameter
	if(!configData.readLine(fileData))error=1;
   15da8:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15dac:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.log_gps = strtol((const char *)result, NULL, 10);	

	//Get the 'Accelerometer Range' parameter
	if(!configData.readLine(fileData))error=1;
   15db0:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15db4:	eb001280 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15db8:	e1a01006 	mov	r1, r6
   15dbc:	e3a00000 	mov	r0, #0
   15dc0:	eb00127d 	bl	1a7bc <strtok>
	configuration.range_accel = strtol((const char *)result, NULL, 10);	
   15dc4:	e3a0200a 	mov	r2, #10
   15dc8:	e3a01000 	mov	r1, #0
   15dcc:	eb001324 	bl	1aa64 <strtol>

	//Get the 'Compass Range' parameter
	if(!configData.readLine(fileData))error=1;
   15dd0:	e1a0100d 	mov	r1, sp

	//Get the 'Accelerometer Range' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.range_accel = strtol((const char *)result, NULL, 10);	
   15dd4:	e5c70002 	strb	r0, [r7, #2]

	//Get the 'Compass Range' parameter
	if(!configData.readLine(fileData))error=1;
   15dd8:	e28d002c 	add	r0, sp, #44	; 0x2c
   15ddc:	eb000770 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15de0:	e1a01006 	mov	r1, r6
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.range_accel = strtol((const char *)result, NULL, 10);	

	//Get the 'Compass Range' parameter
	if(!configData.readLine(fileData))error=1;
   15de4:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15de8:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.range_accel = strtol((const char *)result, NULL, 10);	

	//Get the 'Compass Range' parameter
	if(!configData.readLine(fileData))error=1;
   15dec:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15df0:	eb001271 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15df4:	e1a01006 	mov	r1, r6
   15df8:	e3a00000 	mov	r0, #0
   15dfc:	eb00126e 	bl	1a7bc <strtok>
	configuration.range_compass = strtol((const char *)result, NULL, 10);
   15e00:	e3a0200a 	mov	r2, #10
   15e04:	e3a01000 	mov	r1, #0
   15e08:	eb001315 	bl	1aa64 <strtol>

	//Get the 'Enabled GPS Messages' parameter
	if(!configData.readLine(fileData))error=1;
   15e0c:	e1a0100d 	mov	r1, sp

	//Get the 'Compass Range' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.range_compass = strtol((const char *)result, NULL, 10);
   15e10:	e5e70003 	strb	r0, [r7, #3]!

	//Get the 'Enabled GPS Messages' parameter
	if(!configData.readLine(fileData))error=1;
   15e14:	e28d002c 	add	r0, sp, #44	; 0x2c
   15e18:	eb000761 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15e1c:	e1a01006 	mov	r1, r6
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.range_compass = strtol((const char *)result, NULL, 10);

	//Get the 'Enabled GPS Messages' parameter
	if(!configData.readLine(fileData))error=1;
   15e20:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15e24:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.range_compass = strtol((const char *)result, NULL, 10);

	//Get the 'Enabled GPS Messages' parameter
	if(!configData.readLine(fileData))error=1;
   15e28:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15e2c:	eb001262 	bl	1a7bc <strtok>
   15e30:	e1a05000 	mov	r5, r0
	while(result!=NULL){
   15e34:	ea000007 	b	15e58 <readConfigFile(cMemory)+0x17c>
		result = strtok(NULL, delim);
   15e38:	e1a01006 	mov	r1, r6
   15e3c:	e3a00000 	mov	r0, #0
   15e40:	eb00125d 	bl	1a7bc <strtok>
		configuration.gps_messages[index++]=strtol((const char *)result, NULL, 10);
   15e44:	e3a01000 	mov	r1, #0
   15e48:	e3a0200a 	mov	r2, #10

	//Get the 'Enabled GPS Messages' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	while(result!=NULL){
		result = strtok(NULL, delim);
   15e4c:	e1a05000 	mov	r5, r0
		configuration.gps_messages[index++]=strtol((const char *)result, NULL, 10);
   15e50:	eb001303 	bl	1aa64 <strtol>
   15e54:	e5e70001 	strb	r0, [r7, #1]!
	configuration.range_compass = strtol((const char *)result, NULL, 10);

	//Get the 'Enabled GPS Messages' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	while(result!=NULL){
   15e58:	e3550000 	cmp	r5, #0
   15e5c:	1afffff5 	bne	15e38 <readConfigFile(cMemory)+0x15c>
		result = strtok(NULL, delim);
		configuration.gps_messages[index++]=strtol((const char *)result, NULL, 10);
	}
	
	//Get the 'Euler Format' parameter
	if(!configData.readLine(fileData))error=1;
   15e60:	e1a0100d 	mov	r1, sp
   15e64:	e28d002c 	add	r0, sp, #44	; 0x2c
   15e68:	eb00074d 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15e6c:	e28d1014 	add	r1, sp, #20
		result = strtok(NULL, delim);
		configuration.gps_messages[index++]=strtol((const char *)result, NULL, 10);
	}
	
	//Get the 'Euler Format' parameter
	if(!configData.readLine(fileData))error=1;
   15e70:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15e74:	e1a0000d 	mov	r0, sp
		result = strtok(NULL, delim);
		configuration.gps_messages[index++]=strtol((const char *)result, NULL, 10);
	}
	
	//Get the 'Euler Format' parameter
	if(!configData.readLine(fileData))error=1;
   15e78:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15e7c:	eb00124e 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15e80:	e28d1014 	add	r1, sp, #20
   15e84:	e1a00005 	mov	r0, r5
   15e88:	eb00124b 	bl	1a7bc <strtok>
	configuration.output_euler = strtol((const char *)result, NULL, 10);
   15e8c:	e3a0200a 	mov	r2, #10
   15e90:	e1a01005 	mov	r1, r5
   15e94:	eb0012f2 	bl	1aa64 <strtol>
   15e98:	e59f61e4 	ldr	r6, [pc, #484]	; 16084 <readConfigFile(cMemory)+0x3a8>
	
	//Get the 'Output messages' parameter
	if(!configData.readLine(fileData))error=1;
   15e9c:	e1a0100d 	mov	r1, sp
	
	//Get the 'Euler Format' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.output_euler = strtol((const char *)result, NULL, 10);
   15ea0:	e5c6000b 	strb	r0, [r6, #11]
	
	//Get the 'Output messages' parameter
	if(!configData.readLine(fileData))error=1;
   15ea4:	e28d002c 	add	r0, sp, #44	; 0x2c
   15ea8:	eb00073d 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15eac:	e28d1014 	add	r1, sp, #20
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.output_euler = strtol((const char *)result, NULL, 10);
	
	//Get the 'Output messages' parameter
	if(!configData.readLine(fileData))error=1;
   15eb0:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15eb4:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.output_euler = strtol((const char *)result, NULL, 10);
	
	//Get the 'Output messages' parameter
	if(!configData.readLine(fileData))error=1;
   15eb8:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15ebc:	eb00123e 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15ec0:	e28d1014 	add	r1, sp, #20
   15ec4:	e1a00005 	mov	r0, r5
   15ec8:	eb00123b 	bl	1a7bc <strtok>
	configuration.output_messages = strtol((const char *)result, NULL, 10);
   15ecc:	e3a0200a 	mov	r2, #10
   15ed0:	e1a01005 	mov	r1, r5
   15ed4:	eb0012e2 	bl	1aa64 <strtol>
	
	//Get the 'Accel X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15ed8:	e1a0100d 	mov	r1, sp
	
	//Get the 'Output messages' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.output_messages = strtol((const char *)result, NULL, 10);
   15edc:	e5c6000c 	strb	r0, [r6, #12]
	
	//Get the 'Accel X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15ee0:	e28d002c 	add	r0, sp, #44	; 0x2c
   15ee4:	eb00072e 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15ee8:	e28d1014 	add	r1, sp, #20
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.output_messages = strtol((const char *)result, NULL, 10);
	
	//Get the 'Accel X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15eec:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15ef0:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.output_messages = strtol((const char *)result, NULL, 10);
	
	//Get the 'Accel X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15ef4:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15ef8:	eb00122f 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15efc:	e28d1014 	add	r1, sp, #20
   15f00:	e1a00005 	mov	r0, r5
   15f04:	eb00122c 	bl	1a7bc <strtok>
	configuration.cal_ax = strtol((const char *)result, NULL, 10);	
   15f08:	e3a0200a 	mov	r2, #10
   15f0c:	e1a01005 	mov	r1, r5
   15f10:	eb0012d3 	bl	1aa64 <strtol>

	//Get the 'Accel Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f14:	e1a0100d 	mov	r1, sp
	
	//Get the 'Accel X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_ax = strtol((const char *)result, NULL, 10);	
   15f18:	e5860010 	str	r0, [r6, #16]

	//Get the 'Accel Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f1c:	e28d002c 	add	r0, sp, #44	; 0x2c
   15f20:	eb00071f 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15f24:	e28d1014 	add	r1, sp, #20
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_ax = strtol((const char *)result, NULL, 10);	

	//Get the 'Accel Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f28:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15f2c:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_ax = strtol((const char *)result, NULL, 10);	

	//Get the 'Accel Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f30:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15f34:	eb001220 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15f38:	e28d1014 	add	r1, sp, #20
   15f3c:	e1a00005 	mov	r0, r5
   15f40:	eb00121d 	bl	1a7bc <strtok>
	configuration.cal_ay = strtol((const char *)result, NULL, 10);		
   15f44:	e3a0200a 	mov	r2, #10
   15f48:	e1a01005 	mov	r1, r5
   15f4c:	eb0012c4 	bl	1aa64 <strtol>
	
	//Get the 'Accel Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f50:	e1a0100d 	mov	r1, sp

	//Get the 'Accel Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_ay = strtol((const char *)result, NULL, 10);		
   15f54:	e5860014 	str	r0, [r6, #20]
	
	//Get the 'Accel Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f58:	e28d002c 	add	r0, sp, #44	; 0x2c
   15f5c:	eb000710 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15f60:	e28d1014 	add	r1, sp, #20
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_ay = strtol((const char *)result, NULL, 10);		
	
	//Get the 'Accel Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f64:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15f68:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_ay = strtol((const char *)result, NULL, 10);		
	
	//Get the 'Accel Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f6c:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15f70:	eb001211 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15f74:	e28d1014 	add	r1, sp, #20
   15f78:	e1a00005 	mov	r0, r5
   15f7c:	eb00120e 	bl	1a7bc <strtok>
	configuration.cal_az = strtof((const char *)result, NULL);	
   15f80:	e1a01005 	mov	r1, r5
   15f84:	eb0011f9 	bl	1a770 <strtof>

	//Get the 'Gyro X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f88:	e1a0100d 	mov	r1, sp
	
	//Get the 'Accel Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_az = strtof((const char *)result, NULL);	
   15f8c:	e5860018 	str	r0, [r6, #24]

	//Get the 'Gyro X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f90:	e28d002c 	add	r0, sp, #44	; 0x2c
   15f94:	eb000702 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15f98:	e28d1014 	add	r1, sp, #20
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_az = strtof((const char *)result, NULL);	

	//Get the 'Gyro X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15f9c:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15fa0:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_az = strtof((const char *)result, NULL);	

	//Get the 'Gyro X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15fa4:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15fa8:	eb001203 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15fac:	e28d1014 	add	r1, sp, #20
   15fb0:	e1a00005 	mov	r0, r5
   15fb4:	eb001200 	bl	1a7bc <strtok>
	configuration.cal_gx = strtol((const char *)result, NULL, 10);	
   15fb8:	e3a0200a 	mov	r2, #10
   15fbc:	e1a01005 	mov	r1, r5
   15fc0:	eb0012a7 	bl	1aa64 <strtol>

	//Get the 'Gyro Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15fc4:	e1a0100d 	mov	r1, sp

	//Get the 'Gyro X Calibration' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_gx = strtol((const char *)result, NULL, 10);	
   15fc8:	e586001c 	str	r0, [r6, #28]

	//Get the 'Gyro Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15fcc:	e28d002c 	add	r0, sp, #44	; 0x2c
   15fd0:	eb0006f3 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   15fd4:	e28d1014 	add	r1, sp, #20
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_gx = strtol((const char *)result, NULL, 10);	

	//Get the 'Gyro Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15fd8:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   15fdc:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_gx = strtol((const char *)result, NULL, 10);	

	//Get the 'Gyro Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   15fe0:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   15fe4:	eb0011f4 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   15fe8:	e28d1014 	add	r1, sp, #20
   15fec:	e1a00005 	mov	r0, r5
   15ff0:	eb0011f1 	bl	1a7bc <strtok>
	configuration.cal_gy = strtol((const char *)result, NULL, 10);		
   15ff4:	e3a0200a 	mov	r2, #10
   15ff8:	e1a01005 	mov	r1, r5
   15ffc:	eb001298 	bl	1aa64 <strtol>
	
	//Get the 'Gyro Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   16000:	e1a0100d 	mov	r1, sp

	//Get the 'Gyro Y Calibration' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_gy = strtol((const char *)result, NULL, 10);		
   16004:	e5860020 	str	r0, [r6, #32]
	
	//Get the 'Gyro Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   16008:	e28d002c 	add	r0, sp, #44	; 0x2c
   1600c:	eb0006e4 	bl	17ba4 <cMemory::readLine(char*)>
	result = strtok(fileData, delim);
   16010:	e28d1014 	add	r1, sp, #20
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_gy = strtol((const char *)result, NULL, 10);		
	
	//Get the 'Gyro Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   16014:	e3500000 	cmp	r0, #0
	result = strtok(fileData, delim);
   16018:	e1a0000d 	mov	r0, sp
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_gy = strtol((const char *)result, NULL, 10);		
	
	//Get the 'Gyro Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
   1601c:	03a04001 	moveq	r4, #1
	result = strtok(fileData, delim);
   16020:	eb0011e5 	bl	1a7bc <strtok>
	result = strtok(NULL, delim);
   16024:	e28d1014 	add	r1, sp, #20
   16028:	e1a00005 	mov	r0, r5
   1602c:	eb0011e2 	bl	1a7bc <strtok>
	configuration.cal_gz = strtol((const char *)result, NULL, 10);	
   16030:	e1a01005 	mov	r1, r5
   16034:	e3a0200a 	mov	r2, #10
   16038:	eb001289 	bl	1aa64 <strtol>

	if(error==1){
   1603c:	e3540001 	cmp	r4, #1
	
	//Get the 'Gyro Z Calibration' parameter
	if(!configData.readLine(fileData))error=1;
	result = strtok(fileData, delim);
	result = strtok(NULL, delim);
	configuration.cal_gz = strtol((const char *)result, NULL, 10);	
   16040:	e5860024 	str	r0, [r6, #36]	; 0x24

	if(error==1){
   16044:	1a000006 	bne	16064 <readConfigFile(cMemory)+0x388>
		rprintf("Invalid configuration.txt file");
   16048:	e59f0038 	ldr	r0, [pc, #56]	; 16088 <readConfigFile(cMemory)+0x3ac>
   1604c:	ebffe87c 	bl	10244 <rprintf>
		configData.close();
   16050:	e28d002c 	add	r0, sp, #44	; 0x2c
   16054:	eb0006b9 	bl	17b40 <cMemory::close()>
		memoryDelete("configuration.txt");
   16058:	e59f0020 	ldr	r0, [pc, #32]	; 16080 <readConfigFile(cMemory)+0x3a4>
   1605c:	eb0006e9 	bl	17c08 <memoryDelete(char*)>
		reset();
   16060:	ebfffab5 	bl	14b3c <reset()>
	}
	configData.close();
   16064:	e28d002c 	add	r0, sp, #44	; 0x2c
   16068:	eb0006b4 	bl	17b40 <cMemory::close()>
}
   1606c:	e28dd018 	add	sp, sp, #24
   16070:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   16074:	e28dd010 	add	sp, sp, #16
   16078:	e12fff1e 	bx	lr
   1607c:	0002632d 	.word	0x0002632d
   16080:	0002628c 	.word	0x0002628c
   16084:	40001024 	.word	0x40001024
   16088:	0002630e 	.word	0x0002630e

0001608c <enablePrompt()>:

char enablePrompt(void)
{
   1608c:	e92d4010 	push	{r4, lr}
	char input;
	rprintf("Press 1 to enable or 0 to disable.\n");
   16090:	e59f0028 	ldr	r0, [pc, #40]	; 160c0 <enablePrompt()+0x34>
   16094:	ebffe86a 	bl	10244 <rprintf>
	rprintf("Selection: ");
   16098:	e59f0024 	ldr	r0, [pc, #36]	; 160c4 <enablePrompt()+0x38>
   1609c:	ebffe868 	bl	10244 <rprintf>
	input = getc0();
   160a0:	ebffe94d 	bl	105dc <getc0>
   160a4:	e20040ff 	and	r4, r0, #255	; 0xff
	rprintf("%c\n", input);
   160a8:	e1a01004 	mov	r1, r4
   160ac:	e59f0014 	ldr	r0, [pc, #20]	; 160c8 <enablePrompt()+0x3c>
   160b0:	ebffe863 	bl	10244 <rprintf>
	return input;
}
   160b4:	e1a00004 	mov	r0, r4
   160b8:	e8bd4010 	pop	{r4, lr}
   160bc:	e12fff1e 	bx	lr
   160c0:	00026330 	.word	0x00026330
   160c4:	00026568 	.word	0x00026568
   160c8:	00026354 	.word	0x00026354

000160cc <saveConfigData(cMemory)>:

void saveConfigData(cMemory configData)
{
   160cc:	e24dd010 	sub	sp, sp, #16
   160d0:	e92d4070 	push	{r4, r5, r6, lr}
	sprintf(log_string, "log_sensor=%d\nlog_gps=%d\nrange_accel=%d\nrange_compass=%d\nmsgs=%d,%d,%d,%d,%d,%d\neuler=%d\nserial=%d\n",
			configuration.log_sensor, configuration.log_gps, configuration.range_accel,
			configuration.range_compass, configuration.gps_messages[0],configuration.gps_messages[1],configuration.gps_messages[2],
			configuration.gps_messages[3],configuration.gps_messages[4],configuration.gps_messages[5],
			configuration.output_euler, configuration.output_messages);	
   160d4:	e59f40d0 	ldr	r4, [pc, #208]	; 161ac <saveConfigData(cMemory)+0xe0>
	rprintf("%c\n", input);
	return input;
}

void saveConfigData(cMemory configData)
{
   160d8:	e24dd028 	sub	sp, sp, #40	; 0x28
   160dc:	e28d5038 	add	r5, sp, #56	; 0x38
   160e0:	e885000f 	stm	r5, {r0, r1, r2, r3}
	sprintf(log_string, "log_sensor=%d\nlog_gps=%d\nrange_accel=%d\nrange_compass=%d\nmsgs=%d,%d,%d,%d,%d,%d\neuler=%d\nserial=%d\n",
			configuration.log_sensor, configuration.log_gps, configuration.range_accel,
			configuration.range_compass, configuration.gps_messages[0],configuration.gps_messages[1],configuration.gps_messages[2],
			configuration.gps_messages[3],configuration.gps_messages[4],configuration.gps_messages[5],
			configuration.output_euler, configuration.output_messages);	
   160e4:	e5d41002 	ldrb	r1, [r4, #2]
   160e8:	e58d1000 	str	r1, [sp]
   160ec:	e5d41003 	ldrb	r1, [r4, #3]
   160f0:	e58d1004 	str	r1, [sp, #4]
   160f4:	e5d41004 	ldrb	r1, [r4, #4]
   160f8:	e58d1008 	str	r1, [sp, #8]
   160fc:	e5d41005 	ldrb	r1, [r4, #5]
   16100:	e58d100c 	str	r1, [sp, #12]
   16104:	e5d41006 	ldrb	r1, [r4, #6]
   16108:	e58d1010 	str	r1, [sp, #16]
   1610c:	e5d41007 	ldrb	r1, [r4, #7]
   16110:	e58d1014 	str	r1, [sp, #20]
   16114:	e5d41008 	ldrb	r1, [r4, #8]
   16118:	e58d1018 	str	r1, [sp, #24]
   1611c:	e5d41009 	ldrb	r1, [r4, #9]
   16120:	e58d101c 	str	r1, [sp, #28]
   16124:	e5d4100b 	ldrb	r1, [r4, #11]
   16128:	e58d1020 	str	r1, [sp, #32]
   1612c:	e5d4100c 	ldrb	r1, [r4, #12]
   16130:	e2846028 	add	r6, r4, #40	; 0x28
   16134:	e5d42000 	ldrb	r2, [r4]
   16138:	e5d43001 	ldrb	r3, [r4, #1]
   1613c:	e58d1024 	str	r1, [sp, #36]	; 0x24
   16140:	e1a00006 	mov	r0, r6
   16144:	e59f1064 	ldr	r1, [pc, #100]	; 161b0 <saveConfigData(cMemory)+0xe4>
   16148:	eb00098f 	bl	1878c <sprintf>
	//rprintf("Saving...\n%s", log_string);
	configData.save(log_string);
   1614c:	e1a01006 	mov	r1, r6
   16150:	e1a00005 	mov	r0, r5
   16154:	eb000658 	bl	17abc <cMemory::save(char*)>
	
	sprintf(log_string, "cal_ax=%d\ncal_ay=%d\ncal_az=%5.2f\ncal_gx=%d\ncal_gy=%d\ncal_gz=%d\n",
			configuration.cal_ax, configuration.cal_ay, configuration.cal_az,
			configuration.cal_gx, configuration.cal_gy, configuration.cal_gz);
   16158:	e5940018 	ldr	r0, [r4, #24]
   1615c:	eb003a32 	bl	24a2c <__aeabi_f2d>
   16160:	e594301c 	ldr	r3, [r4, #28]
   16164:	e58d3008 	str	r3, [sp, #8]
   16168:	e5943020 	ldr	r3, [r4, #32]
   1616c:	e58d300c 	str	r3, [sp, #12]
   16170:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   16174:	e88d0003 	stm	sp, {r0, r1}
   16178:	e58d3010 	str	r3, [sp, #16]
   1617c:	e2842010 	add	r2, r4, #16
   16180:	e1a00006 	mov	r0, r6
   16184:	e59f1028 	ldr	r1, [pc, #40]	; 161b4 <saveConfigData(cMemory)+0xe8>
   16188:	e892000c 	ldm	r2, {r2, r3}
   1618c:	eb00097e 	bl	1878c <sprintf>
	configData.save(log_string);
   16190:	e1a00005 	mov	r0, r5
   16194:	e1a01006 	mov	r1, r6
   16198:	eb000647 	bl	17abc <cMemory::save(char*)>
}
   1619c:	e28dd028 	add	sp, sp, #40	; 0x28
   161a0:	e8bd4070 	pop	{r4, r5, r6, lr}
   161a4:	e28dd010 	add	sp, sp, #16
   161a8:	e12fff1e 	bx	lr
   161ac:	40001024 	.word	0x40001024
   161b0:	00026358 	.word	0x00026358
   161b4:	000263bc 	.word	0x000263bc

000161b8 <createConfigFile(cMemory)>:
	configData.close();
	configData.open("configuration.txt");
	saveConfigData(configData);
}

void createConfigFile(cMemory configData){
   161b8:	e24dd010 	sub	sp, sp, #16
   161bc:	e92d4010 	push	{r4, lr}
   161c0:	e24dd014 	sub	sp, sp, #20
   161c4:	e28d401c 	add	r4, sp, #28
   161c8:	e884000f 	stm	r4, {r0, r1, r2, r3}
	configData.create("configuration.txt");
   161cc:	e59f1044 	ldr	r1, [pc, #68]	; 16218 <createConfigFile(cMemory)+0x60>
   161d0:	e1a00004 	mov	r0, r4
   161d4:	eb00062e 	bl	17a94 <cMemory::create(char const*)>
	
	configData.open();
   161d8:	e1a00004 	mov	r0, r4
   161dc:	eb00065c 	bl	17b54 <cMemory::open()>
	saveConfigData(configData);
   161e0:	e28de02c 	add	lr, sp, #44	; 0x2c
   161e4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   161e8:	e1a0c00d 	mov	ip, sp
   161ec:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   161f0:	e59e3000 	ldr	r3, [lr]
   161f4:	e58c3000 	str	r3, [ip]
   161f8:	e894000f 	ldm	r4, {r0, r1, r2, r3}
   161fc:	ebffffb2 	bl	160cc <saveConfigData(cMemory)>
	configData.close();
   16200:	e1a00004 	mov	r0, r4
   16204:	eb00064d 	bl	17b40 <cMemory::close()>
}
   16208:	e28dd014 	add	sp, sp, #20
   1620c:	e8bd4010 	pop	{r4, lr}
   16210:	e28dd010 	add	sp, sp, #16
   16214:	e12fff1e 	bx	lr
   16218:	0002628c 	.word	0x0002628c

0001621c <configMenu(cMemory)>:
	configuration.cal_gx=0;
	configuration.cal_gy=0;
	configuration.cal_gz=0;
}

void configMenu(cMemory configData){
   1621c:	e24dd010 	sub	sp, sp, #16
   16220:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	while(!exit){
		rprintf("\n- Ultimate IMU Configuration -\n");
		rprintf("- Version %d.%d -\n", major_version, minor_version);
		rprintf("_______________________________\n");
		rprintf("1.) Log Sensor Data ");
			if(configuration.log_sensor)rprintf("(Enabled)\n");
   16224:	e59f44e8 	ldr	r4, [pc, #1256]	; 16714 <configMenu(cMemory)+0x4f8>
	configuration.cal_gx=0;
	configuration.cal_gy=0;
	configuration.cal_gz=0;
}

void configMenu(cMemory configData){
   16228:	e24dd014 	sub	sp, sp, #20
   1622c:	e28dc028 	add	ip, sp, #40	; 0x28
   16230:	e98c000f 	stmib	ip, {r0, r1, r2, r3}
	char selection=0;
	char exit=0;

	while(!exit){
		rprintf("\n- Ultimate IMU Configuration -\n");
		rprintf("- Version %d.%d -\n", major_version, minor_version);
   16234:	e59f64dc 	ldr	r6, [pc, #1244]	; 16718 <configMenu(cMemory)+0x4fc>
   16238:	e1a05004 	mov	r5, r4

void configMenu(cMemory configData){
	char selection=0;
	char exit=0;

	while(!exit){
   1623c:	ea000112 	b	1668c <configMenu(cMemory)+0x470>
		rprintf("\n- Ultimate IMU Configuration -\n");
		rprintf("- Version %d.%d -\n", major_version, minor_version);
		rprintf("_______________________________\n");
		rprintf("1.) Log Sensor Data ");
			if(configuration.log_sensor)rprintf("(Enabled)\n");
			else rprintf("(Disabled\n");
   16240:	e59f04d4 	ldr	r0, [pc, #1236]	; 1671c <configMenu(cMemory)+0x500>
   16244:	ebffe7fe 	bl	10244 <rprintf>
		rprintf("2.) Log GPS Data ");
   16248:	e59f04d0 	ldr	r0, [pc, #1232]	; 16720 <configMenu(cMemory)+0x504>
   1624c:	ebffe7fc 	bl	10244 <rprintf>
			if(configuration.log_gps)rprintf("(Enabled)\n");
   16250:	e5d53001 	ldrb	r3, [r5, #1]
   16254:	e3530000 	cmp	r3, #0
   16258:	159f04c4 	ldrne	r0, [pc, #1220]	; 16724 <configMenu(cMemory)+0x508>
			else rprintf("(Disabled)\n");		
   1625c:	059f04c4 	ldreq	r0, [pc, #1220]	; 16728 <configMenu(cMemory)+0x50c>
   16260:	ebffe7f7 	bl	10244 <rprintf>
		rprintf("3.) Accelerometer Range (+/-");
   16264:	e59f04c0 	ldr	r0, [pc, #1216]	; 1672c <configMenu(cMemory)+0x510>
   16268:	ebffe7f5 	bl	10244 <rprintf>
			if(configuration.range_accel==0)rprintf("2g)\n");
   1626c:	e5d43002 	ldrb	r3, [r4, #2]
   16270:	e3530000 	cmp	r3, #0
   16274:	059f04b4 	ldreq	r0, [pc, #1204]	; 16730 <configMenu(cMemory)+0x514>
   16278:	0a000005 	beq	16294 <configMenu(cMemory)+0x78>
			else if(configuration.range_accel==1)rprintf("4g)\n");
   1627c:	e3530001 	cmp	r3, #1
   16280:	059f04ac 	ldreq	r0, [pc, #1196]	; 16734 <configMenu(cMemory)+0x518>
   16284:	0a000002 	beq	16294 <configMenu(cMemory)+0x78>
			else if(configuration.range_accel==2)rprintf("8g)\n");
   16288:	e3530002 	cmp	r3, #2
   1628c:	059f04a4 	ldreq	r0, [pc, #1188]	; 16738 <configMenu(cMemory)+0x51c>
			else rprintf("16g)\n");
   16290:	159f04a4 	ldrne	r0, [pc, #1188]	; 1673c <configMenu(cMemory)+0x520>
   16294:	ebffe7ea 	bl	10244 <rprintf>
		rprintf("4.) Compass Range (+/-");
   16298:	e59f04a0 	ldr	r0, [pc, #1184]	; 16740 <configMenu(cMemory)+0x524>
   1629c:	ebffe7e8 	bl	10244 <rprintf>
			switch(configuration.range_compass){
   162a0:	e5d53003 	ldrb	r3, [r5, #3]
   162a4:	e3530007 	cmp	r3, #7
   162a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   162ac:	ea000017 	b	16310 <configMenu(cMemory)+0xf4>
   162b0:	000162d0 	.word	0x000162d0
   162b4:	000162d8 	.word	0x000162d8
   162b8:	000162e0 	.word	0x000162e0
   162bc:	000162e8 	.word	0x000162e8
   162c0:	000162f0 	.word	0x000162f0
   162c4:	000162f8 	.word	0x000162f8
   162c8:	00016300 	.word	0x00016300
   162cc:	00016308 	.word	0x00016308
				case 0:rprintf("0.7");
   162d0:	e59f046c 	ldr	r0, [pc, #1132]	; 16744 <configMenu(cMemory)+0x528>
   162d4:	ea00000c 	b	1630c <configMenu(cMemory)+0xf0>
					break;
				case 1:rprintf("1.0");
   162d8:	e59f0468 	ldr	r0, [pc, #1128]	; 16748 <configMenu(cMemory)+0x52c>
   162dc:	ea00000a 	b	1630c <configMenu(cMemory)+0xf0>
					break;
				case 2:rprintf("1.5");
   162e0:	e59f0464 	ldr	r0, [pc, #1124]	; 1674c <configMenu(cMemory)+0x530>
   162e4:	ea000008 	b	1630c <configMenu(cMemory)+0xf0>
					break;
				case 3:rprintf("2.0");
   162e8:	e59f0460 	ldr	r0, [pc, #1120]	; 16750 <configMenu(cMemory)+0x534>
   162ec:	ea000006 	b	1630c <configMenu(cMemory)+0xf0>
					break;
				case 4:rprintf("3.2");
   162f0:	e59f045c 	ldr	r0, [pc, #1116]	; 16754 <configMenu(cMemory)+0x538>
   162f4:	ea000004 	b	1630c <configMenu(cMemory)+0xf0>
					break;
				case 5:rprintf("3.8");
   162f8:	e59f0458 	ldr	r0, [pc, #1112]	; 16758 <configMenu(cMemory)+0x53c>
   162fc:	ea000002 	b	1630c <configMenu(cMemory)+0xf0>
					break;
				case 6:rprintf("4.5");
   16300:	e59f0454 	ldr	r0, [pc, #1108]	; 1675c <configMenu(cMemory)+0x540>
   16304:	ea000000 	b	1630c <configMenu(cMemory)+0xf0>
					break;
				case 7:rprintf("6.5");
   16308:	e59f0450 	ldr	r0, [pc, #1104]	; 16760 <configMenu(cMemory)+0x544>
   1630c:	ebffe7cc 	bl	10244 <rprintf>
					break;
				default: 
					break;
			}
			rprintf("Ga)\n");
   16310:	e59f044c 	ldr	r0, [pc, #1100]	; 16764 <configMenu(cMemory)+0x548>
   16314:	ebffe7ca 	bl	10244 <rprintf>
		rprintf("5.) GPS Messages (");
   16318:	e59f0448 	ldr	r0, [pc, #1096]	; 16768 <configMenu(cMemory)+0x54c>
   1631c:	ebffe7c8 	bl	10244 <rprintf>
			if(configuration.gps_messages[0])rprintf("GGA, ");
   16320:	e5d43004 	ldrb	r3, [r4, #4]
   16324:	e3530000 	cmp	r3, #0
   16328:	159f043c 	ldrne	r0, [pc, #1084]	; 1676c <configMenu(cMemory)+0x550>
   1632c:	1bffe7c4 	blne	10244 <rprintf>
			if(configuration.gps_messages[1])rprintf("GLL, ");
   16330:	e5d53005 	ldrb	r3, [r5, #5]
   16334:	e3530000 	cmp	r3, #0
   16338:	159f0430 	ldrne	r0, [pc, #1072]	; 16770 <configMenu(cMemory)+0x554>
   1633c:	1bffe7c0 	blne	10244 <rprintf>
			if(configuration.gps_messages[2])rprintf("GSA, ");
   16340:	e5d53006 	ldrb	r3, [r5, #6]
   16344:	e3530000 	cmp	r3, #0
   16348:	159f0424 	ldrne	r0, [pc, #1060]	; 16774 <configMenu(cMemory)+0x558>
   1634c:	1bffe7bc 	blne	10244 <rprintf>
			if(configuration.gps_messages[3])rprintf("GSV, ");
   16350:	e5d43007 	ldrb	r3, [r4, #7]
   16354:	e3530000 	cmp	r3, #0
   16358:	159f0418 	ldrne	r0, [pc, #1048]	; 16778 <configMenu(cMemory)+0x55c>
   1635c:	1bffe7b8 	blne	10244 <rprintf>
			if(configuration.gps_messages[4])rprintf("RMC, ");
   16360:	e5d53008 	ldrb	r3, [r5, #8]
   16364:	e3530000 	cmp	r3, #0
   16368:	159f040c 	ldrne	r0, [pc, #1036]	; 1677c <configMenu(cMemory)+0x560>
   1636c:	1bffe7b4 	blne	10244 <rprintf>
			if(configuration.gps_messages[5])rprintf("VTG, ");
   16370:	e5d53009 	ldrb	r3, [r5, #9]
   16374:	e3530000 	cmp	r3, #0
   16378:	159f0400 	ldrne	r0, [pc, #1024]	; 16780 <configMenu(cMemory)+0x564>
   1637c:	1bffe7b0 	blne	10244 <rprintf>
			rprintf(")\n");
   16380:	e59f03fc 	ldr	r0, [pc, #1020]	; 16784 <configMenu(cMemory)+0x568>
   16384:	ebffe7ae 	bl	10244 <rprintf>
		rprintf("6.) Calibrate IMU\n");
   16388:	e59f03f8 	ldr	r0, [pc, #1016]	; 16788 <configMenu(cMemory)+0x56c>
   1638c:	ebffe7ac 	bl	10244 <rprintf>
		rprintf("7.) Sensor Output (");
   16390:	e59f03f4 	ldr	r0, [pc, #1012]	; 1678c <configMenu(cMemory)+0x570>
   16394:	ebffe7aa 	bl	10244 <rprintf>
			if(configuration.output_euler)rprintf("Euler)\n");
   16398:	e5d4300b 	ldrb	r3, [r4, #11]
   1639c:	e3530000 	cmp	r3, #0
   163a0:	159f03e8 	ldrne	r0, [pc, #1000]	; 16790 <configMenu(cMemory)+0x574>
			else rprintf("Raw)\n");
   163a4:	059f03e8 	ldreq	r0, [pc, #1000]	; 16794 <configMenu(cMemory)+0x578>
   163a8:	ebffe7a5 	bl	10244 <rprintf>
		rprintf("8.) Serial Output Messages (");
   163ac:	e59f03e4 	ldr	r0, [pc, #996]	; 16798 <configMenu(cMemory)+0x57c>
   163b0:	ebffe7a3 	bl	10244 <rprintf>
			if(configuration.output_messages==0)rprintf("None)\n");
   163b4:	e5d5300c 	ldrb	r3, [r5, #12]
   163b8:	e3530000 	cmp	r3, #0
   163bc:	059f03d8 	ldreq	r0, [pc, #984]	; 1679c <configMenu(cMemory)+0x580>
   163c0:	0a000005 	beq	163dc <configMenu(cMemory)+0x1c0>
			else if(configuration.output_messages==1)rprintf("Sensor Data)\n");
   163c4:	e3530001 	cmp	r3, #1
   163c8:	059f03d0 	ldreq	r0, [pc, #976]	; 167a0 <configMenu(cMemory)+0x584>
   163cc:	0a000002 	beq	163dc <configMenu(cMemory)+0x1c0>
			else if(configuration.output_messages==2)rprintf("GPS Data)\n");
   163d0:	e3530002 	cmp	r3, #2
   163d4:	059f03c8 	ldreq	r0, [pc, #968]	; 167a4 <configMenu(cMemory)+0x588>
			else rprintf("Sensor and GPS data)\n");
   163d8:	159f03c8 	ldrne	r0, [pc, #968]	; 167a8 <configMenu(cMemory)+0x58c>
   163dc:	ebffe798 	bl	10244 <rprintf>
		rprintf("9.) Exit\n");
   163e0:	e59f03c4 	ldr	r0, [pc, #964]	; 167ac <configMenu(cMemory)+0x590>
   163e4:	ebffe796 	bl	10244 <rprintf>
		
		rprintf("\nSelection: ");
   163e8:	e59f03c0 	ldr	r0, [pc, #960]	; 167b0 <configMenu(cMemory)+0x594>
   163ec:	ebffe794 	bl	10244 <rprintf>
		selection=getc0();
   163f0:	ebffe879 	bl	105dc <getc0>
   163f4:	e20070ff 	and	r7, r0, #255	; 0xff
		rprintf("%c\n\n", selection);
   163f8:	e1a01007 	mov	r1, r7
   163fc:	e59f03b0 	ldr	r0, [pc, #944]	; 167b4 <configMenu(cMemory)+0x598>
		
		switch (selection)
   16400:	e2477031 	sub	r7, r7, #49	; 0x31
			else rprintf("Sensor and GPS data)\n");
		rprintf("9.) Exit\n");
		
		rprintf("\nSelection: ");
		selection=getc0();
		rprintf("%c\n\n", selection);
   16404:	ebffe78e 	bl	10244 <rprintf>
		
		switch (selection)
   16408:	e3570007 	cmp	r7, #7
   1640c:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
   16410:	ea0000ad 	b	166cc <configMenu(cMemory)+0x4b0>
   16414:	00016434 	.word	0x00016434
   16418:	00016454 	.word	0x00016454
   1641c:	00016474 	.word	0x00016474
   16420:	000164b4 	.word	0x000164b4
   16424:	000164fc 	.word	0x000164fc
   16428:	00016588 	.word	0x00016588
   1642c:	00016620 	.word	0x00016620
   16430:	00016648 	.word	0x00016648
		{
			case '1':
				rprintf("\nLog Sensor Data\n");
   16434:	e59f037c 	ldr	r0, [pc, #892]	; 167b8 <configMenu(cMemory)+0x59c>
   16438:	ebffe781 	bl	10244 <rprintf>
				selection = enablePrompt();
   1643c:	ebffff12 	bl	1608c <enablePrompt()>
				if(selection > '0')configuration.log_sensor=1;
   16440:	e3500030 	cmp	r0, #48	; 0x30
   16444:	83a03001 	movhi	r3, #1
				else configuration.log_sensor=0;
   16448:	93a03000 	movls	r3, #0
   1644c:	e5c43000 	strb	r3, [r4]
   16450:	ea00008d 	b	1668c <configMenu(cMemory)+0x470>
				break;
		
			case '2':
				rprintf("\nLog GPS Data\n");
   16454:	e59f0360 	ldr	r0, [pc, #864]	; 167bc <configMenu(cMemory)+0x5a0>
   16458:	ebffe779 	bl	10244 <rprintf>
				selection=enablePrompt();
   1645c:	ebffff0a 	bl	1608c <enablePrompt()>
				if(selection > '0')configuration.log_gps=1;
   16460:	e3500030 	cmp	r0, #48	; 0x30
   16464:	83a03001 	movhi	r3, #1
				else configuration.log_gps=0;				
   16468:	93a03000 	movls	r3, #0
   1646c:	e5c43001 	strb	r3, [r4, #1]
   16470:	ea000085 	b	1668c <configMenu(cMemory)+0x470>
				break;
		
			case '3':
				rprintf("\nAccelerometer Range\n");
   16474:	e59f0344 	ldr	r0, [pc, #836]	; 167c0 <configMenu(cMemory)+0x5a4>
   16478:	ebffe771 	bl	10244 <rprintf>
				rprintf("Select Range:\n1.)2g\n2.)4g\n3.)8g\n4.)16g\n");
   1647c:	e59f0340 	ldr	r0, [pc, #832]	; 167c4 <configMenu(cMemory)+0x5a8>
   16480:	ebffe76f 	bl	10244 <rprintf>
				rprintf("Selection: ");
   16484:	e59f033c 	ldr	r0, [pc, #828]	; 167c8 <configMenu(cMemory)+0x5ac>
   16488:	ebffe76d 	bl	10244 <rprintf>
				selection = getc0();
   1648c:	ebffe852 	bl	105dc <getc0>
   16490:	e20070ff 	and	r7, r0, #255	; 0xff
				rprintf("%c\n", selection);
   16494:	e1a01007 	mov	r1, r7
				if(selection > '0' && selection < '5'){
   16498:	e2477031 	sub	r7, r7, #49	; 0x31
   1649c:	e20770ff 	and	r7, r7, #255	; 0xff
			case '3':
				rprintf("\nAccelerometer Range\n");
				rprintf("Select Range:\n1.)2g\n2.)4g\n3.)8g\n4.)16g\n");
				rprintf("Selection: ");
				selection = getc0();
				rprintf("%c\n", selection);
   164a0:	e59f0324 	ldr	r0, [pc, #804]	; 167cc <configMenu(cMemory)+0x5b0>
   164a4:	ebffe766 	bl	10244 <rprintf>
				if(selection > '0' && selection < '5'){
   164a8:	e3570003 	cmp	r7, #3
					selection -='0';
					configuration.range_accel=selection-1;	//Get the bit setting for the g-scale
   164ac:	95c47002 	strbls	r7, [r4, #2]
   164b0:	ea000075 	b	1668c <configMenu(cMemory)+0x470>
				}
				break;
			
			case '4':
				rprintf("\nCompass Range\n");
   164b4:	e59f0314 	ldr	r0, [pc, #788]	; 167d0 <configMenu(cMemory)+0x5b4>
   164b8:	ebffe761 	bl	10244 <rprintf>
				rprintf("Select Range:\n1.) +/-0.7Ga\n2.) +/-1.0Ga\n3.) +/-1.5Ga\n 4.) +/-2.0Ga\n");
   164bc:	e59f0310 	ldr	r0, [pc, #784]	; 167d4 <configMenu(cMemory)+0x5b8>
   164c0:	ebffe75f 	bl	10244 <rprintf>
				rprintf("5.) +/-3.2Ga\n6.) +/-3.8Ga\n7.) +/-4.5Ga\n8.) +/-6.5Ga\n");
   164c4:	e59f030c 	ldr	r0, [pc, #780]	; 167d8 <configMenu(cMemory)+0x5bc>
   164c8:	ebffe75d 	bl	10244 <rprintf>
				rprintf("Selection: ");
   164cc:	e59f02f4 	ldr	r0, [pc, #756]	; 167c8 <configMenu(cMemory)+0x5ac>
   164d0:	ebffe75b 	bl	10244 <rprintf>
				selection = getc0();
   164d4:	ebffe840 	bl	105dc <getc0>
   164d8:	e20070ff 	and	r7, r0, #255	; 0xff
				rprintf("%c\n", selection);
   164dc:	e1a01007 	mov	r1, r7
				if(selection > '0' && selection < '9'){
   164e0:	e2477031 	sub	r7, r7, #49	; 0x31
   164e4:	e20770ff 	and	r7, r7, #255	; 0xff
				rprintf("\nCompass Range\n");
				rprintf("Select Range:\n1.) +/-0.7Ga\n2.) +/-1.0Ga\n3.) +/-1.5Ga\n 4.) +/-2.0Ga\n");
				rprintf("5.) +/-3.2Ga\n6.) +/-3.8Ga\n7.) +/-4.5Ga\n8.) +/-6.5Ga\n");
				rprintf("Selection: ");
				selection = getc0();
				rprintf("%c\n", selection);
   164e8:	e59f02dc 	ldr	r0, [pc, #732]	; 167cc <configMenu(cMemory)+0x5b0>
   164ec:	ebffe754 	bl	10244 <rprintf>
				if(selection > '0' && selection < '9'){
   164f0:	e3570007 	cmp	r7, #7
					selection -='0';
					configuration.range_compass = selection -1;
   164f4:	95c47003 	strbls	r7, [r4, #3]
   164f8:	ea000063 	b	1668c <configMenu(cMemory)+0x470>
				}
				break;
				
			case '5':
				rprintf("\nConfigure GPS Messages\n");
   164fc:	e59f02d8 	ldr	r0, [pc, #728]	; 167dc <configMenu(cMemory)+0x5c0>
   16500:	ebffe74f 	bl	10244 <rprintf>
   16504:	e59f82d4 	ldr	r8, [pc, #724]	; 167e0 <configMenu(cMemory)+0x5c4>
				for(int message=0; message<6; message++)
   16508:	e3a07000 	mov	r7, #0
				{
					if(message==0)rprintf("GGA Messages ");
   1650c:	e3570000 	cmp	r7, #0
   16510:	059f02cc 	ldreq	r0, [pc, #716]	; 167e4 <configMenu(cMemory)+0x5c8>
   16514:	0a00000e 	beq	16554 <configMenu(cMemory)+0x338>
					if(message==1)rprintf("GLL Messages ");
   16518:	e3570001 	cmp	r7, #1
   1651c:	059f02c4 	ldreq	r0, [pc, #708]	; 167e8 <configMenu(cMemory)+0x5cc>
   16520:	0a00000b 	beq	16554 <configMenu(cMemory)+0x338>
					if(message==2)rprintf("GSA Messages ");
   16524:	e3570002 	cmp	r7, #2
   16528:	059f02bc 	ldreq	r0, [pc, #700]	; 167ec <configMenu(cMemory)+0x5d0>
   1652c:	0a000008 	beq	16554 <configMenu(cMemory)+0x338>
					if(message==3)rprintf("GSV Messages ");
   16530:	e3570003 	cmp	r7, #3
   16534:	059f02b4 	ldreq	r0, [pc, #692]	; 167f0 <configMenu(cMemory)+0x5d4>
   16538:	0a000005 	beq	16554 <configMenu(cMemory)+0x338>
					if(message==4)rprintf("RMC Messages ");
   1653c:	e3570004 	cmp	r7, #4
   16540:	059f02ac 	ldreq	r0, [pc, #684]	; 167f4 <configMenu(cMemory)+0x5d8>
   16544:	0a000002 	beq	16554 <configMenu(cMemory)+0x338>
					if(message==5)rprintf("VTG Messages ");
   16548:	e3570005 	cmp	r7, #5
   1654c:	1a000001 	bne	16558 <configMenu(cMemory)+0x33c>
   16550:	e59f02a0 	ldr	r0, [pc, #672]	; 167f8 <configMenu(cMemory)+0x5dc>
   16554:	ebffe73a 	bl	10244 <rprintf>
					rprintf("%d\n", configuration.gps_messages[message]);
   16558:	e5d81000 	ldrb	r1, [r8]
   1655c:	e59f0298 	ldr	r0, [pc, #664]	; 167fc <configMenu(cMemory)+0x5e0>
   16560:	ebffe737 	bl	10244 <rprintf>
					selection = enablePrompt();
   16564:	ebfffec8 	bl	1608c <enablePrompt()>
				}
				break;
				
			case '5':
				rprintf("\nConfigure GPS Messages\n");
				for(int message=0; message<6; message++)
   16568:	e2877001 	add	r7, r7, #1
					if(message==3)rprintf("GSV Messages ");
					if(message==4)rprintf("RMC Messages ");
					if(message==5)rprintf("VTG Messages ");
					rprintf("%d\n", configuration.gps_messages[message]);
					selection = enablePrompt();
					if(selection > '0')configuration.gps_messages[message]=1;
   1656c:	e3500030 	cmp	r0, #48	; 0x30
   16570:	93a00000 	movls	r0, #0
   16574:	83a00001 	movhi	r0, #1
				}
				break;
				
			case '5':
				rprintf("\nConfigure GPS Messages\n");
				for(int message=0; message<6; message++)
   16578:	e3570006 	cmp	r7, #6
					if(message==3)rprintf("GSV Messages ");
					if(message==4)rprintf("RMC Messages ");
					if(message==5)rprintf("VTG Messages ");
					rprintf("%d\n", configuration.gps_messages[message]);
					selection = enablePrompt();
					if(selection > '0')configuration.gps_messages[message]=1;
   1657c:	e4c80001 	strb	r0, [r8], #1
				}
				break;
				
			case '5':
				rprintf("\nConfigure GPS Messages\n");
				for(int message=0; message<6; message++)
   16580:	1affffe1 	bne	1650c <configMenu(cMemory)+0x2f0>
   16584:	ea000040 	b	1668c <configMenu(cMemory)+0x470>
					else configuration.gps_messages[message]=0;
				}
				break;
				
			case '6':
				rprintf("\nCalibration\n");
   16588:	e59f0270 	ldr	r0, [pc, #624]	; 16800 <configMenu(cMemory)+0x5e4>
   1658c:	ebffe72c 	bl	10244 <rprintf>
				rprintf("Set the IMU in it's normal orientation and protect it from any movement.\n");
   16590:	e59f026c 	ldr	r0, [pc, #620]	; 16804 <configMenu(cMemory)+0x5e8>
   16594:	ebffe72a 	bl	10244 <rprintf>
				rprintf("Press any key to start calibration\n");
   16598:	e59f0268 	ldr	r0, [pc, #616]	; 16808 <configMenu(cMemory)+0x5ec>
   1659c:	ebffe728 	bl	10244 <rprintf>
				rprintf("When calibration is finished, the config menu will be presented and you may\n");
   165a0:	e59f0264 	ldr	r0, [pc, #612]	; 1680c <configMenu(cMemory)+0x5f0>
   165a4:	ebffe726 	bl	10244 <rprintf>
				rprintf("continue normal operation.\n");
   165a8:	e59f0260 	ldr	r0, [pc, #608]	; 16810 <configMenu(cMemory)+0x5f4>
   165ac:	ebffe724 	bl	10244 <rprintf>
				selection = getc0();
   165b0:	ebffe809 	bl	105dc <getc0>
				rprintf("Starting Calibration, don't move the device!\n");
   165b4:	e59f0258 	ldr	r0, [pc, #600]	; 16814 <configMenu(cMemory)+0x5f8>
   165b8:	ebffe721 	bl	10244 <rprintf>
				accelerometer.calibrate();
   165bc:	e59f0254 	ldr	r0, [pc, #596]	; 16818 <configMenu(cMemory)+0x5fc>
   165c0:	eb000149 	bl	16aec <cADXL345::calibrate()>
				gyro.calibrate();
   165c4:	e59f0250 	ldr	r0, [pc, #592]	; 1681c <configMenu(cMemory)+0x600>
   165c8:	eb000395 	bl	17424 <cITG3200::calibrate()>
				configuration.cal_ax=accelerometer.getXcal();
   165cc:	e59f0244 	ldr	r0, [pc, #580]	; 16818 <configMenu(cMemory)+0x5fc>
   165d0:	eb00013f 	bl	16ad4 <cADXL345::getXcal()>
   165d4:	e5840010 	str	r0, [r4, #16]
				configuration.cal_ay=accelerometer.getYcal();
   165d8:	e59f0238 	ldr	r0, [pc, #568]	; 16818 <configMenu(cMemory)+0x5fc>
   165dc:	eb00013e 	bl	16adc <cADXL345::getYcal()>
   165e0:	e5840014 	str	r0, [r4, #20]
				configuration.cal_az=accelerometer.getZcal();
   165e4:	e59f022c 	ldr	r0, [pc, #556]	; 16818 <configMenu(cMemory)+0x5fc>
   165e8:	eb00013d 	bl	16ae4 <cADXL345::getZcal()>
   165ec:	e5840018 	str	r0, [r4, #24]
				configuration.cal_gx=gyro.getXcal();
   165f0:	e59f0224 	ldr	r0, [pc, #548]	; 1681c <configMenu(cMemory)+0x600>
   165f4:	eb0003f0 	bl	175bc <cITG3200::getXcal()>
   165f8:	e584001c 	str	r0, [r4, #28]
				configuration.cal_gy=gyro.getYcal();
   165fc:	e59f0218 	ldr	r0, [pc, #536]	; 1681c <configMenu(cMemory)+0x600>
   16600:	eb0003ef 	bl	175c4 <cITG3200::getYcal()>
   16604:	e5840020 	str	r0, [r4, #32]
				configuration.cal_gz=gyro.getZcal();
   16608:	e59f020c 	ldr	r0, [pc, #524]	; 1681c <configMenu(cMemory)+0x600>
   1660c:	eb0003ee 	bl	175cc <cITG3200::getZcal()>
   16610:	e5840024 	str	r0, [r4, #36]	; 0x24
				rprintf("Finished!\n");
   16614:	e59f0204 	ldr	r0, [pc, #516]	; 16820 <configMenu(cMemory)+0x604>
   16618:	ebffe709 	bl	10244 <rprintf>
				break;
   1661c:	ea00001a 	b	1668c <configMenu(cMemory)+0x470>
				
			case '7':
				rprintf("\nChoose 'enable' for Euler Angle Output or 'disable' for Raw Output\n");
   16620:	e59f01fc 	ldr	r0, [pc, #508]	; 16824 <configMenu(cMemory)+0x608>
   16624:	ebffe706 	bl	10244 <rprintf>
				rprintf("Setting will apply to the log file data (if enabled) and the serial output (if enabled)\n");
   16628:	e59f01f8 	ldr	r0, [pc, #504]	; 16828 <configMenu(cMemory)+0x60c>
   1662c:	ebffe704 	bl	10244 <rprintf>
				selection = enablePrompt();
   16630:	ebfffe95 	bl	1608c <enablePrompt()>
				if(selection == '0')configuration.output_euler=0;
   16634:	e3500030 	cmp	r0, #48	; 0x30
   16638:	03a03000 	moveq	r3, #0
				else configuration.output_euler=1;
   1663c:	13a03001 	movne	r3, #1
   16640:	e5c4300b 	strb	r3, [r4, #11]
   16644:	ea000010 	b	1668c <configMenu(cMemory)+0x470>
				break;
		
			case '8':
				rprintf("\nChoose which messages to send to the serial port.\n");
   16648:	e59f01dc 	ldr	r0, [pc, #476]	; 1682c <configMenu(cMemory)+0x610>
   1664c:	ebffe6fc 	bl	10244 <rprintf>
				rprintf("Caution: The more messages that are enabled, the slower the sensors are updated!\n");
   16650:	e59f01d8 	ldr	r0, [pc, #472]	; 16830 <configMenu(cMemory)+0x614>
   16654:	ebffe6fa 	bl	10244 <rprintf>
				rprintf("1.) No messages\n2.) Sensor Data\n3.) GPS Data\n4.) Sensor and GPS Data\n");
   16658:	e59f01d4 	ldr	r0, [pc, #468]	; 16834 <configMenu(cMemory)+0x618>
   1665c:	ebffe6f8 	bl	10244 <rprintf>
				rprintf("Selection: ");
   16660:	e59f0160 	ldr	r0, [pc, #352]	; 167c8 <configMenu(cMemory)+0x5ac>
   16664:	ebffe6f6 	bl	10244 <rprintf>
				selection = getc0();
   16668:	ebffe7db 	bl	105dc <getc0>
   1666c:	e20070ff 	and	r7, r0, #255	; 0xff
				rprintf("%c\n", selection);
   16670:	e1a01007 	mov	r1, r7
				if(selection > '0' && selection < '5'){
   16674:	e2477031 	sub	r7, r7, #49	; 0x31
   16678:	e20770ff 	and	r7, r7, #255	; 0xff
				rprintf("\nChoose which messages to send to the serial port.\n");
				rprintf("Caution: The more messages that are enabled, the slower the sensors are updated!\n");
				rprintf("1.) No messages\n2.) Sensor Data\n3.) GPS Data\n4.) Sensor and GPS Data\n");
				rprintf("Selection: ");
				selection = getc0();
				rprintf("%c\n", selection);
   1667c:	e59f0148 	ldr	r0, [pc, #328]	; 167cc <configMenu(cMemory)+0x5b0>
   16680:	ebffe6ef 	bl	10244 <rprintf>
				if(selection > '0' && selection < '5'){
   16684:	e3570003 	cmp	r7, #3
					selection -= '0';
					configuration.output_messages = selection -1;
   16688:	95c4700c 	strbls	r7, [r4, #12]
void configMenu(cMemory configData){
	char selection=0;
	char exit=0;

	while(!exit){
		rprintf("\n- Ultimate IMU Configuration -\n");
   1668c:	e59f01a4 	ldr	r0, [pc, #420]	; 16838 <configMenu(cMemory)+0x61c>
   16690:	ebffe6eb 	bl	10244 <rprintf>
		rprintf("- Version %d.%d -\n", major_version, minor_version);
   16694:	e59f31a0 	ldr	r3, [pc, #416]	; 1683c <configMenu(cMemory)+0x620>
   16698:	e5d61000 	ldrb	r1, [r6]
   1669c:	e5d32000 	ldrb	r2, [r3]
   166a0:	e59f0198 	ldr	r0, [pc, #408]	; 16840 <configMenu(cMemory)+0x624>
   166a4:	ebffe6e6 	bl	10244 <rprintf>
		rprintf("_______________________________\n");
   166a8:	e59f0194 	ldr	r0, [pc, #404]	; 16844 <configMenu(cMemory)+0x628>
   166ac:	ebffe6e4 	bl	10244 <rprintf>
		rprintf("1.) Log Sensor Data ");
   166b0:	e59f0190 	ldr	r0, [pc, #400]	; 16848 <configMenu(cMemory)+0x62c>
   166b4:	ebffe6e2 	bl	10244 <rprintf>
			if(configuration.log_sensor)rprintf("(Enabled)\n");
   166b8:	e5d43000 	ldrb	r3, [r4]
   166bc:	e3530000 	cmp	r3, #0
   166c0:	159f005c 	ldrne	r0, [pc, #92]	; 16724 <configMenu(cMemory)+0x508>
   166c4:	1afffede 	bne	16244 <configMenu(cMemory)+0x28>
   166c8:	eafffedc 	b	16240 <configMenu(cMemory)+0x24>
			default:
				exit=1;
				break;
		}
	}
	configData.close();
   166cc:	e28d402c 	add	r4, sp, #44	; 0x2c
   166d0:	e1a00004 	mov	r0, r4
   166d4:	eb000519 	bl	17b40 <cMemory::close()>
	configData.open("configuration.txt");
   166d8:	e1a00004 	mov	r0, r4
   166dc:	e59f1168 	ldr	r1, [pc, #360]	; 1684c <configMenu(cMemory)+0x630>
   166e0:	eb000521 	bl	17b6c <cMemory::open(char*)>
	saveConfigData(configData);
   166e4:	e28de03c 	add	lr, sp, #60	; 0x3c
   166e8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
   166ec:	e1a0c00d 	mov	ip, sp
   166f0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
   166f4:	e59e3000 	ldr	r3, [lr]
   166f8:	e58c3000 	str	r3, [ip]
   166fc:	e894000f 	ldm	r4, {r0, r1, r2, r3}
   16700:	ebfffe71 	bl	160cc <saveConfigData(cMemory)>
}
   16704:	e28dd014 	add	sp, sp, #20
   16708:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1670c:	e28dd010 	add	sp, sp, #16
   16710:	e12fff1e 	bx	lr
   16714:	40001024 	.word	0x40001024
   16718:	40001022 	.word	0x40001022
   1671c:	00026407 	.word	0x00026407
   16720:	00026412 	.word	0x00026412
   16724:	000263fc 	.word	0x000263fc
   16728:	00026424 	.word	0x00026424
   1672c:	00026430 	.word	0x00026430
   16730:	0002644d 	.word	0x0002644d
   16734:	00026452 	.word	0x00026452
   16738:	00026457 	.word	0x00026457
   1673c:	0002645c 	.word	0x0002645c
   16740:	00026462 	.word	0x00026462
   16744:	00026479 	.word	0x00026479
   16748:	0002647d 	.word	0x0002647d
   1674c:	00026481 	.word	0x00026481
   16750:	00026485 	.word	0x00026485
   16754:	00026489 	.word	0x00026489
   16758:	0002648d 	.word	0x0002648d
   1675c:	00026491 	.word	0x00026491
   16760:	00026495 	.word	0x00026495
   16764:	00026499 	.word	0x00026499
   16768:	0002649e 	.word	0x0002649e
   1676c:	000264b1 	.word	0x000264b1
   16770:	000264b7 	.word	0x000264b7
   16774:	000264bd 	.word	0x000264bd
   16778:	000264c3 	.word	0x000264c3
   1677c:	000264c9 	.word	0x000264c9
   16780:	000264cf 	.word	0x000264cf
   16784:	00026205 	.word	0x00026205
   16788:	000264d5 	.word	0x000264d5
   1678c:	000264e8 	.word	0x000264e8
   16790:	000264fc 	.word	0x000264fc
   16794:	00026504 	.word	0x00026504
   16798:	0002650a 	.word	0x0002650a
   1679c:	00026527 	.word	0x00026527
   167a0:	0002652e 	.word	0x0002652e
   167a4:	0002653c 	.word	0x0002653c
   167a8:	00026547 	.word	0x00026547
   167ac:	0002655d 	.word	0x0002655d
   167b0:	00026567 	.word	0x00026567
   167b4:	00026574 	.word	0x00026574
   167b8:	00026579 	.word	0x00026579
   167bc:	0002658b 	.word	0x0002658b
   167c0:	0002659a 	.word	0x0002659a
   167c4:	000265b0 	.word	0x000265b0
   167c8:	00026568 	.word	0x00026568
   167cc:	00026354 	.word	0x00026354
   167d0:	000265d8 	.word	0x000265d8
   167d4:	000265e8 	.word	0x000265e8
   167d8:	0002662c 	.word	0x0002662c
   167dc:	00026661 	.word	0x00026661
   167e0:	40001028 	.word	0x40001028
   167e4:	0002667a 	.word	0x0002667a
   167e8:	00026688 	.word	0x00026688
   167ec:	00026696 	.word	0x00026696
   167f0:	000266a4 	.word	0x000266a4
   167f4:	000266b2 	.word	0x000266b2
   167f8:	000266c0 	.word	0x000266c0
   167fc:	000263b8 	.word	0x000263b8
   16800:	000266ce 	.word	0x000266ce
   16804:	000266dc 	.word	0x000266dc
   16808:	00026726 	.word	0x00026726
   1680c:	0002674a 	.word	0x0002674a
   16810:	00026797 	.word	0x00026797
   16814:	000267b3 	.word	0x000267b3
   16818:	400010b4 	.word	0x400010b4
   1681c:	40001104 	.word	0x40001104
   16820:	000267e1 	.word	0x000267e1
   16824:	000267ec 	.word	0x000267ec
   16828:	00026831 	.word	0x00026831
   1682c:	0002688a 	.word	0x0002688a
   16830:	000268be 	.word	0x000268be
   16834:	00026910 	.word	0x00026910
   16838:	00026956 	.word	0x00026956
   1683c:	40000075 	.word	0x40000075
   16840:	00026977 	.word	0x00026977
   16844:	0002698a 	.word	0x0002698a
   16848:	000269ab 	.word	0x000269ab
   1684c:	0002628c 	.word	0x0002628c

00016850 <_GLOBAL__sub_I_configuration>:
	
	sprintf(log_string, "cal_ax=%d\ncal_ay=%d\ncal_az=%5.2f\ncal_gx=%d\ncal_gy=%d\ncal_gz=%d\n",
			configuration.cal_ax, configuration.cal_ay, configuration.cal_az,
			configuration.cal_gx, configuration.cal_gy, configuration.cal_gz);
	configData.save(log_string);
}
   16850:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
#include "serial.h"
}

#define GLOBALOBJECT

cConfig configuration;
   16854:	e59f0008 	ldr	r0, [pc, #8]	; 16864 <_GLOBAL__sub_I_configuration+0x14>
   16858:	ebfffd05 	bl	15c74 <cConfig::cConfig()>
	
	sprintf(log_string, "cal_ax=%d\ncal_ay=%d\ncal_az=%5.2f\ncal_gx=%d\ncal_gy=%d\ncal_gz=%d\n",
			configuration.cal_ax, configuration.cal_ay, configuration.cal_az,
			configuration.cal_gx, configuration.cal_gy, configuration.cal_gz);
	configData.save(log_string);
}
   1685c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   16860:	e12fff1e 	bx	lr
   16864:	40001024 	.word	0x40001024

00016868 <cADXL345::cADXL345(int, char)>:
#define GLOBALOBJECT

cADXL345 accelerometer(0, ADXL_ADDR);
char status=0;

cADXL345::cADXL345(int port, char i2c_address)
   16868:	e92d4070 	push	{r4, r5, r6, lr}
   1686c:	e1a04000 	mov	r4, r0
   16870:	e1a05001 	mov	r5, r1
   16874:	e20260ff 	and	r6, r2, #255	; 0xff
   16878:	eb0000e7 	bl	16c1c <I2C::I2C()>
{
	_i2c_port = port;
   1687c:	e5845000 	str	r5, [r4]
	_i2c_address = i2c_address;
   16880:	e5c46005 	strb	r6, [r4, #5]
	
}
   16884:	e8bd4070 	pop	{r4, r5, r6, lr}
   16888:	e12fff1e 	bx	lr

0001688c <cADXL345::powerDown()>:
}

void cADXL345::powerDown(void)
{

}
   1688c:	e12fff1e 	bx	lr

00016890 <cADXL345::write(char*, char)>:
	
	write(value, 1);	//Set up the i2c address to read from
	return send(_i2c_address, value, READ, length);	
}

char cADXL345::write(char * value, char length){
   16890:	e92d4001 	push	{r0, lr}
   16894:	e1a03001 	mov	r3, r1
   16898:	e20220ff 	and	r2, r2, #255	; 0xff

	return send(_i2c_address, value, WRITE, length);
   1689c:	e5d01005 	ldrb	r1, [r0, #5]
   168a0:	e58d2000 	str	r2, [sp]
   168a4:	e1a02003 	mov	r2, r3
   168a8:	e3a03000 	mov	r3, #0
   168ac:	eb0000e6 	bl	16c4c <I2C::send(char, char*, char, char)>
}
   168b0:	e8bd4008 	pop	{r3, lr}
   168b4:	e12fff1e 	bx	lr

000168b8 <cADXL345::read(char*, char)>:
void cADXL345::powerDown(void)
{

}

char cADXL345::read(char * value, char length){
   168b8:	e92d4071 	push	{r0, r4, r5, r6, lr}
   168bc:	e1a04000 	mov	r4, r0
   168c0:	e1a05001 	mov	r5, r1
   168c4:	e20260ff 	and	r6, r2, #255	; 0xff
	
	write(value, 1);	//Set up the i2c address to read from
   168c8:	e3a02001 	mov	r2, #1
   168cc:	ebffffef 	bl	16890 <cADXL345::write(char*, char)>
	return send(_i2c_address, value, READ, length);	
   168d0:	e5d41005 	ldrb	r1, [r4, #5]
   168d4:	e1a00004 	mov	r0, r4
   168d8:	e1a02005 	mov	r2, r5
   168dc:	e3a03001 	mov	r3, #1
   168e0:	e58d6000 	str	r6, [sp]
   168e4:	eb0000d8 	bl	16c4c <I2C::send(char, char*, char, char)>
}
   168e8:	e8bd4078 	pop	{r3, r4, r5, r6, lr}
   168ec:	e12fff1e 	bx	lr

000168f0 <cADXL345::begin(char)>:
	_i2c_address = i2c_address;
	
}

void cADXL345::begin(char range)
{
   168f0:	e92d4070 	push	{r4, r5, r6, lr}
   168f4:	e1a04000 	mov	r4, r0
   168f8:	e20150ff 	and	r5, r1, #255	; 0xff
	configure();
   168fc:	eb0000c7 	bl	16c20 <I2C::configure()>

	//Put the accelerometer in MEASURE mode
	values[0]=POWER_CTL;
   16900:	e3a0302d 	mov	r3, #45	; 0x2d
   16904:	e5c43020 	strb	r3, [r4, #32]
	values[1] = MEASURE;
	write(values, 2);		//Put the Accelerometer into measurement mode
   16908:	e2846020 	add	r6, r4, #32
{
	configure();

	//Put the accelerometer in MEASURE mode
	values[0]=POWER_CTL;
	values[1] = MEASURE;
   1690c:	e3a03008 	mov	r3, #8
   16910:	e5c43021 	strb	r3, [r4, #33]	; 0x21
	write(values, 2);		//Put the Accelerometer into measurement mode
   16914:	e1a01006 	mov	r1, r6
   16918:	e3a02002 	mov	r2, #2
   1691c:	e1a00004 	mov	r0, r4
   16920:	ebffffda 	bl	16890 <cADXL345::write(char*, char)>
	
	//Set the Range to +/- 4G
	values[0] = DATA_FORMAT;
   16924:	e3a03031 	mov	r3, #49	; 0x31
   16928:	e5c43020 	strb	r3, [r4, #32]
	values[1] = range;
   1692c:	e5c45021 	strb	r5, [r4, #33]	; 0x21
	write(values, 2);
   16930:	e1a00004 	mov	r0, r4
   16934:	e1a01006 	mov	r1, r6
   16938:	e3a02002 	mov	r2, #2
   1693c:	ebffffd3 	bl	16890 <cADXL345::write(char*, char)>
	
	//default ADXL345 rate is 100 Hz. Perfect!
	
	//Assign the gain depending on the range input.
	//gain = (total range)/1024
	switch(range){
   16940:	e3550003 	cmp	r5, #3
   16944:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
   16948:	ea000009 	b	16974 <cADXL345::begin(char)+0x84>
   1694c:	0001695c 	.word	0x0001695c
   16950:	00016974 	.word	0x00016974
   16954:	00016964 	.word	0x00016964
   16958:	0001696c 	.word	0x0001696c
		case 0: gain = 0.0039;	// range = +/-2g. gain = 4/1024.
   1695c:	e59f3028 	ldr	r3, [pc, #40]	; 1698c <cADXL345::begin(char)+0x9c>
   16960:	ea000004 	b	16978 <cADXL345::begin(char)+0x88>
			break;
		case 1: gain = 0.0078;	// range = +/-4g. gain = 8/1024.
			break;
		case 2: gain = 0.0156;  // range = +/-8g. gain = 16/1024.
   16964:	e59f3024 	ldr	r3, [pc, #36]	; 16990 <cADXL345::begin(char)+0xa0>
   16968:	ea000002 	b	16978 <cADXL345::begin(char)+0x88>
			break;
		case 3: gain = 0.0313;  // range = +/-16g. gain = 32/1024.
   1696c:	e59f3020 	ldr	r3, [pc, #32]	; 16994 <cADXL345::begin(char)+0xa4>
   16970:	ea000000 	b	16978 <cADXL345::begin(char)+0x88>
			break;
		default: gain = 0.0078;
   16974:	e59f301c 	ldr	r3, [pc, #28]	; 16998 <cADXL345::begin(char)+0xa8>
   16978:	e584301c 	str	r3, [r4, #28]
			break;
	}
	
	updated=0;
   1697c:	e3a03000 	mov	r3, #0
   16980:	e5c43004 	strb	r3, [r4, #4]
}
   16984:	e8bd4070 	pop	{r4, r5, r6, lr}
   16988:	e12fff1e 	bx	lr
   1698c:	3b7f9724 	.word	0x3b7f9724
   16990:	3c7f9724 	.word	0x3c7f9724
   16994:	3d00346e 	.word	0x3d00346e
   16998:	3bff9724 	.word	0x3bff9724

0001699c <cADXL345::update()>:

	return send(_i2c_address, value, WRITE, length);
}

char cADXL345::update(void)
{
   1699c:	e92d4030 	push	{r4, r5, lr}
	values[0] = DATAX0;
	status=accelerometer.read(values, 6);
   169a0:	e59f5084 	ldr	r5, [pc, #132]	; 16a2c <cADXL345::update()+0x90>
	return send(_i2c_address, value, WRITE, length);
}

char cADXL345::update(void)
{
	values[0] = DATAX0;
   169a4:	e1a01000 	mov	r1, r0
   169a8:	e3a03032 	mov	r3, #50	; 0x32

	return send(_i2c_address, value, WRITE, length);
}

char cADXL345::update(void)
{
   169ac:	e1a04000 	mov	r4, r0
	values[0] = DATAX0;
   169b0:	e5e13020 	strb	r3, [r1, #32]!
	status=accelerometer.read(values, 6);
   169b4:	e1a00005 	mov	r0, r5
   169b8:	e3a02006 	mov	r2, #6
   169bc:	ebffffbd 	bl	168b8 <cADXL345::read(char*, char)>
	if(status)
   169c0:	e3500000 	cmp	r0, #0
}

char cADXL345::update(void)
{
	values[0] = DATAX0;
	status=accelerometer.read(values, 6);
   169c4:	e5c50028 	strb	r0, [r5, #40]	; 0x28
	if(status)
   169c8:	0a000015 	beq	16a24 <cADXL345::update()+0x88>
	{
		xg = (int16_t)((values[1]<<8)|values[0]);
   169cc:	e5d43020 	ldrb	r3, [r4, #32]
   169d0:	e5d40021 	ldrb	r0, [r4, #33]	; 0x21
   169d4:	e1830400 	orr	r0, r3, r0, lsl #8
   169d8:	e1a00800 	lsl	r0, r0, #16
   169dc:	e1a00840 	asr	r0, r0, #16
   169e0:	eb003a70 	bl	253a8 <__aeabi_i2f>
		yg = (int16_t)((values[3]<<8)|values[2]);
   169e4:	e5d43022 	ldrb	r3, [r4, #34]	; 0x22
{
	values[0] = DATAX0;
	status=accelerometer.read(values, 6);
	if(status)
	{
		xg = (int16_t)((values[1]<<8)|values[0]);
   169e8:	e5840010 	str	r0, [r4, #16]
		yg = (int16_t)((values[3]<<8)|values[2]);
   169ec:	e5d40023 	ldrb	r0, [r4, #35]	; 0x23
   169f0:	e1830400 	orr	r0, r3, r0, lsl #8
   169f4:	e1a00800 	lsl	r0, r0, #16
   169f8:	e1a00840 	asr	r0, r0, #16
   169fc:	eb003a69 	bl	253a8 <__aeabi_i2f>
		zg = (int16_t)((values[5]<<8)|values[4]);
   16a00:	e5d43024 	ldrb	r3, [r4, #36]	; 0x24
	values[0] = DATAX0;
	status=accelerometer.read(values, 6);
	if(status)
	{
		xg = (int16_t)((values[1]<<8)|values[0]);
		yg = (int16_t)((values[3]<<8)|values[2]);
   16a04:	e5840014 	str	r0, [r4, #20]
		zg = (int16_t)((values[5]<<8)|values[4]);
   16a08:	e5d40025 	ldrb	r0, [r4, #37]	; 0x25
   16a0c:	e1830400 	orr	r0, r3, r0, lsl #8
   16a10:	e1a00800 	lsl	r0, r0, #16
   16a14:	e1a00840 	asr	r0, r0, #16
   16a18:	eb003a62 	bl	253a8 <__aeabi_i2f>
   16a1c:	e5840018 	str	r0, [r4, #24]
	}
	else return 0;
	
	return 1;
   16a20:	e3a00001 	mov	r0, #1
}
   16a24:	e8bd4030 	pop	{r4, r5, lr}
   16a28:	e12fff1e 	bx	lr
   16a2c:	400010b4 	.word	0x400010b4

00016a30 <cADXL345::getX()>:

double cADXL345::getX(void)
{
   16a30:	e92d4010 	push	{r4, lr}
   16a34:	e1a04000 	mov	r4, r0
	xg-=x_cal;
   16a38:	e1d000f6 	ldrsh	r0, [r0, #6]
   16a3c:	eb003a59 	bl	253a8 <__aeabi_i2f>
   16a40:	e1a01000 	mov	r1, r0
   16a44:	e5940010 	ldr	r0, [r4, #16]
   16a48:	eb0039e4 	bl	251e0 <__aeabi_fsub>
	xg=xg*gain;
   16a4c:	e594101c 	ldr	r1, [r4, #28]
   16a50:	eb003a8b 	bl	25484 <__aeabi_fmul>
   16a54:	e5840010 	str	r0, [r4, #16]
	return xg;
   16a58:	eb0037f3 	bl	24a2c <__aeabi_f2d>
}
   16a5c:	e8bd4010 	pop	{r4, lr}
   16a60:	e12fff1e 	bx	lr

00016a64 <cADXL345::getY()>:

double cADXL345::getY(void)
{
   16a64:	e92d4010 	push	{r4, lr}
   16a68:	e1a04000 	mov	r4, r0
	yg-=y_cal;
   16a6c:	e1d000f8 	ldrsh	r0, [r0, #8]
   16a70:	eb003a4c 	bl	253a8 <__aeabi_i2f>
   16a74:	e1a01000 	mov	r1, r0
   16a78:	e5940014 	ldr	r0, [r4, #20]
   16a7c:	eb0039d7 	bl	251e0 <__aeabi_fsub>
	yg=yg*gain;
   16a80:	e594101c 	ldr	r1, [r4, #28]
   16a84:	eb003a7e 	bl	25484 <__aeabi_fmul>
   16a88:	e5840014 	str	r0, [r4, #20]
	return yg;
   16a8c:	eb0037e6 	bl	24a2c <__aeabi_f2d>
}
   16a90:	e8bd4010 	pop	{r4, lr}
   16a94:	e12fff1e 	bx	lr

00016a98 <cADXL345::getZ()>:

double cADXL345::getZ(void)
{
   16a98:	e92d4010 	push	{r4, lr}
   16a9c:	e1a04000 	mov	r4, r0
	zg-=z_cal;
   16aa0:	e594100c 	ldr	r1, [r4, #12]
   16aa4:	e5900018 	ldr	r0, [r0, #24]
   16aa8:	eb0039cc 	bl	251e0 <__aeabi_fsub>
	zg=zg*gain;
   16aac:	e594101c 	ldr	r1, [r4, #28]
   16ab0:	eb003a73 	bl	25484 <__aeabi_fmul>
   16ab4:	e5840018 	str	r0, [r4, #24]
	return zg;
   16ab8:	eb0037db 	bl	24a2c <__aeabi_f2d>
}
   16abc:	e8bd4010 	pop	{r4, lr}
   16ac0:	e12fff1e 	bx	lr

00016ac4 <cADXL345::setCalibrationValues(int, int, float)>:

void cADXL345::setCalibrationValues(int x, int y, float z)
{
	x_cal=x;
   16ac4:	e1c010b6 	strh	r1, [r0, #6]
	y_cal=y;
   16ac8:	e1c020b8 	strh	r2, [r0, #8]
	z_cal=z;
   16acc:	e580300c 	str	r3, [r0, #12]
}
   16ad0:	e12fff1e 	bx	lr

00016ad4 <cADXL345::getXcal()>:

int16_t cADXL345::getXcal(void)
{
	return x_cal;
}
   16ad4:	e1d000f6 	ldrsh	r0, [r0, #6]
   16ad8:	e12fff1e 	bx	lr

00016adc <cADXL345::getYcal()>:

int16_t cADXL345::getYcal(void)
{
	return y_cal;
}
   16adc:	e1d000f8 	ldrsh	r0, [r0, #8]
   16ae0:	e12fff1e 	bx	lr

00016ae4 <cADXL345::getZcal()>:

float cADXL345::getZcal(void)
{
	return z_cal;
}
   16ae4:	e590000c 	ldr	r0, [r0, #12]
   16ae8:	e12fff1e 	bx	lr

00016aec <cADXL345::calibrate()>:

void cADXL345::calibrate(void)
{
   16aec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16af0:	e1a04000 	mov	r4, r0
   16af4:	e3a05010 	mov	r5, #16
	for(int i=0; i<16; i++)
	{
		update();	//Get new values while device is not moving
   16af8:	e1a00004 	mov	r0, r4
   16afc:	ebffffa6 	bl	1699c <cADXL345::update()>
		x_cal+=(int16_t)xg;
   16b00:	e5940010 	ldr	r0, [r4, #16]
   16b04:	eb003b5b 	bl	25878 <__aeabi_f2iz>
   16b08:	e1d430b6 	ldrh	r3, [r4, #6]
   16b0c:	e0803003 	add	r3, r0, r3
   16b10:	e1c430b6 	strh	r3, [r4, #6]
		y_cal+=(int16_t)yg;
   16b14:	e5940014 	ldr	r0, [r4, #20]
   16b18:	eb003b56 	bl	25878 <__aeabi_f2iz>
   16b1c:	e1d430b8 	ldrh	r3, [r4, #8]
   16b20:	e0803003 	add	r3, r0, r3
   16b24:	e1c430b8 	strh	r3, [r4, #8]
		z_cal+=(int16_t)zg;
   16b28:	e5940018 	ldr	r0, [r4, #24]
   16b2c:	eb003b51 	bl	25878 <__aeabi_f2iz>
   16b30:	e1a00800 	lsl	r0, r0, #16
   16b34:	e1a00840 	asr	r0, r0, #16
   16b38:	eb003a1a 	bl	253a8 <__aeabi_i2f>
   16b3c:	e1a01000 	mov	r1, r0
   16b40:	e594000c 	ldr	r0, [r4, #12]
   16b44:	eb0039a6 	bl	251e4 <__addsf3>
   16b48:	e584000c 	str	r0, [r4, #12]
		delay_ms(100);
   16b4c:	e3a00064 	mov	r0, #100	; 0x64
   16b50:	ebffe740 	bl	10858 <delay_ms>
	return z_cal;
}

void cADXL345::calibrate(void)
{
	for(int i=0; i<16; i++)
   16b54:	e2555001 	subs	r5, r5, #1
   16b58:	1affffe6 	bne	16af8 <cADXL345::calibrate()+0xc>
		x_cal+=(int16_t)xg;
		y_cal+=(int16_t)yg;
		z_cal+=(int16_t)zg;
		delay_ms(100);
	}
	x_cal/=16;
   16b5c:	e1d430f6 	ldrsh	r3, [r4, #6]
   16b60:	e283200f 	add	r2, r3, #15
   16b64:	e3530000 	cmp	r3, #0
   16b68:	b1a03002 	movlt	r3, r2
   16b6c:	e1a03243 	asr	r3, r3, #4
   16b70:	e1c430b6 	strh	r3, [r4, #6]
	y_cal/=16;
   16b74:	e1d430f8 	ldrsh	r3, [r4, #8]
   16b78:	e3530000 	cmp	r3, #0
   16b7c:	e283200f 	add	r2, r3, #15
   16b80:	b1a03002 	movlt	r3, r2
   16b84:	e1a03243 	asr	r3, r3, #4
   16b88:	e1c430b8 	strh	r3, [r4, #8]
	z_cal/=16;
   16b8c:	e594000c 	ldr	r0, [r4, #12]
   16b90:	e3a015f6 	mov	r1, #1031798784	; 0x3d800000
   16b94:	eb003a3a 	bl	25484 <__aeabi_fmul>
	
	z_cal -= (1.0/gain);	//Z axis should be calibrated to 1g. This will offset the calibration value for 1g instead of 0g.
   16b98:	eb0037a3 	bl	24a2c <__aeabi_f2d>
   16b9c:	e1a06000 	mov	r6, r0
   16ba0:	e594001c 	ldr	r0, [r4, #28]
   16ba4:	e1a07001 	mov	r7, r1
   16ba8:	eb00379f 	bl	24a2c <__aeabi_f2d>
   16bac:	e1a02000 	mov	r2, r0
   16bb0:	e1a03001 	mov	r3, r1
   16bb4:	e59f0028 	ldr	r0, [pc, #40]	; 16be4 <cADXL345::calibrate()+0xf8>
   16bb8:	e3a01000 	mov	r1, #0
   16bbc:	eb003865 	bl	24d58 <__aeabi_ddiv>
   16bc0:	e1a02000 	mov	r2, r0
   16bc4:	e1a03001 	mov	r3, r1
   16bc8:	e1a00006 	mov	r0, r6
   16bcc:	e1a01007 	mov	r1, r7
   16bd0:	eb0036c7 	bl	246f4 <__aeabi_dsub>
   16bd4:	eb003957 	bl	25138 <__aeabi_d2f>
   16bd8:	e584000c 	str	r0, [r4, #12]
}
   16bdc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   16be0:	e12fff1e 	bx	lr
   16be4:	3ff00000 	.word	0x3ff00000

00016be8 <_GLOBAL__sub_I_accelerometer>:
   16be8:	e92d4010 	push	{r4, lr}
#define GLOBALOBJECT

cADXL345 accelerometer(0, ADXL_ADDR);
char status=0;

cADXL345::cADXL345(int port, char i2c_address)
   16bec:	e59f401c 	ldr	r4, [pc, #28]	; 16c10 <_GLOBAL__sub_I_accelerometer+0x28>
   16bf0:	e1a00004 	mov	r0, r4
   16bf4:	eb000008 	bl	16c1c <I2C::I2C()>
{
	_i2c_port = port;
   16bf8:	e3a03000 	mov	r3, #0
   16bfc:	e5843000 	str	r3, [r4]
	_i2c_address = i2c_address;
   16c00:	e3e03059 	mvn	r3, #89	; 0x59
   16c04:	e5c43005 	strb	r3, [r4, #5]
	x_cal/=16;
	y_cal/=16;
	z_cal/=16;
	
	z_cal -= (1.0/gain);	//Z axis should be calibrated to 1g. This will offset the calibration value for 1g instead of 0g.
}
   16c08:	e8bd4010 	pop	{r4, lr}
   16c0c:	e12fff1e 	bx	lr
   16c10:	400010b4 	.word	0x400010b4

00016c14 <I2C::I2C(int)>:
#include "main.h"
#define GLOBALOBJECT

I2C::I2C(int i2c_port)
{
	_i2c_port = i2c_port;
   16c14:	e5801000 	str	r1, [r0]
}
   16c18:	e12fff1e 	bx	lr

00016c1c <I2C::I2C()>:

I2C::I2C(void)
{
	//do nothing
}
   16c1c:	e12fff1e 	bx	lr

00016c20 <I2C::configure()>:

void I2C::configure(void)
{
	//Enable the Port 0 I2C pins
	//NOTE: This should be modified to take the _i2c_port as an argument
	PINSEL0 |= 0x00000050;
   16c20:	e59f301c 	ldr	r3, [pc, #28]	; 16c44 <I2C::configure()+0x24>
   16c24:	e5932000 	ldr	r2, [r3]
   16c28:	e3822050 	orr	r2, r2, #80	; 0x50
   16c2c:	e5832000 	str	r2, [r3]
	
	//Configure the I2C Clock for 100 kHz rate and 50% duty cycle
	I2SCLH = 295;
   16c30:	e59f2010 	ldr	r2, [pc, #16]	; 16c48 <I2C::configure()+0x28>
   16c34:	e2433801 	sub	r3, r3, #65536	; 0x10000
   16c38:	e1c321b0 	strh	r2, [r3, #16]
	I2SCLL = 295;
   16c3c:	e1c321b4 	strh	r2, [r3, #20]
}
   16c40:	e12fff1e 	bx	lr
   16c44:	e002c000 	.word	0xe002c000
   16c48:	00000127 	.word	0x00000127

00016c4c <I2C::send(char, char*, char, char)>:

char I2C::send(char SLA, char * contents, char direction, char length)
{
   16c4c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	char STATE, error=0, exit=0;

	//Initialize the I2CONSET register
	I2CONSET = (1<<I2EN);	//Enable the I2C module;
   16c50:	e59f61ec 	ldr	r6, [pc, #492]	; 16e44 <I2C::send(char, char*, char, char)+0x1f8>
   16c54:	e3a00040 	mov	r0, #64	; 0x40
	I2SCLH = 295;
	I2SCLL = 295;
}

char I2C::send(char SLA, char * contents, char direction, char length)
{
   16c58:	e5dd5014 	ldrb	r5, [sp, #20]
	char STATE, error=0, exit=0;

	//Initialize the I2CONSET register
	I2CONSET = (1<<I2EN);	//Enable the I2C module;
   16c5c:	e5c60000 	strb	r0, [r6]
	//I2CONCLR = (1<<SIC);	//Make sure the SI bit is cleared.
	
	//Set the Start Bit to start I2C communication
	I2CONSET |= (1<<STA);	//Send the Start Bit.
   16c60:	e5d60000 	ldrb	r0, [r6]
   16c64:	e3800020 	orr	r0, r0, #32
   16c68:	e5c60000 	strb	r0, [r6]
	I2SCLL = 295;
}

char I2C::send(char SLA, char * contents, char direction, char length)
{
	char STATE, error=0, exit=0;
   16c6c:	e3a04000 	mov	r4, #0
	I2CONSET = (1<<I2EN);	//Enable the I2C module;
	//I2CONCLR = (1<<SIC);	//Make sure the SI bit is cleared.
	
	//Set the Start Bit to start I2C communication
	I2CONSET |= (1<<STA);	//Send the Start Bit.
	I2CONCLR = (1<<SIC);		//Make sure the SI bit is cleared.
   16c70:	e3a00008 	mov	r0, #8
		//rprintf("ACK\n\r");
		STATE = I2STAT;	//Get the value in the status register
		switch (STATE){
			//The Start condition has been sent.Load the Slave Device Address and the direction bit into the Data Register
			case 0x08:	//rprintf("Start Sent\n\r");
						I2DAT = SLA+direction; //Put the Slave Device Address into the data register.
   16c74:	e0833001 	add	r3, r3, r1
	I2CONSET = (1<<I2EN);	//Enable the I2C module;
	//I2CONCLR = (1<<SIC);	//Make sure the SI bit is cleared.
	
	//Set the Start Bit to start I2C communication
	I2CONSET |= (1<<STA);	//Send the Start Bit.
	I2CONCLR = (1<<SIC);		//Make sure the SI bit is cleared.
   16c78:	e5c60018 	strb	r0, [r6, #24]
	
	
	while(!exit && !error){
		//rprintf("I2CON: %X, length: %d, error: %d\n\r", I2CONSET, length, error);
		//rprintf("Waiting...");
		while(!(I2CONSET & (1<<SI)));
   16c7c:	e1a0c006 	mov	ip, r6
	I2SCLL = 295;
}

char I2C::send(char SLA, char * contents, char direction, char length)
{
	char STATE, error=0, exit=0;
   16c80:	e1a00004 	mov	r0, r4
							I2CONCLR = (1<<STA)|(1<<SI);
						}
						//Else we're finished and can send the stop condition
				break;
			//Data byte has been transmitted and NOT ACK was received
			case 0x30: 	I2CONCLR = (1<<STA);
   16c84:	e3a08020 	mov	r8, #32
						I2CONSET = (1<<STO);
   16c88:	e3a07010 	mov	r7, #16
		//rprintf("ACK\n\r");
		STATE = I2STAT;	//Get the value in the status register
		switch (STATE){
			//The Start condition has been sent.Load the Slave Device Address and the direction bit into the Data Register
			case 0x08:	//rprintf("Start Sent\n\r");
						I2DAT = SLA+direction; //Put the Slave Device Address into the data register.
   16c8c:	e20330ff 	and	r3, r3, #255	; 0xff
	//Set the Start Bit to start I2C communication
	I2CONSET |= (1<<STA);	//Send the Start Bit.
	I2CONCLR = (1<<SIC);		//Make sure the SI bit is cleared.
	
	
	while(!exit && !error){
   16c90:	ea000064 	b	16e28 <I2C::send(char, char*, char, char)+0x1dc>
		//rprintf("I2CON: %X, length: %d, error: %d\n\r", I2CONSET, length, error);
		//rprintf("Waiting...");
		while(!(I2CONSET & (1<<SI)));
   16c94:	e5d61000 	ldrb	r1, [r6]
   16c98:	e3110008 	tst	r1, #8
   16c9c:	0afffffc 	beq	16c94 <I2C::send(char, char*, char, char)+0x48>
		//rprintf("ACK\n\r");
		STATE = I2STAT;	//Get the value in the status register
   16ca0:	e5dc0004 	ldrb	r0, [ip, #4]
   16ca4:	e20000ff 	and	r0, r0, #255	; 0xff
		switch (STATE){
   16ca8:	e3500030 	cmp	r0, #48	; 0x30
   16cac:	0a000039 	beq	16d98 <I2C::send(char, char*, char, char)+0x14c>
   16cb0:	8a00000a 	bhi	16ce0 <I2C::send(char, char*, char, char)+0x94>
   16cb4:	e3500018 	cmp	r0, #24
   16cb8:	0a000017 	beq	16d1c <I2C::send(char, char*, char, char)+0xd0>
   16cbc:	8a000002 	bhi	16ccc <I2C::send(char, char*, char, char)+0x80>
   16cc0:	e3500008 	cmp	r0, #8
   16cc4:	1a000056 	bne	16e24 <I2C::send(char, char*, char, char)+0x1d8>
   16cc8:	ea00000f 	b	16d0c <I2C::send(char, char*, char, char)+0xc0>
   16ccc:	e3500020 	cmp	r0, #32
   16cd0:	0a00001e 	beq	16d50 <I2C::send(char, char*, char, char)+0x104>
   16cd4:	e3500028 	cmp	r0, #40	; 0x28
   16cd8:	1a000051 	bne	16e24 <I2C::send(char, char*, char, char)+0x1d8>
   16cdc:	ea00001d 	b	16d58 <I2C::send(char, char*, char, char)+0x10c>
   16ce0:	e3500048 	cmp	r0, #72	; 0x48
   16ce4:	0a000034 	beq	16dbc <I2C::send(char, char*, char, char)+0x170>
   16ce8:	8a000002 	bhi	16cf8 <I2C::send(char, char*, char, char)+0xac>
   16cec:	e3500040 	cmp	r0, #64	; 0x40
   16cf0:	1a00004b 	bne	16e24 <I2C::send(char, char*, char, char)+0x1d8>
   16cf4:	ea00002a 	b	16da4 <I2C::send(char, char*, char, char)+0x158>
   16cf8:	e3500050 	cmp	r0, #80	; 0x50
   16cfc:	0a000030 	beq	16dc4 <I2C::send(char, char*, char, char)+0x178>
   16d00:	e3500058 	cmp	r0, #88	; 0x58
   16d04:	1a000046 	bne	16e24 <I2C::send(char, char*, char, char)+0x1d8>
   16d08:	ea000037 	b	16dec <I2C::send(char, char*, char, char)+0x1a0>
			//The Start condition has been sent.Load the Slave Device Address and the direction bit into the Data Register
			case 0x08:	//rprintf("Start Sent\n\r");
						I2DAT = SLA+direction; //Put the Slave Device Address into the data register.
						I2CONCLR = ((1<<STA)|(1<<STO)|(1<<SI));	//Don't send another start condition
   16d0c:	e3a01038 	mov	r1, #56	; 0x38
		//rprintf("ACK\n\r");
		STATE = I2STAT;	//Get the value in the status register
		switch (STATE){
			//The Start condition has been sent.Load the Slave Device Address and the direction bit into the Data Register
			case 0x08:	//rprintf("Start Sent\n\r");
						I2DAT = SLA+direction; //Put the Slave Device Address into the data register.
   16d10:	e5cc3008 	strb	r3, [ip, #8]
						I2CONCLR = ((1<<STA)|(1<<STO)|(1<<SI));	//Don't send another start condition
   16d14:	e5cc1018 	strb	r1, [ip, #24]
   16d18:	ea000009 	b	16d44 <I2C::send(char, char*, char, char)+0xf8>
			case 0x10:	error=1;
						//rprintf("Error 10");
				break;
			//SLA+W has been written and ACK has been received.
			case 0x18:	//rprintf("Write address Sent");
						if(length-- > 0){
   16d1c:	e2450001 	sub	r0, r5, #1
   16d20:	e20000ff 	and	r0, r0, #255	; 0xff
   16d24:	e3550000 	cmp	r5, #0
   16d28:	01a05000 	moveq	r5, r0
   16d2c:	0a00003b 	beq	16e20 <I2C::send(char, char*, char, char)+0x1d4>
							//rprintf("Writing Contents, %d left\n\r", length);
							I2DAT = *contents++;	//Write the contents to be sent to the I2C module
   16d30:	e4d21001 	ldrb	r1, [r2], #1
   16d34:	e5cc1008 	strb	r1, [ip, #8]
							I2CONCLR = (1<<SI);
   16d38:	e3a01008 	mov	r1, #8
   16d3c:	e5cc1018 	strb	r1, [ip, #24]
			case 0x10:	error=1;
						//rprintf("Error 10");
				break;
			//SLA+W has been written and ACK has been received.
			case 0x18:	//rprintf("Write address Sent");
						if(length-- > 0){
   16d40:	e1a05000 	mov	r5, r0
							//rprintf("Writing Contents, %d left\n\r", length);
							I2DAT = *contents++;	//Write the contents to be sent to the I2C module
							I2CONCLR = (1<<SI);
   16d44:	e3a04000 	mov	r4, #0
   16d48:	e1a00004 	mov	r0, r4
   16d4c:	ea000035 	b	16e28 <I2C::send(char, char*, char, char)+0x1dc>
							error=1;	//IF the length was 0 or less there is nothing to write!
							//rprintf("Error 18");
						}
				break;
			//SLA+W has been writtten and NOT ACK was received.
			case 0x20: 	I2CONCLR = (1<<STA);
   16d50:	e5cc0018 	strb	r0, [ip, #24]
   16d54:	ea000031 	b	16e20 <I2C::send(char, char*, char, char)+0x1d4>
						error=1;	 //This shouldn't happen!
						//rprintf("Error 20");
				break;
			//Data byte has been transmitted and ACK was received.
			case 0x28:	//rprintf("Data sent\n\r");
						if(length-- > 0){
   16d58:	e2451001 	sub	r1, r5, #1
   16d5c:	e3550000 	cmp	r5, #0
   16d60:	e20110ff 	and	r1, r1, #255	; 0xff
   16d64:	0a000005 	beq	16d80 <I2C::send(char, char*, char, char)+0x134>
							I2DAT = *contents++;	//If there's more data to send then load it up!
   16d68:	e4d20001 	ldrb	r0, [r2], #1
   16d6c:	e5cc0008 	strb	r0, [ip, #8]
							//rprintf("Writing Contents, %d left", length);
							I2CONCLR = (1<<STA)|(1<<STO)|(1<<SI);
   16d70:	e3a00038 	mov	r0, #56	; 0x38
   16d74:	e5cc0018 	strb	r0, [ip, #24]
						error=1;	 //This shouldn't happen!
						//rprintf("Error 20");
				break;
			//Data byte has been transmitted and ACK was received.
			case 0x28:	//rprintf("Data sent\n\r");
						if(length-- > 0){
   16d78:	e1a05001 	mov	r5, r1
   16d7c:	eafffff0 	b	16d44 <I2C::send(char, char*, char, char)+0xf8>
							I2CONCLR = (1<<STA)|(1<<STO)|(1<<SI);
						}
						else{
							//rprintf("Finished Writing");
							exit=1;
							I2CONSET = (1<<STO);
   16d80:	e5cc7000 	strb	r7, [ip]
						error=1;	 //This shouldn't happen!
						//rprintf("Error 20");
				break;
			//Data byte has been transmitted and ACK was received.
			case 0x28:	//rprintf("Data sent\n\r");
						if(length-- > 0){
   16d84:	e1a05001 	mov	r5, r1
						}
						else{
							//rprintf("Finished Writing");
							exit=1;
							I2CONSET = (1<<STO);
							I2CONCLR = (1<<STA)|(1<<SI);
   16d88:	e5cc0018 	strb	r0, [ip, #24]
							//rprintf("Writing Contents, %d left", length);
							I2CONCLR = (1<<STA)|(1<<STO)|(1<<SI);
						}
						else{
							//rprintf("Finished Writing");
							exit=1;
   16d8c:	e3a04001 	mov	r4, #1
							I2CONSET = (1<<STO);
							I2CONCLR = (1<<STA)|(1<<SI);
   16d90:	e3a00000 	mov	r0, #0
   16d94:	ea000023 	b	16e28 <I2C::send(char, char*, char, char)+0x1dc>
						}
						//Else we're finished and can send the stop condition
				break;
			//Data byte has been transmitted and NOT ACK was received
			case 0x30: 	I2CONCLR = (1<<STA);
   16d98:	e5cc8018 	strb	r8, [ip, #24]
						I2CONSET = (1<<STO);
   16d9c:	e5cc7000 	strb	r7, [ip]
   16da0:	ea00001e 	b	16e20 <I2C::send(char, char*, char, char)+0x1d4>
			case 0x38: 	error=1;
						//rprintf("Error 38");
				break;
			//SLA+R has been sent and an ACK has been received. Make sure ack is configured and then data will be automatically received by the I2C module
			case 0x40:	//rprintf("Read Address sent\n\r");
						if(--length > 0)I2CONSET = (1<<AA);	//If there's more info to read enable the AcK
   16da4:	e2455001 	sub	r5, r5, #1
   16da8:	e21550ff 	ands	r5, r5, #255	; 0xff
   16dac:	e3a01004 	mov	r1, #4
   16db0:	15cc1000 	strbne	r1, [ip]
						else I2CONCLR = (1<<AA);	//If we're done, disable the ack so we can send the stop bit
   16db4:	05cc1018 	strbeq	r1, [ip, #24]
   16db8:	ea000008 	b	16de0 <I2C::send(char, char*, char, char)+0x194>
						I2CONCLR = (1<<STA)|(1<<STO)|(1<<SI);
				break;
			//SLA+R has been sent and NOT ACK was received (This is an error, shouldn't happen
			case 0x48: 	I2CONCLR = (1<<STA);
   16dbc:	e5cc8018 	strb	r8, [ip, #24]
   16dc0:	ea000016 	b	16e20 <I2C::send(char, char*, char, char)+0x1d4>
						error=1;
						//rprintf("Error 48");
				break;
			//Data byte has been received and ACK has been returned
			case 0x50:	if(--length > 0)I2CONSET = (1<<AA);	//If there's more info to read enable the AcK
   16dc4:	e2455001 	sub	r5, r5, #1
   16dc8:	e21550ff 	ands	r5, r5, #255	; 0xff
   16dcc:	e3a00004 	mov	r0, #4
   16dd0:	15cc0000 	strbne	r0, [ip]
						else I2CONCLR = (1<<AA);	//If we're done, disable the ack so we can send the stop bit
   16dd4:	05cc0018 	strbeq	r0, [ip, #24]
						//rprintf("Reading Contents...");
						*contents++=I2DAT;	//Read the received contents of the I2C module.
   16dd8:	e5d61008 	ldrb	r1, [r6, #8]
   16ddc:	e4c21001 	strb	r1, [r2], #1
						I2CONCLR = (1<<STA)|(1<<STO)|(1<<SI);
   16de0:	e3a01038 	mov	r1, #56	; 0x38
   16de4:	e5c61018 	strb	r1, [r6, #24]
   16de8:	eaffffd5 	b	16d44 <I2C::send(char, char*, char, char)+0xf8>
				break;
			//Data byte has been received and NOT ACK has been returned
			case 0x58:  if(length > 0){
   16dec:	e3550000 	cmp	r5, #0
							error=1;	//If there was more data to read and we got a NOT ACK there was an error
							//rprintf("Error 58");
						}
						else{ *contents++=I2DAT;	//Load the received I2C contents
   16df0:	05dc1008 	ldrbeq	r1, [ip, #8]
   16df4:	04c21001 	strbeq	r1, [r2], #1
							//rprintf("Reading Contents...");
						}
						I2CONCLR |= (1<<STA)|(1<<SI);
   16df8:	e5d61018 	ldrb	r1, [r6, #24]
   16dfc:	e3811028 	orr	r1, r1, #40	; 0x28
   16e00:	e5c61018 	strb	r1, [r6, #24]
						I2CONSET |= (1<<STO);
   16e04:	e5d61000 	ldrb	r1, [r6]
   16e08:	e3811010 	orr	r1, r1, #16
			//Data byte has been received and NOT ACK has been returned
			case 0x58:  if(length > 0){
							error=1;	//If there was more data to read and we got a NOT ACK there was an error
							//rprintf("Error 58");
						}
						else{ *contents++=I2DAT;	//Load the received I2C contents
   16e0c:	01a00005 	moveq	r0, r5
						*contents++=I2DAT;	//Read the received contents of the I2C module.
						I2CONCLR = (1<<STA)|(1<<STO)|(1<<SI);
				break;
			//Data byte has been received and NOT ACK has been returned
			case 0x58:  if(length > 0){
							error=1;	//If there was more data to read and we got a NOT ACK there was an error
   16e10:	13a00001 	movne	r0, #1
						}
						else{ *contents++=I2DAT;	//Load the received I2C contents
							//rprintf("Reading Contents...");
						}
						I2CONCLR |= (1<<STA)|(1<<SI);
						I2CONSET |= (1<<STO);
   16e14:	e5c61000 	strb	r1, [r6]
						exit=1;
   16e18:	e3a04001 	mov	r4, #1
				break;
   16e1c:	ea000001 	b	16e28 <I2C::send(char, char*, char, char)+0x1dc>
			case 0x10:	error=1;
						//rprintf("Error 10");
				break;
			//SLA+W has been written and ACK has been received.
			case 0x18:	//rprintf("Write address Sent");
						if(length-- > 0){
   16e20:	e3a04000 	mov	r4, #0
						I2DAT = SLA+direction; //Put the Slave Device Address into the data register.
						I2CONCLR = ((1<<STA)|(1<<STO)|(1<<SI));	//Don't send another start condition
						
				break;
			//A repeated START condition has been sent (shouldn't happen! If it does there was an error)
			case 0x10:	error=1;
   16e24:	e3a00001 	mov	r0, #1
	//Set the Start Bit to start I2C communication
	I2CONSET |= (1<<STA);	//Send the Start Bit.
	I2CONCLR = (1<<SIC);		//Make sure the SI bit is cleared.
	
	
	while(!exit && !error){
   16e28:	e1801004 	orr	r1, r0, r4
   16e2c:	e31100ff 	tst	r1, #255	; 0xff
   16e30:	0affff97 	beq	16c94 <I2C::send(char, char*, char, char)+0x48>
				break;
		}
		
	}
							
	if(error==1)return 0;
   16e34:	e2200001 	eor	r0, r0, #1
	//Set the Start Bit to start I2C communication
	I2CONSET |= (1<<STA);	//Send the Start Bit.
	I2CONCLR = (1<<SIC);		//Make sure the SI bit is cleared.
	
	
	while(!exit && !error){
   16e38:	e20000ff 	and	r0, r0, #255	; 0xff
		
	}
							
	if(error==1)return 0;
	else return 1;
}
   16e3c:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
   16e40:	e12fff1e 	bx	lr
   16e44:	e001c000 	.word	0xe001c000

00016e48 <cHMC5843::cHMC5843(int, char)>:

#define GLOBALOBJECT

cHMC5843 compass(0, HMC_ADDR);

cHMC5843::cHMC5843(int port, char i2c_address)
   16e48:	e92d4070 	push	{r4, r5, r6, lr}
   16e4c:	e1a04000 	mov	r4, r0
   16e50:	e1a05001 	mov	r5, r1
   16e54:	e20260ff 	and	r6, r2, #255	; 0xff
   16e58:	ebffff6f 	bl	16c1c <I2C::I2C()>
{
	_i2c_port = port;
   16e5c:	e5845000 	str	r5, [r4]
	_i2c_address = i2c_address;
   16e60:	e5c46022 	strb	r6, [r4, #34]	; 0x22
	
}
   16e64:	e8bd4070 	pop	{r4, r5, r6, lr}
   16e68:	e12fff1e 	bx	lr

00016e6c <cHMC5843::write(char*, char)>:
	
	write(value, 1);	//Set up the i2c address to read from
	return send(_i2c_address, value, READ, length);	
}

char cHMC5843::write(char * value, char length){
   16e6c:	e92d4001 	push	{r0, lr}
   16e70:	e1a03001 	mov	r3, r1
   16e74:	e20220ff 	and	r2, r2, #255	; 0xff

	return send(_i2c_address, value, WRITE, length);
   16e78:	e5d01022 	ldrb	r1, [r0, #34]	; 0x22
   16e7c:	e58d2000 	str	r2, [sp]
   16e80:	e1a02003 	mov	r2, r3
   16e84:	e3a03000 	mov	r3, #0
   16e88:	ebffff6f 	bl	16c4c <I2C::send(char, char*, char, char)>
}
   16e8c:	e8bd4008 	pop	{r3, lr}
   16e90:	e12fff1e 	bx	lr

00016e94 <cHMC5843::read(char*, char)>:
			break;
	}
}


char cHMC5843::read(char * value, char length){
   16e94:	e92d4071 	push	{r0, r4, r5, r6, lr}
   16e98:	e1a04000 	mov	r4, r0
   16e9c:	e1a05001 	mov	r5, r1
   16ea0:	e20260ff 	and	r6, r2, #255	; 0xff
	
	write(value, 1);	//Set up the i2c address to read from
   16ea4:	e3a02001 	mov	r2, #1
   16ea8:	ebffffef 	bl	16e6c <cHMC5843::write(char*, char)>
	return send(_i2c_address, value, READ, length);	
   16eac:	e5d41022 	ldrb	r1, [r4, #34]	; 0x22
   16eb0:	e1a00004 	mov	r0, r4
   16eb4:	e1a02005 	mov	r2, r5
   16eb8:	e3a03001 	mov	r3, #1
   16ebc:	e58d6000 	str	r6, [sp]
   16ec0:	ebffff61 	bl	16c4c <I2C::send(char, char*, char, char)>
}
   16ec4:	e8bd4078 	pop	{r3, r4, r5, r6, lr}
   16ec8:	e12fff1e 	bx	lr

00016ecc <cHMC5843::begin(char)>:
	_i2c_address = i2c_address;
	
}

void cHMC5843::begin(char range)
{
   16ecc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16ed0:	e1a04000 	mov	r4, r0
   16ed4:	e20150ff 	and	r5, r1, #255	; 0xff
	configure();
	
	//Configure the compass for 50 Hz Update Rage
	values[0]=CONFIG_REGA;
	values[1]=CONFIG_REGA_DO2|CONFIG_REGA_DO1;
	write(values,2);
   16ed8:	e284601c 	add	r6, r4, #28
}

void cHMC5843::begin(char range)
{
	//char values[2];
	configure();
   16edc:	ebffff4f 	bl	16c20 <I2C::configure()>
	
	//Configure the compass for 50 Hz Update Rage
	values[0]=CONFIG_REGA;
   16ee0:	e3a07000 	mov	r7, #0
	values[1]=CONFIG_REGA_DO2|CONFIG_REGA_DO1;
   16ee4:	e3a03018 	mov	r3, #24
   16ee8:	e5c4301d 	strb	r3, [r4, #29]
	write(values,2);
   16eec:	e1a01006 	mov	r1, r6
   16ef0:	e3a02002 	mov	r2, #2
{
	//char values[2];
	configure();
	
	//Configure the compass for 50 Hz Update Rage
	values[0]=CONFIG_REGA;
   16ef4:	e5c4701c 	strb	r7, [r4, #28]
	values[1]=CONFIG_REGA_DO2|CONFIG_REGA_DO1;
	write(values,2);
   16ef8:	e1a00004 	mov	r0, r4
   16efc:	ebffffda 	bl	16e6c <cHMC5843::write(char*, char)>
	
	//Set the Range for the compass
	values[0]=CONFIG_REGB;
   16f00:	e3a03001 	mov	r3, #1
   16f04:	e5c4301c 	strb	r3, [r4, #28]
	values[1]=(range<<5);
   16f08:	e1a03285 	lsl	r3, r5, #5
	write(values, 2);
   16f0c:	e1a01006 	mov	r1, r6
   16f10:	e3a02002 	mov	r2, #2
	values[1]=CONFIG_REGA_DO2|CONFIG_REGA_DO1;
	write(values,2);
	
	//Set the Range for the compass
	values[0]=CONFIG_REGB;
	values[1]=(range<<5);
   16f14:	e5c4301d 	strb	r3, [r4, #29]
	write(values, 2);
   16f18:	e1a00004 	mov	r0, r4
   16f1c:	ebffffd2 	bl	16e6c <cHMC5843::write(char*, char)>
	
	//Configure compass for continuous conversion
	values[0]=MODE_REG;	
   16f20:	e3a02002 	mov	r2, #2
   16f24:	e5c4201c 	strb	r2, [r4, #28]
	values[1]=0x00;		//Set the HMC to continuous conversion mode
   16f28:	e5c4701d 	strb	r7, [r4, #29]
	write(values, 2);	//Write the new data to the HMC register.
   16f2c:	e1a00004 	mov	r0, r4
   16f30:	e1a01006 	mov	r1, r6
   16f34:	ebffffcc 	bl	16e6c <cHMC5843::write(char*, char)>
	
	//Assign the gain based on the range setting
	switch(range){
   16f38:	e3550007 	cmp	r5, #7
   16f3c:	979ff105 	ldrls	pc, [pc, r5, lsl #2]
   16f40:	ea000015 	b	16f9c <cHMC5843::begin(char)+0xd0>
   16f44:	00016f64 	.word	0x00016f64
   16f48:	00016f9c 	.word	0x00016f9c
   16f4c:	00016f6c 	.word	0x00016f6c
   16f50:	00016f74 	.word	0x00016f74
   16f54:	00016f7c 	.word	0x00016f7c
   16f58:	00016f84 	.word	0x00016f84
   16f5c:	00016f8c 	.word	0x00016f8c
   16f60:	00016f94 	.word	0x00016f94
		case 0:	gain=1620;
   16f64:	e59f3040 	ldr	r3, [pc, #64]	; 16fac <cHMC5843::begin(char)+0xe0>
   16f68:	ea00000c 	b	16fa0 <cHMC5843::begin(char)+0xd4>
			break;
		case 1:	gain=1300;
			break;
		case 2: gain = 970;
   16f6c:	e59f303c 	ldr	r3, [pc, #60]	; 16fb0 <cHMC5843::begin(char)+0xe4>
   16f70:	ea00000a 	b	16fa0 <cHMC5843::begin(char)+0xd4>
			break;
		case 3: gain = 780;
   16f74:	e3a03fc3 	mov	r3, #780	; 0x30c
   16f78:	ea000008 	b	16fa0 <cHMC5843::begin(char)+0xd4>
			break;
		case 4: gain = 530;
   16f7c:	e59f3030 	ldr	r3, [pc, #48]	; 16fb4 <cHMC5843::begin(char)+0xe8>
   16f80:	ea000006 	b	16fa0 <cHMC5843::begin(char)+0xd4>
			break;
		case 5: gain = 460;
   16f84:	e3a03f73 	mov	r3, #460	; 0x1cc
   16f88:	ea000004 	b	16fa0 <cHMC5843::begin(char)+0xd4>
			break;
		case 6: gain = 390;
   16f8c:	e59f3024 	ldr	r3, [pc, #36]	; 16fb8 <cHMC5843::begin(char)+0xec>
   16f90:	ea000002 	b	16fa0 <cHMC5843::begin(char)+0xd4>
			break;
		case 7: gain = 280;
   16f94:	e3a03f46 	mov	r3, #280	; 0x118
   16f98:	ea000000 	b	16fa0 <cHMC5843::begin(char)+0xd4>
			break;
		default: gain = 1300;
   16f9c:	e59f3018 	ldr	r3, [pc, #24]	; 16fbc <cHMC5843::begin(char)+0xf0>
   16fa0:	e5843018 	str	r3, [r4, #24]
			break;
	}
}
   16fa4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   16fa8:	e12fff1e 	bx	lr
   16fac:	00000654 	.word	0x00000654
   16fb0:	000003ca 	.word	0x000003ca
   16fb4:	00000212 	.word	0x00000212
   16fb8:	00000186 	.word	0x00000186
   16fbc:	00000514 	.word	0x00000514

00016fc0 <cHMC5843::update()>:
	return send(_i2c_address, value, WRITE, length);
}

char cHMC5843::update(void)
{
	values[0]=DATA_OUT_X_H;
   16fc0:	e1a01000 	mov	r1, r0
   16fc4:	e3a03003 	mov	r3, #3

	return send(_i2c_address, value, WRITE, length);
}

char cHMC5843::update(void)
{
   16fc8:	e92d4010 	push	{r4, lr}
	values[0]=DATA_OUT_X_H;
	if(read(values, 6))
   16fcc:	e3a02006 	mov	r2, #6
	return send(_i2c_address, value, WRITE, length);
}

char cHMC5843::update(void)
{
	values[0]=DATA_OUT_X_H;
   16fd0:	e5e1301c 	strb	r3, [r1, #28]!

	return send(_i2c_address, value, WRITE, length);
}

char cHMC5843::update(void)
{
   16fd4:	e1a04000 	mov	r4, r0
	values[0]=DATA_OUT_X_H;
	if(read(values, 6))
   16fd8:	ebffffad 	bl	16e94 <cHMC5843::read(char*, char)>
   16fdc:	e3500000 	cmp	r0, #0
   16fe0:	0a000015 	beq	1703c <cHMC5843::update()+0x7c>
	{
		xc = (int16_t)((values[0]<<8)|values[1]);
   16fe4:	e5d4301d 	ldrb	r3, [r4, #29]
   16fe8:	e5d4001c 	ldrb	r0, [r4, #28]
   16fec:	e1830400 	orr	r0, r3, r0, lsl #8
   16ff0:	e1a00800 	lsl	r0, r0, #16
   16ff4:	e1a00840 	asr	r0, r0, #16
   16ff8:	eb0038ea 	bl	253a8 <__aeabi_i2f>
		yc = (int16_t)((values[2]<<8)|values[3]);
   16ffc:	e5d4301f 	ldrb	r3, [r4, #31]
char cHMC5843::update(void)
{
	values[0]=DATA_OUT_X_H;
	if(read(values, 6))
	{
		xc = (int16_t)((values[0]<<8)|values[1]);
   17000:	e5840008 	str	r0, [r4, #8]
		yc = (int16_t)((values[2]<<8)|values[3]);
   17004:	e5d4001e 	ldrb	r0, [r4, #30]
   17008:	e1830400 	orr	r0, r3, r0, lsl #8
   1700c:	e1a00800 	lsl	r0, r0, #16
   17010:	e1a00840 	asr	r0, r0, #16
   17014:	eb0038e3 	bl	253a8 <__aeabi_i2f>
		zc = (int16_t)((values[4]<<8)|values[5]);
   17018:	e5d43021 	ldrb	r3, [r4, #33]	; 0x21
{
	values[0]=DATA_OUT_X_H;
	if(read(values, 6))
	{
		xc = (int16_t)((values[0]<<8)|values[1]);
		yc = (int16_t)((values[2]<<8)|values[3]);
   1701c:	e584000c 	str	r0, [r4, #12]
		zc = (int16_t)((values[4]<<8)|values[5]);
   17020:	e5d40020 	ldrb	r0, [r4, #32]
   17024:	e1830400 	orr	r0, r3, r0, lsl #8
   17028:	e1a00800 	lsl	r0, r0, #16
   1702c:	e1a00840 	asr	r0, r0, #16
   17030:	eb0038dc 	bl	253a8 <__aeabi_i2f>
   17034:	e5840010 	str	r0, [r4, #16]
	}
	else return 0;
	return 1;
   17038:	e3a00001 	mov	r0, #1
}
   1703c:	e8bd4010 	pop	{r4, lr}
   17040:	e12fff1e 	bx	lr

00017044 <cHMC5843::getX()>:

float cHMC5843::getX(void)
{
   17044:	e92d4010 	push	{r4, lr}
   17048:	e1a04000 	mov	r4, r0
	xc = xc/gain;
   1704c:	e5900018 	ldr	r0, [r0, #24]
   17050:	eb0038d4 	bl	253a8 <__aeabi_i2f>
   17054:	e1a01000 	mov	r1, r0
   17058:	e5940008 	ldr	r0, [r4, #8]
   1705c:	eb00396e 	bl	2561c <__aeabi_fdiv>
   17060:	e5840008 	str	r0, [r4, #8]
	return xc;
}
   17064:	e8bd4010 	pop	{r4, lr}
   17068:	e12fff1e 	bx	lr

0001706c <cHMC5843::getY()>:

float cHMC5843::getY(void)
{
   1706c:	e92d4010 	push	{r4, lr}
   17070:	e1a04000 	mov	r4, r0
	yc = yc/gain;
   17074:	e5900018 	ldr	r0, [r0, #24]
   17078:	eb0038ca 	bl	253a8 <__aeabi_i2f>
   1707c:	e1a01000 	mov	r1, r0
   17080:	e594000c 	ldr	r0, [r4, #12]
   17084:	eb003964 	bl	2561c <__aeabi_fdiv>
   17088:	e584000c 	str	r0, [r4, #12]
	return yc;
}
   1708c:	e8bd4010 	pop	{r4, lr}
   17090:	e12fff1e 	bx	lr

00017094 <cHMC5843::getZ()>:

float cHMC5843::getZ(void)
{
   17094:	e92d4010 	push	{r4, lr}
   17098:	e1a04000 	mov	r4, r0
	zc = zc/gain;
   1709c:	e5900018 	ldr	r0, [r0, #24]
   170a0:	eb0038c0 	bl	253a8 <__aeabi_i2f>
   170a4:	e1a01000 	mov	r1, r0
   170a8:	e5940010 	ldr	r0, [r4, #16]
   170ac:	eb00395a 	bl	2561c <__aeabi_fdiv>
   170b0:	e5840010 	str	r0, [r4, #16]
	return zc;
}
   170b4:	e8bd4010 	pop	{r4, lr}
   170b8:	e12fff1e 	bx	lr

000170bc <cHMC5843::getHeading()>:

float cHMC5843::getHeading(void)
{
   170bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   170c0:	e1a04000 	mov	r4, r0
	getX();
   170c4:	ebffffde 	bl	17044 <cHMC5843::getX()>
	getY();
   170c8:	e1a00004 	mov	r0, r4
   170cc:	ebffffe6 	bl	1706c <cHMC5843::getY()>
	getZ();
   170d0:	e1a00004 	mov	r0, r4
   170d4:	ebffffee 	bl	17094 <cHMC5843::getZ()>
	
	if(yc > 0)
   170d8:	e594500c 	ldr	r5, [r4, #12]
   170dc:	e3a06000 	mov	r6, #0
   170e0:	e1a00005 	mov	r0, r5
   170e4:	e1a01006 	mov	r1, r6
   170e8:	eb0039a3 	bl	2577c <__gesf2>
   170ec:	e3500000 	cmp	r0, #0
   170f0:	da000011 	ble	1713c <cHMC5843::getHeading()+0x80>
	{
		heading = 90-(atan2(xc,yc))*(180/3.14);
   170f4:	e5940008 	ldr	r0, [r4, #8]
   170f8:	eb00364b 	bl	24a2c <__aeabi_f2d>
   170fc:	e1a06000 	mov	r6, r0
   17100:	e1a00005 	mov	r0, r5
   17104:	e1a07001 	mov	r7, r1
   17108:	eb003647 	bl	24a2c <__aeabi_f2d>
   1710c:	e1a02000 	mov	r2, r0
   17110:	e1a03001 	mov	r3, r1
   17114:	e1a00006 	mov	r0, r6
   17118:	e1a01007 	mov	r1, r7
   1711c:	eb002a11 	bl	21968 <atan2>
   17120:	e59f20a4 	ldr	r2, [pc, #164]	; 171cc <cHMC5843::getHeading()+0x110>
   17124:	e59f30a4 	ldr	r3, [pc, #164]	; 171d0 <cHMC5843::getHeading()+0x114>
   17128:	eb00366f 	bl	24aec <__aeabi_dmul>
   1712c:	e1a02000 	mov	r2, r0
   17130:	e1a03001 	mov	r3, r1
   17134:	e59f0098 	ldr	r0, [pc, #152]	; 171d4 <cHMC5843::getHeading()+0x118>
   17138:	ea000015 	b	17194 <cHMC5843::getHeading()+0xd8>
	}
	else if(yc < 0)
   1713c:	e1a00005 	mov	r0, r5
   17140:	e1a01006 	mov	r1, r6
   17144:	eb00398e 	bl	25784 <__lesf2>
   17148:	e3500000 	cmp	r0, #0
	{
		heading = 270-(atan2(xc,yc))*(180/3.14);
   1714c:	e5940008 	ldr	r0, [r4, #8]
	
	if(yc > 0)
	{
		heading = 90-(atan2(xc,yc))*(180/3.14);
	}
	else if(yc < 0)
   17150:	aa000014 	bge	171a8 <cHMC5843::getHeading()+0xec>
	{
		heading = 270-(atan2(xc,yc))*(180/3.14);
   17154:	eb003634 	bl	24a2c <__aeabi_f2d>
   17158:	e1a06000 	mov	r6, r0
   1715c:	e1a00005 	mov	r0, r5
   17160:	e1a07001 	mov	r7, r1
   17164:	eb003630 	bl	24a2c <__aeabi_f2d>
   17168:	e1a02000 	mov	r2, r0
   1716c:	e1a03001 	mov	r3, r1
   17170:	e1a00006 	mov	r0, r6
   17174:	e1a01007 	mov	r1, r7
   17178:	eb0029fa 	bl	21968 <atan2>
   1717c:	e59f2048 	ldr	r2, [pc, #72]	; 171cc <cHMC5843::getHeading()+0x110>
   17180:	e59f3048 	ldr	r3, [pc, #72]	; 171d0 <cHMC5843::getHeading()+0x114>
   17184:	eb003658 	bl	24aec <__aeabi_dmul>
   17188:	e1a02000 	mov	r2, r0
   1718c:	e59f0044 	ldr	r0, [pc, #68]	; 171d8 <cHMC5843::getHeading()+0x11c>
   17190:	e1a03001 	mov	r3, r1
   17194:	e3a01000 	mov	r1, #0
   17198:	eb003555 	bl	246f4 <__aeabi_dsub>
   1719c:	eb0037e5 	bl	25138 <__aeabi_d2f>
   171a0:	e5840014 	str	r0, [r4, #20]
   171a4:	ea000005 	b	171c0 <cHMC5843::getHeading()+0x104>
	}
	else
	{
		if(xc > 0)
   171a8:	e1a01006 	mov	r1, r6
   171ac:	eb003972 	bl	2577c <__gesf2>
   171b0:	e3500000 	cmp	r0, #0
		{
			heading = 180.0;
   171b4:	c59f3020 	ldrgt	r3, [pc, #32]	; 171dc <cHMC5843::getHeading()+0x120>
		}
		else
		{
			heading = 0.0;
   171b8:	d5846014 	strle	r6, [r4, #20]
	}
	else
	{
		if(xc > 0)
		{
			heading = 180.0;
   171bc:	c5843014 	strgt	r3, [r4, #20]
			heading = 0.0;
		}
	}
	return heading;
	
}
   171c0:	e5940014 	ldr	r0, [r4, #20]
   171c4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   171c8:	e12fff1e 	bx	lr
   171cc:	404ca994 	.word	0x404ca994
   171d0:	61d59ae7 	.word	0x61d59ae7
   171d4:	40568000 	.word	0x40568000
   171d8:	4070e000 	.word	0x4070e000
   171dc:	43340000 	.word	0x43340000

000171e0 <_GLOBAL__sub_I_compass>:
   171e0:	e92d4010 	push	{r4, lr}

#define GLOBALOBJECT

cHMC5843 compass(0, HMC_ADDR);

cHMC5843::cHMC5843(int port, char i2c_address)
   171e4:	e59f401c 	ldr	r4, [pc, #28]	; 17208 <_GLOBAL__sub_I_compass+0x28>
   171e8:	e1a00004 	mov	r0, r4
   171ec:	ebfffe8a 	bl	16c1c <I2C::I2C()>
{
	_i2c_port = port;
   171f0:	e3a03000 	mov	r3, #0
   171f4:	e5843000 	str	r3, [r4]
	_i2c_address = i2c_address;
   171f8:	e3a0303c 	mov	r3, #60	; 0x3c
   171fc:	e5c43022 	strb	r3, [r4, #34]	; 0x22
			heading = 0.0;
		}
	}
	return heading;
	
}
   17200:	e8bd4010 	pop	{r4, lr}
   17204:	e12fff1e 	bx	lr
   17208:	400010e0 	.word	0x400010e0

0001720c <cITG3200::cITG3200(int, char)>:
#define GLOBALOBJECT

cITG3200 gyro(0, ITG_ADDR);


cITG3200::cITG3200(int port, char i2c_address)
   1720c:	e92d4070 	push	{r4, r5, r6, lr}
   17210:	e1a04000 	mov	r4, r0
   17214:	e1a05001 	mov	r5, r1
   17218:	e20260ff 	and	r6, r2, #255	; 0xff
   1721c:	ebfffe7e 	bl	16c1c <I2C::I2C()>
{
	_i2c_port = port;
	_i2c_address = i2c_address;
	
	x_cal=0;
   17220:	e3a03000 	mov	r3, #0
cITG3200 gyro(0, ITG_ADDR);


cITG3200::cITG3200(int port, char i2c_address)
{
	_i2c_port = port;
   17224:	e5845000 	str	r5, [r4]
	_i2c_address = i2c_address;
   17228:	e5c46024 	strb	r6, [r4, #36]	; 0x24
	
	x_cal=0;
   1722c:	e1c430b6 	strh	r3, [r4, #6]
	y_cal=0;
   17230:	e1c430b8 	strh	r3, [r4, #8]
	z_cal=0;
   17234:	e1c430ba 	strh	r3, [r4, #10]
}
   17238:	e8bd4070 	pop	{r4, r5, r6, lr}
   1723c:	e12fff1e 	bx	lr

00017240 <cITG3200::write(char*, char)>:
	
	write(value, 1);	//Set up the i2c address to read from
	return send(_i2c_address, value, READ, length);	
}

char cITG3200::write(char * value, char length){
   17240:	e92d4001 	push	{r0, lr}
   17244:	e1a03001 	mov	r3, r1
   17248:	e20220ff 	and	r2, r2, #255	; 0xff

	return send(_i2c_address, value, WRITE, length);
   1724c:	e5d01024 	ldrb	r1, [r0, #36]	; 0x24
   17250:	e58d2000 	str	r2, [sp]
   17254:	e1a02003 	mov	r2, r3
   17258:	e3a03000 	mov	r3, #0
   1725c:	ebfffe7a 	bl	16c4c <I2C::send(char, char*, char, char)>
}
   17260:	e8bd4008 	pop	{r3, lr}
   17264:	e12fff1e 	bx	lr

00017268 <cITG3200::read(char*, char)>:
	
	updated=0;
}


char cITG3200::read(char * value, char length){
   17268:	e92d4071 	push	{r0, r4, r5, r6, lr}
   1726c:	e1a04000 	mov	r4, r0
   17270:	e1a05001 	mov	r5, r1
   17274:	e20260ff 	and	r6, r2, #255	; 0xff
	
	write(value, 1);	//Set up the i2c address to read from
   17278:	e3a02001 	mov	r2, #1
   1727c:	ebffffef 	bl	17240 <cITG3200::write(char*, char)>
	return send(_i2c_address, value, READ, length);	
   17280:	e5d41024 	ldrb	r1, [r4, #36]	; 0x24
   17284:	e1a00004 	mov	r0, r4
   17288:	e1a02005 	mov	r2, r5
   1728c:	e3a03001 	mov	r3, #1
   17290:	e58d6000 	str	r6, [sp]
   17294:	ebfffe6c 	bl	16c4c <I2C::send(char, char*, char, char)>
}
   17298:	e8bd4078 	pop	{r3, r4, r5, r6, lr}
   1729c:	e12fff1e 	bx	lr

000172a0 <cITG3200::begin()>:
	y_cal=0;
	z_cal=0;
}

void cITG3200::begin(void)
{
   172a0:	e92d4070 	push	{r4, r5, r6, lr}
   172a4:	e1a04000 	mov	r4, r0
	configure();
   172a8:	ebfffe5c 	bl	16c20 <I2C::configure()>
	
	//Set internal clock to 1kHz with 42Hz LPF and Full Scale to 3 for proper operation
	values[0]=DLPF_FS;	
   172ac:	e3a03016 	mov	r3, #22
	values[1]=(DLPF_FS_SEL_0|DLPF_FS_SEL_1|DLPF_CFG_0);
	write(values, 2);	//Write the new data to the HMC register.
   172b0:	e284501c 	add	r5, r4, #28
void cITG3200::begin(void)
{
	configure();
	
	//Set internal clock to 1kHz with 42Hz LPF and Full Scale to 3 for proper operation
	values[0]=DLPF_FS;	
   172b4:	e5c4301c 	strb	r3, [r4, #28]
	values[1]=(DLPF_FS_SEL_0|DLPF_FS_SEL_1|DLPF_CFG_0);
   172b8:	e3a03019 	mov	r3, #25
   172bc:	e5c4301d 	strb	r3, [r4, #29]
	write(values, 2);	//Write the new data to the HMC register.
   172c0:	e1a01005 	mov	r1, r5
   172c4:	e3a02002 	mov	r2, #2
   172c8:	e1a00004 	mov	r0, r4
   172cc:	ebffffdb 	bl	17240 <cITG3200::write(char*, char)>
	
	//Set sample rate divider for 100 Hz operation
	values[0] = SMPLRT_DIV;
   172d0:	e3a03015 	mov	r3, #21
   172d4:	e5c4301c 	strb	r3, [r4, #28]
	values[1] = 9;	//Fsample = Fint / (divider + 1) where Fint is 1kHz
   172d8:	e3a03009 	mov	r3, #9
   172dc:	e5c4301d 	strb	r3, [r4, #29]
	write(values, 2);
   172e0:	e1a01005 	mov	r1, r5
   172e4:	e3a02002 	mov	r2, #2
   172e8:	e1a00004 	mov	r0, r4
   172ec:	ebffffd3 	bl	17240 <cITG3200::write(char*, char)>
	
	//Setup the interrupt to trigger when new data is ready.
	values[0]=INT_CFG;
   172f0:	e3a03017 	mov	r3, #23
   172f4:	e5c4301c 	strb	r3, [r4, #28]
	values[1]=INT_CFG_RAW_RDY_EN | INT_CFG_ITG_RDY_EN;
   172f8:	e3a03005 	mov	r3, #5
   172fc:	e5c4301d 	strb	r3, [r4, #29]
	write(values, 2);
   17300:	e1a01005 	mov	r1, r5
   17304:	e3a02002 	mov	r2, #2
   17308:	e1a00004 	mov	r0, r4
   1730c:	ebffffcb 	bl	17240 <cITG3200::write(char*, char)>
		
	//Select X gyro PLL for clock source
	values[0] = PWR_MGM;
	values[1] = PWR_MGM_CLK_SEL_0;
   17310:	e3a06001 	mov	r6, #1
	values[0]=INT_CFG;
	values[1]=INT_CFG_RAW_RDY_EN | INT_CFG_ITG_RDY_EN;
	write(values, 2);
		
	//Select X gyro PLL for clock source
	values[0] = PWR_MGM;
   17314:	e3a0303e 	mov	r3, #62	; 0x3e
   17318:	e5c4301c 	strb	r3, [r4, #28]
	values[1] = PWR_MGM_CLK_SEL_0;
	write(values, 2);
   1731c:	e1a01005 	mov	r1, r5
   17320:	e3a02002 	mov	r2, #2
	values[1]=INT_CFG_RAW_RDY_EN | INT_CFG_ITG_RDY_EN;
	write(values, 2);
		
	//Select X gyro PLL for clock source
	values[0] = PWR_MGM;
	values[1] = PWR_MGM_CLK_SEL_0;
   17324:	e5c4601d 	strb	r6, [r4, #29]
	write(values, 2);
   17328:	e1a00004 	mov	r0, r4
   1732c:	ebffffc3 	bl	17240 <cITG3200::write(char*, char)>

	//Wait for the PLL clocks to stabilize
	values[0]=INT_STATUS;
   17330:	e3a0301a 	mov	r3, #26
   17334:	e5c4301c 	strb	r3, [r4, #28]
	read(values, 1);
   17338:	e1a00004 	mov	r0, r4
   1733c:	e1a01005 	mov	r1, r5
   17340:	e1a02006 	mov	r2, r6
   17344:	ebffffc7 	bl	17268 <cITG3200::read(char*, char)>
	{
		values[0]=INT_STATUS;
		read(values, 1);
	}*/	
	
	updated=0;
   17348:	e3a03000 	mov	r3, #0
   1734c:	e5c43004 	strb	r3, [r4, #4]
}
   17350:	e8bd4070 	pop	{r4, r5, r6, lr}
   17354:	e12fff1e 	bx	lr

00017358 <cITG3200::update()>:

	return send(_i2c_address, value, WRITE, length);
}

char cITG3200::update(void)
{
   17358:	e92d4070 	push	{r4, r5, r6, lr}
	values[0]=INT_STATUS;
   1735c:	e3a0301a 	mov	r3, #26
   17360:	e1a05000 	mov	r5, r0
   17364:	e5e5301c 	strb	r3, [r5, #28]!

	return send(_i2c_address, value, WRITE, length);
}

char cITG3200::update(void)
{
   17368:	e1a04000 	mov	r4, r0
	values[0]=INT_STATUS;
	read(values, 1);
   1736c:	e1a01005 	mov	r1, r5
   17370:	e3a02001 	mov	r2, #1
   17374:	ebffffbb 	bl	17268 <cITG3200::read(char*, char)>
	
	if(values[0] == (1<<0))
   17378:	e5d4601c 	ldrb	r6, [r4, #28]
   1737c:	e3560001 	cmp	r6, #1
			yr = (int16_t)((values[4]<<8)|values[5]);
			zr = (int16_t)((values[6]<<8)|values[7]);
		}
		else return 0;
	}
	else return 0;
   17380:	13a00000 	movne	r0, #0
char cITG3200::update(void)
{
	values[0]=INT_STATUS;
	read(values, 1);
	
	if(values[0] == (1<<0))
   17384:	1a000024 	bne	1741c <cITG3200::update()+0xc4>
	{
		values[0]=TEMP_OUT_H;
   17388:	e3a0301b 	mov	r3, #27
   1738c:	e5c4301c 	strb	r3, [r4, #28]
		if(read(values, 8))
   17390:	e1a00004 	mov	r0, r4
   17394:	e1a01005 	mov	r1, r5
   17398:	e3a02008 	mov	r2, #8
   1739c:	ebffffb1 	bl	17268 <cITG3200::read(char*, char)>
   173a0:	e3500000 	cmp	r0, #0
   173a4:	0a00001c 	beq	1741c <cITG3200::update()+0xc4>
		{
			tempr = (int16_t)((values[0]<<8)|values[1]);
   173a8:	e5d4301d 	ldrb	r3, [r4, #29]
   173ac:	e5d4001c 	ldrb	r0, [r4, #28]
   173b0:	e1830400 	orr	r0, r3, r0, lsl #8
   173b4:	e1a00800 	lsl	r0, r0, #16
   173b8:	e1a00840 	asr	r0, r0, #16
   173bc:	eb0037f9 	bl	253a8 <__aeabi_i2f>
			xr = (int16_t)((values[2]<<8)|values[3]);
   173c0:	e5d4301f 	ldrb	r3, [r4, #31]
	if(values[0] == (1<<0))
	{
		values[0]=TEMP_OUT_H;
		if(read(values, 8))
		{
			tempr = (int16_t)((values[0]<<8)|values[1]);
   173c4:	e5840018 	str	r0, [r4, #24]
			xr = (int16_t)((values[2]<<8)|values[3]);
   173c8:	e5d4001e 	ldrb	r0, [r4, #30]
   173cc:	e1830400 	orr	r0, r3, r0, lsl #8
   173d0:	e1a00800 	lsl	r0, r0, #16
   173d4:	e1a00840 	asr	r0, r0, #16
   173d8:	eb0037f2 	bl	253a8 <__aeabi_i2f>
			yr = (int16_t)((values[4]<<8)|values[5]);
   173dc:	e5d43021 	ldrb	r3, [r4, #33]	; 0x21
	{
		values[0]=TEMP_OUT_H;
		if(read(values, 8))
		{
			tempr = (int16_t)((values[0]<<8)|values[1]);
			xr = (int16_t)((values[2]<<8)|values[3]);
   173e0:	e584000c 	str	r0, [r4, #12]
			yr = (int16_t)((values[4]<<8)|values[5]);
   173e4:	e5d40020 	ldrb	r0, [r4, #32]
   173e8:	e1830400 	orr	r0, r3, r0, lsl #8
   173ec:	e1a00800 	lsl	r0, r0, #16
   173f0:	e1a00840 	asr	r0, r0, #16
   173f4:	eb0037eb 	bl	253a8 <__aeabi_i2f>
			zr = (int16_t)((values[6]<<8)|values[7]);
   173f8:	e5d43023 	ldrb	r3, [r4, #35]	; 0x23
		values[0]=TEMP_OUT_H;
		if(read(values, 8))
		{
			tempr = (int16_t)((values[0]<<8)|values[1]);
			xr = (int16_t)((values[2]<<8)|values[3]);
			yr = (int16_t)((values[4]<<8)|values[5]);
   173fc:	e5840010 	str	r0, [r4, #16]
			zr = (int16_t)((values[6]<<8)|values[7]);
   17400:	e5d40022 	ldrb	r0, [r4, #34]	; 0x22
   17404:	e1830400 	orr	r0, r3, r0, lsl #8
   17408:	e1a00800 	lsl	r0, r0, #16
   1740c:	e1a00840 	asr	r0, r0, #16
   17410:	eb0037e4 	bl	253a8 <__aeabi_i2f>
   17414:	e5840014 	str	r0, [r4, #20]
		}
		else return 0;
	}
	else return 0;
	return 1;
   17418:	e1a00006 	mov	r0, r6
}
   1741c:	e8bd4070 	pop	{r4, r5, r6, lr}
   17420:	e12fff1e 	bx	lr

00017424 <cITG3200::calibrate()>:

void cITG3200::calibrate(void)
{
   17424:	e92d4030 	push	{r4, r5, lr}
   17428:	e1a04000 	mov	r4, r0
   1742c:	e3a05010 	mov	r5, #16
	for(int i=0; i<16; i++)
	{
		update();	//Get new values while device is not moving
   17430:	e1a00004 	mov	r0, r4
   17434:	ebffffc7 	bl	17358 <cITG3200::update()>
		x_cal+=(int16_t)xr;
   17438:	e594000c 	ldr	r0, [r4, #12]
   1743c:	eb00390d 	bl	25878 <__aeabi_f2iz>
   17440:	e1d430b6 	ldrh	r3, [r4, #6]
   17444:	e0803003 	add	r3, r0, r3
   17448:	e1c430b6 	strh	r3, [r4, #6]
		y_cal+=(int16_t)yr;
   1744c:	e5940010 	ldr	r0, [r4, #16]
   17450:	eb003908 	bl	25878 <__aeabi_f2iz>
   17454:	e1d430b8 	ldrh	r3, [r4, #8]
   17458:	e0803003 	add	r3, r0, r3
   1745c:	e1c430b8 	strh	r3, [r4, #8]
		z_cal+=(int16_t)zr;
   17460:	e5940014 	ldr	r0, [r4, #20]
   17464:	eb003903 	bl	25878 <__aeabi_f2iz>
   17468:	e1d430ba 	ldrh	r3, [r4, #10]
   1746c:	e0803003 	add	r3, r0, r3
   17470:	e1c430ba 	strh	r3, [r4, #10]
		delay_ms(100);
   17474:	e3a00064 	mov	r0, #100	; 0x64
   17478:	ebffe4f6 	bl	10858 <delay_ms>
	return 1;
}

void cITG3200::calibrate(void)
{
	for(int i=0; i<16; i++)
   1747c:	e2555001 	subs	r5, r5, #1
   17480:	1affffea 	bne	17430 <cITG3200::calibrate()+0xc>
		x_cal+=(int16_t)xr;
		y_cal+=(int16_t)yr;
		z_cal+=(int16_t)zr;
		delay_ms(100);
	}
	x_cal/=16;
   17484:	e1d430f6 	ldrsh	r3, [r4, #6]
   17488:	e283200f 	add	r2, r3, #15
   1748c:	e3530000 	cmp	r3, #0
   17490:	b1a03002 	movlt	r3, r2
   17494:	e1a03243 	asr	r3, r3, #4
   17498:	e1c430b6 	strh	r3, [r4, #6]
	y_cal/=16;
   1749c:	e1d430f8 	ldrsh	r3, [r4, #8]
   174a0:	e283200f 	add	r2, r3, #15
   174a4:	e3530000 	cmp	r3, #0
   174a8:	b1a03002 	movlt	r3, r2
   174ac:	e1a03243 	asr	r3, r3, #4
   174b0:	e1c430b8 	strh	r3, [r4, #8]
	z_cal/=16;
   174b4:	e1d430fa 	ldrsh	r3, [r4, #10]
   174b8:	e283200f 	add	r2, r3, #15
   174bc:	e3530000 	cmp	r3, #0
   174c0:	b1a03002 	movlt	r3, r2
   174c4:	e1a03243 	asr	r3, r3, #4
   174c8:	e1c430ba 	strh	r3, [r4, #10]
}
   174cc:	e8bd4030 	pop	{r4, r5, lr}
   174d0:	e12fff1e 	bx	lr

000174d4 <cITG3200::getX()>:

float cITG3200::getX(void)
{
   174d4:	e92d4010 	push	{r4, lr}
   174d8:	e1a04000 	mov	r4, r0
	xr -= x_cal;
   174dc:	e1d000f6 	ldrsh	r0, [r0, #6]
   174e0:	eb0037b0 	bl	253a8 <__aeabi_i2f>
   174e4:	e1a01000 	mov	r1, r0
   174e8:	e594000c 	ldr	r0, [r4, #12]
   174ec:	eb00373b 	bl	251e0 <__aeabi_fsub>
	xr = xr/14.375;
   174f0:	e59f100c 	ldr	r1, [pc, #12]	; 17504 <cITG3200::getX()+0x30>
   174f4:	eb003848 	bl	2561c <__aeabi_fdiv>
   174f8:	e584000c 	str	r0, [r4, #12]
	return xr;
}
   174fc:	e8bd4010 	pop	{r4, lr}
   17500:	e12fff1e 	bx	lr
   17504:	41660000 	.word	0x41660000

00017508 <cITG3200::getY()>:

float cITG3200::getY(void)
{
   17508:	e92d4010 	push	{r4, lr}
   1750c:	e1a04000 	mov	r4, r0
	yr -= y_cal;
   17510:	e1d000f8 	ldrsh	r0, [r0, #8]
   17514:	eb0037a3 	bl	253a8 <__aeabi_i2f>
   17518:	e1a01000 	mov	r1, r0
   1751c:	e5940010 	ldr	r0, [r4, #16]
   17520:	eb00372e 	bl	251e0 <__aeabi_fsub>
	yr = yr/14.375;
   17524:	e59f100c 	ldr	r1, [pc, #12]	; 17538 <cITG3200::getY()+0x30>
   17528:	eb00383b 	bl	2561c <__aeabi_fdiv>
   1752c:	e5840010 	str	r0, [r4, #16]
	return yr;
}
   17530:	e8bd4010 	pop	{r4, lr}
   17534:	e12fff1e 	bx	lr
   17538:	41660000 	.word	0x41660000

0001753c <cITG3200::getZ()>:

float cITG3200::getZ(void)
{
   1753c:	e92d4010 	push	{r4, lr}
   17540:	e1a04000 	mov	r4, r0
	zr -= z_cal;
   17544:	e1d000fa 	ldrsh	r0, [r0, #10]
   17548:	eb003796 	bl	253a8 <__aeabi_i2f>
   1754c:	e1a01000 	mov	r1, r0
   17550:	e5940014 	ldr	r0, [r4, #20]
   17554:	eb003721 	bl	251e0 <__aeabi_fsub>
	zr = zr/14.375;
   17558:	e59f100c 	ldr	r1, [pc, #12]	; 1756c <cITG3200::getZ()+0x30>
   1755c:	eb00382e 	bl	2561c <__aeabi_fdiv>
   17560:	e5840014 	str	r0, [r4, #20]
	return zr;
}
   17564:	e8bd4010 	pop	{r4, lr}
   17568:	e12fff1e 	bx	lr
   1756c:	41660000 	.word	0x41660000

00017570 <cITG3200::getTemp()>:

float cITG3200::getTemp(void)
{
   17570:	e92d4010 	push	{r4, lr}
   17574:	e1a04000 	mov	r4, r0
	tempr = -13200-tempr;	//Get the offset temp
   17578:	e5941018 	ldr	r1, [r4, #24]
   1757c:	e59f001c 	ldr	r0, [pc, #28]	; 175a0 <cITG3200::getTemp()+0x30>
   17580:	eb003716 	bl	251e0 <__aeabi_fsub>
	tempr = tempr/280;	//Convert the offset to degree C
   17584:	e59f1018 	ldr	r1, [pc, #24]	; 175a4 <cITG3200::getTemp()+0x34>
   17588:	eb003823 	bl	2561c <__aeabi_fdiv>
	tempr += 35;	//Add 35 degrees C to compensate for the offset
   1758c:	e59f1014 	ldr	r1, [pc, #20]	; 175a8 <cITG3200::getTemp()+0x38>
   17590:	eb003713 	bl	251e4 <__addsf3>
   17594:	e5840018 	str	r0, [r4, #24]
	return tempr;
}
   17598:	e8bd4010 	pop	{r4, lr}
   1759c:	e12fff1e 	bx	lr
   175a0:	c64e4000 	.word	0xc64e4000
   175a4:	438c0000 	.word	0x438c0000
   175a8:	420c0000 	.word	0x420c0000

000175ac <cITG3200::setCalibrationValues(int, int, int)>:

void cITG3200::setCalibrationValues(int x, int y, int z)
{
	x_cal=x;
   175ac:	e1c010b6 	strh	r1, [r0, #6]
	y_cal=y;
   175b0:	e1c020b8 	strh	r2, [r0, #8]
	z_cal=z;
   175b4:	e1c030ba 	strh	r3, [r0, #10]
}
   175b8:	e12fff1e 	bx	lr

000175bc <cITG3200::getXcal()>:

int16_t cITG3200::getXcal(void)
{
	return x_cal;
}
   175bc:	e1d000f6 	ldrsh	r0, [r0, #6]
   175c0:	e12fff1e 	bx	lr

000175c4 <cITG3200::getYcal()>:

int16_t cITG3200::getYcal(void)
{
	return y_cal;
}
   175c4:	e1d000f8 	ldrsh	r0, [r0, #8]
   175c8:	e12fff1e 	bx	lr

000175cc <cITG3200::getZcal()>:

int16_t cITG3200::getZcal(void)
{
	return z_cal;
}
   175cc:	e1d000fa 	ldrsh	r0, [r0, #10]
   175d0:	e12fff1e 	bx	lr

000175d4 <_GLOBAL__sub_I_gyro>:
   175d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	#include "timer1.h"	
}

#define GLOBALOBJECT

cITG3200 gyro(0, ITG_ADDR);
   175d8:	e59f0010 	ldr	r0, [pc, #16]	; 175f0 <_GLOBAL__sub_I_gyro+0x1c>
   175dc:	e3a01000 	mov	r1, #0
   175e0:	e3a020d0 	mov	r2, #208	; 0xd0
   175e4:	ebffff08 	bl	1720c <cITG3200::cITG3200(int, char)>
}

int16_t cITG3200::getZcal(void)
{
	return z_cal;
}
   175e8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   175ec:	e12fff1e 	bx	lr
   175f0:	40001104 	.word	0x40001104

000175f4 <cEM408::cEM408(unsigned int, unsigned int)>:

cEM408 gps(1, 12);

cEM408::cEM408(unsigned int port, unsigned int en_pin)
{
	_en_pin=en_pin;
   175f4:	e5802094 	str	r2, [r0, #148]	; 0x94
	_port=port;
   175f8:	e5801098 	str	r1, [r0, #152]	; 0x98
}
   175fc:	e12fff1e 	bx	lr

00017600 <cEM408::begin(unsigned int)>:

void cEM408::begin(unsigned int baud_rate)
{
   17600:	e92d4030 	push	{r4, r5, lr}
   17604:	e1a04000 	mov	r4, r0
	//Make sure the Enable pin is set up correctly
	PINSEL0 &= ~(3<<((_en_pin+1)*2));	//Set the pin as GPIO in the Pin Select Register
   17608:	e5942094 	ldr	r2, [r4, #148]	; 0x94
   1760c:	e59f3060 	ldr	r3, [pc, #96]	; 17674 <cEM408::begin(unsigned int)+0x74>
	_en_pin=en_pin;
	_port=port;
}

void cEM408::begin(unsigned int baud_rate)
{
   17610:	e1a00001 	mov	r0, r1
	//Make sure the Enable pin is set up correctly
	PINSEL0 &= ~(3<<((_en_pin+1)*2));	//Set the pin as GPIO in the Pin Select Register
   17614:	e593c000 	ldr	ip, [r3]
   17618:	e2821001 	add	r1, r2, #1
   1761c:	e1a01081 	lsl	r1, r1, #1
   17620:	e3a05003 	mov	r5, #3
   17624:	e1cc1115 	bic	r1, ip, r5, lsl r1
	IODIR0 |= (1<<_en_pin);	//Sets the enable pin as an output
   17628:	e3a0c001 	mov	ip, #1
   1762c:	e1a0221c 	lsl	r2, ip, r2
}

void cEM408::begin(unsigned int baud_rate)
{
	//Make sure the Enable pin is set up correctly
	PINSEL0 &= ~(3<<((_en_pin+1)*2));	//Set the pin as GPIO in the Pin Select Register
   17630:	e5831000 	str	r1, [r3]
	IODIR0 |= (1<<_en_pin);	//Sets the enable pin as an output
   17634:	e2433901 	sub	r3, r3, #16384	; 0x4000
   17638:	e5931008 	ldr	r1, [r3, #8]
   1763c:	e1821001 	orr	r1, r2, r1
   17640:	e5831008 	str	r1, [r3, #8]
	IOCLR0 = (1<<_en_pin);		//Turns the GPS module off by default.
   17644:	e583200c 	str	r2, [r3, #12]
	
	if(_port == 0)
   17648:	e5943098 	ldr	r3, [r4, #152]	; 0x98
   1764c:	e3530000 	cmp	r3, #0
   17650:	1a000001 	bne	1765c <cEM408::begin(unsigned int)+0x5c>
		init_serial0(baud_rate);
   17654:	ebffe385 	bl	10470 <init_serial0>
   17658:	ea000001 	b	17664 <cEM408::begin(unsigned int)+0x64>
	else if(_port == 1)
   1765c:	e3530001 	cmp	r3, #1
		init_serial1(baud_rate);
   17660:	0bffe398 	bleq	104c8 <init_serial1>
		
	updated=0;
   17664:	e3a03000 	mov	r3, #0
   17668:	e5c43090 	strb	r3, [r4, #144]	; 0x90
}
   1766c:	e8bd4030 	pop	{r4, r5, lr}
   17670:	e12fff1e 	bx	lr
   17674:	e002c000 	.word	0xe002c000

00017678 <cEM408::on()>:

void cEM408::on(void)
{
	IOSET0 = (1<<_en_pin);	//Turns the GPS module on by setting the enable pin high.
   17678:	e5903094 	ldr	r3, [r0, #148]	; 0x94
   1767c:	e3a02001 	mov	r2, #1
   17680:	e1a02312 	lsl	r2, r2, r3
   17684:	e59f3004 	ldr	r3, [pc, #4]	; 17690 <cEM408::on()+0x18>
   17688:	e5832004 	str	r2, [r3, #4]
	//delay_ms(500);
}
   1768c:	e12fff1e 	bx	lr
   17690:	e0028000 	.word	0xe0028000

00017694 <cEM408::off()>:

void cEM408::off(void)
{
	IOCLR0 = (1<<_en_pin);	//Turns the GPS module off by setting the enable pin low.
   17694:	e5903094 	ldr	r3, [r0, #148]	; 0x94
   17698:	e3a02001 	mov	r2, #1
   1769c:	e1a02312 	lsl	r2, r2, r3
   176a0:	e59f3004 	ldr	r3, [pc, #4]	; 176ac <cEM408::off()+0x18>
   176a4:	e583200c 	str	r2, [r3, #12]
}
   176a8:	e12fff1e 	bx	lr
   176ac:	e0028000 	.word	0xe0028000

000176b0 <cEM408::parse(char*)>:
{
	configure(type, 0);	//Disable the message type by setting the update frequency to 0
}

int cEM408::parse(char * inmessage)
{
   176b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   176b4:	e24ddf41 	sub	sp, sp, #260	; 0x104
	char delim[] = ",";	//GPS message delimiter is a comma
   176b8:	e3a0302c 	mov	r3, #44	; 0x2c
   176bc:	e28d2c01 	add	r2, sp, #256	; 0x100
   176c0:	e1c230b0 	strh	r3, [r2]
{
	configure(type, 0);	//Disable the message type by setting the update frequency to 0
}

int cEM408::parse(char * inmessage)
{
   176c4:	e1a04000 	mov	r4, r0
	char delim[] = ",";	//GPS message delimiter is a comma
	char msg_cksum=0;
	char calc_cksum=0;
	char ck_msg[256];
	
	msg_cksum = (int)strtol(&inmessage[strlen(inmessage)-2], NULL, 16);
   176c8:	e1a00001 	mov	r0, r1
{
	configure(type, 0);	//Disable the message type by setting the update frequency to 0
}

int cEM408::parse(char * inmessage)
{
   176cc:	e1a05001 	mov	r5, r1
	char delim[] = ",";	//GPS message delimiter is a comma
	char msg_cksum=0;
	char calc_cksum=0;
	char ck_msg[256];
	
	msg_cksum = (int)strtol(&inmessage[strlen(inmessage)-2], NULL, 16);
   176d0:	eb0005ad 	bl	18d8c <strlen>
   176d4:	e2400002 	sub	r0, r0, #2
   176d8:	e3a01000 	mov	r1, #0
   176dc:	e3a02010 	mov	r2, #16
   176e0:	e0850000 	add	r0, r5, r0
   176e4:	eb000cde 	bl	1aa64 <strtol>
	//rprintf("\r%02x\r", msg_cksum);	

	*ck_msg='\0';
   176e8:	e3a07000 	mov	r7, #0
	char delim[] = ",";	//GPS message delimiter is a comma
	char msg_cksum=0;
	char calc_cksum=0;
	char ck_msg[256];
	
	msg_cksum = (int)strtol(&inmessage[strlen(inmessage)-2], NULL, 16);
   176ec:	e20080ff 	and	r8, r0, #255	; 0xff
	//rprintf("\r%02x\r", msg_cksum);	

	*ck_msg='\0';
   176f0:	e28d6f41 	add	r6, sp, #260	; 0x104
	strncat(ck_msg, &inmessage[1], strlen(inmessage)-4); 
   176f4:	e1a00005 	mov	r0, r5
	char ck_msg[256];
	
	msg_cksum = (int)strtol(&inmessage[strlen(inmessage)-2], NULL, 16);
	//rprintf("\r%02x\r", msg_cksum);	

	*ck_msg='\0';
   176f8:	e5667104 	strb	r7, [r6, #-260]!	; 0x104
	strncat(ck_msg, &inmessage[1], strlen(inmessage)-4); 
   176fc:	eb0005a2 	bl	18d8c <strlen>
   17700:	e2851001 	add	r1, r5, #1
   17704:	e2402004 	sub	r2, r0, #4
   17708:	e1a0000d 	mov	r0, sp
   1770c:	eb0005b6 	bl	18dec <strncat>
	//rprintf("%s\r", ck_msg);
	GPS_CHECKSUM(ck_msg, calc_cksum);
   17710:	e1a0000d 	mov	r0, sp
   17714:	eb00059c 	bl	18d8c <strlen>
   17718:	e1a03007 	mov	r3, r7
   1771c:	ea000002 	b	1772c <cEM408::parse(char*)+0x7c>
   17720:	e7dd2007 	ldrb	r2, [sp, r7]
   17724:	e2877001 	add	r7, r7, #1
   17728:	e0233002 	eor	r3, r3, r2
   1772c:	e1570000 	cmp	r7, r0
   17730:	1afffffa 	bne	17720 <cEM408::parse(char*)+0x70>
	//rprintf("%02x\r", calc_cksum);
	if(calc_cksum != msg_cksum)return 0;
   17734:	e1530008 	cmp	r3, r8
   17738:	13a00000 	movne	r0, #0
   1773c:	1a000035 	bne	17818 <cEM408::parse(char*)+0x168>
	
	strcpy(&ck_msg[0], inmessage);
   17740:	e1a01005 	mov	r1, r5
   17744:	e1a0000d 	mov	r0, sp
   17748:	eb000553 	bl	18c9c <strcpy>
	char * result = NULL;
	result = strtok( &ck_msg[0], delim);
   1774c:	e28d1c01 	add	r1, sp, #256	; 0x100
   17750:	e1a0000d 	mov	r0, sp
   17754:	eb000c18 	bl	1a7bc <strtok>
	data.time = strtok(NULL, delim);
   17758:	e28d1c01 	add	r1, sp, #256	; 0x100
   1775c:	e3a00000 	mov	r0, #0
   17760:	eb000c15 	bl	1a7bc <strtok>
	data.status = strtok(NULL, delim);
   17764:	e28d1c01 	add	r1, sp, #256	; 0x100
	if(calc_cksum != msg_cksum)return 0;
	
	strcpy(&ck_msg[0], inmessage);
	char * result = NULL;
	result = strtok( &ck_msg[0], delim);
	data.time = strtok(NULL, delim);
   17768:	e5840010 	str	r0, [r4, #16]
	data.status = strtok(NULL, delim);
   1776c:	e3a00000 	mov	r0, #0
   17770:	eb000c11 	bl	1a7bc <strtok>
   17774:	e5840014 	str	r0, [r4, #20]
	if(*data.status == 'A')
   17778:	e5d03000 	ldrb	r3, [r0]
   1777c:	e3530041 	cmp	r3, #65	; 0x41
	{
		data.latitude.position = strtok(NULL, delim);
   17780:	e3a00000 	mov	r0, #0
	strcpy(&ck_msg[0], inmessage);
	char * result = NULL;
	result = strtok( &ck_msg[0], delim);
	data.time = strtok(NULL, delim);
	data.status = strtok(NULL, delim);
	if(*data.status == 'A')
   17784:	1a000023 	bne	17818 <cEM408::parse(char*)+0x168>
	{
		data.latitude.position = strtok(NULL, delim);
   17788:	e28d1c01 	add	r1, sp, #256	; 0x100
   1778c:	eb000c0a 	bl	1a7bc <strtok>
		data.latitude.direction = strtok(NULL, delim);
   17790:	e28d1c01 	add	r1, sp, #256	; 0x100
	result = strtok( &ck_msg[0], delim);
	data.time = strtok(NULL, delim);
	data.status = strtok(NULL, delim);
	if(*data.status == 'A')
	{
		data.latitude.position = strtok(NULL, delim);
   17794:	e5840000 	str	r0, [r4]
		data.latitude.direction = strtok(NULL, delim);
   17798:	e3a00000 	mov	r0, #0
   1779c:	eb000c06 	bl	1a7bc <strtok>
		data.longitude.position = strtok(NULL, delim);
   177a0:	e28d1c01 	add	r1, sp, #256	; 0x100
	data.time = strtok(NULL, delim);
	data.status = strtok(NULL, delim);
	if(*data.status == 'A')
	{
		data.latitude.position = strtok(NULL, delim);
		data.latitude.direction = strtok(NULL, delim);
   177a4:	e5840004 	str	r0, [r4, #4]
		data.longitude.position = strtok(NULL, delim);
   177a8:	e3a00000 	mov	r0, #0
   177ac:	eb000c02 	bl	1a7bc <strtok>
		data.longitude.direction = strtok(NULL, delim);
   177b0:	e28d1c01 	add	r1, sp, #256	; 0x100
	data.status = strtok(NULL, delim);
	if(*data.status == 'A')
	{
		data.latitude.position = strtok(NULL, delim);
		data.latitude.direction = strtok(NULL, delim);
		data.longitude.position = strtok(NULL, delim);
   177b4:	e5840008 	str	r0, [r4, #8]
		data.longitude.direction = strtok(NULL, delim);
   177b8:	e3a00000 	mov	r0, #0
   177bc:	eb000bfe 	bl	1a7bc <strtok>
		data.speed = strtok(NULL, delim);
   177c0:	e28d1c01 	add	r1, sp, #256	; 0x100
	if(*data.status == 'A')
	{
		data.latitude.position = strtok(NULL, delim);
		data.latitude.direction = strtok(NULL, delim);
		data.longitude.position = strtok(NULL, delim);
		data.longitude.direction = strtok(NULL, delim);
   177c4:	e584000c 	str	r0, [r4, #12]
		data.speed = strtok(NULL, delim);
   177c8:	e3a00000 	mov	r0, #0
   177cc:	eb000bfa 	bl	1a7bc <strtok>
		data.heading = strtok(NULL, delim);
   177d0:	e28d1c01 	add	r1, sp, #256	; 0x100
	{
		data.latitude.position = strtok(NULL, delim);
		data.latitude.direction = strtok(NULL, delim);
		data.longitude.position = strtok(NULL, delim);
		data.longitude.direction = strtok(NULL, delim);
		data.speed = strtok(NULL, delim);
   177d4:	e5840018 	str	r0, [r4, #24]
		data.heading = strtok(NULL, delim);
   177d8:	e3a00000 	mov	r0, #0
   177dc:	eb000bf6 	bl	1a7bc <strtok>
		data.date = strtok(NULL, delim);
   177e0:	e28d1c01 	add	r1, sp, #256	; 0x100
		data.latitude.position = strtok(NULL, delim);
		data.latitude.direction = strtok(NULL, delim);
		data.longitude.position = strtok(NULL, delim);
		data.longitude.direction = strtok(NULL, delim);
		data.speed = strtok(NULL, delim);
		data.heading = strtok(NULL, delim);
   177e4:	e584001c 	str	r0, [r4, #28]
		data.date = strtok(NULL, delim);
   177e8:	e3a00000 	mov	r0, #0
   177ec:	eb000bf2 	bl	1a7bc <strtok>
		data.mag = strtok(NULL, delim);
   177f0:	e28d1c01 	add	r1, sp, #256	; 0x100
		data.latitude.direction = strtok(NULL, delim);
		data.longitude.position = strtok(NULL, delim);
		data.longitude.direction = strtok(NULL, delim);
		data.speed = strtok(NULL, delim);
		data.heading = strtok(NULL, delim);
		data.date = strtok(NULL, delim);
   177f4:	e5840020 	str	r0, [r4, #32]
		data.mag = strtok(NULL, delim);
   177f8:	e3a00000 	mov	r0, #0
   177fc:	eb000bee 	bl	1a7bc <strtok>
		data.cksum = strtok(NULL, delim);
   17800:	e28d1c01 	add	r1, sp, #256	; 0x100
		data.longitude.position = strtok(NULL, delim);
		data.longitude.direction = strtok(NULL, delim);
		data.speed = strtok(NULL, delim);
		data.heading = strtok(NULL, delim);
		data.date = strtok(NULL, delim);
		data.mag = strtok(NULL, delim);
   17804:	e5840024 	str	r0, [r4, #36]	; 0x24
		data.cksum = strtok(NULL, delim);
   17808:	e3a00000 	mov	r0, #0
   1780c:	eb000bea 	bl	1a7bc <strtok>
   17810:	e5840028 	str	r0, [r4, #40]	; 0x28
	}
	else return 0;	
	
	return 1;
   17814:	e3a00001 	mov	r0, #1
}
   17818:	e28ddf41 	add	sp, sp, #260	; 0x104
   1781c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   17820:	e12fff1e 	bx	lr

00017824 <cEM408::configure(unsigned char, unsigned char)>:

void cEM408::configure(unsigned const char type, unsigned const char freq)
{
   17824:	e92d4030 	push	{r4, r5, lr}
   17828:	e1a03002 	mov	r3, r2
   1782c:	e24dd014 	sub	sp, sp, #20
   17830:	e20120ff 	and	r2, r1, #255	; 0xff
   17834:	e20330ff 	and	r3, r3, #255	; 0xff
	char gps_string[20];
	unsigned char cksum=0;
	
	sprintf( gps_string, "PSRF103,%02d,00,%02d,01", type, freq );
   17838:	e59f10f4 	ldr	r1, [pc, #244]	; 17934 <cEM408::configure(unsigned char, unsigned char)+0x110>
	
	return 1;
}

void cEM408::configure(unsigned const char type, unsigned const char freq)
{
   1783c:	e1a04000 	mov	r4, r0
	char gps_string[20];
	unsigned char cksum=0;
	
	sprintf( gps_string, "PSRF103,%02d,00,%02d,01", type, freq );
   17840:	e1a0000d 	mov	r0, sp
   17844:	eb0003d0 	bl	1878c <sprintf>
	GPS_CHECKSUM(gps_string,cksum);
   17848:	e1a0000d 	mov	r0, sp
   1784c:	eb00054e 	bl	18d8c <strlen>
   17850:	e3a03000 	mov	r3, #0
   17854:	e1a05003 	mov	r5, r3
   17858:	ea000002 	b	17868 <cEM408::configure(unsigned char, unsigned char)+0x44>
   1785c:	e7dd2003 	ldrb	r2, [sp, r3]
   17860:	e2833001 	add	r3, r3, #1
   17864:	e0255002 	eor	r5, r5, r2
   17868:	e1530000 	cmp	r3, r0
   1786c:	1afffffa 	bne	1785c <cEM408::configure(unsigned char, unsigned char)+0x38>

	if(_port == 1)
   17870:	e5943098 	ldr	r3, [r4, #152]	; 0x98
   17874:	e3530001 	cmp	r3, #1
   17878:	1a000014 	bne	178d0 <cEM408::configure(unsigned char, unsigned char)+0xac>
	{
		putc_serial1('$');
   1787c:	e3a00024 	mov	r0, #36	; 0x24
   17880:	ebffe33e 	bl	10580 <putc_serial1>
   17884:	e24d4001 	sub	r4, sp, #1
		for(int i=0; gps_string[i] != '\0'; i++)
   17888:	ea000000 	b	17890 <cEM408::configure(unsigned char, unsigned char)+0x6c>
		{
			putc_serial1(gps_string[i]);
   1788c:	ebffe33b 	bl	10580 <putc_serial1>
	GPS_CHECKSUM(gps_string,cksum);

	if(_port == 1)
	{
		putc_serial1('$');
		for(int i=0; gps_string[i] != '\0'; i++)
   17890:	e5f40001 	ldrb	r0, [r4, #1]!
   17894:	e3500000 	cmp	r0, #0
   17898:	1afffffb 	bne	1788c <cEM408::configure(unsigned char, unsigned char)+0x68>
		{
			putc_serial1(gps_string[i]);
		}
		putc_serial1('*');
   1789c:	e3a0002a 	mov	r0, #42	; 0x2a
   178a0:	ebffe336 	bl	10580 <putc_serial1>
		putc_serial1(((cksum&0xF0)>>4)+'0');
   178a4:	e1a00225 	lsr	r0, r5, #4
   178a8:	e2800030 	add	r0, r0, #48	; 0x30
   178ac:	ebffe333 	bl	10580 <putc_serial1>
		putc_serial1((cksum&0x0F)+'0');
   178b0:	e205000f 	and	r0, r5, #15
   178b4:	e2800030 	add	r0, r0, #48	; 0x30
   178b8:	ebffe330 	bl	10580 <putc_serial1>
		putc_serial1('\r');
   178bc:	e3a0000d 	mov	r0, #13
   178c0:	ebffe32e 	bl	10580 <putc_serial1>
		putc_serial1('\n');
   178c4:	e3a0000a 	mov	r0, #10
   178c8:	ebffe32c 	bl	10580 <putc_serial1>
   178cc:	ea000015 	b	17928 <cEM408::configure(unsigned char, unsigned char)+0x104>
		rprintf("%c",((cksum&0xF0)>>4)+'0');
		rprintf("%c", (cksum&0x0F)+'0');
		rprintf("\r\n");
#endif
	}
	else if(_port == 0)
   178d0:	e3530000 	cmp	r3, #0
   178d4:	1a000013 	bne	17928 <cEM408::configure(unsigned char, unsigned char)+0x104>
	{
		putc_serial0('$');
   178d8:	e3a00024 	mov	r0, #36	; 0x24
   178dc:	ebffe31f 	bl	10560 <putc_serial0>
   178e0:	e24d4001 	sub	r4, sp, #1
		for(int i=0; gps_string[i] != '\0'; i++)
   178e4:	ea000000 	b	178ec <cEM408::configure(unsigned char, unsigned char)+0xc8>
		{
			putc_serial0(gps_string[i]);
   178e8:	ebffe31c 	bl	10560 <putc_serial0>
#endif
	}
	else if(_port == 0)
	{
		putc_serial0('$');
		for(int i=0; gps_string[i] != '\0'; i++)
   178ec:	e5f40001 	ldrb	r0, [r4, #1]!
   178f0:	e3500000 	cmp	r0, #0
   178f4:	1afffffb 	bne	178e8 <cEM408::configure(unsigned char, unsigned char)+0xc4>
		{
			putc_serial0(gps_string[i]);
		}
		putc_serial0('*');
   178f8:	e3a0002a 	mov	r0, #42	; 0x2a
   178fc:	ebffe317 	bl	10560 <putc_serial0>
		putc_serial0(((cksum&0xF0)>>4)+'0');
   17900:	e1a00225 	lsr	r0, r5, #4
   17904:	e2800030 	add	r0, r0, #48	; 0x30
   17908:	ebffe314 	bl	10560 <putc_serial0>
		putc_serial0((cksum&0x0F)+'0');
   1790c:	e205000f 	and	r0, r5, #15
   17910:	e2800030 	add	r0, r0, #48	; 0x30
   17914:	ebffe311 	bl	10560 <putc_serial0>
		putc_serial0('\r');
   17918:	e3a0000d 	mov	r0, #13
   1791c:	ebffe30f 	bl	10560 <putc_serial0>
		putc_serial0('\n');
   17920:	e3a0000a 	mov	r0, #10
   17924:	ebffe30d 	bl	10560 <putc_serial0>
	}	
}	
   17928:	e28dd014 	add	sp, sp, #20
   1792c:	e8bd4030 	pop	{r4, r5, lr}
   17930:	e12fff1e 	bx	lr
   17934:	000269c0 	.word	0x000269c0

00017938 <cEM408::disable(unsigned char)>:
	}
}

void cEM408::disable(unsigned const char type)
{
	configure(type, 0);	//Disable the message type by setting the update frequency to 0
   17938:	e20110ff 	and	r1, r1, #255	; 0xff
   1793c:	e3a02000 	mov	r2, #0
   17940:	eaffffb7 	b	17824 <cEM408::configure(unsigned char, unsigned char)>

00017944 <cEM408::disable()>:
		configure((unsigned const char)type, 1);	//Disable all of the GPS messages by setting frequencies to 0
	}
}

void cEM408::disable(void)
{
   17944:	e92d4030 	push	{r4, r5, lr}
   17948:	e1a05000 	mov	r5, r0
   1794c:	e3a04000 	mov	r4, #0
	for(unsigned char type=0; type < 6; type++)
	{
		configure((unsigned const char)type, 0);	//Disable all of the GPS messages by setting frequencies to 0
   17950:	e1a01004 	mov	r1, r4
   17954:	e1a00005 	mov	r0, r5
   17958:	e3a02000 	mov	r2, #0
   1795c:	e2844001 	add	r4, r4, #1
   17960:	ebffffaf 	bl	17824 <cEM408::configure(unsigned char, unsigned char)>
	}
}

void cEM408::disable(void)
{
	for(unsigned char type=0; type < 6; type++)
   17964:	e3540006 	cmp	r4, #6
   17968:	1afffff8 	bne	17950 <cEM408::disable()+0xc>
	{
		configure((unsigned const char)type, 0);	//Disable all of the GPS messages by setting frequencies to 0
	}
}
   1796c:	e8bd4030 	pop	{r4, r5, lr}
   17970:	e12fff1e 	bx	lr

00017974 <cEM408::enable()>:
{
	configure(type, freq);
}

void cEM408::enable(void)
{
   17974:	e92d4030 	push	{r4, r5, lr}
   17978:	e1a05000 	mov	r5, r0
   1797c:	e3a04000 	mov	r4, #0
	for(unsigned char type=0; type < 6; type++)
	{
		configure((unsigned const char)type, 1);	//Disable all of the GPS messages by setting frequencies to 0
   17980:	e1a01004 	mov	r1, r4
   17984:	e1a00005 	mov	r0, r5
   17988:	e3a02001 	mov	r2, #1
   1798c:	e2844001 	add	r4, r4, #1
   17990:	ebffffa3 	bl	17824 <cEM408::configure(unsigned char, unsigned char)>
	configure(type, freq);
}

void cEM408::enable(void)
{
	for(unsigned char type=0; type < 6; type++)
   17994:	e3540006 	cmp	r4, #6
   17998:	1afffff8 	bne	17980 <cEM408::enable()+0xc>
	{
		configure((unsigned const char)type, 1);	//Disable all of the GPS messages by setting frequencies to 0
	}
}
   1799c:	e8bd4030 	pop	{r4, r5, lr}
   179a0:	e12fff1e 	bx	lr

000179a4 <cEM408::enable(unsigned char, unsigned char)>:
	IOCLR0 = (1<<_en_pin);	//Turns the GPS module off by setting the enable pin low.
}

void cEM408::enable(unsigned const char type, unsigned const char freq)
{
	configure(type, freq);
   179a4:	e20110ff 	and	r1, r1, #255	; 0xff
   179a8:	e20220ff 	and	r2, r2, #255	; 0xff
   179ac:	eaffff9c 	b	17824 <cEM408::configure(unsigned char, unsigned char)>

000179b0 <_GLOBAL__sub_I_gps>:

cEM408 gps(1, 12);

cEM408::cEM408(unsigned int port, unsigned int en_pin)
{
	_en_pin=en_pin;
   179b0:	e59f3010 	ldr	r3, [pc, #16]	; 179c8 <_GLOBAL__sub_I_gps+0x18>
   179b4:	e3a0200c 	mov	r2, #12
   179b8:	e5832094 	str	r2, [r3, #148]	; 0x94
	_port=port;
   179bc:	e3a02001 	mov	r2, #1
   179c0:	e5832098 	str	r2, [r3, #152]	; 0x98
		putc_serial0(((cksum&0xF0)>>4)+'0');
		putc_serial0((cksum&0x0F)+'0');
		putc_serial0('\r');
		putc_serial0('\n');
	}	
}	
   179c4:	e12fff1e 	bx	lr
   179c8:	4000112c 	.word	0x4000112c

000179cc <cMemory::cMemory()>:
#define GLOBALOBJECT
#define DEBUG

cMemory::cMemory(void)
{
	handle=NULL;
   179cc:	e3a03000 	mov	r3, #0
   179d0:	e5803020 	str	r3, [r0, #32]
}
   179d4:	e12fff1e 	bx	lr

000179d8 <cMemory::create(char const*, char const*)>:

int cMemory::create(const char * name, const char * extension)
{
   179d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   179dc:	e1a04000 	mov	r4, r0
   179e0:	e1a06002 	mov	r6, r2
   179e4:	e1a08001 	mov	r8, r1
	int file_number=0;
	//char * file_name;

	//&file_name[0]=strcpy(&file_name[0], name);
	strcpy(&file_name[0], name);
   179e8:	eb0004ab 	bl	18c9c <strcpy>
	sprintf(file_name+strlen(file_name), "%03d", file_number);
   179ec:	e1a00004 	mov	r0, r4
   179f0:	eb0004e5 	bl	18d8c <strlen>
   179f4:	e59f1090 	ldr	r1, [pc, #144]	; 17a8c <cMemory::create(char const*, char const*)+0xb4>
   179f8:	e3a02000 	mov	r2, #0
   179fc:	e0840000 	add	r0, r4, r0
   17a00:	eb000361 	bl	1878c <sprintf>
	//file_name = strcat(file_name, extension);
	strcat(&file_name[0], extension);
   17a04:	e1a00004 	mov	r0, r4
   17a08:	e1a01006 	mov	r1, r6
   17a0c:	eb00037b 	bl	18800 <strcat>
	handle=NULL;
}

int cMemory::create(const char * name, const char * extension)
{
	int file_number=0;
   17a10:	e3a05000 	mov	r5, #0
	
	//Check to see if the file already exists in the root directory.
    while(root_file_exists(file_name))
    {
        file_number++;	//If the file already exists, increment the file number and check again.
        if(file_number == 999)
   17a14:	e59f7074 	ldr	r7, [pc, #116]	; 17a90 <cMemory::create(char const*, char const*)+0xb8>
	sprintf(file_name+strlen(file_name), "%03d", file_number);
	//file_name = strcat(file_name, extension);
	strcat(&file_name[0], extension);
	
	//Check to see if the file already exists in the root directory.
    while(root_file_exists(file_name))
   17a18:	ea00000e 	b	17a58 <cMemory::create(char const*, char const*)+0x80>
    {
        file_number++;	//If the file already exists, increment the file number and check again.
   17a1c:	e2855001 	add	r5, r5, #1
        if(file_number == 999)
   17a20:	e1550007 	cmp	r5, r7
   17a24:	0a000015 	beq	17a80 <cMemory::create(char const*, char const*)+0xa8>
        {
            return 0;
        }
		//file_name=strcpy(file_name, name);
		strcpy(&file_name[0], name);
   17a28:	e1a01008 	mov	r1, r8
   17a2c:	e1a00004 	mov	r0, r4
   17a30:	eb000499 	bl	18c9c <strcpy>
		sprintf(file_name+strlen(file_name), "%03d", file_number);
   17a34:	e1a00004 	mov	r0, r4
   17a38:	eb0004d3 	bl	18d8c <strlen>
   17a3c:	e59f1048 	ldr	r1, [pc, #72]	; 17a8c <cMemory::create(char const*, char const*)+0xb4>
   17a40:	e0840000 	add	r0, r4, r0
   17a44:	e1a02005 	mov	r2, r5
   17a48:	eb00034f 	bl	1878c <sprintf>
		//file_name = strcat(file_name, extension);
		strcat(&file_name[0], extension);
   17a4c:	e1a00004 	mov	r0, r4
   17a50:	e1a01006 	mov	r1, r6
   17a54:	eb000369 	bl	18800 <strcat>
	sprintf(file_name+strlen(file_name), "%03d", file_number);
	//file_name = strcat(file_name, extension);
	strcat(&file_name[0], extension);
	
	//Check to see if the file already exists in the root directory.
    while(root_file_exists(file_name))
   17a58:	e1a00004 	mov	r0, r4
   17a5c:	ebffe739 	bl	11748 <root_file_exists>
   17a60:	e3500000 	cmp	r0, #0
   17a64:	1affffec 	bne	17a1c <cMemory::create(char const*, char const*)+0x44>
		//file_name = strcat(file_name, extension);
		strcat(&file_name[0], extension);
    }
	
	//Get the file handle of the new file.  We will log the data to this file
	handle = root_open_new(file_name);	
   17a68:	e1a00004 	mov	r0, r4
   17a6c:	ebffe742 	bl	1177c <root_open_new>
   17a70:	e5840020 	str	r0, [r4, #32]
    while(root_file_exists(file_name))
    {
        file_number++;	//If the file already exists, increment the file number and check again.
        if(file_number == 999)
        {
            return 0;
   17a74:	e2900000 	adds	r0, r0, #0
   17a78:	13a00001 	movne	r0, #1
   17a7c:	ea000000 	b	17a84 <cMemory::create(char const*, char const*)+0xac>
   17a80:	e3a00000 	mov	r0, #0
	//Get the file handle of the new file.  We will log the data to this file
	handle = root_open_new(file_name);	
	if(handle == NULL) return 0;
	
	return 1;
}
   17a84:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   17a88:	e12fff1e 	bx	lr
   17a8c:	000269d8 	.word	0x000269d8
   17a90:	000003e7 	.word	0x000003e7

00017a94 <cMemory::create(char const*)>:

int cMemory::create(const char * name)
{
   17a94:	e92d4010 	push	{r4, lr}
   17a98:	e1a04000 	mov	r4, r0
	strcpy(&file_name[0], name);
   17a9c:	eb00047e 	bl	18c9c <strcpy>
	
	//Get the file handle of the new file.  We will log the data to this file
	handle = root_open_new(file_name);	
   17aa0:	e1a00004 	mov	r0, r4
   17aa4:	ebffe734 	bl	1177c <root_open_new>
   17aa8:	e5840020 	str	r0, [r4, #32]
	if(handle == NULL) return 0;
	
	return 1;
}
   17aac:	e2900000 	adds	r0, r0, #0
   17ab0:	13a00001 	movne	r0, #1
   17ab4:	e8bd4010 	pop	{r4, lr}
   17ab8:	e12fff1e 	bx	lr

00017abc <cMemory::save(char*)>:

int cMemory::save(char * data)
{
   17abc:	e92d4070 	push	{r4, r5, r6, lr}
	int error=0;
	
	if(handle == NULL)return 0;
   17ac0:	e5904020 	ldr	r4, [r0, #32]
   17ac4:	e3540000 	cmp	r4, #0
	
	return 1;
}

int cMemory::save(char * data)
{
   17ac8:	e1a06000 	mov	r6, r0
   17acc:	e1a05001 	mov	r5, r1
	int error=0;
	
	if(handle == NULL)return 0;
   17ad0:	0a000017 	beq	17b34 <cMemory::save(char*)+0x78>
	if(strlen(data)==0)return 0;
   17ad4:	e5d14000 	ldrb	r4, [r1]
   17ad8:	e3540000 	cmp	r4, #0
   17adc:	0a000014 	beq	17b34 <cMemory::save(char*)+0x78>
   17ae0:	e3a0400a 	mov	r4, #10
	
	while(error < 10)
	{
		if(fat16_write_file(handle, (const unsigned char *)data, strlen(data))<0)error+=1;
   17ae4:	e1a00005 	mov	r0, r5
   17ae8:	eb0004a7 	bl	18d8c <strlen>
   17aec:	e1a02800 	lsl	r2, r0, #16
   17af0:	e1a01005 	mov	r1, r5
   17af4:	e5960020 	ldr	r0, [r6, #32]
   17af8:	e1a02822 	lsr	r2, r2, #16
   17afc:	ebffeadf 	bl	12680 <fat16_write_file>
   17b00:	e3500000 	cmp	r0, #0
   17b04:	aa000002 	bge	17b14 <cMemory::save(char*)+0x58>
	int error=0;
	
	if(handle == NULL)return 0;
	if(strlen(data)==0)return 0;
	
	while(error < 10)
   17b08:	e2544001 	subs	r4, r4, #1
   17b0c:	1afffff4 	bne	17ae4 <cMemory::save(char*)+0x28>
   17b10:	ea000007 	b	17b34 <cMemory::save(char*)+0x78>
	{
		if(fat16_write_file(handle, (const unsigned char *)data, strlen(data))<0)error+=1;
   17b14:	e3a0400a 	mov	r4, #10
	if(error == 10)return 0;
	
	error=0;
	while(error < 10)
	{
		if(!sd_raw_sync())error+=1;
   17b18:	ebffe557 	bl	1107c <sd_raw_sync>
   17b1c:	e3500000 	cmp	r0, #0
   17b20:	1a000002 	bne	17b30 <cMemory::save(char*)+0x74>
		//delay_ms(100);
	}
	if(error == 10)return 0;
	
	error=0;
	while(error < 10)
   17b24:	e2544001 	subs	r4, r4, #1
   17b28:	1afffffa 	bne	17b18 <cMemory::save(char*)+0x5c>
   17b2c:	ea000000 	b	17b34 <cMemory::save(char*)+0x78>
		if(!sd_raw_sync())error+=1;
		else break;
		//delay_ms(100);
	}
	if(error == 10) return 0;
	return 1;
   17b30:	e3a04001 	mov	r4, #1
}
   17b34:	e1a00004 	mov	r0, r4
   17b38:	e8bd4070 	pop	{r4, r5, r6, lr}
   17b3c:	e12fff1e 	bx	lr

00017b40 <cMemory::close()>:

void cMemory::close(void)
{
   17b40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	fat16_close_file(handle);
   17b44:	e5900020 	ldr	r0, [r0, #32]
   17b48:	ebffea63 	bl	124dc <fat16_close_file>
}
   17b4c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   17b50:	e12fff1e 	bx	lr

00017b54 <cMemory::open()>:

void cMemory::open(void)
{
   17b54:	e92d4010 	push	{r4, lr}
   17b58:	e1a04000 	mov	r4, r0
	handle = root_open(file_name);
   17b5c:	ebffe718 	bl	117c4 <root_open>
   17b60:	e5840020 	str	r0, [r4, #32]
}
   17b64:	e8bd4010 	pop	{r4, lr}
   17b68:	e12fff1e 	bx	lr

00017b6c <cMemory::open(char*)>:

void cMemory::open(char * new_file_name)
{
   17b6c:	e92d4071 	push	{r0, r4, r5, r6, lr}
   17b70:	e1a06000 	mov	r6, r0
	int32_t offset=0;
   17b74:	e3a05000 	mov	r5, #0
   17b78:	e28d4004 	add	r4, sp, #4
   17b7c:	e5245004 	str	r5, [r4, #-4]!
	
	sprintf(file_name, "%s", new_file_name);
   17b80:	eb000445 	bl	18c9c <strcpy>
	open();
   17b84:	e1a00006 	mov	r0, r6
   17b88:	ebfffff1 	bl	17b54 <cMemory::open()>
	fat16_seek_file(handle, &offset, FAT16_SEEK_SET);
   17b8c:	e5960020 	ldr	r0, [r6, #32]
   17b90:	e1a0100d 	mov	r1, sp
   17b94:	e1a02005 	mov	r2, r5
   17b98:	ebffeb9f 	bl	12a1c <fat16_seek_file>
}
   17b9c:	e8bd4078 	pop	{r3, r4, r5, r6, lr}
   17ba0:	e12fff1e 	bx	lr

00017ba4 <cMemory::readLine(char*)>:

int cMemory::readLine(char * buffer){
   17ba4:	e92d4071 	push	{r0, r4, r5, r6, lr}
	char readChar[2]="";
   17ba8:	e3a03000 	mov	r3, #0
   17bac:	e28d5004 	add	r5, sp, #4
	sprintf(file_name, "%s", new_file_name);
	open();
	fat16_seek_file(handle, &offset, FAT16_SEEK_SET);
}

int cMemory::readLine(char * buffer){
   17bb0:	e1a06000 	mov	r6, r0
   17bb4:	e1a04001 	mov	r4, r1
	char readChar[2]="";
   17bb8:	e16530b4 	strh	r3, [r5, #-4]!
	while(readChar[0] != '\n')
   17bbc:	ea000007 	b	17be0 <cMemory::readLine(char*)+0x3c>
	{
		if(fat16_read_file(handle, (uint8_t *)readChar, 1)<0)
   17bc0:	e5960020 	ldr	r0, [r6, #32]
   17bc4:	e1a0100d 	mov	r1, sp
   17bc8:	e3a02001 	mov	r2, #1
   17bcc:	ebffea47 	bl	124f0 <fat16_read_file>
   17bd0:	e3500000 	cmp	r0, #0
   17bd4:	ba000008 	blt	17bfc <cMemory::readLine(char*)+0x58>
			return 0;
		else{
			*buffer++=readChar[0];
   17bd8:	e5dd3000 	ldrb	r3, [sp]
   17bdc:	e4c43001 	strb	r3, [r4], #1
	fat16_seek_file(handle, &offset, FAT16_SEEK_SET);
}

int cMemory::readLine(char * buffer){
	char readChar[2]="";
	while(readChar[0] != '\n')
   17be0:	e5dd3000 	ldrb	r3, [sp]
   17be4:	e353000a 	cmp	r3, #10
   17be8:	1afffff4 	bne	17bc0 <cMemory::readLine(char*)+0x1c>
			return 0;
		else{
			*buffer++=readChar[0];
		}
	}
	*buffer++='\0';
   17bec:	e3a03000 	mov	r3, #0
   17bf0:	e5c43000 	strb	r3, [r4]
	return 1;
   17bf4:	e3a00001 	mov	r0, #1
   17bf8:	ea000000 	b	17c00 <cMemory::readLine(char*)+0x5c>
int cMemory::readLine(char * buffer){
	char readChar[2]="";
	while(readChar[0] != '\n')
	{
		if(fat16_read_file(handle, (uint8_t *)readChar, 1)<0)
			return 0;
   17bfc:	e3a00000 	mov	r0, #0
			*buffer++=readChar[0];
		}
	}
	*buffer++='\0';
	return 1;
}
   17c00:	e8bd4078 	pop	{r3, r4, r5, r6, lr}
   17c04:	e12fff1e 	bx	lr

00017c08 <memoryDelete(char*)>:

int memoryDelete(char * file_name)
{
   17c08:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	return root_delete(file_name);
   17c0c:	ebffe7a0 	bl	11a94 <root_delete>
}
   17c10:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   17c14:	e12fff1e 	bx	lr

00017c18 <memoryExists(char*)>:

char memoryExists(char * file_name)
{
   17c18:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	return root_file_exists(file_name);
   17c1c:	ebffe6c9 	bl	11748 <root_file_exists>
}
   17c20:	e20000ff 	and	r0, r0, #255	; 0xff
   17c24:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   17c28:	e12fff1e 	bx	lr

00017c2c <memoryBegin()>:

char memoryBegin(void)
{
   17c2c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	//Bring up SD and Open the root directory
    if(!sd_raw_init())
   17c30:	ebffe49d 	bl	10eac <sd_raw_init>
   17c34:	e3500000 	cmp	r0, #0
   17c38:	0a000002 	beq	17c48 <memoryBegin()+0x1c>
    {
        return 0;
    }
    if(openroot())
   17c3c:	ebffe68b 	bl	11670 <openroot>
char memoryBegin(void)
{
	//Bring up SD and Open the root directory
    if(!sd_raw_init())
    {
        return 0;
   17c40:	e2700001 	rsbs	r0, r0, #1
   17c44:	33a00000 	movcc	r0, #0
    if(openroot())
    {
        return 0;
    }
	return 1;
}
   17c48:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   17c4c:	e12fff1e 	bx	lr

00017c50 <cSensor::cSensor()>:

cSensor filter;

cSensor::cSensor(void)
{
	Axz=0, Ayz=0;
   17c50:	e3a03000 	mov	r3, #0
   17c54:	e3a02000 	mov	r2, #0

#define GLOBALOBJECT

cSensor filter;

cSensor::cSensor(void)
   17c58:	e92d0030 	push	{r4, r5}
{
	Axz=0, Ayz=0;
	EstAxz=0, EstAyz=0;
	gyro_weight=5;
   17c5c:	e59f4060 	ldr	r4, [pc, #96]	; 17cc4 <cSensor::cSensor()+0x74>
	signRzGyro=0;
   17c60:	e3a01000 	mov	r1, #0

cSensor filter;

cSensor::cSensor(void)
{
	Axz=0, Ayz=0;
   17c64:	e5802060 	str	r2, [r0, #96]	; 0x60
   17c68:	e5803064 	str	r3, [r0, #100]	; 0x64
   17c6c:	e5802068 	str	r2, [r0, #104]	; 0x68
   17c70:	e580306c 	str	r3, [r0, #108]	; 0x6c
	EstAxz=0, EstAyz=0;
   17c74:	e5802070 	str	r2, [r0, #112]	; 0x70
   17c78:	e5803074 	str	r3, [r0, #116]	; 0x74
   17c7c:	e5802078 	str	r2, [r0, #120]	; 0x78
   17c80:	e580307c 	str	r3, [r0, #124]	; 0x7c
	gyro_weight=5;
   17c84:	e3a05000 	mov	r5, #0
	signRzGyro=0;
	AccTheta=0, EstTheta=0;
   17c88:	e580208c 	str	r2, [r0, #140]	; 0x8c
   17c8c:	e5803090 	str	r3, [r0, #144]	; 0x90
   17c90:	e5802094 	str	r2, [r0, #148]	; 0x94
   17c94:	e5803098 	str	r3, [r0, #152]	; 0x98
	last_time=0, this_time=0;
	interval=0;
   17c98:	e58020a4 	str	r2, [r0, #164]	; 0xa4
   17c9c:	e58030a8 	str	r3, [r0, #168]	; 0xa8
	first_run=2;
   17ca0:	e3a03002 	mov	r3, #2

cSensor::cSensor(void)
{
	Axz=0, Ayz=0;
	EstAxz=0, EstAyz=0;
	gyro_weight=5;
   17ca4:	e5804080 	str	r4, [r0, #128]	; 0x80
   17ca8:	e5805084 	str	r5, [r0, #132]	; 0x84
	signRzGyro=0;
   17cac:	e5c01088 	strb	r1, [r0, #136]	; 0x88
	AccTheta=0, EstTheta=0;
	last_time=0, this_time=0;
   17cb0:	e580109c 	str	r1, [r0, #156]	; 0x9c
   17cb4:	e58010a0 	str	r1, [r0, #160]	; 0xa0
	interval=0;
	first_run=2;
   17cb8:	e5c030e4 	strb	r3, [r0, #228]	; 0xe4
}
   17cbc:	e8bd0030 	pop	{r4, r5}
   17cc0:	e12fff1e 	bx	lr
   17cc4:	40140000 	.word	0x40140000

00017cc8 <cSensor::fillRwAcc(float, float, float)>:

void cSensor::fillRwAcc(float x, float y, float z)
{
   17cc8:	e92d4070 	push	{r4, r5, r6, lr}
   17ccc:	e1a04000 	mov	r4, r0
	RwAcc[0] = x;
   17cd0:	e1a00001 	mov	r0, r1
	interval=0;
	first_run=2;
}

void cSensor::fillRwAcc(float x, float y, float z)
{
   17cd4:	e1a05002 	mov	r5, r2
   17cd8:	e1a06003 	mov	r6, r3
	RwAcc[0] = x;
   17cdc:	eb003352 	bl	24a2c <__aeabi_f2d>
   17ce0:	e5840018 	str	r0, [r4, #24]
   17ce4:	e584101c 	str	r1, [r4, #28]
	RwAcc[1] = y;
   17ce8:	e1a00005 	mov	r0, r5
   17cec:	eb00334e 	bl	24a2c <__aeabi_f2d>
   17cf0:	e5840020 	str	r0, [r4, #32]
   17cf4:	e5841024 	str	r1, [r4, #36]	; 0x24
	RwAcc[2] = z;
   17cf8:	e1a00006 	mov	r0, r6
   17cfc:	eb00334a 	bl	24a2c <__aeabi_f2d>
   17d00:	e5840028 	str	r0, [r4, #40]	; 0x28
   17d04:	e584102c 	str	r1, [r4, #44]	; 0x2c
}
   17d08:	e8bd4070 	pop	{r4, r5, r6, lr}
   17d0c:	e12fff1e 	bx	lr

00017d10 <cSensor::normalizeVector(double*)>:

void cSensor::normalizeVector(double * vector)
{
   17d10:	e92d4fd0 	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   17d14:	e1a04001 	mov	r4, r1
	double R;
	R = sqrt(vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2]);
   17d18:	e8910003 	ldm	r1, {r0, r1}
   17d1c:	e1a02000 	mov	r2, r0
   17d20:	e1a03001 	mov	r3, r1
   17d24:	eb003370 	bl	24aec <__aeabi_dmul>
   17d28:	e2847008 	add	r7, r4, #8
   17d2c:	e89700c0 	ldm	r7, {r6, r7}
   17d30:	e1a08000 	mov	r8, r0
   17d34:	e1a02006 	mov	r2, r6
   17d38:	e1a03007 	mov	r3, r7
   17d3c:	e1a09001 	mov	r9, r1
   17d40:	e1a00006 	mov	r0, r6
   17d44:	e1a01007 	mov	r1, r7
   17d48:	eb003367 	bl	24aec <__aeabi_dmul>
   17d4c:	e1a02000 	mov	r2, r0
   17d50:	e1a03001 	mov	r3, r1
   17d54:	e1a00008 	mov	r0, r8
   17d58:	e1a01009 	mov	r1, r9
   17d5c:	eb003265 	bl	246f8 <__adddf3>
   17d60:	e284b010 	add	fp, r4, #16
   17d64:	e89b0c00 	ldm	fp, {sl, fp}
   17d68:	e1a06000 	mov	r6, r0
   17d6c:	e1a07001 	mov	r7, r1
   17d70:	e1a0200a 	mov	r2, sl
   17d74:	e1a0300b 	mov	r3, fp
   17d78:	e1a0000a 	mov	r0, sl
   17d7c:	e1a0100b 	mov	r1, fp
   17d80:	eb003359 	bl	24aec <__aeabi_dmul>
   17d84:	e1a02000 	mov	r2, r0
   17d88:	e1a03001 	mov	r3, r1
   17d8c:	e1a00006 	mov	r0, r6
   17d90:	e1a01007 	mov	r1, r7
   17d94:	eb003257 	bl	246f8 <__adddf3>
   17d98:	eb0026f3 	bl	2196c <sqrt>
   17d9c:	e1a06000 	mov	r6, r0
   17da0:	e1a07001 	mov	r7, r1
	vector[0] /= R;
   17da4:	e1a02006 	mov	r2, r6
   17da8:	e8940003 	ldm	r4, {r0, r1}
   17dac:	e1a03007 	mov	r3, r7
   17db0:	eb0033e8 	bl	24d58 <__aeabi_ddiv>
	vector[1] /= R;	
   17db4:	e1a02006 	mov	r2, r6

void cSensor::normalizeVector(double * vector)
{
	double R;
	R = sqrt(vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2]);
	vector[0] /= R;
   17db8:	e8840003 	stm	r4, {r0, r1}
	vector[1] /= R;	
   17dbc:	e1a03007 	mov	r3, r7
   17dc0:	e2841008 	add	r1, r4, #8
   17dc4:	e8910003 	ldm	r1, {r0, r1}
   17dc8:	eb0033e2 	bl	24d58 <__aeabi_ddiv>
	vector[2] /= R;
   17dcc:	e1a02006 	mov	r2, r6
void cSensor::normalizeVector(double * vector)
{
	double R;
	R = sqrt(vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2]);
	vector[0] /= R;
	vector[1] /= R;	
   17dd0:	e5840008 	str	r0, [r4, #8]
   17dd4:	e584100c 	str	r1, [r4, #12]
	vector[2] /= R;
   17dd8:	e1a03007 	mov	r3, r7
   17ddc:	e2841010 	add	r1, r4, #16
   17de0:	e8910003 	ldm	r1, {r0, r1}
   17de4:	eb0033db 	bl	24d58 <__aeabi_ddiv>
   17de8:	e5840010 	str	r0, [r4, #16]
   17dec:	e5841014 	str	r1, [r4, #20]
}
   17df0:	e8bd4fd0 	pop	{r4, r6, r7, r8, r9, sl, fp, lr}
   17df4:	e12fff1e 	bx	lr

00017df8 <_GLOBAL__sub_I_filter>:
   17df8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
#include "main.h"
#include <math.h>

#define GLOBALOBJECT

cSensor filter;
   17dfc:	e59f0008 	ldr	r0, [pc, #8]	; 17e0c <_GLOBAL__sub_I_filter+0x14>
   17e00:	ebffff92 	bl	17c50 <cSensor::cSensor()>
	double R;
	R = sqrt(vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2]);
	vector[0] /= R;
	vector[1] /= R;	
	vector[2] /= R;
}
   17e04:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   17e08:	e12fff1e 	bx	lr
   17e0c:	400011c8 	.word	0x400011c8

00017e10 <malloc>:
   17e10:	e59f3008 	ldr	r3, [pc, #8]	; 17e20 <malloc+0x10>
   17e14:	e1a01000 	mov	r1, r0
   17e18:	e5930000 	ldr	r0, [r3]
   17e1c:	ea000005 	b	17e38 <_malloc_r>
   17e20:	400004b4 	.word	0x400004b4

00017e24 <free>:
   17e24:	e59f3008 	ldr	r3, [pc, #8]	; 17e34 <free+0x10>
   17e28:	e1a01000 	mov	r1, r0
   17e2c:	e5930000 	ldr	r0, [r3]
   17e30:	ea001907 	b	1e254 <_free_r>
   17e34:	400004b4 	.word	0x400004b4

00017e38 <_malloc_r>:
   17e38:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e3c:	e281400b 	add	r4, r1, #11
   17e40:	e3540016 	cmp	r4, #22
   17e44:	83c44007 	bichi	r4, r4, #7
   17e48:	81a03fa4 	lsrhi	r3, r4, #31
   17e4c:	93a03000 	movls	r3, #0
   17e50:	93a04010 	movls	r4, #16
   17e54:	e1540001 	cmp	r4, r1
   17e58:	21a01003 	movcs	r1, r3
   17e5c:	33831001 	orrcc	r1, r3, #1
   17e60:	e3510000 	cmp	r1, #0
   17e64:	13a0300c 	movne	r3, #12
   17e68:	e1a05000 	mov	r5, r0
   17e6c:	15803000 	strne	r3, [r0]
   17e70:	13a07000 	movne	r7, #0
   17e74:	1a000015 	bne	17ed0 <_malloc_r+0x98>
   17e78:	eb000227 	bl	1871c <__malloc_lock>
   17e7c:	e3540f7e 	cmp	r4, #504	; 0x1f8
   17e80:	2a000014 	bcs	17ed8 <_malloc_r+0xa0>
   17e84:	e59f66bc 	ldr	r6, [pc, #1724]	; 18548 <_malloc_r+0x710>
   17e88:	e1a0e1a4 	lsr	lr, r4, #3
   17e8c:	e086318e 	add	r3, r6, lr, lsl #3
   17e90:	e593700c 	ldr	r7, [r3, #12]
   17e94:	e1570003 	cmp	r7, r3
   17e98:	0a00016a 	beq	18448 <_malloc_r+0x610>
   17e9c:	e5973004 	ldr	r3, [r7, #4]
   17ea0:	e3c33003 	bic	r3, r3, #3
   17ea4:	e0873003 	add	r3, r7, r3
   17ea8:	e5930004 	ldr	r0, [r3, #4]
   17eac:	e2871008 	add	r1, r7, #8
   17eb0:	e8910006 	ldm	r1, {r1, r2}
   17eb4:	e3800001 	orr	r0, r0, #1
   17eb8:	e5830004 	str	r0, [r3, #4]
   17ebc:	e581200c 	str	r2, [r1, #12]
   17ec0:	e5821008 	str	r1, [r2, #8]
   17ec4:	e1a00005 	mov	r0, r5
   17ec8:	eb000214 	bl	18720 <__malloc_unlock>
   17ecc:	e2877008 	add	r7, r7, #8
   17ed0:	e1a00007 	mov	r0, r7
   17ed4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ed8:	e1b0e4a4 	lsrs	lr, r4, #9
   17edc:	01a0e1a4 	lsreq	lr, r4, #3
   17ee0:	01a0118e 	lsleq	r1, lr, #3
   17ee4:	1a000061 	bne	18070 <_malloc_r+0x238>
   17ee8:	e59f6658 	ldr	r6, [pc, #1624]	; 18548 <_malloc_r+0x710>
   17eec:	e0861001 	add	r1, r6, r1
   17ef0:	e591700c 	ldr	r7, [r1, #12]
   17ef4:	e1510007 	cmp	r1, r7
   17ef8:	1a000005 	bne	17f14 <_malloc_r+0xdc>
   17efc:	ea00000a 	b	17f2c <_malloc_r+0xf4>
   17f00:	e3530000 	cmp	r3, #0
   17f04:	aa0000e6 	bge	182a4 <_malloc_r+0x46c>
   17f08:	e597700c 	ldr	r7, [r7, #12]
   17f0c:	e1510007 	cmp	r1, r7
   17f10:	0a000005 	beq	17f2c <_malloc_r+0xf4>
   17f14:	e5972004 	ldr	r2, [r7, #4]
   17f18:	e3c22003 	bic	r2, r2, #3
   17f1c:	e0643002 	rsb	r3, r4, r2
   17f20:	e353000f 	cmp	r3, #15
   17f24:	dafffff5 	ble	17f00 <_malloc_r+0xc8>
   17f28:	e24ee001 	sub	lr, lr, #1
   17f2c:	e28ee001 	add	lr, lr, #1
   17f30:	e59f3610 	ldr	r3, [pc, #1552]	; 18548 <_malloc_r+0x710>
   17f34:	e5967010 	ldr	r7, [r6, #16]
   17f38:	e2838008 	add	r8, r3, #8
   17f3c:	e1570008 	cmp	r7, r8
   17f40:	05931004 	ldreq	r1, [r3, #4]
   17f44:	0a000016 	beq	17fa4 <_malloc_r+0x16c>
   17f48:	e5972004 	ldr	r2, [r7, #4]
   17f4c:	e3c22003 	bic	r2, r2, #3
   17f50:	e0641002 	rsb	r1, r4, r2
   17f54:	e351000f 	cmp	r1, #15
   17f58:	ca000118 	bgt	183c0 <_malloc_r+0x588>
   17f5c:	e3510000 	cmp	r1, #0
   17f60:	e5838014 	str	r8, [r3, #20]
   17f64:	e5838010 	str	r8, [r3, #16]
   17f68:	aa00005b 	bge	180dc <_malloc_r+0x2a4>
   17f6c:	e3520c02 	cmp	r2, #512	; 0x200
   17f70:	2a0000e3 	bcs	18304 <_malloc_r+0x4cc>
   17f74:	e5930004 	ldr	r0, [r3, #4]
   17f78:	e1a021a2 	lsr	r2, r2, #3
   17f7c:	e1a01142 	asr	r1, r2, #2
   17f80:	e3a0c001 	mov	ip, #1
   17f84:	e180111c 	orr	r1, r0, ip, lsl r1
   17f88:	e0832182 	add	r2, r3, r2, lsl #3
   17f8c:	e5920008 	ldr	r0, [r2, #8]
   17f90:	e587200c 	str	r2, [r7, #12]
   17f94:	e5870008 	str	r0, [r7, #8]
   17f98:	e5831004 	str	r1, [r3, #4]
   17f9c:	e5827008 	str	r7, [r2, #8]
   17fa0:	e580700c 	str	r7, [r0, #12]
   17fa4:	e1a0314e 	asr	r3, lr, #2
   17fa8:	e3a00001 	mov	r0, #1
   17fac:	e1a00310 	lsl	r0, r0, r3
   17fb0:	e1500001 	cmp	r0, r1
   17fb4:	8a000051 	bhi	18100 <_malloc_r+0x2c8>
   17fb8:	e1110000 	tst	r1, r0
   17fbc:	1a000008 	bne	17fe4 <_malloc_r+0x1ac>
   17fc0:	e1a00080 	lsl	r0, r0, #1
   17fc4:	e3cee003 	bic	lr, lr, #3
   17fc8:	e1110000 	tst	r1, r0
   17fcc:	e28ee004 	add	lr, lr, #4
   17fd0:	1a000003 	bne	17fe4 <_malloc_r+0x1ac>
   17fd4:	e1a00080 	lsl	r0, r0, #1
   17fd8:	e1100001 	tst	r0, r1
   17fdc:	e28ee004 	add	lr, lr, #4
   17fe0:	0afffffb 	beq	17fd4 <_malloc_r+0x19c>
   17fe4:	e086a18e 	add	sl, r6, lr, lsl #3
   17fe8:	e1a0c00a 	mov	ip, sl
   17fec:	e1a0700e 	mov	r7, lr
   17ff0:	e59c300c 	ldr	r3, [ip, #12]
   17ff4:	e15c0003 	cmp	ip, r3
   17ff8:	1a000005 	bne	18014 <_malloc_r+0x1dc>
   17ffc:	ea0000fc 	b	183f4 <_malloc_r+0x5bc>
   18000:	e3520000 	cmp	r2, #0
   18004:	aa000115 	bge	18460 <_malloc_r+0x628>
   18008:	e593300c 	ldr	r3, [r3, #12]
   1800c:	e15c0003 	cmp	ip, r3
   18010:	0a0000f7 	beq	183f4 <_malloc_r+0x5bc>
   18014:	e5931004 	ldr	r1, [r3, #4]
   18018:	e3c11003 	bic	r1, r1, #3
   1801c:	e0642001 	rsb	r2, r4, r1
   18020:	e352000f 	cmp	r2, #15
   18024:	dafffff5 	ble	18000 <_malloc_r+0x1c8>
   18028:	e1a07003 	mov	r7, r3
   1802c:	e593000c 	ldr	r0, [r3, #12]
   18030:	e5b7c008 	ldr	ip, [r7, #8]!
   18034:	e0831004 	add	r1, r3, r4
   18038:	e382e001 	orr	lr, r2, #1
   1803c:	e3844001 	orr	r4, r4, #1
   18040:	e58c000c 	str	r0, [ip, #12]
   18044:	e580c008 	str	ip, [r0, #8]
   18048:	e5834004 	str	r4, [r3, #4]
   1804c:	e5861014 	str	r1, [r6, #20]
   18050:	e5861010 	str	r1, [r6, #16]
   18054:	e581800c 	str	r8, [r1, #12]
   18058:	e5818008 	str	r8, [r1, #8]
   1805c:	e581e004 	str	lr, [r1, #4]
   18060:	e7812002 	str	r2, [r1, r2]
   18064:	e1a00005 	mov	r0, r5
   18068:	eb0001ac 	bl	18720 <__malloc_unlock>
   1806c:	eaffff97 	b	17ed0 <_malloc_r+0x98>
   18070:	e35e0004 	cmp	lr, #4
   18074:	91a0e324 	lsrls	lr, r4, #6
   18078:	928ee038 	addls	lr, lr, #56	; 0x38
   1807c:	91a0118e 	lslls	r1, lr, #3
   18080:	9affff98 	bls	17ee8 <_malloc_r+0xb0>
   18084:	e35e0014 	cmp	lr, #20
   18088:	928ee05b 	addls	lr, lr, #91	; 0x5b
   1808c:	91a0118e 	lslls	r1, lr, #3
   18090:	9affff94 	bls	17ee8 <_malloc_r+0xb0>
   18094:	e35e0054 	cmp	lr, #84	; 0x54
   18098:	91a0e624 	lsrls	lr, r4, #12
   1809c:	928ee06e 	addls	lr, lr, #110	; 0x6e
   180a0:	91a0118e 	lslls	r1, lr, #3
   180a4:	9affff8f 	bls	17ee8 <_malloc_r+0xb0>
   180a8:	e35e0f55 	cmp	lr, #340	; 0x154
   180ac:	91a0e7a4 	lsrls	lr, r4, #15
   180b0:	928ee077 	addls	lr, lr, #119	; 0x77
   180b4:	91a0118e 	lslls	r1, lr, #3
   180b8:	9affff8a 	bls	17ee8 <_malloc_r+0xb0>
   180bc:	e59f3488 	ldr	r3, [pc, #1160]	; 1854c <_malloc_r+0x714>
   180c0:	e15e0003 	cmp	lr, r3
   180c4:	91a0e924 	lsrls	lr, r4, #18
   180c8:	928ee07c 	addls	lr, lr, #124	; 0x7c
   180cc:	91a0118e 	lslls	r1, lr, #3
   180d0:	83a01e3f 	movhi	r1, #1008	; 0x3f0
   180d4:	83a0e07e 	movhi	lr, #126	; 0x7e
   180d8:	eaffff82 	b	17ee8 <_malloc_r+0xb0>
   180dc:	e0872002 	add	r2, r7, r2
   180e0:	e5923004 	ldr	r3, [r2, #4]
   180e4:	e3833001 	orr	r3, r3, #1
   180e8:	e1a00005 	mov	r0, r5
   180ec:	e5823004 	str	r3, [r2, #4]
   180f0:	e2877008 	add	r7, r7, #8
   180f4:	eb000189 	bl	18720 <__malloc_unlock>
   180f8:	e1a00007 	mov	r0, r7
   180fc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18100:	e5967008 	ldr	r7, [r6, #8]
   18104:	e5978004 	ldr	r8, [r7, #4]
   18108:	e3c88003 	bic	r8, r8, #3
   1810c:	e1540008 	cmp	r4, r8
   18110:	93a03000 	movls	r3, #0
   18114:	83a03001 	movhi	r3, #1
   18118:	e0642008 	rsb	r2, r4, r8
   1811c:	e352000f 	cmp	r2, #15
   18120:	d3833001 	orrle	r3, r3, #1
   18124:	e3530000 	cmp	r3, #0
   18128:	0a00006a 	beq	182d8 <_malloc_r+0x4a0>
   1812c:	e59f941c 	ldr	r9, [pc, #1052]	; 18550 <_malloc_r+0x718>
   18130:	e59f3410 	ldr	r3, [pc, #1040]	; 18548 <_malloc_r+0x710>
   18134:	e599b000 	ldr	fp, [r9]
   18138:	e5933408 	ldr	r3, [r3, #1032]	; 0x408
   1813c:	e084b00b 	add	fp, r4, fp
   18140:	e3730001 	cmn	r3, #1
   18144:	128bba01 	addne	fp, fp, #4096	; 0x1000
   18148:	128bb00f 	addne	fp, fp, #15
   1814c:	13cbbeff 	bicne	fp, fp, #4080	; 0xff0
   18150:	028bb010 	addeq	fp, fp, #16
   18154:	13cbb00f 	bicne	fp, fp, #15
   18158:	e1a00005 	mov	r0, r5
   1815c:	e1a0100b 	mov	r1, fp
   18160:	ebffe019 	bl	101cc <_sbrk_r>
   18164:	e3700001 	cmn	r0, #1
   18168:	e1a0a000 	mov	sl, r0
   1816c:	0a0000e0 	beq	184f4 <_malloc_r+0x6bc>
   18170:	e0872008 	add	r2, r7, r8
   18174:	e1520000 	cmp	r2, r0
   18178:	8a0000c4 	bhi	18490 <_malloc_r+0x658>
   1817c:	e5993004 	ldr	r3, [r9, #4]
   18180:	e152000a 	cmp	r2, sl
   18184:	e08b3003 	add	r3, fp, r3
   18188:	e5893004 	str	r3, [r9, #4]
   1818c:	0a0000dc 	beq	18504 <_malloc_r+0x6cc>
   18190:	e5961408 	ldr	r1, [r6, #1032]	; 0x408
   18194:	e3710001 	cmn	r1, #1
   18198:	1062200a 	rsbne	r2, r2, sl
   1819c:	059f33a4 	ldreq	r3, [pc, #932]	; 18548 <_malloc_r+0x710>
   181a0:	10833002 	addne	r3, r3, r2
   181a4:	0583a408 	streq	sl, [r3, #1032]	; 0x408
   181a8:	15893004 	strne	r3, [r9, #4]
   181ac:	e21a3007 	ands	r3, sl, #7
   181b0:	12632008 	rsbne	r2, r3, #8
   181b4:	108aa002 	addne	sl, sl, r2
   181b8:	12633a01 	rsbne	r3, r3, #4096	; 0x1000
   181bc:	12832008 	addne	r2, r3, #8
   181c0:	e08a300b 	add	r3, sl, fp
   181c4:	03a02a01 	moveq	r2, #4096	; 0x1000
   181c8:	e1a03a03 	lsl	r3, r3, #20
   181cc:	e042ba23 	sub	fp, r2, r3, lsr #20
   181d0:	e1a0100b 	mov	r1, fp
   181d4:	e1a00005 	mov	r0, r5
   181d8:	ebffdffb 	bl	101cc <_sbrk_r>
   181dc:	e3700001 	cmn	r0, #1
   181e0:	106a2000 	rsbne	r2, sl, r0
   181e4:	e5993004 	ldr	r3, [r9, #4]
   181e8:	1082200b 	addne	r2, r2, fp
   181ec:	03a0b000 	moveq	fp, #0
   181f0:	13822001 	orrne	r2, r2, #1
   181f4:	03a02001 	moveq	r2, #1
   181f8:	e08b3003 	add	r3, fp, r3
   181fc:	e1570006 	cmp	r7, r6
   18200:	e5893004 	str	r3, [r9, #4]
   18204:	e586a008 	str	sl, [r6, #8]
   18208:	e58a2004 	str	r2, [sl, #4]
   1820c:	0a00000d 	beq	18248 <_malloc_r+0x410>
   18210:	e358000f 	cmp	r8, #15
   18214:	9a0000b1 	bls	184e0 <_malloc_r+0x6a8>
   18218:	e597c004 	ldr	ip, [r7, #4]
   1821c:	e248200c 	sub	r2, r8, #12
   18220:	e3c22007 	bic	r2, r2, #7
   18224:	e20cc001 	and	ip, ip, #1
   18228:	e0871002 	add	r1, r7, r2
   1822c:	e3a00005 	mov	r0, #5
   18230:	e182c00c 	orr	ip, r2, ip
   18234:	e352000f 	cmp	r2, #15
   18238:	e587c004 	str	ip, [r7, #4]
   1823c:	e5810004 	str	r0, [r1, #4]
   18240:	e5810008 	str	r0, [r1, #8]
   18244:	8a0000b5 	bhi	18520 <_malloc_r+0x6e8>
   18248:	e599202c 	ldr	r2, [r9, #44]	; 0x2c
   1824c:	e1530002 	cmp	r3, r2
   18250:	859f22f8 	ldrhi	r2, [pc, #760]	; 18550 <_malloc_r+0x718>
   18254:	8582302c 	strhi	r3, [r2, #44]	; 0x2c
   18258:	e5992030 	ldr	r2, [r9, #48]	; 0x30
   1825c:	e5967008 	ldr	r7, [r6, #8]
   18260:	e1530002 	cmp	r3, r2
   18264:	859f12e4 	ldrhi	r1, [pc, #740]	; 18550 <_malloc_r+0x718>
   18268:	e5972004 	ldr	r2, [r7, #4]
   1826c:	85813030 	strhi	r3, [r1, #48]	; 0x30
   18270:	e3c22003 	bic	r2, r2, #3
   18274:	e1540002 	cmp	r4, r2
   18278:	93a03000 	movls	r3, #0
   1827c:	83a03001 	movhi	r3, #1
   18280:	e0642002 	rsb	r2, r4, r2
   18284:	e352000f 	cmp	r2, #15
   18288:	d3833001 	orrle	r3, r3, #1
   1828c:	e3530000 	cmp	r3, #0
   18290:	0a000010 	beq	182d8 <_malloc_r+0x4a0>
   18294:	e1a00005 	mov	r0, r5
   18298:	eb000120 	bl	18720 <__malloc_unlock>
   1829c:	e3a07000 	mov	r7, #0
   182a0:	eaffff0a 	b	17ed0 <_malloc_r+0x98>
   182a4:	e0872002 	add	r2, r7, r2
   182a8:	e5920004 	ldr	r0, [r2, #4]
   182ac:	e2871008 	add	r1, r7, #8
   182b0:	e891000a 	ldm	r1, {r1, r3}
   182b4:	e3800001 	orr	r0, r0, #1
   182b8:	e5820004 	str	r0, [r2, #4]
   182bc:	e581300c 	str	r3, [r1, #12]
   182c0:	e1a00005 	mov	r0, r5
   182c4:	e5831008 	str	r1, [r3, #8]
   182c8:	e2877008 	add	r7, r7, #8
   182cc:	eb000113 	bl	18720 <__malloc_unlock>
   182d0:	e1a00007 	mov	r0, r7
   182d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182d8:	e0873004 	add	r3, r7, r4
   182dc:	e3822001 	orr	r2, r2, #1
   182e0:	e3844001 	orr	r4, r4, #1
   182e4:	e5874004 	str	r4, [r7, #4]
   182e8:	e1a00005 	mov	r0, r5
   182ec:	e5832004 	str	r2, [r3, #4]
   182f0:	e2877008 	add	r7, r7, #8
   182f4:	e5863008 	str	r3, [r6, #8]
   182f8:	eb000108 	bl	18720 <__malloc_unlock>
   182fc:	e1a00007 	mov	r0, r7
   18300:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18304:	e1a034a2 	lsr	r3, r2, #9
   18308:	e3530004 	cmp	r3, #4
   1830c:	91a0a322 	lsrls	sl, r2, #6
   18310:	928aa038 	addls	sl, sl, #56	; 0x38
   18314:	91a0018a 	lslls	r0, sl, #3
   18318:	9a000014 	bls	18370 <_malloc_r+0x538>
   1831c:	e3530014 	cmp	r3, #20
   18320:	9283a05b 	addls	sl, r3, #91	; 0x5b
   18324:	91a0018a 	lslls	r0, sl, #3
   18328:	9a000010 	bls	18370 <_malloc_r+0x538>
   1832c:	e3530054 	cmp	r3, #84	; 0x54
   18330:	91a0a622 	lsrls	sl, r2, #12
   18334:	928aa06e 	addls	sl, sl, #110	; 0x6e
   18338:	91a0018a 	lslls	r0, sl, #3
   1833c:	9a00000b 	bls	18370 <_malloc_r+0x538>
   18340:	e3530f55 	cmp	r3, #340	; 0x154
   18344:	91a0a7a2 	lsrls	sl, r2, #15
   18348:	928aa077 	addls	sl, sl, #119	; 0x77
   1834c:	91a0018a 	lslls	r0, sl, #3
   18350:	9a000006 	bls	18370 <_malloc_r+0x538>
   18354:	e59f11f0 	ldr	r1, [pc, #496]	; 1854c <_malloc_r+0x714>
   18358:	e1530001 	cmp	r3, r1
   1835c:	91a0a922 	lsrls	sl, r2, #18
   18360:	928aa07c 	addls	sl, sl, #124	; 0x7c
   18364:	91a0018a 	lslls	r0, sl, #3
   18368:	83a00e3f 	movhi	r0, #1008	; 0x3f0
   1836c:	83a0a07e 	movhi	sl, #126	; 0x7e
   18370:	e0860000 	add	r0, r6, r0
   18374:	e5903008 	ldr	r3, [r0, #8]
   18378:	e1530000 	cmp	r3, r0
   1837c:	e59fc1c4 	ldr	ip, [pc, #452]	; 18548 <_malloc_r+0x710>
   18380:	1a000003 	bne	18394 <_malloc_r+0x55c>
   18384:	ea00004e 	b	184c4 <_malloc_r+0x68c>
   18388:	e5933008 	ldr	r3, [r3, #8]
   1838c:	e1500003 	cmp	r0, r3
   18390:	0a000003 	beq	183a4 <_malloc_r+0x56c>
   18394:	e5931004 	ldr	r1, [r3, #4]
   18398:	e3c11003 	bic	r1, r1, #3
   1839c:	e1520001 	cmp	r2, r1
   183a0:	3afffff8 	bcc	18388 <_malloc_r+0x550>
   183a4:	e593200c 	ldr	r2, [r3, #12]
   183a8:	e5961004 	ldr	r1, [r6, #4]
   183ac:	e587200c 	str	r2, [r7, #12]
   183b0:	e5873008 	str	r3, [r7, #8]
   183b4:	e583700c 	str	r7, [r3, #12]
   183b8:	e5827008 	str	r7, [r2, #8]
   183bc:	eafffef8 	b	17fa4 <_malloc_r+0x16c>
   183c0:	e0872004 	add	r2, r7, r4
   183c4:	e3810001 	orr	r0, r1, #1
   183c8:	e3844001 	orr	r4, r4, #1
   183cc:	e5874004 	str	r4, [r7, #4]
   183d0:	e5832014 	str	r2, [r3, #20]
   183d4:	e5832010 	str	r2, [r3, #16]
   183d8:	e582800c 	str	r8, [r2, #12]
   183dc:	e9820101 	stmib	r2, {r0, r8}
   183e0:	e7821001 	str	r1, [r2, r1]
   183e4:	e1a00005 	mov	r0, r5
   183e8:	eb0000cc 	bl	18720 <__malloc_unlock>
   183ec:	e2877008 	add	r7, r7, #8
   183f0:	eafffeb6 	b	17ed0 <_malloc_r+0x98>
   183f4:	e2877001 	add	r7, r7, #1
   183f8:	e3170003 	tst	r7, #3
   183fc:	e28cc008 	add	ip, ip, #8
   18400:	1afffefa 	bne	17ff0 <_malloc_r+0x1b8>
   18404:	e31e0003 	tst	lr, #3
   18408:	e24a3008 	sub	r3, sl, #8
   1840c:	0a000049 	beq	18538 <_malloc_r+0x700>
   18410:	e59aa000 	ldr	sl, [sl]
   18414:	e15a0003 	cmp	sl, r3
   18418:	e24ee001 	sub	lr, lr, #1
   1841c:	0afffff8 	beq	18404 <_malloc_r+0x5cc>
   18420:	e5963004 	ldr	r3, [r6, #4]
   18424:	e1a00080 	lsl	r0, r0, #1
   18428:	e1500003 	cmp	r0, r3
   1842c:	8affff33 	bhi	18100 <_malloc_r+0x2c8>
   18430:	e3500000 	cmp	r0, #0
   18434:	0affff31 	beq	18100 <_malloc_r+0x2c8>
   18438:	e1130000 	tst	r3, r0
   1843c:	0a00001a 	beq	184ac <_malloc_r+0x674>
   18440:	e1a0e007 	mov	lr, r7
   18444:	eafffee6 	b	17fe4 <_malloc_r+0x1ac>
   18448:	e2873008 	add	r3, r7, #8
   1844c:	e5977014 	ldr	r7, [r7, #20]
   18450:	e1530007 	cmp	r3, r7
   18454:	028ee002 	addeq	lr, lr, #2
   18458:	0afffeb4 	beq	17f30 <_malloc_r+0xf8>
   1845c:	eafffe8e 	b	17e9c <_malloc_r+0x64>
   18460:	e0831001 	add	r1, r3, r1
   18464:	e5910004 	ldr	r0, [r1, #4]
   18468:	e1a07003 	mov	r7, r3
   1846c:	e5b72008 	ldr	r2, [r7, #8]!
   18470:	e593300c 	ldr	r3, [r3, #12]
   18474:	e3800001 	orr	r0, r0, #1
   18478:	e5810004 	str	r0, [r1, #4]
   1847c:	e582300c 	str	r3, [r2, #12]
   18480:	e5832008 	str	r2, [r3, #8]
   18484:	e1a00005 	mov	r0, r5
   18488:	eb0000a4 	bl	18720 <__malloc_unlock>
   1848c:	eafffe8f 	b	17ed0 <_malloc_r+0x98>
   18490:	e1570006 	cmp	r7, r6
   18494:	0affff38 	beq	1817c <_malloc_r+0x344>
   18498:	e59f30a8 	ldr	r3, [pc, #168]	; 18548 <_malloc_r+0x710>
   1849c:	e5937008 	ldr	r7, [r3, #8]
   184a0:	e5972004 	ldr	r2, [r7, #4]
   184a4:	e3c22003 	bic	r2, r2, #3
   184a8:	eaffff71 	b	18274 <_malloc_r+0x43c>
   184ac:	e1a00080 	lsl	r0, r0, #1
   184b0:	e1100003 	tst	r0, r3
   184b4:	e2877004 	add	r7, r7, #4
   184b8:	0afffffb 	beq	184ac <_malloc_r+0x674>
   184bc:	e1a0e007 	mov	lr, r7
   184c0:	eafffec7 	b	17fe4 <_malloc_r+0x1ac>
   184c4:	e59c2004 	ldr	r2, [ip, #4]
   184c8:	e1a0a14a 	asr	sl, sl, #2
   184cc:	e3a01001 	mov	r1, #1
   184d0:	e1821a11 	orr	r1, r2, r1, lsl sl
   184d4:	e1a02003 	mov	r2, r3
   184d8:	e58c1004 	str	r1, [ip, #4]
   184dc:	eaffffb2 	b	183ac <_malloc_r+0x574>
   184e0:	e3a03001 	mov	r3, #1
   184e4:	e58a3004 	str	r3, [sl, #4]
   184e8:	e1a0700a 	mov	r7, sl
   184ec:	e3a02000 	mov	r2, #0
   184f0:	eaffff5f 	b	18274 <_malloc_r+0x43c>
   184f4:	e5967008 	ldr	r7, [r6, #8]
   184f8:	e5972004 	ldr	r2, [r7, #4]
   184fc:	e3c22003 	bic	r2, r2, #3
   18500:	eaffff5b 	b	18274 <_malloc_r+0x43c>
   18504:	e1b01a02 	lsls	r1, r2, #20
   18508:	1affff20 	bne	18190 <_malloc_r+0x358>
   1850c:	e5962008 	ldr	r2, [r6, #8]
   18510:	e08b1008 	add	r1, fp, r8
   18514:	e3811001 	orr	r1, r1, #1
   18518:	e5821004 	str	r1, [r2, #4]
   1851c:	eaffff49 	b	18248 <_malloc_r+0x410>
   18520:	e1a00005 	mov	r0, r5
   18524:	e2871008 	add	r1, r7, #8
   18528:	eb001749 	bl	1e254 <_free_r>
   1852c:	e59f301c 	ldr	r3, [pc, #28]	; 18550 <_malloc_r+0x718>
   18530:	e5933004 	ldr	r3, [r3, #4]
   18534:	eaffff43 	b	18248 <_malloc_r+0x410>
   18538:	e5963004 	ldr	r3, [r6, #4]
   1853c:	e1c33000 	bic	r3, r3, r0
   18540:	e5863004 	str	r3, [r6, #4]
   18544:	eaffffb6 	b	18424 <_malloc_r+0x5ec>
   18548:	40000078 	.word	0x40000078
   1854c:	00000554 	.word	0x00000554
   18550:	400012b0 	.word	0x400012b0

00018554 <memcpy>:
   18554:	e352000f 	cmp	r2, #15
   18558:	e92d0070 	push	{r4, r5, r6}
   1855c:	91a03000 	movls	r3, r0
   18560:	9a000029 	bls	1860c <memcpy+0xb8>
   18564:	e1813000 	orr	r3, r1, r0
   18568:	e3130003 	tst	r3, #3
   1856c:	11a03000 	movne	r3, r0
   18570:	1a000027 	bne	18614 <memcpy+0xc0>
   18574:	e1a0c001 	mov	ip, r1
   18578:	e1a03000 	mov	r3, r0
   1857c:	e1a04002 	mov	r4, r2
   18580:	e59c5000 	ldr	r5, [ip]
   18584:	e5835000 	str	r5, [r3]
   18588:	e59c5004 	ldr	r5, [ip, #4]
   1858c:	e5835004 	str	r5, [r3, #4]
   18590:	e59c5008 	ldr	r5, [ip, #8]
   18594:	e5835008 	str	r5, [r3, #8]
   18598:	e2444010 	sub	r4, r4, #16
   1859c:	e59c500c 	ldr	r5, [ip, #12]
   185a0:	e354000f 	cmp	r4, #15
   185a4:	e583500c 	str	r5, [r3, #12]
   185a8:	e28cc010 	add	ip, ip, #16
   185ac:	e2833010 	add	r3, r3, #16
   185b0:	8afffff2 	bhi	18580 <memcpy+0x2c>
   185b4:	e242c010 	sub	ip, r2, #16
   185b8:	e3ccc00f 	bic	ip, ip, #15
   185bc:	e202200f 	and	r2, r2, #15
   185c0:	e28cc010 	add	ip, ip, #16
   185c4:	e3520003 	cmp	r2, #3
   185c8:	e080300c 	add	r3, r0, ip
   185cc:	e081100c 	add	r1, r1, ip
   185d0:	9a00000d 	bls	1860c <memcpy+0xb8>
   185d4:	e1a05001 	mov	r5, r1
   185d8:	e1a04003 	mov	r4, r3
   185dc:	e1a0c002 	mov	ip, r2
   185e0:	e4956004 	ldr	r6, [r5], #4
   185e4:	e24cc004 	sub	ip, ip, #4
   185e8:	e35c0003 	cmp	ip, #3
   185ec:	e4846004 	str	r6, [r4], #4
   185f0:	8afffffa 	bhi	185e0 <memcpy+0x8c>
   185f4:	e242c004 	sub	ip, r2, #4
   185f8:	e3ccc003 	bic	ip, ip, #3
   185fc:	e28cc004 	add	ip, ip, #4
   18600:	e2022003 	and	r2, r2, #3
   18604:	e081100c 	add	r1, r1, ip
   18608:	e083300c 	add	r3, r3, ip
   1860c:	e3520000 	cmp	r2, #0
   18610:	0a000003 	beq	18624 <memcpy+0xd0>
   18614:	e4d1c001 	ldrb	ip, [r1], #1
   18618:	e2522001 	subs	r2, r2, #1
   1861c:	e4c3c001 	strb	ip, [r3], #1
   18620:	1afffffb 	bne	18614 <memcpy+0xc0>
   18624:	e8bd0070 	pop	{r4, r5, r6}
   18628:	e12fff1e 	bx	lr

0001862c <memset>:
   1862c:	e3100003 	tst	r0, #3
   18630:	e92d0030 	push	{r4, r5}
   18634:	e1a03000 	mov	r3, r0
   18638:	0a000035 	beq	18714 <memset+0xe8>
   1863c:	e3520000 	cmp	r2, #0
   18640:	120140ff 	andne	r4, r1, #255	; 0xff
   18644:	1a000002 	bne	18654 <memset+0x28>
   18648:	ea00002f 	b	1870c <memset+0xe0>
   1864c:	e3520000 	cmp	r2, #0
   18650:	0a00002d 	beq	1870c <memset+0xe0>
   18654:	e4c34001 	strb	r4, [r3], #1
   18658:	e3130003 	tst	r3, #3
   1865c:	e2422001 	sub	r2, r2, #1
   18660:	e1a0c003 	mov	ip, r3
   18664:	1afffff8 	bne	1864c <memset+0x20>
   18668:	e3520003 	cmp	r2, #3
   1866c:	9a000020 	bls	186f4 <memset+0xc8>
   18670:	e20140ff 	and	r4, r1, #255	; 0xff
   18674:	e352000f 	cmp	r2, #15
   18678:	e1844404 	orr	r4, r4, r4, lsl #8
   1867c:	e1844804 	orr	r4, r4, r4, lsl #16
   18680:	81a0300c 	movhi	r3, ip
   18684:	81a05002 	movhi	r5, r2
   18688:	9a00000e 	bls	186c8 <memset+0x9c>
   1868c:	e2455010 	sub	r5, r5, #16
   18690:	e355000f 	cmp	r5, #15
   18694:	e5834000 	str	r4, [r3]
   18698:	e5834004 	str	r4, [r3, #4]
   1869c:	e5834008 	str	r4, [r3, #8]
   186a0:	e583400c 	str	r4, [r3, #12]
   186a4:	e2833010 	add	r3, r3, #16
   186a8:	8afffff7 	bhi	1868c <memset+0x60>
   186ac:	e2423010 	sub	r3, r2, #16
   186b0:	e3c3300f 	bic	r3, r3, #15
   186b4:	e202200f 	and	r2, r2, #15
   186b8:	e2833010 	add	r3, r3, #16
   186bc:	e3520003 	cmp	r2, #3
   186c0:	e08cc003 	add	ip, ip, r3
   186c4:	9a00000a 	bls	186f4 <memset+0xc8>
   186c8:	e1a0500c 	mov	r5, ip
   186cc:	e1a03002 	mov	r3, r2
   186d0:	e2433004 	sub	r3, r3, #4
   186d4:	e3530003 	cmp	r3, #3
   186d8:	e4854004 	str	r4, [r5], #4
   186dc:	8afffffb 	bhi	186d0 <memset+0xa4>
   186e0:	e2423004 	sub	r3, r2, #4
   186e4:	e3c33003 	bic	r3, r3, #3
   186e8:	e2833004 	add	r3, r3, #4
   186ec:	e2022003 	and	r2, r2, #3
   186f0:	e08cc003 	add	ip, ip, r3
   186f4:	e3520000 	cmp	r2, #0
   186f8:	120110ff 	andne	r1, r1, #255	; 0xff
   186fc:	0a000002 	beq	1870c <memset+0xe0>
   18700:	e2522001 	subs	r2, r2, #1
   18704:	e4cc1001 	strb	r1, [ip], #1
   18708:	1afffffc 	bne	18700 <memset+0xd4>
   1870c:	e8bd0030 	pop	{r4, r5}
   18710:	e12fff1e 	bx	lr
   18714:	e1a0c000 	mov	ip, r0
   18718:	eaffffd2 	b	18668 <memset+0x3c>

0001871c <__malloc_lock>:
   1871c:	e12fff1e 	bx	lr

00018720 <__malloc_unlock>:
   18720:	e12fff1e 	bx	lr

00018724 <_sprintf_r>:
   18724:	e92d000c 	push	{r2, r3}
   18728:	e92d4030 	push	{r4, r5, lr}
   1872c:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   18730:	e28dc07c 	add	ip, sp, #124	; 0x7c
   18734:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
   18738:	e1a04001 	mov	r4, r1
   1873c:	e59d2078 	ldr	r2, [sp, #120]	; 0x78
   18740:	e1a0300c 	mov	r3, ip
   18744:	e58de008 	str	lr, [sp, #8]
   18748:	e58de014 	str	lr, [sp, #20]
   1874c:	e1a0100d 	mov	r1, sp
   18750:	e3e0e000 	mvn	lr, #0
   18754:	e3a05f82 	mov	r5, #520	; 0x208
   18758:	e1cd50bc 	strh	r5, [sp, #12]
   1875c:	e58d4000 	str	r4, [sp]
   18760:	e58d4010 	str	r4, [sp, #16]
   18764:	e1cde0be 	strh	lr, [sp, #14]
   18768:	e58dc068 	str	ip, [sp, #104]	; 0x68
   1876c:	eb0008c7 	bl	1aa90 <_svfprintf_r>
   18770:	e59d3000 	ldr	r3, [sp]
   18774:	e3a02000 	mov	r2, #0
   18778:	e5c32000 	strb	r2, [r3]
   1877c:	e28dd06c 	add	sp, sp, #108	; 0x6c
   18780:	e8bd4030 	pop	{r4, r5, lr}
   18784:	e28dd008 	add	sp, sp, #8
   18788:	e12fff1e 	bx	lr

0001878c <sprintf>:
   1878c:	e92d000e 	push	{r1, r2, r3}
   18790:	e92d4030 	push	{r4, r5, lr}
   18794:	e59f3060 	ldr	r3, [pc, #96]	; 187fc <sprintf+0x70>
   18798:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   1879c:	e28dc07c 	add	ip, sp, #124	; 0x7c
   187a0:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
   187a4:	e1a04000 	mov	r4, r0
   187a8:	e59d2078 	ldr	r2, [sp, #120]	; 0x78
   187ac:	e58de008 	str	lr, [sp, #8]
   187b0:	e58de014 	str	lr, [sp, #20]
   187b4:	e5930000 	ldr	r0, [r3]
   187b8:	e3e0e000 	mvn	lr, #0
   187bc:	e1a0300c 	mov	r3, ip
   187c0:	e1a0100d 	mov	r1, sp
   187c4:	e3a05f82 	mov	r5, #520	; 0x208
   187c8:	e1cd50bc 	strh	r5, [sp, #12]
   187cc:	e58d4000 	str	r4, [sp]
   187d0:	e58d4010 	str	r4, [sp, #16]
   187d4:	e1cde0be 	strh	lr, [sp, #14]
   187d8:	e58dc068 	str	ip, [sp, #104]	; 0x68
   187dc:	eb0008ab 	bl	1aa90 <_svfprintf_r>
   187e0:	e59d3000 	ldr	r3, [sp]
   187e4:	e3a02000 	mov	r2, #0
   187e8:	e5c32000 	strb	r2, [r3]
   187ec:	e28dd06c 	add	sp, sp, #108	; 0x6c
   187f0:	e8bd4030 	pop	{r4, r5, lr}
   187f4:	e28dd00c 	add	sp, sp, #12
   187f8:	e12fff1e 	bx	lr
   187fc:	400004b4 	.word	0x400004b4

00018800 <strcat>:
   18800:	e3100003 	tst	r0, #3
   18804:	e92d4010 	push	{r4, lr}
   18808:	e1a04000 	mov	r4, r0
   1880c:	1a00001d 	bne	18888 <strcat+0x88>
   18810:	e5900000 	ldr	r0, [r0]
   18814:	e59f2074 	ldr	r2, [pc, #116]	; 18890 <strcat+0x90>
   18818:	e59f3074 	ldr	r3, [pc, #116]	; 18894 <strcat+0x94>
   1881c:	e0802002 	add	r2, r0, r2
   18820:	e1c22000 	bic	r2, r2, r0
   18824:	e0023003 	and	r3, r2, r3
   18828:	e3530000 	cmp	r3, #0
   1882c:	01a0e004 	moveq	lr, r4
   18830:	01a00004 	moveq	r0, r4
   18834:	1a000013 	bne	18888 <strcat+0x88>
   18838:	e5bec004 	ldr	ip, [lr, #4]!
   1883c:	e59f204c 	ldr	r2, [pc, #76]	; 18890 <strcat+0x90>
   18840:	e59f304c 	ldr	r3, [pc, #76]	; 18894 <strcat+0x94>
   18844:	e08c2002 	add	r2, ip, r2
   18848:	e1c2200c 	bic	r2, r2, ip
   1884c:	e0023003 	and	r3, r2, r3
   18850:	e3530000 	cmp	r3, #0
   18854:	e2800004 	add	r0, r0, #4
   18858:	0afffff6 	beq	18838 <strcat+0x38>
   1885c:	e5d03000 	ldrb	r3, [r0]
   18860:	e3530000 	cmp	r3, #0
   18864:	11a03000 	movne	r3, r0
   18868:	0a000003 	beq	1887c <strcat+0x7c>
   1886c:	e5f32001 	ldrb	r2, [r3, #1]!
   18870:	e3520000 	cmp	r2, #0
   18874:	e2800001 	add	r0, r0, #1
   18878:	1afffffb 	bne	1886c <strcat+0x6c>
   1887c:	eb000106 	bl	18c9c <strcpy>
   18880:	e1a00004 	mov	r0, r4
   18884:	e8bd8010 	pop	{r4, pc}
   18888:	e1a00004 	mov	r0, r4
   1888c:	eafffff2 	b	1885c <strcat+0x5c>
   18890:	fefefeff 	.word	0xfefefeff
   18894:	80808080 	.word	0x80808080

00018898 <strchr>:
   18898:	e21110ff 	ands	r1, r1, #255	; 0xff
   1889c:	e92d01f0 	push	{r4, r5, r6, r7, r8}
   188a0:	0a000045 	beq	189bc <strchr+0x124>
   188a4:	e3100003 	tst	r0, #3
   188a8:	0a00000f 	beq	188ec <strchr+0x54>
   188ac:	e5d03000 	ldrb	r3, [r0]
   188b0:	e3530000 	cmp	r3, #0
   188b4:	0a00003d 	beq	189b0 <strchr+0x118>
   188b8:	e1510003 	cmp	r1, r3
   188bc:	11a02000 	movne	r2, r0
   188c0:	11a00002 	movne	r0, r2
   188c4:	1a000005 	bne	188e0 <strchr+0x48>
   188c8:	ea000039 	b	189b4 <strchr+0x11c>
   188cc:	e5f23001 	ldrb	r3, [r2, #1]!
   188d0:	e3530000 	cmp	r3, #0
   188d4:	0a000035 	beq	189b0 <strchr+0x118>
   188d8:	e1510003 	cmp	r1, r3
   188dc:	0a000034 	beq	189b4 <strchr+0x11c>
   188e0:	e2800001 	add	r0, r0, #1
   188e4:	e3100003 	tst	r0, #3
   188e8:	1afffff7 	bne	188cc <strchr+0x34>
   188ec:	e590c000 	ldr	ip, [r0]
   188f0:	e59f216c 	ldr	r2, [pc, #364]	; 18a64 <strchr+0x1cc>
   188f4:	e59f316c 	ldr	r3, [pc, #364]	; 18a68 <strchr+0x1d0>
   188f8:	e08c2002 	add	r2, ip, r2
   188fc:	e1c2200c 	bic	r2, r2, ip
   18900:	e0023003 	and	r3, r2, r3
   18904:	e1818401 	orr	r8, r1, r1, lsl #8
   18908:	e3530000 	cmp	r3, #0
   1890c:	e1888808 	orr	r8, r8, r8, lsl #16
   18910:	1a00001a 	bne	18980 <strchr+0xe8>
   18914:	e59f2148 	ldr	r2, [pc, #328]	; 18a64 <strchr+0x1cc>
   18918:	e028c00c 	eor	ip, r8, ip
   1891c:	e08c2002 	add	r2, ip, r2
   18920:	e59f3140 	ldr	r3, [pc, #320]	; 18a68 <strchr+0x1d0>
   18924:	e1c2c00c 	bic	ip, r2, ip
   18928:	e00c3003 	and	r3, ip, r3
   1892c:	e3530000 	cmp	r3, #0
   18930:	1a000012 	bne	18980 <strchr+0xe8>
   18934:	e1a07000 	mov	r7, r0
   18938:	ea000001 	b	18944 <strchr+0xac>
   1893c:	e3550000 	cmp	r5, #0
   18940:	1a00000e 	bne	18980 <strchr+0xe8>
   18944:	e5b74004 	ldr	r4, [r7, #4]!
   18948:	e59fc114 	ldr	ip, [pc, #276]	; 18a64 <strchr+0x1cc>
   1894c:	e59f3114 	ldr	r3, [pc, #276]	; 18a68 <strchr+0x1d0>
   18950:	e1a0200c 	mov	r2, ip
   18954:	e084c00c 	add	ip, r4, ip
   18958:	e0286004 	eor	r6, r8, r4
   1895c:	e1ccc004 	bic	ip, ip, r4
   18960:	e1a05003 	mov	r5, r3
   18964:	e0862002 	add	r2, r6, r2
   18968:	e00c3003 	and	r3, ip, r3
   1896c:	e1c22006 	bic	r2, r2, r6
   18970:	e3530000 	cmp	r3, #0
   18974:	e0025005 	and	r5, r2, r5
   18978:	e2800004 	add	r0, r0, #4
   1897c:	0affffee 	beq	1893c <strchr+0xa4>
   18980:	e5d03000 	ldrb	r3, [r0]
   18984:	e3530000 	cmp	r3, #0
   18988:	0a000008 	beq	189b0 <strchr+0x118>
   1898c:	e1510003 	cmp	r1, r3
   18990:	1a000003 	bne	189a4 <strchr+0x10c>
   18994:	ea000006 	b	189b4 <strchr+0x11c>
   18998:	e1510003 	cmp	r1, r3
   1899c:	e2800001 	add	r0, r0, #1
   189a0:	0a000003 	beq	189b4 <strchr+0x11c>
   189a4:	e5d03001 	ldrb	r3, [r0, #1]
   189a8:	e3530000 	cmp	r3, #0
   189ac:	1afffff9 	bne	18998 <strchr+0x100>
   189b0:	e1a00003 	mov	r0, r3
   189b4:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
   189b8:	e12fff1e 	bx	lr
   189bc:	e3100003 	tst	r0, #3
   189c0:	0a00000b 	beq	189f4 <strchr+0x15c>
   189c4:	e5d03000 	ldrb	r3, [r0]
   189c8:	e3530000 	cmp	r3, #0
   189cc:	11a02000 	movne	r2, r0
   189d0:	11a00002 	movne	r0, r2
   189d4:	1a000003 	bne	189e8 <strchr+0x150>
   189d8:	eafffff5 	b	189b4 <strchr+0x11c>
   189dc:	e5f23001 	ldrb	r3, [r2, #1]!
   189e0:	e3530000 	cmp	r3, #0
   189e4:	0afffff2 	beq	189b4 <strchr+0x11c>
   189e8:	e2800001 	add	r0, r0, #1
   189ec:	e3100003 	tst	r0, #3
   189f0:	1afffff9 	bne	189dc <strchr+0x144>
   189f4:	e1a02000 	mov	r2, r0
   189f8:	e59f1064 	ldr	r1, [pc, #100]	; 18a64 <strchr+0x1cc>
   189fc:	e5900000 	ldr	r0, [r0]
   18a00:	e59f3060 	ldr	r3, [pc, #96]	; 18a68 <strchr+0x1d0>
   18a04:	e0801001 	add	r1, r0, r1
   18a08:	e1c11000 	bic	r1, r1, r0
   18a0c:	e0013003 	and	r3, r1, r3
   18a10:	e3530000 	cmp	r3, #0
   18a14:	e1a00002 	mov	r0, r2
   18a18:	1a000009 	bne	18a44 <strchr+0x1ac>
   18a1c:	e5b0c004 	ldr	ip, [r0, #4]!
   18a20:	e59f103c 	ldr	r1, [pc, #60]	; 18a64 <strchr+0x1cc>
   18a24:	e59f303c 	ldr	r3, [pc, #60]	; 18a68 <strchr+0x1d0>
   18a28:	e08c1001 	add	r1, ip, r1
   18a2c:	e1c1100c 	bic	r1, r1, ip
   18a30:	e0013003 	and	r3, r1, r3
   18a34:	e3530000 	cmp	r3, #0
   18a38:	e2822004 	add	r2, r2, #4
   18a3c:	0afffff6 	beq	18a1c <strchr+0x184>
   18a40:	e1a00002 	mov	r0, r2
   18a44:	e5d23000 	ldrb	r3, [r2]
   18a48:	e3530000 	cmp	r3, #0
   18a4c:	0affffd8 	beq	189b4 <strchr+0x11c>
   18a50:	e5f23001 	ldrb	r3, [r2, #1]!
   18a54:	e3530000 	cmp	r3, #0
   18a58:	e2800001 	add	r0, r0, #1
   18a5c:	1afffffb 	bne	18a50 <strchr+0x1b8>
   18a60:	eaffffd3 	b	189b4 <strchr+0x11c>
   18a64:	fefefeff 	.word	0xfefefeff
   18a68:	80808080 	.word	0x80808080

00018a6c <strcmp>:
   18a6c:	e0202001 	eor	r2, r0, r1
   18a70:	e3120003 	tst	r2, #3
   18a74:	1a000021 	bne	18b00 <strcmp_unaligned>
   18a78:	e2102003 	ands	r2, r0, #3
   18a7c:	e3c00003 	bic	r0, r0, #3
   18a80:	e3c11003 	bic	r1, r1, #3
   18a84:	e490c004 	ldr	ip, [r0], #4
   18a88:	04913004 	ldreq	r3, [r1], #4
   18a8c:	0a000006 	beq	18aac <strcmp+0x40>
   18a90:	e2222003 	eor	r2, r2, #3
   18a94:	e1a02182 	lsl	r2, r2, #3
   18a98:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
   18a9c:	e1a02233 	lsr	r2, r3, r2
   18aa0:	e4913004 	ldr	r3, [r1], #4
   18aa4:	e18cc002 	orr	ip, ip, r2
   18aa8:	e1833002 	orr	r3, r3, r2
   18aac:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   18ab0:	e3a04001 	mov	r4, #1
   18ab4:	e1844404 	orr	r4, r4, r4, lsl #8
   18ab8:	e1844804 	orr	r4, r4, r4, lsl #16
   18abc:	e04c2004 	sub	r2, ip, r4
   18ac0:	e15c0003 	cmp	ip, r3
   18ac4:	01c2200c 	biceq	r2, r2, ip
   18ac8:	01120384 	tsteq	r2, r4, lsl #7
   18acc:	0490c004 	ldreq	ip, [r0], #4
   18ad0:	04913004 	ldreq	r3, [r1], #4
   18ad4:	0afffff8 	beq	18abc <strcmp+0x50>
   18ad8:	e1a00c0c 	lsl	r0, ip, #24
   18adc:	e1a0c42c 	lsr	ip, ip, #8
   18ae0:	e3500001 	cmp	r0, #1
   18ae4:	21500c03 	cmpcs	r0, r3, lsl #24
   18ae8:	01a03423 	lsreq	r3, r3, #8
   18aec:	0afffff9 	beq	18ad8 <strcmp+0x6c>
   18af0:	e20330ff 	and	r3, r3, #255	; 0xff
   18af4:	e0630c20 	rsb	r0, r3, r0, lsr #24
   18af8:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
   18afc:	e12fff1e 	bx	lr

00018b00 <strcmp_unaligned>:
   18b00:	e3100003 	tst	r0, #3
   18b04:	0a000006 	beq	18b24 <strcmp_unaligned+0x24>
   18b08:	e4d02001 	ldrb	r2, [r0], #1
   18b0c:	e4d13001 	ldrb	r3, [r1], #1
   18b10:	e3520001 	cmp	r2, #1
   18b14:	21520003 	cmpcs	r2, r3
   18b18:	0afffff8 	beq	18b00 <strcmp_unaligned>
   18b1c:	e0420003 	sub	r0, r2, r3
   18b20:	e12fff1e 	bx	lr
   18b24:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
   18b28:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   18b2c:	e3a02001 	mov	r2, #1
   18b30:	e1822402 	orr	r2, r2, r2, lsl #8
   18b34:	e1822802 	orr	r2, r2, r2, lsl #16
   18b38:	e201c003 	and	ip, r1, #3
   18b3c:	e3c11003 	bic	r1, r1, #3
   18b40:	e4904004 	ldr	r4, [r0], #4
   18b44:	e4915004 	ldr	r5, [r1], #4
   18b48:	e35c0002 	cmp	ip, #2
   18b4c:	0a000017 	beq	18bb0 <strcmp_unaligned+0xb0>
   18b50:	8a00002d 	bhi	18c0c <strcmp_unaligned+0x10c>
   18b54:	e3c4c4ff 	bic	ip, r4, #-16777216	; 0xff000000
   18b58:	e15c0425 	cmp	ip, r5, lsr #8
   18b5c:	e0443002 	sub	r3, r4, r2
   18b60:	e1c33004 	bic	r3, r3, r4
   18b64:	1a000007 	bne	18b88 <strcmp_unaligned+0x88>
   18b68:	e0133382 	ands	r3, r3, r2, lsl #7
   18b6c:	04915004 	ldreq	r5, [r1], #4
   18b70:	1a000006 	bne	18b90 <strcmp_unaligned+0x90>
   18b74:	e02cc004 	eor	ip, ip, r4
   18b78:	e15c0c05 	cmp	ip, r5, lsl #24
   18b7c:	1a000008 	bne	18ba4 <strcmp_unaligned+0xa4>
   18b80:	e4904004 	ldr	r4, [r0], #4
   18b84:	eafffff2 	b	18b54 <strcmp_unaligned+0x54>
   18b88:	e1a05425 	lsr	r5, r5, #8
   18b8c:	ea000037 	b	18c70 <strcmp_unaligned+0x170>
   18b90:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
   18b94:	1a000031 	bne	18c60 <strcmp_unaligned+0x160>
   18b98:	e5d15000 	ldrb	r5, [r1]
   18b9c:	e1a0cc24 	lsr	ip, r4, #24
   18ba0:	ea000032 	b	18c70 <strcmp_unaligned+0x170>
   18ba4:	e1a0cc24 	lsr	ip, r4, #24
   18ba8:	e20550ff 	and	r5, r5, #255	; 0xff
   18bac:	ea00002f 	b	18c70 <strcmp_unaligned+0x170>
   18bb0:	e1a0c804 	lsl	ip, r4, #16
   18bb4:	e0443002 	sub	r3, r4, r2
   18bb8:	e1a0c82c 	lsr	ip, ip, #16
   18bbc:	e1c33004 	bic	r3, r3, r4
   18bc0:	e15c0825 	cmp	ip, r5, lsr #16
   18bc4:	1a00000e 	bne	18c04 <strcmp_unaligned+0x104>
   18bc8:	e0133382 	ands	r3, r3, r2, lsl #7
   18bcc:	04915004 	ldreq	r5, [r1], #4
   18bd0:	1a000004 	bne	18be8 <strcmp_unaligned+0xe8>
   18bd4:	e02cc004 	eor	ip, ip, r4
   18bd8:	e15c0805 	cmp	ip, r5, lsl #16
   18bdc:	1a000006 	bne	18bfc <strcmp_unaligned+0xfc>
   18be0:	e4904004 	ldr	r4, [r0], #4
   18be4:	eafffff1 	b	18bb0 <strcmp_unaligned+0xb0>
   18be8:	e1b03803 	lsls	r3, r3, #16
   18bec:	1a00001b 	bne	18c60 <strcmp_unaligned+0x160>
   18bf0:	e1d150b0 	ldrh	r5, [r1]
   18bf4:	e1a0c824 	lsr	ip, r4, #16
   18bf8:	ea00001c 	b	18c70 <strcmp_unaligned+0x170>
   18bfc:	e1a05805 	lsl	r5, r5, #16
   18c00:	e1a0c824 	lsr	ip, r4, #16
   18c04:	e1a05825 	lsr	r5, r5, #16
   18c08:	ea000018 	b	18c70 <strcmp_unaligned+0x170>
   18c0c:	e204c0ff 	and	ip, r4, #255	; 0xff
   18c10:	e15c0c25 	cmp	ip, r5, lsr #24
   18c14:	e0443002 	sub	r3, r4, r2
   18c18:	e1c33004 	bic	r3, r3, r4
   18c1c:	1a000007 	bne	18c40 <strcmp_unaligned+0x140>
   18c20:	e0133382 	ands	r3, r3, r2, lsl #7
   18c24:	04915004 	ldreq	r5, [r1], #4
   18c28:	1a000006 	bne	18c48 <strcmp_unaligned+0x148>
   18c2c:	e02cc004 	eor	ip, ip, r4
   18c30:	e15c0405 	cmp	ip, r5, lsl #8
   18c34:	1a000006 	bne	18c54 <strcmp_unaligned+0x154>
   18c38:	e4904004 	ldr	r4, [r0], #4
   18c3c:	eafffff2 	b	18c0c <strcmp_unaligned+0x10c>
   18c40:	e1a05c25 	lsr	r5, r5, #24
   18c44:	ea000009 	b	18c70 <strcmp_unaligned+0x170>
   18c48:	e31400ff 	tst	r4, #255	; 0xff
   18c4c:	0a000003 	beq	18c60 <strcmp_unaligned+0x160>
   18c50:	e4915004 	ldr	r5, [r1], #4
   18c54:	e1a0c424 	lsr	ip, r4, #8
   18c58:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
   18c5c:	ea000003 	b	18c70 <strcmp_unaligned+0x170>
   18c60:	e3a00000 	mov	r0, #0
   18c64:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
   18c68:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
   18c6c:	e12fff1e 	bx	lr
   18c70:	e20c20ff 	and	r2, ip, #255	; 0xff
   18c74:	e20500ff 	and	r0, r5, #255	; 0xff
   18c78:	e3500001 	cmp	r0, #1
   18c7c:	21500002 	cmpcs	r0, r2
   18c80:	01a0c42c 	lsreq	ip, ip, #8
   18c84:	01a05425 	lsreq	r5, r5, #8
   18c88:	0afffff8 	beq	18c70 <strcmp_unaligned+0x170>
   18c8c:	e0420000 	sub	r0, r2, r0
   18c90:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
   18c94:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
   18c98:	e12fff1e 	bx	lr

00018c9c <strcpy>:
   18c9c:	e0202001 	eor	r2, r0, r1
   18ca0:	e1a0c000 	mov	ip, r0
   18ca4:	e3120003 	tst	r2, #3
   18ca8:	1a000032 	bne	18d78 <strcpy+0xdc>
   18cac:	e3110003 	tst	r1, #3
   18cb0:	1a000021 	bne	18d3c <strcpy+0xa0>
   18cb4:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
   18cb8:	e3a05001 	mov	r5, #1
   18cbc:	e1855405 	orr	r5, r5, r5, lsl #8
   18cc0:	e1855805 	orr	r5, r5, r5, lsl #16
   18cc4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   18cc8:	e3110004 	tst	r1, #4
   18ccc:	e4913004 	ldr	r3, [r1], #4
   18cd0:	0a000005 	beq	18cec <strcpy+0x50>
   18cd4:	e0432005 	sub	r2, r3, r5
   18cd8:	e1d22003 	bics	r2, r2, r3
   18cdc:	e1120385 	tst	r2, r5, lsl #7
   18ce0:	048c3004 	streq	r3, [ip], #4
   18ce4:	04913004 	ldreq	r3, [r1], #4
   18ce8:	1a00000c 	bne	18d20 <strcpy+0x84>
   18cec:	e4914004 	ldr	r4, [r1], #4
   18cf0:	e0432005 	sub	r2, r3, r5
   18cf4:	e1d22003 	bics	r2, r2, r3
   18cf8:	e1120385 	tst	r2, r5, lsl #7
   18cfc:	e0442005 	sub	r2, r4, r5
   18d00:	1a000006 	bne	18d20 <strcpy+0x84>
   18d04:	e48c3004 	str	r3, [ip], #4
   18d08:	e1d22004 	bics	r2, r2, r4
   18d0c:	e1120385 	tst	r2, r5, lsl #7
   18d10:	04913004 	ldreq	r3, [r1], #4
   18d14:	048c4004 	streq	r4, [ip], #4
   18d18:	0afffff3 	beq	18cec <strcpy+0x50>
   18d1c:	e1a03004 	mov	r3, r4
   18d20:	e4cc3001 	strb	r3, [ip], #1
   18d24:	e31300ff 	tst	r3, #255	; 0xff
   18d28:	e1a03463 	ror	r3, r3, #8
   18d2c:	1afffffb 	bne	18d20 <strcpy+0x84>
   18d30:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
   18d34:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
   18d38:	e12fff1e 	bx	lr
   18d3c:	e3110001 	tst	r1, #1
   18d40:	0a000003 	beq	18d54 <strcpy+0xb8>
   18d44:	e4d12001 	ldrb	r2, [r1], #1
   18d48:	e4cc2001 	strb	r2, [ip], #1
   18d4c:	e3520000 	cmp	r2, #0
   18d50:	012fff1e 	bxeq	lr
   18d54:	e3110002 	tst	r1, #2
   18d58:	0affffd5 	beq	18cb4 <strcpy+0x18>
   18d5c:	e0d120b2 	ldrh	r2, [r1], #2
   18d60:	e31200ff 	tst	r2, #255	; 0xff
   18d64:	10cc20b2 	strhne	r2, [ip], #2
   18d68:	05cc2000 	strbeq	r2, [ip]
   18d6c:	13120cff 	tstne	r2, #65280	; 0xff00
   18d70:	1affffcf 	bne	18cb4 <strcpy+0x18>
   18d74:	e12fff1e 	bx	lr
   18d78:	e4d12001 	ldrb	r2, [r1], #1
   18d7c:	e4cc2001 	strb	r2, [ip], #1
   18d80:	e3520000 	cmp	r2, #0
   18d84:	1afffffb 	bne	18d78 <strcpy+0xdc>
   18d88:	e12fff1e 	bx	lr

00018d8c <strlen>:
   18d8c:	e3c01003 	bic	r1, r0, #3
   18d90:	e2100003 	ands	r0, r0, #3
   18d94:	e2600000 	rsb	r0, r0, #0
   18d98:	e4913004 	ldr	r3, [r1], #4
   18d9c:	e280c004 	add	ip, r0, #4
   18da0:	e1a0c18c 	lsl	ip, ip, #3
   18da4:	e3e02000 	mvn	r2, #0
   18da8:	11833c32 	orrne	r3, r3, r2, lsr ip
   18dac:	e3a0c001 	mov	ip, #1
   18db0:	e18cc40c 	orr	ip, ip, ip, lsl #8
   18db4:	e18cc80c 	orr	ip, ip, ip, lsl #16
   18db8:	e043200c 	sub	r2, r3, ip
   18dbc:	e1c22003 	bic	r2, r2, r3
   18dc0:	e012238c 	ands	r2, r2, ip, lsl #7
   18dc4:	04913004 	ldreq	r3, [r1], #4
   18dc8:	02800004 	addeq	r0, r0, #4
   18dcc:	0afffff9 	beq	18db8 <strlen+0x2c>
   18dd0:	e31300ff 	tst	r3, #255	; 0xff
   18dd4:	12800001 	addne	r0, r0, #1
   18dd8:	13130cff 	tstne	r3, #65280	; 0xff00
   18ddc:	12800001 	addne	r0, r0, #1
   18de0:	131308ff 	tstne	r3, #16711680	; 0xff0000
   18de4:	12800001 	addne	r0, r0, #1
   18de8:	e12fff1e 	bx	lr

00018dec <strncat>:
   18dec:	e3100003 	tst	r0, #3
   18df0:	e92d0070 	push	{r4, r5, r6}
   18df4:	1a000032 	bne	18ec4 <strncat+0xd8>
   18df8:	e5904000 	ldr	r4, [r0]
   18dfc:	e59fc0c8 	ldr	ip, [pc, #200]	; 18ecc <strncat+0xe0>
   18e00:	e59f30c8 	ldr	r3, [pc, #200]	; 18ed0 <strncat+0xe4>
   18e04:	e084c00c 	add	ip, r4, ip
   18e08:	e1ccc004 	bic	ip, ip, r4
   18e0c:	e00c3003 	and	r3, ip, r3
   18e10:	e3530000 	cmp	r3, #0
   18e14:	01a06000 	moveq	r6, r0
   18e18:	01a03000 	moveq	r3, r0
   18e1c:	1a000028 	bne	18ec4 <strncat+0xd8>
   18e20:	e5b65004 	ldr	r5, [r6, #4]!
   18e24:	e59f40a0 	ldr	r4, [pc, #160]	; 18ecc <strncat+0xe0>
   18e28:	e59fc0a0 	ldr	ip, [pc, #160]	; 18ed0 <strncat+0xe4>
   18e2c:	e0854004 	add	r4, r5, r4
   18e30:	e1c44005 	bic	r4, r4, r5
   18e34:	e004c00c 	and	ip, r4, ip
   18e38:	e35c0000 	cmp	ip, #0
   18e3c:	e2833004 	add	r3, r3, #4
   18e40:	0afffff6 	beq	18e20 <strncat+0x34>
   18e44:	e5d3c000 	ldrb	ip, [r3]
   18e48:	e35c0000 	cmp	ip, #0
   18e4c:	11a0c003 	movne	ip, r3
   18e50:	0a000003 	beq	18e64 <strncat+0x78>
   18e54:	e5fc4001 	ldrb	r4, [ip, #1]!
   18e58:	e3540000 	cmp	r4, #0
   18e5c:	e2833001 	add	r3, r3, #1
   18e60:	1afffffb 	bne	18e54 <strncat+0x68>
   18e64:	e3520000 	cmp	r2, #0
   18e68:	0a000013 	beq	18ebc <strncat+0xd0>
   18e6c:	e5d1c000 	ldrb	ip, [r1]
   18e70:	e35c0000 	cmp	ip, #0
   18e74:	e5c3c000 	strb	ip, [r3]
   18e78:	10832002 	addne	r2, r3, r2
   18e7c:	1283c001 	addne	ip, r3, #1
   18e80:	0a00000d 	beq	18ebc <strncat+0xd0>
   18e84:	e15c0002 	cmp	ip, r2
   18e88:	e1a0400c 	mov	r4, ip
   18e8c:	0a000008 	beq	18eb4 <strncat+0xc8>
   18e90:	e5f13001 	ldrb	r3, [r1, #1]!
   18e94:	e3530000 	cmp	r3, #0
   18e98:	e4c43001 	strb	r3, [r4], #1
   18e9c:	0a000006 	beq	18ebc <strncat+0xd0>
   18ea0:	e1a0300c 	mov	r3, ip
   18ea4:	e1a0c004 	mov	ip, r4
   18ea8:	e15c0002 	cmp	ip, r2
   18eac:	e1a0400c 	mov	r4, ip
   18eb0:	1afffff6 	bne	18e90 <strncat+0xa4>
   18eb4:	e3a02000 	mov	r2, #0
   18eb8:	e5c32001 	strb	r2, [r3, #1]
   18ebc:	e8bd0070 	pop	{r4, r5, r6}
   18ec0:	e12fff1e 	bx	lr
   18ec4:	e1a03000 	mov	r3, r0
   18ec8:	eaffffdd 	b	18e44 <strncat+0x58>
   18ecc:	fefefeff 	.word	0xfefefeff
   18ed0:	80808080 	.word	0x80808080

00018ed4 <strncmp>:
   18ed4:	e3520000 	cmp	r2, #0
   18ed8:	e92d00f0 	push	{r4, r5, r6, r7}
   18edc:	0a000041 	beq	18fe8 <strncmp+0x114>
   18ee0:	e1813000 	orr	r3, r1, r0
   18ee4:	e2133003 	ands	r3, r3, #3
   18ee8:	e1a0c000 	mov	ip, r0
   18eec:	e1a04001 	mov	r4, r1
   18ef0:	1a000026 	bne	18f90 <strncmp+0xbc>
   18ef4:	e3520003 	cmp	r2, #3
   18ef8:	9a000024 	bls	18f90 <strncmp+0xbc>
   18efc:	e5905000 	ldr	r5, [r0]
   18f00:	e5916000 	ldr	r6, [r1]
   18f04:	e1550006 	cmp	r5, r6
   18f08:	1a000020 	bne	18f90 <strncmp+0xbc>
   18f0c:	e2522004 	subs	r2, r2, #4
   18f10:	0a000034 	beq	18fe8 <strncmp+0x114>
   18f14:	e59f60f0 	ldr	r6, [pc, #240]	; 1900c <strncmp+0x138>
   18f18:	e59f10f0 	ldr	r1, [pc, #240]	; 19010 <strncmp+0x13c>
   18f1c:	e0856006 	add	r6, r5, r6
   18f20:	e1c65005 	bic	r5, r6, r5
   18f24:	e0051001 	and	r1, r5, r1
   18f28:	e3510000 	cmp	r1, #0
   18f2c:	0a00000b 	beq	18f60 <strncmp+0x8c>
   18f30:	ea000030 	b	18ff8 <strncmp+0x124>
   18f34:	e5955004 	ldr	r5, [r5, #4]
   18f38:	e5977004 	ldr	r7, [r7, #4]
   18f3c:	e0853003 	add	r3, r5, r3
   18f40:	e1c33005 	bic	r3, r3, r5
   18f44:	e1550007 	cmp	r5, r7
   18f48:	e0036006 	and	r6, r3, r6
   18f4c:	1a00000f 	bne	18f90 <strncmp+0xbc>
   18f50:	e2522004 	subs	r2, r2, #4
   18f54:	0a000023 	beq	18fe8 <strncmp+0x114>
   18f58:	e3560000 	cmp	r6, #0
   18f5c:	1a000023 	bne	18ff0 <strncmp+0x11c>
   18f60:	e1a07004 	mov	r7, r4
   18f64:	e1a0500c 	mov	r5, ip
   18f68:	e2844004 	add	r4, r4, #4
   18f6c:	e28cc004 	add	ip, ip, #4
   18f70:	e3520003 	cmp	r2, #3
   18f74:	e59f3090 	ldr	r3, [pc, #144]	; 1900c <strncmp+0x138>
   18f78:	e59f6090 	ldr	r6, [pc, #144]	; 19010 <strncmp+0x13c>
   18f7c:	e1a0000c 	mov	r0, ip
   18f80:	e1a01004 	mov	r1, r4
   18f84:	8affffea 	bhi	18f34 <strncmp+0x60>
   18f88:	e3520000 	cmp	r2, #0
   18f8c:	0a00001b 	beq	19000 <strncmp+0x12c>
   18f90:	e5d03000 	ldrb	r3, [r0]
   18f94:	e5d1c000 	ldrb	ip, [r1]
   18f98:	e153000c 	cmp	r3, ip
   18f9c:	e2422001 	sub	r2, r2, #1
   18fa0:	1a00000d 	bne	18fdc <strncmp+0x108>
   18fa4:	e3520000 	cmp	r2, #0
   18fa8:	0a00000e 	beq	18fe8 <strncmp+0x114>
   18fac:	e3530000 	cmp	r3, #0
   18fb0:	1a000005 	bne	18fcc <strncmp+0xf8>
   18fb4:	ea00000f 	b	18ff8 <strncmp+0x124>
   18fb8:	e3520001 	cmp	r2, #1
   18fbc:	0a00000b 	beq	18ff0 <strncmp+0x11c>
   18fc0:	e3530000 	cmp	r3, #0
   18fc4:	e2422001 	sub	r2, r2, #1
   18fc8:	0a00000a 	beq	18ff8 <strncmp+0x124>
   18fcc:	e5f03001 	ldrb	r3, [r0, #1]!
   18fd0:	e5f1c001 	ldrb	ip, [r1, #1]!
   18fd4:	e153000c 	cmp	r3, ip
   18fd8:	0afffff6 	beq	18fb8 <strncmp+0xe4>
   18fdc:	e06c0003 	rsb	r0, ip, r3
   18fe0:	e8bd00f0 	pop	{r4, r5, r6, r7}
   18fe4:	e12fff1e 	bx	lr
   18fe8:	e1a00002 	mov	r0, r2
   18fec:	eafffffb 	b	18fe0 <strncmp+0x10c>
   18ff0:	e3a00000 	mov	r0, #0
   18ff4:	eafffff9 	b	18fe0 <strncmp+0x10c>
   18ff8:	e1a00003 	mov	r0, r3
   18ffc:	eafffff7 	b	18fe0 <strncmp+0x10c>
   19000:	e5d53004 	ldrb	r3, [r5, #4]
   19004:	e5d7c004 	ldrb	ip, [r7, #4]
   19008:	eafffff3 	b	18fdc <strncmp+0x108>
   1900c:	fefefeff 	.word	0xfefefeff
   19010:	80808080 	.word	0x80808080

00019014 <strncpy>:
   19014:	e1813000 	orr	r3, r1, r0
   19018:	e3130003 	tst	r3, #3
   1901c:	13a03000 	movne	r3, #0
   19020:	03a03001 	moveq	r3, #1
   19024:	e3520003 	cmp	r2, #3
   19028:	93a03000 	movls	r3, #0
   1902c:	82033001 	andhi	r3, r3, #1
   19030:	e3530000 	cmp	r3, #0
   19034:	e92d0070 	push	{r4, r5, r6}
   19038:	e1a03001 	mov	r3, r1
   1903c:	e1a0c000 	mov	ip, r0
   19040:	1a000017 	bne	190a4 <strncpy+0x90>
   19044:	e3520000 	cmp	r2, #0
   19048:	0a000013 	beq	1909c <strncpy+0x88>
   1904c:	e5d14000 	ldrb	r4, [r1]
   19050:	e4cc4001 	strb	r4, [ip], #1
   19054:	e3540000 	cmp	r4, #0
   19058:	e2423001 	sub	r3, r2, #1
   1905c:	11a0200c 	movne	r2, ip
   19060:	0a000007 	beq	19084 <strncpy+0x70>
   19064:	e3530000 	cmp	r3, #0
   19068:	0a00000b 	beq	1909c <strncpy+0x88>
   1906c:	e5f1c001 	ldrb	ip, [r1, #1]!
   19070:	e4c2c001 	strb	ip, [r2], #1
   19074:	e35c0000 	cmp	ip, #0
   19078:	e2433001 	sub	r3, r3, #1
   1907c:	e1a0c002 	mov	ip, r2
   19080:	1afffff7 	bne	19064 <strncpy+0x50>
   19084:	e3530000 	cmp	r3, #0
   19088:	13a02000 	movne	r2, #0
   1908c:	0a000002 	beq	1909c <strncpy+0x88>
   19090:	e2533001 	subs	r3, r3, #1
   19094:	e4cc2001 	strb	r2, [ip], #1
   19098:	1afffffc 	bne	19090 <strncpy+0x7c>
   1909c:	e8bd0070 	pop	{r4, r5, r6}
   190a0:	e12fff1e 	bx	lr
   190a4:	e1a01003 	mov	r1, r3
   190a8:	e59f5030 	ldr	r5, [pc, #48]	; 190e0 <strncpy+0xcc>
   190ac:	e4936004 	ldr	r6, [r3], #4
   190b0:	e59f402c 	ldr	r4, [pc, #44]	; 190e4 <strncpy+0xd0>
   190b4:	e0865005 	add	r5, r6, r5
   190b8:	e1c55006 	bic	r5, r5, r6
   190bc:	e0054004 	and	r4, r5, r4
   190c0:	e3540000 	cmp	r4, #0
   190c4:	1affffde 	bne	19044 <strncpy+0x30>
   190c8:	e2422004 	sub	r2, r2, #4
   190cc:	e3520003 	cmp	r2, #3
   190d0:	e48c6004 	str	r6, [ip], #4
   190d4:	8afffff2 	bhi	190a4 <strncpy+0x90>
   190d8:	e1a01003 	mov	r1, r3
   190dc:	eaffffd8 	b	19044 <strncpy+0x30>
   190e0:	fefefeff 	.word	0xfefefeff
   190e4:	80808080 	.word	0x80808080

000190e8 <strrchr>:
   190e8:	e92d4030 	push	{r4, r5, lr}
   190ec:	e2514000 	subs	r4, r1, #0
   190f0:	e1a03000 	mov	r3, r0
   190f4:	13a05000 	movne	r5, #0
   190f8:	1a000002 	bne	19108 <strrchr+0x20>
   190fc:	ea000008 	b	19124 <strrchr+0x3c>
   19100:	e2803001 	add	r3, r0, #1
   19104:	e1a05000 	mov	r5, r0
   19108:	e1a00003 	mov	r0, r3
   1910c:	e1a01004 	mov	r1, r4
   19110:	ebfffde0 	bl	18898 <strchr>
   19114:	e3500000 	cmp	r0, #0
   19118:	1afffff8 	bne	19100 <strrchr+0x18>
   1911c:	e1a00005 	mov	r0, r5
   19120:	e8bd8030 	pop	{r4, r5, pc}
   19124:	e8bd4030 	pop	{r4, r5, lr}
   19128:	eafffdda 	b	18898 <strchr>

0001912c <match>:
   1912c:	e5902000 	ldr	r2, [r0]
   19130:	ea000007 	b	19154 <match+0x28>
   19134:	e5d23001 	ldrb	r3, [r2, #1]
   19138:	e3530040 	cmp	r3, #64	; 0x40
   1913c:	da000001 	ble	19148 <match+0x1c>
   19140:	e353005a 	cmp	r3, #90	; 0x5a
   19144:	d2833020 	addle	r3, r3, #32
   19148:	e153000c 	cmp	r3, ip
   1914c:	e2822001 	add	r2, r2, #1
   19150:	1a000006 	bne	19170 <match+0x44>
   19154:	e4d1c001 	ldrb	ip, [r1], #1
   19158:	e35c0000 	cmp	ip, #0
   1915c:	1afffff4 	bne	19134 <match+0x8>
   19160:	e2822001 	add	r2, r2, #1
   19164:	e5802000 	str	r2, [r0]
   19168:	e3a00001 	mov	r0, #1
   1916c:	e12fff1e 	bx	lr
   19170:	e3a00000 	mov	r0, #0
   19174:	e12fff1e 	bx	lr

00019178 <_strtod_r>:
   19178:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1917c:	e24dd068 	sub	sp, sp, #104	; 0x68
   19180:	e1a07001 	mov	r7, r1
   19184:	e58d105c 	str	r1, [sp, #92]	; 0x5c
   19188:	e1a09000 	mov	r9, r0
   1918c:	e3a01000 	mov	r1, #0
   19190:	e3a00000 	mov	r0, #0
   19194:	e58d000c 	str	r0, [sp, #12]
   19198:	e58d1010 	str	r1, [sp, #16]
   1919c:	e58d2034 	str	r2, [sp, #52]	; 0x34
   191a0:	e1a03007 	mov	r3, r7
   191a4:	e1a06003 	mov	r6, r3
   191a8:	e4d34001 	ldrb	r4, [r3], #1
   191ac:	e354002d 	cmp	r4, #45	; 0x2d
   191b0:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   191b4:	ea0000fb 	b	195a8 <_strtod_r+0x430>
   191b8:	00019568 	.word	0x00019568
   191bc:	000195a8 	.word	0x000195a8
   191c0:	000195a8 	.word	0x000195a8
   191c4:	000195a8 	.word	0x000195a8
   191c8:	000195a8 	.word	0x000195a8
   191cc:	000195a8 	.word	0x000195a8
   191d0:	000195a8 	.word	0x000195a8
   191d4:	000195a8 	.word	0x000195a8
   191d8:	000195a8 	.word	0x000195a8
   191dc:	00019608 	.word	0x00019608
   191e0:	00019608 	.word	0x00019608
   191e4:	00019608 	.word	0x00019608
   191e8:	00019608 	.word	0x00019608
   191ec:	00019608 	.word	0x00019608
   191f0:	000195a8 	.word	0x000195a8
   191f4:	000195a8 	.word	0x000195a8
   191f8:	000195a8 	.word	0x000195a8
   191fc:	000195a8 	.word	0x000195a8
   19200:	000195a8 	.word	0x000195a8
   19204:	000195a8 	.word	0x000195a8
   19208:	000195a8 	.word	0x000195a8
   1920c:	000195a8 	.word	0x000195a8
   19210:	000195a8 	.word	0x000195a8
   19214:	000195a8 	.word	0x000195a8
   19218:	000195a8 	.word	0x000195a8
   1921c:	000195a8 	.word	0x000195a8
   19220:	000195a8 	.word	0x000195a8
   19224:	000195a8 	.word	0x000195a8
   19228:	000195a8 	.word	0x000195a8
   1922c:	000195a8 	.word	0x000195a8
   19230:	000195a8 	.word	0x000195a8
   19234:	000195a8 	.word	0x000195a8
   19238:	00019608 	.word	0x00019608
   1923c:	000195a8 	.word	0x000195a8
   19240:	000195a8 	.word	0x000195a8
   19244:	000195a8 	.word	0x000195a8
   19248:	000195a8 	.word	0x000195a8
   1924c:	000195a8 	.word	0x000195a8
   19250:	000195a8 	.word	0x000195a8
   19254:	000195a8 	.word	0x000195a8
   19258:	000195a8 	.word	0x000195a8
   1925c:	000195a8 	.word	0x000195a8
   19260:	000195a8 	.word	0x000195a8
   19264:	0001955c 	.word	0x0001955c
   19268:	000195a8 	.word	0x000195a8
   1926c:	00019270 	.word	0x00019270
   19270:	e3a04001 	mov	r4, #1
   19274:	e58d403c 	str	r4, [sp, #60]	; 0x3c
   19278:	e2863001 	add	r3, r6, #1
   1927c:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   19280:	e5d64001 	ldrb	r4, [r6, #1]
   19284:	e3540000 	cmp	r4, #0
   19288:	01a08004 	moveq	r8, r4
   1928c:	01a0a008 	moveq	sl, r8
   19290:	0a0000b6 	beq	19570 <_strtod_r+0x3f8>
   19294:	e3540030 	cmp	r4, #48	; 0x30
   19298:	e1a06003 	mov	r6, r3
   1929c:	13a03000 	movne	r3, #0
   192a0:	158d301c 	strne	r3, [sp, #28]
   192a4:	0a0000c5 	beq	195c0 <_strtod_r+0x448>
   192a8:	e354002f 	cmp	r4, #47	; 0x2f
   192ac:	e3a08000 	mov	r8, #0
   192b0:	da0003c6 	ble	1a1d0 <_strtod_r+0x1058>
   192b4:	e3540039 	cmp	r4, #57	; 0x39
   192b8:	ca0003c4 	bgt	1a1d0 <_strtod_r+0x1058>
   192bc:	e1a03006 	mov	r3, r6
   192c0:	e1a0b008 	mov	fp, r8
   192c4:	e1a05008 	mov	r5, r8
   192c8:	ea000001 	b	192d4 <_strtod_r+0x15c>
   192cc:	e3540039 	cmp	r4, #57	; 0x39
   192d0:	ca00000e 	bgt	19310 <_strtod_r+0x198>
   192d4:	e355000f 	cmp	r5, #15
   192d8:	ca000006 	bgt	192f8 <_strtod_r+0x180>
   192dc:	e3550008 	cmp	r5, #8
   192e0:	d08bb10b 	addle	fp, fp, fp, lsl #2
   192e4:	c0888108 	addgt	r8, r8, r8, lsl #2
   192e8:	d084b08b 	addle	fp, r4, fp, lsl #1
   192ec:	c0848088 	addgt	r8, r4, r8, lsl #1
   192f0:	d24bb030 	suble	fp, fp, #48	; 0x30
   192f4:	c2488030 	subgt	r8, r8, #48	; 0x30
   192f8:	e2855001 	add	r5, r5, #1
   192fc:	e086a005 	add	sl, r6, r5
   19300:	e58da05c 	str	sl, [sp, #92]	; 0x5c
   19304:	e5f34001 	ldrb	r4, [r3, #1]!
   19308:	e354002f 	cmp	r4, #47	; 0x2f
   1930c:	caffffee 	bgt	192cc <_strtod_r+0x154>
   19310:	e1a00009 	mov	r0, r9
   19314:	eb0017a1 	bl	1f1a0 <_localeconv_r>
   19318:	e5901000 	ldr	r1, [r0]
   1931c:	e1a00009 	mov	r0, r9
   19320:	e58d1008 	str	r1, [sp, #8]
   19324:	eb00179d 	bl	1f1a0 <_localeconv_r>
   19328:	e5900000 	ldr	r0, [r0]
   1932c:	ebfffe96 	bl	18d8c <strlen>
   19330:	e59d1008 	ldr	r1, [sp, #8]
   19334:	e1a02000 	mov	r2, r0
   19338:	e1a0000a 	mov	r0, sl
   1933c:	ebfffee4 	bl	18ed4 <strncmp>
   19340:	e250a000 	subs	sl, r0, #0
   19344:	0a0000e7 	beq	196e8 <_strtod_r+0x570>
   19348:	e3a02000 	mov	r2, #0
   1934c:	e58d5014 	str	r5, [sp, #20]
   19350:	e58d2020 	str	r2, [sp, #32]
   19354:	e1a0a002 	mov	sl, r2
   19358:	e3540065 	cmp	r4, #101	; 0x65
   1935c:	13540045 	cmpne	r4, #69	; 0x45
   19360:	13a03000 	movne	r3, #0
   19364:	03a03001 	moveq	r3, #1
   19368:	1a000042 	bne	19478 <_strtod_r+0x300>
   1936c:	e59d4014 	ldr	r4, [sp, #20]
   19370:	e59dc01c 	ldr	ip, [sp, #28]
   19374:	e1843002 	orr	r3, r4, r2
   19378:	e193c00c 	orrs	ip, r3, ip
   1937c:	0a0000d3 	beq	196d0 <_strtod_r+0x558>
   19380:	e59d705c 	ldr	r7, [sp, #92]	; 0x5c
   19384:	e2873001 	add	r3, r7, #1
   19388:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   1938c:	e5d74001 	ldrb	r4, [r7, #1]
   19390:	e354002b 	cmp	r4, #43	; 0x2b
   19394:	0a000391 	beq	1a1e0 <_strtod_r+0x1068>
   19398:	e354002d 	cmp	r4, #45	; 0x2d
   1939c:	13a01000 	movne	r1, #0
   193a0:	158d1024 	strne	r1, [sp, #36]	; 0x24
   193a4:	0a0002a1 	beq	19e30 <_strtod_r+0xcb8>
   193a8:	e2443030 	sub	r3, r4, #48	; 0x30
   193ac:	e3530009 	cmp	r3, #9
   193b0:	858d705c 	strhi	r7, [sp, #92]	; 0x5c
   193b4:	83a03000 	movhi	r3, #0
   193b8:	8a00002e 	bhi	19478 <_strtod_r+0x300>
   193bc:	e3540030 	cmp	r4, #48	; 0x30
   193c0:	1a000006 	bne	193e0 <_strtod_r+0x268>
   193c4:	e59d305c 	ldr	r3, [sp, #92]	; 0x5c
   193c8:	e1a01003 	mov	r1, r3
   193cc:	e2833001 	add	r3, r3, #1
   193d0:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   193d4:	e5f14001 	ldrb	r4, [r1, #1]!
   193d8:	e3540030 	cmp	r4, #48	; 0x30
   193dc:	0afffffa 	beq	193cc <_strtod_r+0x254>
   193e0:	e2443031 	sub	r3, r4, #49	; 0x31
   193e4:	e3530008 	cmp	r3, #8
   193e8:	83a03000 	movhi	r3, #0
   193ec:	8a000021 	bhi	19478 <_strtod_r+0x300>
   193f0:	e59dc05c 	ldr	ip, [sp, #92]	; 0x5c
   193f4:	e58dc028 	str	ip, [sp, #40]	; 0x28
   193f8:	e28cc001 	add	ip, ip, #1
   193fc:	e58dc05c 	str	ip, [sp, #92]	; 0x5c
   19400:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
   19404:	e2440030 	sub	r0, r4, #48	; 0x30
   19408:	e5d14001 	ldrb	r4, [r1, #1]
   1940c:	e354002f 	cmp	r4, #47	; 0x2f
   19410:	da00000e 	ble	19450 <_strtod_r+0x2d8>
   19414:	e3540039 	cmp	r4, #57	; 0x39
   19418:	da000003 	ble	1942c <_strtod_r+0x2b4>
   1941c:	ea00000b 	b	19450 <_strtod_r+0x2d8>
   19420:	e3540039 	cmp	r4, #57	; 0x39
   19424:	ca000009 	bgt	19450 <_strtod_r+0x2d8>
   19428:	e1a0c003 	mov	ip, r3
   1942c:	e28c3001 	add	r3, ip, #1
   19430:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   19434:	e0800100 	add	r0, r0, r0, lsl #2
   19438:	e0840080 	add	r0, r4, r0, lsl #1
   1943c:	e5dc4001 	ldrb	r4, [ip, #1]
   19440:	e354002f 	cmp	r4, #47	; 0x2f
   19444:	e2400030 	sub	r0, r0, #48	; 0x30
   19448:	e1a0c003 	mov	ip, r3
   1944c:	cafffff3 	bgt	19420 <_strtod_r+0x2a8>
   19450:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   19454:	e59f1f60 	ldr	r1, [pc, #3936]	; 1a3bc <_strtod_r+0x1244>
   19458:	e063c00c 	rsb	ip, r3, ip
   1945c:	e1500001 	cmp	r0, r1
   19460:	d35c0008 	cmple	ip, #8
   19464:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   19468:	d1a03000 	movle	r3, r0
   1946c:	c1a03001 	movgt	r3, r1
   19470:	e35c0000 	cmp	ip, #0
   19474:	12633000 	rsbne	r3, r3, #0
   19478:	e59dc014 	ldr	ip, [sp, #20]
   1947c:	e35c0000 	cmp	ip, #0
   19480:	0a000062 	beq	19610 <_strtod_r+0x498>
   19484:	e59d4014 	ldr	r4, [sp, #20]
   19488:	e59dc014 	ldr	ip, [sp, #20]
   1948c:	e3540010 	cmp	r4, #16
   19490:	a3a04010 	movge	r4, #16
   19494:	e3550000 	cmp	r5, #0
   19498:	e06aa003 	rsb	sl, sl, r3
   1949c:	11a0c005 	movne	ip, r5
   194a0:	e1a0000b 	mov	r0, fp
   194a4:	e58da020 	str	sl, [sp, #32]
   194a8:	e58dc024 	str	ip, [sp, #36]	; 0x24
   194ac:	eb002d49 	bl	249d8 <__aeabi_ui2d>
   194b0:	e3540009 	cmp	r4, #9
   194b4:	e1a02000 	mov	r2, r0
   194b8:	e1a03001 	mov	r3, r1
   194bc:	e58d200c 	str	r2, [sp, #12]
   194c0:	e58d3010 	str	r3, [sp, #16]
   194c4:	da000011 	ble	19510 <_strtod_r+0x398>
   194c8:	e59f3f4c 	ldr	r3, [pc, #3916]	; 1a41c <_strtod_r+0x12a4>
   194cc:	e0833184 	add	r3, r3, r4, lsl #3
   194d0:	e2433048 	sub	r3, r3, #72	; 0x48
   194d4:	e893000c 	ldm	r3, {r2, r3}
   194d8:	eb002d83 	bl	24aec <__aeabi_dmul>
   194dc:	e58d000c 	str	r0, [sp, #12]
   194e0:	e58d1010 	str	r1, [sp, #16]
   194e4:	e1a00008 	mov	r0, r8
   194e8:	eb002d3a 	bl	249d8 <__aeabi_ui2d>
   194ec:	e1a02000 	mov	r2, r0
   194f0:	e1a03001 	mov	r3, r1
   194f4:	e28d100c 	add	r1, sp, #12
   194f8:	e8910003 	ldm	r1, {r0, r1}
   194fc:	eb002c7d 	bl	246f8 <__adddf3>
   19500:	e1a02000 	mov	r2, r0
   19504:	e1a03001 	mov	r3, r1
   19508:	e58d200c 	str	r2, [sp, #12]
   1950c:	e58d3010 	str	r3, [sp, #16]
   19510:	e59dc014 	ldr	ip, [sp, #20]
   19514:	e35c000f 	cmp	ip, #15
   19518:	ca0000c5 	bgt	19834 <_strtod_r+0x6bc>
   1951c:	e59dc020 	ldr	ip, [sp, #32]
   19520:	e35c0000 	cmp	ip, #0
   19524:	0a00006c 	beq	196dc <_strtod_r+0x564>
   19528:	e59dc020 	ldr	ip, [sp, #32]
   1952c:	da00042f 	ble	1a5f0 <_strtod_r+0x1478>
   19530:	e35c0016 	cmp	ip, #22
   19534:	ca00040f 	bgt	1a578 <_strtod_r+0x1400>
   19538:	e59f3edc 	ldr	r3, [pc, #3804]	; 1a41c <_strtod_r+0x12a4>
   1953c:	e083318c 	add	r3, r3, ip, lsl #3
   19540:	e8930003 	ldm	r3, {r0, r1}
   19544:	e28d300c 	add	r3, sp, #12
   19548:	e893000c 	ldm	r3, {r2, r3}
   1954c:	eb002d66 	bl	24aec <__aeabi_dmul>
   19550:	e1a08000 	mov	r8, r0
   19554:	e1a0a001 	mov	sl, r1
   19558:	ea000007 	b	1957c <_strtod_r+0x404>
   1955c:	e3a0c000 	mov	ip, #0
   19560:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
   19564:	eaffff43 	b	19278 <_strtod_r+0x100>
   19568:	e3a08000 	mov	r8, #0
   1956c:	e1a0a008 	mov	sl, r8
   19570:	e3a0c000 	mov	ip, #0
   19574:	e58d705c 	str	r7, [sp, #92]	; 0x5c
   19578:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
   1957c:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   19580:	e3540000 	cmp	r4, #0
   19584:	159d305c 	ldrne	r3, [sp, #92]	; 0x5c
   19588:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   1958c:	15843000 	strne	r3, [r4]
   19590:	e35c0000 	cmp	ip, #0
   19594:	12888102 	addne	r8, r8, #-2147483648	; 0x80000000
   19598:	e1a00008 	mov	r0, r8
   1959c:	e1a0100a 	mov	r1, sl
   195a0:	e28dd068 	add	sp, sp, #104	; 0x68
   195a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195a8:	e3540030 	cmp	r4, #48	; 0x30
   195ac:	e3a0c000 	mov	ip, #0
   195b0:	13a03000 	movne	r3, #0
   195b4:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
   195b8:	158d301c 	strne	r3, [sp, #28]
   195bc:	1affff39 	bne	192a8 <_strtod_r+0x130>
   195c0:	e5d63001 	ldrb	r3, [r6, #1]
   195c4:	e3530058 	cmp	r3, #88	; 0x58
   195c8:	0a0002b6 	beq	1a0a8 <_strtod_r+0xf30>
   195cc:	e3530078 	cmp	r3, #120	; 0x78
   195d0:	11a03006 	movne	r3, r6
   195d4:	0a0002b3 	beq	1a0a8 <_strtod_r+0xf30>
   195d8:	e2866001 	add	r6, r6, #1
   195dc:	e58d605c 	str	r6, [sp, #92]	; 0x5c
   195e0:	e5f34001 	ldrb	r4, [r3, #1]!
   195e4:	e3540030 	cmp	r4, #48	; 0x30
   195e8:	0afffffa 	beq	195d8 <_strtod_r+0x460>
   195ec:	e3540000 	cmp	r4, #0
   195f0:	13a0c001 	movne	ip, #1
   195f4:	158dc01c 	strne	ip, [sp, #28]
   195f8:	1affff2a 	bne	192a8 <_strtod_r+0x130>
   195fc:	e1a08004 	mov	r8, r4
   19600:	e1a0a008 	mov	sl, r8
   19604:	eaffffdc 	b	1957c <_strtod_r+0x404>
   19608:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   1960c:	eafffee4 	b	191a4 <_strtod_r+0x2c>
   19610:	e59d301c 	ldr	r3, [sp, #28]
   19614:	e1923003 	orrs	r3, r2, r3
   19618:	1a00002f 	bne	196dc <_strtod_r+0x564>
   1961c:	e59dc020 	ldr	ip, [sp, #32]
   19620:	e35c0000 	cmp	ip, #0
   19624:	1a000029 	bne	196d0 <_strtod_r+0x558>
   19628:	e2444049 	sub	r4, r4, #73	; 0x49
   1962c:	e3540025 	cmp	r4, #37	; 0x25
   19630:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   19634:	ea000025 	b	196d0 <_strtod_r+0x558>
   19638:	00019e88 	.word	0x00019e88
   1963c:	000196d0 	.word	0x000196d0
   19640:	000196d0 	.word	0x000196d0
   19644:	000196d0 	.word	0x000196d0
   19648:	000196d0 	.word	0x000196d0
   1964c:	00019e48 	.word	0x00019e48
   19650:	000196d0 	.word	0x000196d0
   19654:	000196d0 	.word	0x000196d0
   19658:	000196d0 	.word	0x000196d0
   1965c:	000196d0 	.word	0x000196d0
   19660:	000196d0 	.word	0x000196d0
   19664:	000196d0 	.word	0x000196d0
   19668:	000196d0 	.word	0x000196d0
   1966c:	000196d0 	.word	0x000196d0
   19670:	000196d0 	.word	0x000196d0
   19674:	000196d0 	.word	0x000196d0
   19678:	000196d0 	.word	0x000196d0
   1967c:	000196d0 	.word	0x000196d0
   19680:	000196d0 	.word	0x000196d0
   19684:	000196d0 	.word	0x000196d0
   19688:	000196d0 	.word	0x000196d0
   1968c:	000196d0 	.word	0x000196d0
   19690:	000196d0 	.word	0x000196d0
   19694:	000196d0 	.word	0x000196d0
   19698:	000196d0 	.word	0x000196d0
   1969c:	000196d0 	.word	0x000196d0
   196a0:	000196d0 	.word	0x000196d0
   196a4:	000196d0 	.word	0x000196d0
   196a8:	000196d0 	.word	0x000196d0
   196ac:	000196d0 	.word	0x000196d0
   196b0:	000196d0 	.word	0x000196d0
   196b4:	000196d0 	.word	0x000196d0
   196b8:	00019e88 	.word	0x00019e88
   196bc:	000196d0 	.word	0x000196d0
   196c0:	000196d0 	.word	0x000196d0
   196c4:	000196d0 	.word	0x000196d0
   196c8:	000196d0 	.word	0x000196d0
   196cc:	00019e48 	.word	0x00019e48
   196d0:	e28d800c 	add	r8, sp, #12
   196d4:	e8980500 	ldm	r8, {r8, sl}
   196d8:	eaffffa4 	b	19570 <_strtod_r+0x3f8>
   196dc:	e28d800c 	add	r8, sp, #12
   196e0:	e8980500 	ldm	r8, {r8, sl}
   196e4:	eaffffa4 	b	1957c <_strtod_r+0x404>
   196e8:	e1a00009 	mov	r0, r9
   196ec:	e59d405c 	ldr	r4, [sp, #92]	; 0x5c
   196f0:	eb0016aa 	bl	1f1a0 <_localeconv_r>
   196f4:	e5900000 	ldr	r0, [r0]
   196f8:	ebfffda3 	bl	18d8c <strlen>
   196fc:	e084c000 	add	ip, r4, r0
   19700:	e3550000 	cmp	r5, #0
   19704:	e58dc05c 	str	ip, [sp, #92]	; 0x5c
   19708:	11a0200a 	movne	r2, sl
   1970c:	e7d44000 	ldrb	r4, [r4, r0]
   19710:	158d5014 	strne	r5, [sp, #20]
   19714:	11a0a002 	movne	sl, r2
   19718:	1a00003f 	bne	1981c <_strtod_r+0x6a4>
   1971c:	e3540030 	cmp	r4, #48	; 0x30
   19720:	11a02005 	movne	r2, r5
   19724:	1a000007 	bne	19748 <_strtod_r+0x5d0>
   19728:	e1a0100c 	mov	r1, ip
   1972c:	e1a02005 	mov	r2, r5
   19730:	e2822001 	add	r2, r2, #1
   19734:	e08c3002 	add	r3, ip, r2
   19738:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   1973c:	e5f14001 	ldrb	r4, [r1, #1]!
   19740:	e3540030 	cmp	r4, #48	; 0x30
   19744:	0afffff9 	beq	19730 <_strtod_r+0x5b8>
   19748:	e2443031 	sub	r3, r4, #49	; 0x31
   1974c:	e3530008 	cmp	r3, #8
   19750:	8a00017b 	bhi	19d44 <_strtod_r+0xbcc>
   19754:	e59d605c 	ldr	r6, [sp, #92]	; 0x5c
   19758:	e3a0c000 	mov	ip, #0
   1975c:	e1a0a002 	mov	sl, r2
   19760:	e58d6020 	str	r6, [sp, #32]
   19764:	e58dc014 	str	ip, [sp, #20]
   19768:	e3a02001 	mov	r2, #1
   1976c:	e2440030 	sub	r0, r4, #48	; 0x30
   19770:	ea000002 	b	19780 <_strtod_r+0x608>
   19774:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   19778:	e58d1020 	str	r1, [sp, #32]
   1977c:	e2822001 	add	r2, r2, #1
   19780:	e3500000 	cmp	r0, #0
   19784:	0a000020 	beq	1980c <_strtod_r+0x694>
   19788:	e3520001 	cmp	r2, #1
   1978c:	e08aa002 	add	sl, sl, r2
   19790:	059d3014 	ldreq	r3, [sp, #20]
   19794:	0a000011 	beq	197e0 <_strtod_r+0x668>
   19798:	e59d4014 	ldr	r4, [sp, #20]
   1979c:	e0843002 	add	r3, r4, r2
   197a0:	e243c001 	sub	ip, r3, #1
   197a4:	e1a01004 	mov	r1, r4
   197a8:	e2811001 	add	r1, r1, #1
   197ac:	e2413001 	sub	r3, r1, #1
   197b0:	e3530010 	cmp	r3, #16
   197b4:	ca000004 	bgt	197cc <_strtod_r+0x654>
   197b8:	e3510009 	cmp	r1, #9
   197bc:	d08bb10b 	addle	fp, fp, fp, lsl #2
   197c0:	c0888108 	addgt	r8, r8, r8, lsl #2
   197c4:	d1a0b08b 	lslle	fp, fp, #1
   197c8:	c1a08088 	lslgt	r8, r8, #1
   197cc:	e151000c 	cmp	r1, ip
   197d0:	1afffff4 	bne	197a8 <_strtod_r+0x630>
   197d4:	e59dc014 	ldr	ip, [sp, #20]
   197d8:	e08c3002 	add	r3, ip, r2
   197dc:	e2433001 	sub	r3, r3, #1
   197e0:	e3530010 	cmp	r3, #16
   197e4:	e2833001 	add	r3, r3, #1
   197e8:	e58d3014 	str	r3, [sp, #20]
   197ec:	c3a02000 	movgt	r2, #0
   197f0:	ca000005 	bgt	1980c <_strtod_r+0x694>
   197f4:	e3530009 	cmp	r3, #9
   197f8:	d08bb10b 	addle	fp, fp, fp, lsl #2
   197fc:	c0888108 	addgt	r8, r8, r8, lsl #2
   19800:	d080b08b 	addle	fp, r0, fp, lsl #1
   19804:	c0808088 	addgt	r8, r0, r8, lsl #1
   19808:	e3a02000 	mov	r2, #0
   1980c:	e59d0020 	ldr	r0, [sp, #32]
   19810:	e2803001 	add	r3, r0, #1
   19814:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   19818:	e5d04001 	ldrb	r4, [r0, #1]
   1981c:	e2440030 	sub	r0, r4, #48	; 0x30
   19820:	e3500009 	cmp	r0, #9
   19824:	83a01001 	movhi	r1, #1
   19828:	858d1020 	strhi	r1, [sp, #32]
   1982c:	8afffec9 	bhi	19358 <_strtod_r+0x1e0>
   19830:	eaffffcf 	b	19774 <_strtod_r+0x5fc>
   19834:	e59dc014 	ldr	ip, [sp, #20]
   19838:	e064400c 	rsb	r4, r4, ip
   1983c:	e59dc020 	ldr	ip, [sp, #32]
   19840:	e08c4004 	add	r4, ip, r4
   19844:	e3540000 	cmp	r4, #0
   19848:	da0002f6 	ble	1a428 <_strtod_r+0x12b0>
   1984c:	e214300f 	ands	r3, r4, #15
   19850:	0a000009 	beq	1987c <_strtod_r+0x704>
   19854:	e59f2bc0 	ldr	r2, [pc, #3008]	; 1a41c <_strtod_r+0x12a4>
   19858:	e0823183 	add	r3, r2, r3, lsl #3
   1985c:	e8930003 	ldm	r3, {r0, r1}
   19860:	e28d300c 	add	r3, sp, #12
   19864:	e893000c 	ldm	r3, {r2, r3}
   19868:	eb002c9f 	bl	24aec <__aeabi_dmul>
   1986c:	e1a02000 	mov	r2, r0
   19870:	e1a03001 	mov	r3, r1
   19874:	e58d200c 	str	r2, [sp, #12]
   19878:	e58d3010 	str	r3, [sp, #16]
   1987c:	e3d4400f 	bics	r4, r4, #15
   19880:	1a000135 	bne	19d5c <_strtod_r+0xbe4>
   19884:	e28d800c 	add	r8, sp, #12
   19888:	e8980500 	ldm	r8, {r8, sl}
   1988c:	e58d401c 	str	r4, [sp, #28]
   19890:	e1a00009 	mov	r0, r9
   19894:	e1a01006 	mov	r1, r6
   19898:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1989c:	e59d3014 	ldr	r3, [sp, #20]
   198a0:	e58db000 	str	fp, [sp]
   198a4:	eb0016e8 	bl	1f44c <__s2b>
   198a8:	e59d4020 	ldr	r4, [sp, #32]
   198ac:	e3540000 	cmp	r4, #0
   198b0:	b59d4020 	ldrlt	r4, [sp, #32]
   198b4:	a3a0c000 	movge	ip, #0
   198b8:	b2644000 	rsblt	r4, r4, #0
   198bc:	e58d0038 	str	r0, [sp, #56]	; 0x38
   198c0:	a58dc028 	strge	ip, [sp, #40]	; 0x28
   198c4:	b58d4028 	strlt	r4, [sp, #40]	; 0x28
   198c8:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   198cc:	e59d4020 	ldr	r4, [sp, #32]
   198d0:	e28cc00c 	add	ip, ip, #12
   198d4:	e1c44fc4 	bic	r4, r4, r4, asr #31
   198d8:	e58dc040 	str	ip, [sp, #64]	; 0x40
   198dc:	e58d402c 	str	r4, [sp, #44]	; 0x2c
   198e0:	ea00005a 	b	19a50 <_strtod_r+0x8d8>
   198e4:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   198e8:	e35c0000 	cmp	ip, #0
   198ec:	0a00017b 	beq	19ee0 <_strtod_r+0xd68>
   198f0:	e59f0ad8 	ldr	r0, [pc, #2776]	; 1a3d0 <_strtod_r+0x1258>
   198f4:	e3a01000 	mov	r1, #0
   198f8:	e59f4ad0 	ldr	r4, [pc, #2768]	; 1a3d0 <_strtod_r+0x1258>
   198fc:	e3a0c000 	mov	ip, #0
   19900:	e58d0014 	str	r0, [sp, #20]
   19904:	e58d1018 	str	r1, [sp, #24]
   19908:	e59d500c 	ldr	r5, [sp, #12]
   1990c:	e58d4024 	str	r4, [sp, #36]	; 0x24
   19910:	e58dc020 	str	ip, [sp, #32]
   19914:	e59f4b04 	ldr	r4, [pc, #2820]	; 1a420 <_strtod_r+0x12a8>
   19918:	e59f3ab4 	ldr	r3, [pc, #2740]	; 1a3d4 <_strtod_r+0x125c>
   1991c:	e0054004 	and	r4, r5, r4
   19920:	e1540003 	cmp	r4, r3
   19924:	0a0000de 	beq	19ca4 <_strtod_r+0xb2c>
   19928:	e59dc01c 	ldr	ip, [sp, #28]
   1992c:	e354066a 	cmp	r4, #111149056	; 0x6a00000
   19930:	83a03000 	movhi	r3, #0
   19934:	93a03001 	movls	r3, #1
   19938:	e35c0000 	cmp	ip, #0
   1993c:	03a03000 	moveq	r3, #0
   19940:	e3530000 	cmp	r3, #0
   19944:	0a00001c 	beq	199bc <_strtod_r+0x844>
   19948:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   1994c:	e59d1020 	ldr	r1, [sp, #32]
   19950:	e59f2a80 	ldr	r2, [pc, #2688]	; 1a3d8 <_strtod_r+0x1260>
   19954:	e59f3a80 	ldr	r3, [pc, #2688]	; 1a3dc <_strtod_r+0x1264>
   19958:	eb002d81 	bl	24f64 <__ledf2>
   1995c:	e3500000 	cmp	r0, #0
   19960:	ca000011 	bgt	199ac <_strtod_r+0x834>
   19964:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   19968:	e59d1020 	ldr	r1, [sp, #32]
   1996c:	eb002ddc 	bl	250e4 <__aeabi_d2uiz>
   19970:	e2503000 	subs	r3, r0, #0
   19974:	0a0001c2 	beq	1a084 <_strtod_r+0xf0c>
   19978:	eb002c16 	bl	249d8 <__aeabi_ui2d>
   1997c:	e58d0024 	str	r0, [sp, #36]	; 0x24
   19980:	e58d1020 	str	r1, [sp, #32]
   19984:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   19988:	e35c0000 	cmp	ip, #0
   1998c:	059dc024 	ldreq	ip, [sp, #36]	; 0x24
   19990:	159d3024 	ldrne	r3, [sp, #36]	; 0x24
   19994:	e59d1020 	ldr	r1, [sp, #32]
   19998:	028c3102 	addeq	r3, ip, #-2147483648	; 0x80000000
   1999c:	e1a02003 	mov	r2, r3
   199a0:	e1a03001 	mov	r3, r1
   199a4:	e58d2014 	str	r2, [sp, #20]
   199a8:	e58d3018 	str	r3, [sp, #24]
   199ac:	e59dc014 	ldr	ip, [sp, #20]
   199b0:	e28c366b 	add	r3, ip, #112197632	; 0x6b00000
   199b4:	e0643003 	rsb	r3, r4, r3
   199b8:	e58d3014 	str	r3, [sp, #20]
   199bc:	e28d100c 	add	r1, sp, #12
   199c0:	e8910003 	ldm	r1, {r0, r1}
   199c4:	eb00187b 	bl	1fbb8 <__ulp>
   199c8:	e1a02000 	mov	r2, r0
   199cc:	e1a03001 	mov	r3, r1
   199d0:	e28d1014 	add	r1, sp, #20
   199d4:	e8910003 	ldm	r1, {r0, r1}
   199d8:	eb002c43 	bl	24aec <__aeabi_dmul>
   199dc:	e1a02000 	mov	r2, r0
   199e0:	e1a03001 	mov	r3, r1
   199e4:	e28d100c 	add	r1, sp, #12
   199e8:	e8910003 	ldm	r1, {r0, r1}
   199ec:	eb002b41 	bl	246f8 <__adddf3>
   199f0:	e58d000c 	str	r0, [sp, #12]
   199f4:	e58d1010 	str	r1, [sp, #16]
   199f8:	e59d500c 	ldr	r5, [sp, #12]
   199fc:	e1a08000 	mov	r8, r0
   19a00:	e1a0a001 	mov	sl, r1
   19a04:	e59dc01c 	ldr	ip, [sp, #28]
   19a08:	e35c0000 	cmp	ip, #0
   19a0c:	1a000003 	bne	19a20 <_strtod_r+0x8a8>
   19a10:	e59f3a08 	ldr	r3, [pc, #2568]	; 1a420 <_strtod_r+0x12a8>
   19a14:	e0053003 	and	r3, r5, r3
   19a18:	e1540003 	cmp	r4, r3
   19a1c:	0a000156 	beq	19f7c <_strtod_r+0xe04>
   19a20:	e1a00009 	mov	r0, r9
   19a24:	e59d1060 	ldr	r1, [sp, #96]	; 0x60
   19a28:	eb00164a 	bl	1f358 <_Bfree>
   19a2c:	e1a00009 	mov	r0, r9
   19a30:	e1a0100b 	mov	r1, fp
   19a34:	eb001647 	bl	1f358 <_Bfree>
   19a38:	e1a00009 	mov	r0, r9
   19a3c:	e1a01007 	mov	r1, r7
   19a40:	eb001644 	bl	1f358 <_Bfree>
   19a44:	e1a00009 	mov	r0, r9
   19a48:	e1a01006 	mov	r1, r6
   19a4c:	eb001641 	bl	1f358 <_Bfree>
   19a50:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   19a54:	e1a00009 	mov	r0, r9
   19a58:	e59c1004 	ldr	r1, [ip, #4]
   19a5c:	eb00161c 	bl	1f2d4 <_Balloc>
   19a60:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   19a64:	e5942010 	ldr	r2, [r4, #16]
   19a68:	e2822002 	add	r2, r2, #2
   19a6c:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
   19a70:	e1a02102 	lsl	r2, r2, #2
   19a74:	e1a0b000 	mov	fp, r0
   19a78:	e280000c 	add	r0, r0, #12
   19a7c:	ebfffab4 	bl	18554 <memcpy>
   19a80:	e28dc058 	add	ip, sp, #88	; 0x58
   19a84:	e1a0200a 	mov	r2, sl
   19a88:	e28d3054 	add	r3, sp, #84	; 0x54
   19a8c:	e1a01008 	mov	r1, r8
   19a90:	e1a00009 	mov	r0, r9
   19a94:	e58dc000 	str	ip, [sp]
   19a98:	eb001892 	bl	1fce8 <__d2b>
   19a9c:	e3a01001 	mov	r1, #1
   19aa0:	e58d0060 	str	r0, [sp, #96]	; 0x60
   19aa4:	e1a00009 	mov	r0, r9
   19aa8:	eb0016d8 	bl	1f610 <__i2b>
   19aac:	e59d2054 	ldr	r2, [sp, #84]	; 0x54
   19ab0:	e3520000 	cmp	r2, #0
   19ab4:	a59d4028 	ldrge	r4, [sp, #40]	; 0x28
   19ab8:	b59dc02c 	ldrlt	ip, [sp, #44]	; 0x2c
   19abc:	a0846002 	addge	r6, r4, r2
   19ac0:	e59d401c 	ldr	r4, [sp, #28]
   19ac4:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
   19ac8:	e1a07000 	mov	r7, r0
   19acc:	b062000c 	rsblt	r0, r2, ip
   19ad0:	e0642002 	rsb	r2, r4, r2
   19ad4:	e082c003 	add	ip, r2, r3
   19ad8:	e3e01fff 	mvn	r1, #1020	; 0x3fc
   19adc:	b59d6028 	ldrlt	r6, [sp, #40]	; 0x28
   19ae0:	a59d002c 	ldrge	r0, [sp, #44]	; 0x2c
   19ae4:	e15c0001 	cmp	ip, r1
   19ae8:	b2823e43 	addlt	r3, r2, #1072	; 0x430
   19aec:	b2833003 	addlt	r3, r3, #3
   19af0:	a2633036 	rsbge	r3, r3, #54	; 0x36
   19af4:	e59dc01c 	ldr	ip, [sp, #28]
   19af8:	e0865003 	add	r5, r6, r3
   19afc:	e0803003 	add	r3, r0, r3
   19b00:	e1550006 	cmp	r5, r6
   19b04:	b1a01005 	movlt	r1, r5
   19b08:	a1a01006 	movge	r1, r6
   19b0c:	e083400c 	add	r4, r3, ip
   19b10:	e1510004 	cmp	r1, r4
   19b14:	b1a03001 	movlt	r3, r1
   19b18:	a1a03004 	movge	r3, r4
   19b1c:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
   19b20:	e3530000 	cmp	r3, #0
   19b24:	c0635005 	rsbgt	r5, r3, r5
   19b28:	c0634004 	rsbgt	r4, r3, r4
   19b2c:	c0636006 	rsbgt	r6, r3, r6
   19b30:	e35c0000 	cmp	ip, #0
   19b34:	0a00000f 	beq	19b78 <_strtod_r+0xa00>
   19b38:	e1a0200c 	mov	r2, ip
   19b3c:	e1a01007 	mov	r1, r7
   19b40:	e1a00009 	mov	r0, r9
   19b44:	eb001737 	bl	1f828 <__pow5mult>
   19b48:	e1a07000 	mov	r7, r0
   19b4c:	e1a01007 	mov	r1, r7
   19b50:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   19b54:	e1a00009 	mov	r0, r9
   19b58:	eb0016b4 	bl	1f630 <__multiply>
   19b5c:	e59d1060 	ldr	r1, [sp, #96]	; 0x60
   19b60:	e1a03000 	mov	r3, r0
   19b64:	e1a00009 	mov	r0, r9
   19b68:	e58d3008 	str	r3, [sp, #8]
   19b6c:	eb0015f9 	bl	1f358 <_Bfree>
   19b70:	e59d3008 	ldr	r3, [sp, #8]
   19b74:	e58d3060 	str	r3, [sp, #96]	; 0x60
   19b78:	e3550000 	cmp	r5, #0
   19b7c:	da000004 	ble	19b94 <_strtod_r+0xa1c>
   19b80:	e1a00009 	mov	r0, r9
   19b84:	e59d1060 	ldr	r1, [sp, #96]	; 0x60
   19b88:	e1a02005 	mov	r2, r5
   19b8c:	eb001761 	bl	1f918 <__lshift>
   19b90:	e58d0060 	str	r0, [sp, #96]	; 0x60
   19b94:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   19b98:	e35c0000 	cmp	ip, #0
   19b9c:	0a000004 	beq	19bb4 <_strtod_r+0xa3c>
   19ba0:	e1a0100b 	mov	r1, fp
   19ba4:	e1a00009 	mov	r0, r9
   19ba8:	e1a0200c 	mov	r2, ip
   19bac:	eb00171d 	bl	1f828 <__pow5mult>
   19bb0:	e1a0b000 	mov	fp, r0
   19bb4:	e3540000 	cmp	r4, #0
   19bb8:	da000004 	ble	19bd0 <_strtod_r+0xa58>
   19bbc:	e1a0100b 	mov	r1, fp
   19bc0:	e1a00009 	mov	r0, r9
   19bc4:	e1a02004 	mov	r2, r4
   19bc8:	eb001752 	bl	1f918 <__lshift>
   19bcc:	e1a0b000 	mov	fp, r0
   19bd0:	e3560000 	cmp	r6, #0
   19bd4:	da000004 	ble	19bec <_strtod_r+0xa74>
   19bd8:	e1a01007 	mov	r1, r7
   19bdc:	e1a00009 	mov	r0, r9
   19be0:	e1a02006 	mov	r2, r6
   19be4:	eb00174b 	bl	1f918 <__lshift>
   19be8:	e1a07000 	mov	r7, r0
   19bec:	e59d1060 	ldr	r1, [sp, #96]	; 0x60
   19bf0:	e1a0200b 	mov	r2, fp
   19bf4:	e1a00009 	mov	r0, r9
   19bf8:	eb00179b 	bl	1fa6c <__mdiff>
   19bfc:	e3a0c000 	mov	ip, #0
   19c00:	e590400c 	ldr	r4, [r0, #12]
   19c04:	e1a01007 	mov	r1, r7
   19c08:	e580c00c 	str	ip, [r0, #12]
   19c0c:	e1a06000 	mov	r6, r0
   19c10:	e58d4030 	str	r4, [sp, #48]	; 0x30
   19c14:	eb00177d 	bl	1fa10 <__mcmp>
   19c18:	e3500000 	cmp	r0, #0
   19c1c:	ba000172 	blt	1a1ec <_strtod_r+0x1074>
   19c20:	0a0001b4 	beq	1a2f8 <_strtod_r+0x1180>
   19c24:	e1a00006 	mov	r0, r6
   19c28:	e1a01007 	mov	r1, r7
   19c2c:	eb00186f 	bl	1fdf0 <__ratio>
   19c30:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   19c34:	e3a03000 	mov	r3, #0
   19c38:	e58d0014 	str	r0, [sp, #20]
   19c3c:	e58d1018 	str	r1, [sp, #24]
   19c40:	eb002cc7 	bl	24f64 <__ledf2>
   19c44:	e3500000 	cmp	r0, #0
   19c48:	daffff25 	ble	198e4 <_strtod_r+0x76c>
   19c4c:	e3a03000 	mov	r3, #0
   19c50:	e28d1014 	add	r1, sp, #20
   19c54:	e8910003 	ldm	r1, {r0, r1}
   19c58:	e59f2780 	ldr	r2, [pc, #1920]	; 1a3e0 <_strtod_r+0x1268>
   19c5c:	eb002ba2 	bl	24aec <__aeabi_dmul>
   19c60:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   19c64:	e58d0024 	str	r0, [sp, #36]	; 0x24
   19c68:	e3540000 	cmp	r4, #0
   19c6c:	e58d1020 	str	r1, [sp, #32]
   19c70:	159d3024 	ldrne	r3, [sp, #36]	; 0x24
   19c74:	e59d1020 	ldr	r1, [sp, #32]
   19c78:	02803102 	addeq	r3, r0, #-2147483648	; 0x80000000
   19c7c:	e1a02003 	mov	r2, r3
   19c80:	e59d500c 	ldr	r5, [sp, #12]
   19c84:	e1a03001 	mov	r3, r1
   19c88:	e59f4790 	ldr	r4, [pc, #1936]	; 1a420 <_strtod_r+0x12a8>
   19c8c:	e58d2014 	str	r2, [sp, #20]
   19c90:	e58d3018 	str	r3, [sp, #24]
   19c94:	e59f3738 	ldr	r3, [pc, #1848]	; 1a3d4 <_strtod_r+0x125c>
   19c98:	e0054004 	and	r4, r5, r4
   19c9c:	e1540003 	cmp	r4, r3
   19ca0:	1affff20 	bne	19928 <_strtod_r+0x7b0>
   19ca4:	e28d100c 	add	r1, sp, #12
   19ca8:	e8910003 	ldm	r1, {r0, r1}
   19cac:	e2455635 	sub	r5, r5, #55574528	; 0x3500000
   19cb0:	e58d500c 	str	r5, [sp, #12]
   19cb4:	e58d0044 	str	r0, [sp, #68]	; 0x44
   19cb8:	e58d1048 	str	r1, [sp, #72]	; 0x48
   19cbc:	e28d100c 	add	r1, sp, #12
   19cc0:	e8910003 	ldm	r1, {r0, r1}
   19cc4:	eb0017bb 	bl	1fbb8 <__ulp>
   19cc8:	e1a02000 	mov	r2, r0
   19ccc:	e1a03001 	mov	r3, r1
   19cd0:	e28d1014 	add	r1, sp, #20
   19cd4:	e8910003 	ldm	r1, {r0, r1}
   19cd8:	eb002b83 	bl	24aec <__aeabi_dmul>
   19cdc:	e1a02000 	mov	r2, r0
   19ce0:	e1a03001 	mov	r3, r1
   19ce4:	e28d100c 	add	r1, sp, #12
   19ce8:	e8910003 	ldm	r1, {r0, r1}
   19cec:	eb002a81 	bl	246f8 <__adddf3>
   19cf0:	e1a02000 	mov	r2, r0
   19cf4:	e1a03001 	mov	r3, r1
   19cf8:	e58d200c 	str	r2, [sp, #12]
   19cfc:	e58d3010 	str	r3, [sp, #16]
   19d00:	e59d500c 	ldr	r5, [sp, #12]
   19d04:	e59f2714 	ldr	r2, [pc, #1812]	; 1a420 <_strtod_r+0x12a8>
   19d08:	e59f36d4 	ldr	r3, [pc, #1748]	; 1a3e4 <_strtod_r+0x126c>
   19d0c:	e0052002 	and	r2, r5, r2
   19d10:	e1520003 	cmp	r2, r3
   19d14:	9a0000de 	bls	1a094 <_strtod_r+0xf1c>
   19d18:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
   19d1c:	e2833635 	add	r3, r3, #55574528	; 0x3500000
   19d20:	e1540003 	cmp	r4, r3
   19d24:	0a00018d 	beq	1a360 <_strtod_r+0x11e8>
   19d28:	e59f06b8 	ldr	r0, [pc, #1720]	; 1a3e8 <_strtod_r+0x1270>
   19d2c:	e3e01000 	mvn	r1, #0
   19d30:	e58d000c 	str	r0, [sp, #12]
   19d34:	e58d1010 	str	r1, [sp, #16]
   19d38:	e1a08000 	mov	r8, r0
   19d3c:	e1a0a001 	mov	sl, r1
   19d40:	eaffff36 	b	19a20 <_strtod_r+0x8a8>
   19d44:	e3a0c000 	mov	ip, #0
   19d48:	e3a00001 	mov	r0, #1
   19d4c:	e58dc014 	str	ip, [sp, #20]
   19d50:	e1a0a00c 	mov	sl, ip
   19d54:	e58d0020 	str	r0, [sp, #32]
   19d58:	eafffd7e 	b	19358 <_strtod_r+0x1e0>
   19d5c:	e3540f4d 	cmp	r4, #308	; 0x134
   19d60:	ca00018a 	bgt	1a390 <_strtod_r+0x1218>
   19d64:	e1a04244 	asr	r4, r4, #4
   19d68:	e3540001 	cmp	r4, #1
   19d6c:	e59f8678 	ldr	r8, [pc, #1656]	; 1a3ec <_strtod_r+0x1274>
   19d70:	d3a07000 	movle	r7, #0
   19d74:	da00000f 	ble	19db8 <_strtod_r+0xc40>
   19d78:	e28d100c 	add	r1, sp, #12
   19d7c:	e8910003 	ldm	r1, {r0, r1}
   19d80:	e1a05008 	mov	r5, r8
   19d84:	e3a07000 	mov	r7, #0
   19d88:	e3140001 	tst	r4, #1
   19d8c:	e1a040c4 	asr	r4, r4, #1
   19d90:	1895000c 	ldmne	r5, {r2, r3}
   19d94:	1b002b54 	blne	24aec <__aeabi_dmul>
   19d98:	e3540001 	cmp	r4, #1
   19d9c:	e2877001 	add	r7, r7, #1
   19da0:	e2855008 	add	r5, r5, #8
   19da4:	cafffff7 	bgt	19d88 <_strtod_r+0xc10>
   19da8:	e1a02000 	mov	r2, r0
   19dac:	e1a03001 	mov	r3, r1
   19db0:	e58d200c 	str	r2, [sp, #12]
   19db4:	e58d3010 	str	r3, [sp, #16]
   19db8:	e59d300c 	ldr	r3, [sp, #12]
   19dbc:	e2433635 	sub	r3, r3, #55574528	; 0x3500000
   19dc0:	e58d300c 	str	r3, [sp, #12]
   19dc4:	e0887187 	add	r7, r8, r7, lsl #3
   19dc8:	e28d300c 	add	r3, sp, #12
   19dcc:	e893000c 	ldm	r3, {r2, r3}
   19dd0:	e8970003 	ldm	r7, {r0, r1}
   19dd4:	eb002b44 	bl	24aec <__aeabi_dmul>
   19dd8:	e1a02000 	mov	r2, r0
   19ddc:	e1a03001 	mov	r3, r1
   19de0:	e58d200c 	str	r2, [sp, #12]
   19de4:	e58d3010 	str	r3, [sp, #16]
   19de8:	e59d800c 	ldr	r8, [sp, #12]
   19dec:	e59f262c 	ldr	r2, [pc, #1580]	; 1a420 <_strtod_r+0x12a8>
   19df0:	e59f35f8 	ldr	r3, [pc, #1528]	; 1a3f0 <_strtod_r+0x1278>
   19df4:	e0082002 	and	r2, r8, r2
   19df8:	e1520003 	cmp	r2, r3
   19dfc:	8a000163 	bhi	1a390 <_strtod_r+0x1218>
   19e00:	e2433601 	sub	r3, r3, #1048576	; 0x100000
   19e04:	e1520003 	cmp	r2, r3
   19e08:	9a000217 	bls	1a66c <_strtod_r+0x14f4>
   19e0c:	e59f35d4 	ldr	r3, [pc, #1492]	; 1a3e8 <_strtod_r+0x1270>
   19e10:	e3e04000 	mvn	r4, #0
   19e14:	e3a0c000 	mov	ip, #0
   19e18:	e58d300c 	str	r3, [sp, #12]
   19e1c:	e58d4010 	str	r4, [sp, #16]
   19e20:	e1a08003 	mov	r8, r3
   19e24:	e1a0a004 	mov	sl, r4
   19e28:	e58dc01c 	str	ip, [sp, #28]
   19e2c:	eafffe97 	b	19890 <_strtod_r+0x718>
   19e30:	e3a03001 	mov	r3, #1
   19e34:	e58d3024 	str	r3, [sp, #36]	; 0x24
   19e38:	e2873002 	add	r3, r7, #2
   19e3c:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   19e40:	e5d74002 	ldrb	r4, [r7, #2]
   19e44:	eafffd57 	b	193a8 <_strtod_r+0x230>
   19e48:	e28d005c 	add	r0, sp, #92	; 0x5c
   19e4c:	e59f15a0 	ldr	r1, [pc, #1440]	; 1a3f4 <_strtod_r+0x127c>
   19e50:	ebfffcb5 	bl	1912c <match>
   19e54:	e3500000 	cmp	r0, #0
   19e58:	0afffe1c 	beq	196d0 <_strtod_r+0x558>
   19e5c:	e59d305c 	ldr	r3, [sp, #92]	; 0x5c
   19e60:	e5d33000 	ldrb	r3, [r3]
   19e64:	e3530028 	cmp	r3, #40	; 0x28
   19e68:	0a000225 	beq	1a704 <_strtod_r+0x158c>
   19e6c:	e59f3584 	ldr	r3, [pc, #1412]	; 1a3f8 <_strtod_r+0x1280>
   19e70:	e3a04000 	mov	r4, #0
   19e74:	e58d300c 	str	r3, [sp, #12]
   19e78:	e58d4010 	str	r4, [sp, #16]
   19e7c:	e1a08003 	mov	r8, r3
   19e80:	e1a0a004 	mov	sl, r4
   19e84:	eafffdbc 	b	1957c <_strtod_r+0x404>
   19e88:	e28d005c 	add	r0, sp, #92	; 0x5c
   19e8c:	e59f1568 	ldr	r1, [pc, #1384]	; 1a3fc <_strtod_r+0x1284>
   19e90:	ebfffca5 	bl	1912c <match>
   19e94:	e3500000 	cmp	r0, #0
   19e98:	0afffe0c 	beq	196d0 <_strtod_r+0x558>
   19e9c:	e59d305c 	ldr	r3, [sp, #92]	; 0x5c
   19ea0:	e59f1558 	ldr	r1, [pc, #1368]	; 1a400 <_strtod_r+0x1288>
   19ea4:	e2433001 	sub	r3, r3, #1
   19ea8:	e28d005c 	add	r0, sp, #92	; 0x5c
   19eac:	e58d305c 	str	r3, [sp, #92]	; 0x5c
   19eb0:	ebfffc9d 	bl	1912c <match>
   19eb4:	e3500000 	cmp	r0, #0
   19eb8:	059d305c 	ldreq	r3, [sp, #92]	; 0x5c
   19ebc:	e59f055c 	ldr	r0, [pc, #1372]	; 1a420 <_strtod_r+0x12a8>
   19ec0:	e3a01000 	mov	r1, #0
   19ec4:	02833001 	addeq	r3, r3, #1
   19ec8:	058d305c 	streq	r3, [sp, #92]	; 0x5c
   19ecc:	e58d000c 	str	r0, [sp, #12]
   19ed0:	e58d1010 	str	r1, [sp, #16]
   19ed4:	e1a08000 	mov	r8, r0
   19ed8:	e1a0a001 	mov	sl, r1
   19edc:	eafffda6 	b	1957c <_strtod_r+0x404>
   19ee0:	e59d3010 	ldr	r3, [sp, #16]
   19ee4:	e3530000 	cmp	r3, #0
   19ee8:	e59d500c 	ldr	r5, [sp, #12]
   19eec:	1a00004c 	bne	1a024 <_strtod_r+0xeac>
   19ef0:	e3c534ff 	bic	r3, r5, #-16777216	; 0xff000000
   19ef4:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   19ef8:	e3530000 	cmp	r3, #0
   19efc:	1a000015 	bne	19f58 <_strtod_r+0xde0>
   19f00:	e28d1014 	add	r1, sp, #20
   19f04:	e8910003 	ldm	r1, {r0, r1}
   19f08:	e59f24c0 	ldr	r2, [pc, #1216]	; 1a3d0 <_strtod_r+0x1258>
   19f0c:	e3a03000 	mov	r3, #0
   19f10:	eb002c13 	bl	24f64 <__ledf2>
   19f14:	e3500000 	cmp	r0, #0
   19f18:	ba0000a6 	blt	1a1b8 <_strtod_r+0x1040>
   19f1c:	e59f24bc 	ldr	r2, [pc, #1212]	; 1a3e0 <_strtod_r+0x1268>
   19f20:	e3a03000 	mov	r3, #0
   19f24:	e28d1014 	add	r1, sp, #20
   19f28:	e8910003 	ldm	r1, {r0, r1}
   19f2c:	eb002aee 	bl	24aec <__aeabi_dmul>
   19f30:	e58d0024 	str	r0, [sp, #36]	; 0x24
   19f34:	e58d1020 	str	r1, [sp, #32]
   19f38:	e2803102 	add	r3, r0, #-2147483648	; 0x80000000
   19f3c:	e1a02001 	mov	r2, r1
   19f40:	e1a01002 	mov	r1, r2
   19f44:	e1a02003 	mov	r2, r3
   19f48:	e1a03001 	mov	r3, r1
   19f4c:	e58d2014 	str	r2, [sp, #20]
   19f50:	e58d3018 	str	r3, [sp, #24]
   19f54:	eafffe6e 	b	19914 <_strtod_r+0x79c>
   19f58:	e59f04a4 	ldr	r0, [pc, #1188]	; 1a404 <_strtod_r+0x128c>
   19f5c:	e59f446c 	ldr	r4, [pc, #1132]	; 1a3d0 <_strtod_r+0x1258>
   19f60:	e3a01000 	mov	r1, #0
   19f64:	e3a0c000 	mov	ip, #0
   19f68:	e58d0014 	str	r0, [sp, #20]
   19f6c:	e58d1018 	str	r1, [sp, #24]
   19f70:	e58d4024 	str	r4, [sp, #36]	; 0x24
   19f74:	e58dc020 	str	ip, [sp, #32]
   19f78:	eafffe65 	b	19914 <_strtod_r+0x79c>
   19f7c:	e59d1020 	ldr	r1, [sp, #32]
   19f80:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   19f84:	eb002c3f 	bl	25088 <__aeabi_d2iz>
   19f88:	eb002a9c 	bl	24a00 <__aeabi_i2d>
   19f8c:	e1a02000 	mov	r2, r0
   19f90:	e1a03001 	mov	r3, r1
   19f94:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   19f98:	e59d1020 	ldr	r1, [sp, #32]
   19f9c:	eb0029d4 	bl	246f4 <__aeabi_dsub>
   19fa0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   19fa4:	e3540000 	cmp	r4, #0
   19fa8:	e58d0014 	str	r0, [sp, #20]
   19fac:	e58d1018 	str	r1, [sp, #24]
   19fb0:	1a000024 	bne	1a048 <_strtod_r+0xed0>
   19fb4:	e59dc010 	ldr	ip, [sp, #16]
   19fb8:	e35c0000 	cmp	ip, #0
   19fbc:	1a000021 	bne	1a048 <_strtod_r+0xed0>
   19fc0:	e3c534ff 	bic	r3, r5, #-16777216	; 0xff000000
   19fc4:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   19fc8:	e3530000 	cmp	r3, #0
   19fcc:	1a00001d 	bne	1a048 <_strtod_r+0xed0>
   19fd0:	e28f3ff7 	add	r3, pc, #988	; 0x3dc
   19fd4:	e893000c 	ldm	r3, {r2, r3}
   19fd8:	eb002be1 	bl	24f64 <__ledf2>
   19fdc:	e3500000 	cmp	r0, #0
   19fe0:	aafffe8e 	bge	19a20 <_strtod_r+0x8a8>
   19fe4:	e1a00009 	mov	r0, r9
   19fe8:	e59d1060 	ldr	r1, [sp, #96]	; 0x60
   19fec:	eb0014d9 	bl	1f358 <_Bfree>
   19ff0:	e1a00009 	mov	r0, r9
   19ff4:	e1a0100b 	mov	r1, fp
   19ff8:	eb0014d6 	bl	1f358 <_Bfree>
   19ffc:	e1a00009 	mov	r0, r9
   1a000:	e1a01007 	mov	r1, r7
   1a004:	eb0014d3 	bl	1f358 <_Bfree>
   1a008:	e1a00009 	mov	r0, r9
   1a00c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1a010:	eb0014d0 	bl	1f358 <_Bfree>
   1a014:	e1a00009 	mov	r0, r9
   1a018:	e1a01006 	mov	r1, r6
   1a01c:	eb0014cd 	bl	1f358 <_Bfree>
   1a020:	eafffd55 	b	1957c <_strtod_r+0x404>
   1a024:	e3530001 	cmp	r3, #1
   1a028:	1affffca 	bne	19f58 <_strtod_r+0xde0>
   1a02c:	e3550000 	cmp	r5, #0
   1a030:	1affffc8 	bne	19f58 <_strtod_r+0xde0>
   1a034:	e3a08000 	mov	r8, #0
   1a038:	e3a03022 	mov	r3, #34	; 0x22
   1a03c:	e5893000 	str	r3, [r9]
   1a040:	e1a0a008 	mov	sl, r8
   1a044:	eaffffe6 	b	19fe4 <_strtod_r+0xe6c>
   1a048:	e28d1014 	add	r1, sp, #20
   1a04c:	e8910003 	ldm	r1, {r0, r1}
   1a050:	e28f3fda 	add	r3, pc, #872	; 0x368
   1a054:	e893000c 	ldm	r3, {r2, r3}
   1a058:	eb002bc1 	bl	24f64 <__ledf2>
   1a05c:	e3500000 	cmp	r0, #0
   1a060:	baffffdf 	blt	19fe4 <_strtod_r+0xe6c>
   1a064:	e28d1014 	add	r1, sp, #20
   1a068:	e8910003 	ldm	r1, {r0, r1}
   1a06c:	e28f3fd5 	add	r3, pc, #852	; 0x354
   1a070:	e893000c 	ldm	r3, {r2, r3}
   1a074:	eb002bb8 	bl	24f5c <__gedf2>
   1a078:	e3500000 	cmp	r0, #0
   1a07c:	dafffe67 	ble	19a20 <_strtod_r+0x8a8>
   1a080:	eaffffd7 	b	19fe4 <_strtod_r+0xe6c>
   1a084:	e59fc344 	ldr	ip, [pc, #836]	; 1a3d0 <_strtod_r+0x1258>
   1a088:	e58d3020 	str	r3, [sp, #32]
   1a08c:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1a090:	eafffe3b 	b	19984 <_strtod_r+0x80c>
   1a094:	e2855635 	add	r5, r5, #55574528	; 0x3500000
   1a098:	e58d500c 	str	r5, [sp, #12]
   1a09c:	e1a08005 	mov	r8, r5
   1a0a0:	e59da010 	ldr	sl, [sp, #16]
   1a0a4:	eafffe56 	b	19a04 <_strtod_r+0x88c>
   1a0a8:	e59f5358 	ldr	r5, [pc, #856]	; 1a408 <_strtod_r+0x1290>
   1a0ac:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
   1a0b0:	e28dc060 	add	ip, sp, #96	; 0x60
   1a0b4:	e1a00009 	mov	r0, r9
   1a0b8:	e28d105c 	add	r1, sp, #92	; 0x5c
   1a0bc:	e1a02005 	mov	r2, r5
   1a0c0:	e28d3064 	add	r3, sp, #100	; 0x64
   1a0c4:	e58d4004 	str	r4, [sp, #4]
   1a0c8:	e58dc000 	str	ip, [sp]
   1a0cc:	eb001159 	bl	1e638 <__gethex>
   1a0d0:	e2108007 	ands	r8, r0, #7
   1a0d4:	e1a04000 	mov	r4, r0
   1a0d8:	0afffd48 	beq	19600 <_strtod_r+0x488>
   1a0dc:	e3580006 	cmp	r8, #6
   1a0e0:	0a00011f 	beq	1a564 <_strtod_r+0x13ec>
   1a0e4:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
   1a0e8:	e3520000 	cmp	r2, #0
   1a0ec:	0a000005 	beq	1a108 <_strtod_r+0xf90>
   1a0f0:	e5951000 	ldr	r1, [r5]
   1a0f4:	e28d004c 	add	r0, sp, #76	; 0x4c
   1a0f8:	eb001773 	bl	1fecc <__copybits>
   1a0fc:	e1a00009 	mov	r0, r9
   1a100:	e59d1060 	ldr	r1, [sp, #96]	; 0x60
   1a104:	eb001493 	bl	1f358 <_Bfree>
   1a108:	e59d3064 	ldr	r3, [sp, #100]	; 0x64
   1a10c:	e3580006 	cmp	r8, #6
   1a110:	979ff108 	ldrls	pc, [pc, r8, lsl #2]
   1a114:	ea00000a 	b	1a144 <_strtod_r+0xfcc>
   1a118:	0001a1a8 	.word	0x0001a1a8
   1a11c:	0001a184 	.word	0x0001a184
   1a120:	0001a170 	.word	0x0001a170
   1a124:	0001a15c 	.word	0x0001a15c
   1a128:	0001a134 	.word	0x0001a134
   1a12c:	0001a184 	.word	0x0001a184
   1a130:	0001a1a8 	.word	0x0001a1a8
   1a134:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
   1a138:	e3e03000 	mvn	r3, #0
   1a13c:	e58d200c 	str	r2, [sp, #12]
   1a140:	e58d3010 	str	r3, [sp, #16]
   1a144:	e3140008 	tst	r4, #8
   1a148:	0afffd63 	beq	196dc <_strtod_r+0x564>
   1a14c:	e59d400c 	ldr	r4, [sp, #12]
   1a150:	e59da010 	ldr	sl, [sp, #16]
   1a154:	e3848102 	orr	r8, r4, #-2147483648	; 0x80000000
   1a158:	eafffd07 	b	1957c <_strtod_r+0x404>
   1a15c:	e59f02bc 	ldr	r0, [pc, #700]	; 1a420 <_strtod_r+0x12a8>
   1a160:	e3a01000 	mov	r1, #0
   1a164:	e58d000c 	str	r0, [sp, #12]
   1a168:	e58d1010 	str	r1, [sp, #16]
   1a16c:	eafffff4 	b	1a144 <_strtod_r+0xfcc>
   1a170:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   1a174:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1a178:	e58d1010 	str	r1, [sp, #16]
   1a17c:	e58d200c 	str	r2, [sp, #12]
   1a180:	eaffffef 	b	1a144 <_strtod_r+0xfcc>
   1a184:	e2833e43 	add	r3, r3, #1072	; 0x430
   1a188:	e2832003 	add	r2, r3, #3
   1a18c:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
   1a190:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1a194:	e3c33601 	bic	r3, r3, #1048576	; 0x100000
   1a198:	e1833a02 	orr	r3, r3, r2, lsl #20
   1a19c:	e58dc010 	str	ip, [sp, #16]
   1a1a0:	e58d300c 	str	r3, [sp, #12]
   1a1a4:	eaffffe6 	b	1a144 <_strtod_r+0xfcc>
   1a1a8:	e3a0c000 	mov	ip, #0
   1a1ac:	e58dc010 	str	ip, [sp, #16]
   1a1b0:	e58dc00c 	str	ip, [sp, #12]
   1a1b4:	eaffffe2 	b	1a144 <_strtod_r+0xfcc>
   1a1b8:	e59f4220 	ldr	r4, [pc, #544]	; 1a3e0 <_strtod_r+0x1268>
   1a1bc:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   1a1c0:	e59f3244 	ldr	r3, [pc, #580]	; 1a40c <_strtod_r+0x1294>
   1a1c4:	e58d4024 	str	r4, [sp, #36]	; 0x24
   1a1c8:	e58d2020 	str	r2, [sp, #32]
   1a1cc:	eaffff5b 	b	19f40 <_strtod_r+0xdc8>
   1a1d0:	e1a0a006 	mov	sl, r6
   1a1d4:	e1a0b008 	mov	fp, r8
   1a1d8:	e1a05008 	mov	r5, r8
   1a1dc:	eafffc4b 	b	19310 <_strtod_r+0x198>
   1a1e0:	e3a00000 	mov	r0, #0
   1a1e4:	e58d0024 	str	r0, [sp, #36]	; 0x24
   1a1e8:	eaffff12 	b	19e38 <_strtod_r+0xcc0>
   1a1ec:	e3540000 	cmp	r4, #0
   1a1f0:	1a000027 	bne	1a294 <_strtod_r+0x111c>
   1a1f4:	e59d0010 	ldr	r0, [sp, #16]
   1a1f8:	e3500000 	cmp	r0, #0
   1a1fc:	1a000024 	bne	1a294 <_strtod_r+0x111c>
   1a200:	e59d200c 	ldr	r2, [sp, #12]
   1a204:	e3c234ff 	bic	r3, r2, #-16777216	; 0xff000000
   1a208:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   1a20c:	e3530000 	cmp	r3, #0
   1a210:	1a00001f 	bne	1a294 <_strtod_r+0x111c>
   1a214:	e59f3204 	ldr	r3, [pc, #516]	; 1a420 <_strtod_r+0x12a8>
   1a218:	e0023003 	and	r3, r2, r3
   1a21c:	e353066b 	cmp	r3, #112197632	; 0x6b00000
   1a220:	9a00001b 	bls	1a294 <_strtod_r+0x111c>
   1a224:	e5963014 	ldr	r3, [r6, #20]
   1a228:	e3530000 	cmp	r3, #0
   1a22c:	1a000002 	bne	1a23c <_strtod_r+0x10c4>
   1a230:	e5963010 	ldr	r3, [r6, #16]
   1a234:	e3530001 	cmp	r3, #1
   1a238:	da000015 	ble	1a294 <_strtod_r+0x111c>
   1a23c:	e1a01006 	mov	r1, r6
   1a240:	e3a02001 	mov	r2, #1
   1a244:	e1a00009 	mov	r0, r9
   1a248:	eb0015b2 	bl	1f918 <__lshift>
   1a24c:	e1a01007 	mov	r1, r7
   1a250:	e1a06000 	mov	r6, r0
   1a254:	eb0015ed 	bl	1fa10 <__mcmp>
   1a258:	e3500000 	cmp	r0, #0
   1a25c:	da00000c 	ble	1a294 <_strtod_r+0x111c>
   1a260:	e59d401c 	ldr	r4, [sp, #28]
   1a264:	e3540000 	cmp	r4, #0
   1a268:	1a00011c 	bne	1a6e0 <_strtod_r+0x1568>
   1a26c:	e59dc00c 	ldr	ip, [sp, #12]
   1a270:	e3cc3102 	bic	r3, ip, #-2147483648	; 0x80000000
   1a274:	e1a03a23 	lsr	r3, r3, #20
   1a278:	e1a03a03 	lsl	r3, r3, #20
   1a27c:	e2433601 	sub	r3, r3, #1048576	; 0x100000
   1a280:	e1e03a23 	mvn	r3, r3, lsr #20
   1a284:	e1e03a03 	mvn	r3, r3, lsl #20
   1a288:	e3e01000 	mvn	r1, #0
   1a28c:	e58d300c 	str	r3, [sp, #12]
   1a290:	e58d1010 	str	r1, [sp, #16]
   1a294:	e59d401c 	ldr	r4, [sp, #28]
   1a298:	e3540000 	cmp	r4, #0
   1a29c:	0a0000ad 	beq	1a558 <_strtod_r+0x13e0>
   1a2a0:	e59fc168 	ldr	ip, [pc, #360]	; 1a410 <_strtod_r+0x1298>
   1a2a4:	e3a00000 	mov	r0, #0
   1a2a8:	e58d0048 	str	r0, [sp, #72]	; 0x48
   1a2ac:	e58dc044 	str	ip, [sp, #68]	; 0x44
   1a2b0:	e28d100c 	add	r1, sp, #12
   1a2b4:	e8910003 	ldm	r1, {r0, r1}
   1a2b8:	e28d3044 	add	r3, sp, #68	; 0x44
   1a2bc:	e893000c 	ldm	r3, {r2, r3}
   1a2c0:	eb002a09 	bl	24aec <__aeabi_dmul>
   1a2c4:	e58d000c 	str	r0, [sp, #12]
   1a2c8:	e58d1010 	str	r1, [sp, #16]
   1a2cc:	e1a0a001 	mov	sl, r1
   1a2d0:	e1a03001 	mov	r3, r1
   1a2d4:	e59d100c 	ldr	r1, [sp, #12]
   1a2d8:	e3510000 	cmp	r1, #0
   1a2dc:	e1a08000 	mov	r8, r0
   1a2e0:	1affff3f 	bne	19fe4 <_strtod_r+0xe6c>
   1a2e4:	e59d2010 	ldr	r2, [sp, #16]
   1a2e8:	e3520000 	cmp	r2, #0
   1a2ec:	03a03022 	moveq	r3, #34	; 0x22
   1a2f0:	05893000 	streq	r3, [r9]
   1a2f4:	eaffff3a 	b	19fe4 <_strtod_r+0xe6c>
   1a2f8:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   1a2fc:	e3540000 	cmp	r4, #0
   1a300:	0a0000b1 	beq	1a5cc <_strtod_r+0x1454>
   1a304:	e59d000c 	ldr	r0, [sp, #12]
   1a308:	e59f3104 	ldr	r3, [pc, #260]	; 1a414 <_strtod_r+0x129c>
   1a30c:	e3c024ff 	bic	r2, r0, #-16777216	; 0xff000000
   1a310:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
   1a314:	e1520003 	cmp	r2, r3
   1a318:	159d1010 	ldrne	r1, [sp, #16]
   1a31c:	0a0000d8 	beq	1a684 <_strtod_r+0x150c>
   1a320:	e3110001 	tst	r1, #1
   1a324:	0affffda 	beq	1a294 <_strtod_r+0x111c>
   1a328:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   1a32c:	e3540000 	cmp	r4, #0
   1a330:	e1a00008 	mov	r0, r8
   1a334:	e1a0100a 	mov	r1, sl
   1a338:	0a0000b7 	beq	1a61c <_strtod_r+0x14a4>
   1a33c:	eb00161d 	bl	1fbb8 <__ulp>
   1a340:	e1a02008 	mov	r2, r8
   1a344:	e1a0300a 	mov	r3, sl
   1a348:	eb0028ea 	bl	246f8 <__adddf3>
   1a34c:	e1a02000 	mov	r2, r0
   1a350:	e1a03001 	mov	r3, r1
   1a354:	e58d200c 	str	r2, [sp, #12]
   1a358:	e58d3010 	str	r3, [sp, #16]
   1a35c:	eaffffcc 	b	1a294 <_strtod_r+0x111c>
   1a360:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
   1a364:	e37c0001 	cmn	ip, #1
   1a368:	1afffe6e 	bne	19d28 <_strtod_r+0xbb0>
   1a36c:	e59f30ac 	ldr	r3, [pc, #172]	; 1a420 <_strtod_r+0x12a8>
   1a370:	e3a04000 	mov	r4, #0
   1a374:	e58d300c 	str	r3, [sp, #12]
   1a378:	e3a03022 	mov	r3, #34	; 0x22
   1a37c:	e58d4010 	str	r4, [sp, #16]
   1a380:	e5893000 	str	r3, [r9]
   1a384:	e59f8094 	ldr	r8, [pc, #148]	; 1a420 <_strtod_r+0x12a8>
   1a388:	e1a0a004 	mov	sl, r4
   1a38c:	eaffff14 	b	19fe4 <_strtod_r+0xe6c>
   1a390:	e59f0088 	ldr	r0, [pc, #136]	; 1a420 <_strtod_r+0x12a8>
   1a394:	e3a01000 	mov	r1, #0
   1a398:	e3a03022 	mov	r3, #34	; 0x22
   1a39c:	e58d000c 	str	r0, [sp, #12]
   1a3a0:	e58d1010 	str	r1, [sp, #16]
   1a3a4:	e5893000 	str	r3, [r9]
   1a3a8:	e1a08000 	mov	r8, r0
   1a3ac:	e1a0a001 	mov	sl, r1
   1a3b0:	eafffc71 	b	1957c <_strtod_r+0x404>
   1a3b4:	3fcfffff 	.word	0x3fcfffff
   1a3b8:	94a03595 	.word	0x94a03595
   1a3bc:	00004e1f 	.word	0x00004e1f
   1a3c0:	3fdfffff 	.word	0x3fdfffff
   1a3c4:	94a03595 	.word	0x94a03595
   1a3c8:	3fe00000 	.word	0x3fe00000
   1a3cc:	35afe535 	.word	0x35afe535
   1a3d0:	3ff00000 	.word	0x3ff00000
   1a3d4:	7fe00000 	.word	0x7fe00000
   1a3d8:	41dfffff 	.word	0x41dfffff
   1a3dc:	ffc00000 	.word	0xffc00000
   1a3e0:	3fe00000 	.word	0x3fe00000
   1a3e4:	7c9fffff 	.word	0x7c9fffff
   1a3e8:	7fefffff 	.word	0x7fefffff
   1a3ec:	00025b58 	.word	0x00025b58
   1a3f0:	7ca00000 	.word	0x7ca00000
   1a3f4:	000269ec 	.word	0x000269ec
   1a3f8:	7ff80000 	.word	0x7ff80000
   1a3fc:	000269e0 	.word	0x000269e0
   1a400:	000269e4 	.word	0x000269e4
   1a404:	bff00000 	.word	0xbff00000
   1a408:	40000488 	.word	0x40000488
   1a40c:	bfe00000 	.word	0xbfe00000
   1a410:	39500000 	.word	0x39500000
   1a414:	000fffff 	.word	0x000fffff
   1a418:	0002590c 	.word	0x0002590c
   1a41c:	00025a68 	.word	0x00025a68
   1a420:	7ff00000 	.word	0x7ff00000
   1a424:	4000049c 	.word	0x4000049c
   1a428:	0afffd15 	beq	19884 <_strtod_r+0x70c>
   1a42c:	e2644000 	rsb	r4, r4, #0
   1a430:	e214300f 	ands	r3, r4, #15
   1a434:	0a000009 	beq	1a460 <_strtod_r+0x12e8>
   1a438:	e51f2024 	ldr	r2, [pc, #-36]	; 1a41c <_strtod_r+0x12a4>
   1a43c:	e0823183 	add	r3, r2, r3, lsl #3
   1a440:	e893000c 	ldm	r3, {r2, r3}
   1a444:	e28d100c 	add	r1, sp, #12
   1a448:	e8910003 	ldm	r1, {r0, r1}
   1a44c:	eb002a41 	bl	24d58 <__aeabi_ddiv>
   1a450:	e1a02000 	mov	r2, r0
   1a454:	e1a03001 	mov	r3, r1
   1a458:	e58d200c 	str	r2, [sp, #12]
   1a45c:	e58d3010 	str	r3, [sp, #16]
   1a460:	e1b04244 	asrs	r4, r4, #4
   1a464:	0afffd06 	beq	19884 <_strtod_r+0x70c>
   1a468:	e354001f 	cmp	r4, #31
   1a46c:	ca000034 	bgt	1a544 <_strtod_r+0x13cc>
   1a470:	e214c010 	ands	ip, r4, #16
   1a474:	13a0c06a 	movne	ip, #106	; 0x6a
   1a478:	e3540000 	cmp	r4, #0
   1a47c:	e58dc01c 	str	ip, [sp, #28]
   1a480:	da00000c 	ble	1a4b8 <_strtod_r+0x1340>
   1a484:	e51f5074 	ldr	r5, [pc, #-116]	; 1a418 <_strtod_r+0x12a0>
   1a488:	e28d100c 	add	r1, sp, #12
   1a48c:	e8910003 	ldm	r1, {r0, r1}
   1a490:	e3140001 	tst	r4, #1
   1a494:	1895000c 	ldmne	r5, {r2, r3}
   1a498:	1b002993 	blne	24aec <__aeabi_dmul>
   1a49c:	e1b040c4 	asrs	r4, r4, #1
   1a4a0:	e2855008 	add	r5, r5, #8
   1a4a4:	1afffff9 	bne	1a490 <_strtod_r+0x1318>
   1a4a8:	e1a02000 	mov	r2, r0
   1a4ac:	e1a03001 	mov	r3, r1
   1a4b0:	e58d200c 	str	r2, [sp, #12]
   1a4b4:	e58d3010 	str	r3, [sp, #16]
   1a4b8:	e59d401c 	ldr	r4, [sp, #28]
   1a4bc:	e3540000 	cmp	r4, #0
   1a4c0:	0a000011 	beq	1a50c <_strtod_r+0x1394>
   1a4c4:	e51f30ac 	ldr	r3, [pc, #-172]	; 1a420 <_strtod_r+0x12a8>
   1a4c8:	e59d100c 	ldr	r1, [sp, #12]
   1a4cc:	e0013003 	and	r3, r1, r3
   1a4d0:	e1a03a23 	lsr	r3, r3, #20
   1a4d4:	e263306b 	rsb	r3, r3, #107	; 0x6b
   1a4d8:	e3530000 	cmp	r3, #0
   1a4dc:	da00000a 	ble	1a50c <_strtod_r+0x1394>
   1a4e0:	e353001f 	cmp	r3, #31
   1a4e4:	da000095 	ble	1a740 <_strtod_r+0x15c8>
   1a4e8:	e3530034 	cmp	r3, #52	; 0x34
   1a4ec:	d3e02000 	mvnle	r2, #0
   1a4f0:	d2433020 	suble	r3, r3, #32
   1a4f4:	d0012312 	andle	r2, r1, r2, lsl r3
   1a4f8:	e3a0c000 	mov	ip, #0
   1a4fc:	c3a00637 	movgt	r0, #57671680	; 0x3700000
   1a500:	e58dc010 	str	ip, [sp, #16]
   1a504:	c58d000c 	strgt	r0, [sp, #12]
   1a508:	d58d200c 	strle	r2, [sp, #12]
   1a50c:	e59d200c 	ldr	r2, [sp, #12]
   1a510:	e59d3010 	ldr	r3, [sp, #16]
   1a514:	e1a00002 	mov	r0, r2
   1a518:	e1a01003 	mov	r1, r3
   1a51c:	e3a02000 	mov	r2, #0
   1a520:	e3a03000 	mov	r3, #0
   1a524:	eb002a90 	bl	24f6c <__cmpdf2>
   1a528:	e3500000 	cmp	r0, #0
   1a52c:	e3a03001 	mov	r3, #1
   1a530:	01a03000 	moveq	r3, r0
   1a534:	e28d800c 	add	r8, sp, #12
   1a538:	e31300ff 	tst	r3, #255	; 0xff
   1a53c:	e8980500 	ldm	r8, {r8, sl}
   1a540:	1afffcd2 	bne	19890 <_strtod_r+0x718>
   1a544:	e3a08000 	mov	r8, #0
   1a548:	e3a03022 	mov	r3, #34	; 0x22
   1a54c:	e5893000 	str	r3, [r9]
   1a550:	e1a0a008 	mov	sl, r8
   1a554:	eafffc08 	b	1957c <_strtod_r+0x404>
   1a558:	e28d800c 	add	r8, sp, #12
   1a55c:	e8980500 	ldm	r8, {r8, sl}
   1a560:	eafffe9f 	b	19fe4 <_strtod_r+0xe6c>
   1a564:	e2866001 	add	r6, r6, #1
   1a568:	e3a08000 	mov	r8, #0
   1a56c:	e58d605c 	str	r6, [sp, #92]	; 0x5c
   1a570:	e1a0a008 	mov	sl, r8
   1a574:	eafffc00 	b	1957c <_strtod_r+0x404>
   1a578:	e59dc014 	ldr	ip, [sp, #20]
   1a57c:	e26c3025 	rsb	r3, ip, #37	; 0x25
   1a580:	e59dc020 	ldr	ip, [sp, #32]
   1a584:	e15c0003 	cmp	ip, r3
   1a588:	cafffca9 	bgt	19834 <_strtod_r+0x6bc>
   1a58c:	e59dc014 	ldr	ip, [sp, #20]
   1a590:	e51f517c 	ldr	r5, [pc, #-380]	; 1a41c <_strtod_r+0x12a4>
   1a594:	e26c400f 	rsb	r4, ip, #15
   1a598:	e0851184 	add	r1, r5, r4, lsl #3
   1a59c:	e28d300c 	add	r3, sp, #12
   1a5a0:	e893000c 	ldm	r3, {r2, r3}
   1a5a4:	e8910003 	ldm	r1, {r0, r1}
   1a5a8:	eb00294f 	bl	24aec <__aeabi_dmul>
   1a5ac:	e59dc020 	ldr	ip, [sp, #32]
   1a5b0:	e064400c 	rsb	r4, r4, ip
   1a5b4:	e0855184 	add	r5, r5, r4, lsl #3
   1a5b8:	e895000c 	ldm	r5, {r2, r3}
   1a5bc:	eb00294a 	bl	24aec <__aeabi_dmul>
   1a5c0:	e1a08000 	mov	r8, r0
   1a5c4:	e1a0a001 	mov	sl, r1
   1a5c8:	eafffbeb 	b	1957c <_strtod_r+0x404>
   1a5cc:	e59d100c 	ldr	r1, [sp, #12]
   1a5d0:	e3c134ff 	bic	r3, r1, #-16777216	; 0xff000000
   1a5d4:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   1a5d8:	e3530000 	cmp	r3, #0
   1a5dc:	e59d1010 	ldr	r1, [sp, #16]
   1a5e0:	1affff4e 	bne	1a320 <_strtod_r+0x11a8>
   1a5e4:	e3510000 	cmp	r1, #0
   1a5e8:	1affff4c 	bne	1a320 <_strtod_r+0x11a8>
   1a5ec:	eaffff1b 	b	1a260 <_strtod_r+0x10e8>
   1a5f0:	e37c0016 	cmn	ip, #22
   1a5f4:	bafffc8e 	blt	19834 <_strtod_r+0x6bc>
   1a5f8:	e51f31e4 	ldr	r3, [pc, #-484]	; 1a41c <_strtod_r+0x12a4>
   1a5fc:	e043318c 	sub	r3, r3, ip, lsl #3
   1a600:	e28d100c 	add	r1, sp, #12
   1a604:	e8910003 	ldm	r1, {r0, r1}
   1a608:	e893000c 	ldm	r3, {r2, r3}
   1a60c:	eb0029d1 	bl	24d58 <__aeabi_ddiv>
   1a610:	e1a08000 	mov	r8, r0
   1a614:	e1a0a001 	mov	sl, r1
   1a618:	eafffbd7 	b	1957c <_strtod_r+0x404>
   1a61c:	eb001565 	bl	1fbb8 <__ulp>
   1a620:	e1a02000 	mov	r2, r0
   1a624:	e1a03001 	mov	r3, r1
   1a628:	e1a00008 	mov	r0, r8
   1a62c:	e1a0100a 	mov	r1, sl
   1a630:	eb00282f 	bl	246f4 <__aeabi_dsub>
   1a634:	e1a04001 	mov	r4, r1
   1a638:	e1a03000 	mov	r3, r0
   1a63c:	e58d300c 	str	r3, [sp, #12]
   1a640:	e58d4010 	str	r4, [sp, #16]
   1a644:	e3a02000 	mov	r2, #0
   1a648:	e3a03000 	mov	r3, #0
   1a64c:	eb002a46 	bl	24f6c <__cmpdf2>
   1a650:	e3500000 	cmp	r0, #0
   1a654:	059d4030 	ldreq	r4, [sp, #48]	; 0x30
   1a658:	e3a03001 	mov	r3, #1
   1a65c:	01a03004 	moveq	r3, r4
   1a660:	e31300ff 	tst	r3, #255	; 0xff
   1a664:	0afffe72 	beq	1a034 <_strtod_r+0xebc>
   1a668:	eaffff09 	b	1a294 <_strtod_r+0x111c>
   1a66c:	e2888635 	add	r8, r8, #55574528	; 0x3500000
   1a670:	e3a04000 	mov	r4, #0
   1a674:	e58d800c 	str	r8, [sp, #12]
   1a678:	e59da010 	ldr	sl, [sp, #16]
   1a67c:	e58d401c 	str	r4, [sp, #28]
   1a680:	eafffc82 	b	19890 <_strtod_r+0x718>
   1a684:	e59dc01c 	ldr	ip, [sp, #28]
   1a688:	e35c0000 	cmp	ip, #0
   1a68c:	e59d1010 	ldr	r1, [sp, #16]
   1a690:	0a000010 	beq	1a6d8 <_strtod_r+0x1560>
   1a694:	e51f327c 	ldr	r3, [pc, #-636]	; 1a420 <_strtod_r+0x12a8>
   1a698:	e0003003 	and	r3, r0, r3
   1a69c:	e353066a 	cmp	r3, #111149056	; 0x6a00000
   1a6a0:	8a00000c 	bhi	1a6d8 <_strtod_r+0x1560>
   1a6a4:	e1a03a23 	lsr	r3, r3, #20
   1a6a8:	e263306b 	rsb	r3, r3, #107	; 0x6b
   1a6ac:	e3e02000 	mvn	r2, #0
   1a6b0:	e1a03312 	lsl	r3, r2, r3
   1a6b4:	e1510003 	cmp	r1, r3
   1a6b8:	1affff18 	bne	1a320 <_strtod_r+0x11a8>
   1a6bc:	e51f32a4 	ldr	r3, [pc, #-676]	; 1a420 <_strtod_r+0x12a8>
   1a6c0:	e0003003 	and	r3, r0, r3
   1a6c4:	e2833601 	add	r3, r3, #1048576	; 0x100000
   1a6c8:	e3a00000 	mov	r0, #0
   1a6cc:	e58d300c 	str	r3, [sp, #12]
   1a6d0:	e58d0010 	str	r0, [sp, #16]
   1a6d4:	eafffeee 	b	1a294 <_strtod_r+0x111c>
   1a6d8:	e3e03000 	mvn	r3, #0
   1a6dc:	eafffff4 	b	1a6b4 <_strtod_r+0x153c>
   1a6e0:	e59d000c 	ldr	r0, [sp, #12]
   1a6e4:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
   1a6e8:	e1a03a23 	lsr	r3, r3, #20
   1a6ec:	e1a03a03 	lsl	r3, r3, #20
   1a6f0:	e353066b 	cmp	r3, #112197632	; 0x6b00000
   1a6f4:	8afffee0 	bhi	1a27c <_strtod_r+0x1104>
   1a6f8:	e3530637 	cmp	r3, #57671680	; 0x3700000
   1a6fc:	8afffee7 	bhi	1a2a0 <_strtod_r+0x1128>
   1a700:	eafffe4b 	b	1a034 <_strtod_r+0xebc>
   1a704:	e28d005c 	add	r0, sp, #92	; 0x5c
   1a708:	e51f12ec 	ldr	r1, [pc, #-748]	; 1a424 <_strtod_r+0x12ac>
   1a70c:	e28d204c 	add	r2, sp, #76	; 0x4c
   1a710:	eb0011cf 	bl	1ee54 <__hexnan>
   1a714:	e3500005 	cmp	r0, #5
   1a718:	1afffdd3 	bne	19e6c <_strtod_r+0xcf4>
   1a71c:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
   1a720:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
   1a724:	e383347f 	orr	r3, r3, #2130706432	; 0x7f000000
   1a728:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
   1a72c:	e58d300c 	str	r3, [sp, #12]
   1a730:	e58d2010 	str	r2, [sp, #16]
   1a734:	e1a08003 	mov	r8, r3
   1a738:	e1a0a002 	mov	sl, r2
   1a73c:	eafffb8e 	b	1957c <_strtod_r+0x404>
   1a740:	e59d1010 	ldr	r1, [sp, #16]
   1a744:	e3e02000 	mvn	r2, #0
   1a748:	e0011312 	and	r1, r1, r2, lsl r3
   1a74c:	e58d1010 	str	r1, [sp, #16]
   1a750:	eaffff6d 	b	1a50c <_strtod_r+0x1394>

0001a754 <strtod>:
   1a754:	e1a02001 	mov	r2, r1
   1a758:	e59f100c 	ldr	r1, [pc, #12]	; 1a76c <strtod+0x18>
   1a75c:	e1a03000 	mov	r3, r0
   1a760:	e5910000 	ldr	r0, [r1]
   1a764:	e1a01003 	mov	r1, r3
   1a768:	eafffa82 	b	19178 <_strtod_r>
   1a76c:	400004b4 	.word	0x400004b4

0001a770 <strtof>:
   1a770:	e1a02001 	mov	r2, r1
   1a774:	e59f103c 	ldr	r1, [pc, #60]	; 1a7b8 <strtof+0x48>
   1a778:	e1a03000 	mov	r3, r0
   1a77c:	e92d4030 	push	{r4, r5, lr}
   1a780:	e5910000 	ldr	r0, [r1]
   1a784:	e1a01003 	mov	r1, r3
   1a788:	ebfffa7a 	bl	19178 <_strtod_r>
   1a78c:	e1a04000 	mov	r4, r0
   1a790:	e1a05001 	mov	r5, r1
   1a794:	eb00160e 	bl	1ffd4 <__fpclassifyd>
   1a798:	e3500000 	cmp	r0, #0
   1a79c:	0a000003 	beq	1a7b0 <strtof+0x40>
   1a7a0:	e1a00004 	mov	r0, r4
   1a7a4:	e1a01005 	mov	r1, r5
   1a7a8:	eb002a62 	bl	25138 <__aeabi_d2f>
   1a7ac:	e8bd8030 	pop	{r4, r5, pc}
   1a7b0:	e8bd4030 	pop	{r4, r5, lr}
   1a7b4:	ea001628 	b	2005c <nanf>
   1a7b8:	400004b4 	.word	0x400004b4

0001a7bc <strtok>:
   1a7bc:	e59f300c 	ldr	r3, [pc, #12]	; 1a7d0 <strtok+0x14>
   1a7c0:	e5932000 	ldr	r2, [r3]
   1a7c4:	e3a03001 	mov	r3, #1
   1a7c8:	e282205c 	add	r2, r2, #92	; 0x5c
   1a7cc:	ea000000 	b	1a7d4 <__strtok_r>
   1a7d0:	400004b4 	.word	0x400004b4

0001a7d4 <__strtok_r>:
   1a7d4:	e3500000 	cmp	r0, #0
   1a7d8:	e92d00f0 	push	{r4, r5, r6, r7}
   1a7dc:	0a000025 	beq	1a878 <__strtok_r+0xa4>
   1a7e0:	e1a06000 	mov	r6, r0
   1a7e4:	e5d05000 	ldrb	r5, [r0]
   1a7e8:	e1a04001 	mov	r4, r1
   1a7ec:	e2800001 	add	r0, r0, #1
   1a7f0:	e4d4c001 	ldrb	ip, [r4], #1
   1a7f4:	e35c0000 	cmp	ip, #0
   1a7f8:	0a000007 	beq	1a81c <__strtok_r+0x48>
   1a7fc:	e155000c 	cmp	r5, ip
   1a800:	1afffffa 	bne	1a7f0 <__strtok_r+0x1c>
   1a804:	e3530000 	cmp	r3, #0
   1a808:	1afffff4 	bne	1a7e0 <__strtok_r+0xc>
   1a80c:	e5820000 	str	r0, [r2]
   1a810:	e1a00006 	mov	r0, r6
   1a814:	e5c63000 	strb	r3, [r6]
   1a818:	ea000014 	b	1a870 <__strtok_r+0x9c>
   1a81c:	e3550000 	cmp	r5, #0
   1a820:	05825000 	streq	r5, [r2]
   1a824:	01a00005 	moveq	r0, r5
   1a828:	1a000002 	bne	1a838 <__strtok_r+0x64>
   1a82c:	ea00000f 	b	1a870 <__strtok_r+0x9c>
   1a830:	e3530000 	cmp	r3, #0
   1a834:	1a000004 	bne	1a84c <__strtok_r+0x78>
   1a838:	e1a05000 	mov	r5, r0
   1a83c:	e5d04000 	ldrb	r4, [r0]
   1a840:	e2800001 	add	r0, r0, #1
   1a844:	e1a07000 	mov	r7, r0
   1a848:	e1a0c001 	mov	ip, r1
   1a84c:	e4dc3001 	ldrb	r3, [ip], #1
   1a850:	e1540003 	cmp	r4, r3
   1a854:	1afffff5 	bne	1a830 <__strtok_r+0x5c>
   1a858:	e3540000 	cmp	r4, #0
   1a85c:	13a03000 	movne	r3, #0
   1a860:	01a07004 	moveq	r7, r4
   1a864:	15c53000 	strbne	r3, [r5]
   1a868:	e5827000 	str	r7, [r2]
   1a86c:	e1a00006 	mov	r0, r6
   1a870:	e8bd00f0 	pop	{r4, r5, r6, r7}
   1a874:	e12fff1e 	bx	lr
   1a878:	e5920000 	ldr	r0, [r2]
   1a87c:	e3500000 	cmp	r0, #0
   1a880:	1affffd6 	bne	1a7e0 <__strtok_r+0xc>
   1a884:	eafffff9 	b	1a870 <__strtok_r+0x9c>

0001a888 <strtok_r>:
   1a888:	e3a03001 	mov	r3, #1
   1a88c:	eaffffd0 	b	1a7d4 <__strtok_r>

0001a890 <_strtol_r>:
   1a890:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a894:	e1a0c001 	mov	ip, r1
   1a898:	e59f11c0 	ldr	r1, [pc, #448]	; 1aa60 <_strtol_r+0x1d0>
   1a89c:	e24dd00c 	sub	sp, sp, #12
   1a8a0:	e5914000 	ldr	r4, [r1]
   1a8a4:	e58d0008 	str	r0, [sp, #8]
   1a8a8:	e58d2004 	str	r2, [sp, #4]
   1a8ac:	e1a07003 	mov	r7, r3
   1a8b0:	e1a0300c 	mov	r3, ip
   1a8b4:	e5d35000 	ldrb	r5, [r3]
   1a8b8:	e0841005 	add	r1, r4, r5
   1a8bc:	e5d1b001 	ldrb	fp, [r1, #1]
   1a8c0:	e1a02003 	mov	r2, r3
   1a8c4:	e21bb008 	ands	fp, fp, #8
   1a8c8:	e2833001 	add	r3, r3, #1
   1a8cc:	e1a06003 	mov	r6, r3
   1a8d0:	1afffff7 	bne	1a8b4 <_strtol_r+0x24>
   1a8d4:	e355002d 	cmp	r5, #45	; 0x2d
   1a8d8:	0a00004c 	beq	1aa10 <_strtol_r+0x180>
   1a8dc:	e355002b 	cmp	r5, #43	; 0x2b
   1a8e0:	05d25001 	ldrbeq	r5, [r2, #1]
   1a8e4:	02826002 	addeq	r6, r2, #2
   1a8e8:	e2773001 	rsbs	r3, r7, #1
   1a8ec:	33a03000 	movcc	r3, #0
   1a8f0:	e3570000 	cmp	r7, #0
   1a8f4:	13570010 	cmpne	r7, #16
   1a8f8:	1a000008 	bne	1a920 <_strtol_r+0x90>
   1a8fc:	e3550030 	cmp	r5, #48	; 0x30
   1a900:	0a00004d 	beq	1aa3c <_strtol_r+0x1ac>
   1a904:	e3530000 	cmp	r3, #0
   1a908:	0a000004 	beq	1a920 <_strtol_r+0x90>
   1a90c:	e3550030 	cmp	r5, #48	; 0x30
   1a910:	03a07008 	moveq	r7, #8
   1a914:	01a0a007 	moveq	sl, r7
   1a918:	0a000001 	beq	1a924 <_strtol_r+0x94>
   1a91c:	e3a0700a 	mov	r7, #10
   1a920:	e1a0a007 	mov	sl, r7
   1a924:	e35b0000 	cmp	fp, #0
   1a928:	03e09102 	mvneq	r9, #-2147483648	; 0x80000000
   1a92c:	13a09102 	movne	r9, #-2147483648	; 0x80000000
   1a930:	e1a0100a 	mov	r1, sl
   1a934:	e1a00009 	mov	r0, r9
   1a938:	e58dc000 	str	ip, [sp]
   1a93c:	eb002736 	bl	2461c <__umodsi3>
   1a940:	e1a0100a 	mov	r1, sl
   1a944:	e1a08000 	mov	r8, r0
   1a948:	e1a00009 	mov	r0, r9
   1a94c:	eb00269a 	bl	243bc <__aeabi_uidiv>
   1a950:	e3a02000 	mov	r2, #0
   1a954:	e59dc000 	ldr	ip, [sp]
   1a958:	e1a01002 	mov	r1, r2
   1a95c:	e0843005 	add	r3, r4, r5
   1a960:	e5d33001 	ldrb	r3, [r3, #1]
   1a964:	e3130004 	tst	r3, #4
   1a968:	12455030 	subne	r5, r5, #48	; 0x30
   1a96c:	1a000005 	bne	1a988 <_strtol_r+0xf8>
   1a970:	e2133003 	ands	r3, r3, #3
   1a974:	0a000017 	beq	1a9d8 <_strtol_r+0x148>
   1a978:	e3530001 	cmp	r3, #1
   1a97c:	13a03057 	movne	r3, #87	; 0x57
   1a980:	03a03037 	moveq	r3, #55	; 0x37
   1a984:	e0635005 	rsb	r5, r3, r5
   1a988:	e1570005 	cmp	r7, r5
   1a98c:	da000011 	ble	1a9d8 <_strtol_r+0x148>
   1a990:	e1510000 	cmp	r1, r0
   1a994:	93a03000 	movls	r3, #0
   1a998:	83a03001 	movhi	r3, #1
   1a99c:	e1932fa2 	orrs	r2, r3, r2, lsr #31
   1a9a0:	1a000009 	bne	1a9cc <_strtol_r+0x13c>
   1a9a4:	e1550008 	cmp	r5, r8
   1a9a8:	d3a03000 	movle	r3, #0
   1a9ac:	c3a03001 	movgt	r3, #1
   1a9b0:	e1510000 	cmp	r1, r0
   1a9b4:	13a03000 	movne	r3, #0
   1a9b8:	e3530000 	cmp	r3, #0
   1a9bc:	0021519a 	mlaeq	r1, sl, r1, r5
   1a9c0:	03a02001 	moveq	r2, #1
   1a9c4:	04d65001 	ldrbeq	r5, [r6], #1
   1a9c8:	0affffe3 	beq	1a95c <_strtol_r+0xcc>
   1a9cc:	e3e02000 	mvn	r2, #0
   1a9d0:	e4d65001 	ldrb	r5, [r6], #1
   1a9d4:	eaffffe0 	b	1a95c <_strtol_r+0xcc>
   1a9d8:	e3720001 	cmn	r2, #1
   1a9dc:	0a00000f 	beq	1aa20 <_strtol_r+0x190>
   1a9e0:	e35b0000 	cmp	fp, #0
   1a9e4:	01a00001 	moveq	r0, r1
   1a9e8:	12610000 	rsbne	r0, r1, #0
   1a9ec:	e59d3004 	ldr	r3, [sp, #4]
   1a9f0:	e3530000 	cmp	r3, #0
   1a9f4:	0a000003 	beq	1aa08 <_strtol_r+0x178>
   1a9f8:	e3520000 	cmp	r2, #0
   1a9fc:	e59d1004 	ldr	r1, [sp, #4]
   1aa00:	1246c001 	subne	ip, r6, #1
   1aa04:	e581c000 	str	ip, [r1]
   1aa08:	e28dd00c 	add	sp, sp, #12
   1aa0c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa10:	e5d25001 	ldrb	r5, [r2, #1]
   1aa14:	e2826002 	add	r6, r2, #2
   1aa18:	e3a0b001 	mov	fp, #1
   1aa1c:	eaffffb1 	b	1a8e8 <_strtol_r+0x58>
   1aa20:	e59d1008 	ldr	r1, [sp, #8]
   1aa24:	e35b0000 	cmp	fp, #0
   1aa28:	e3a03022 	mov	r3, #34	; 0x22
   1aa2c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
   1aa30:	13a00102 	movne	r0, #-2147483648	; 0x80000000
   1aa34:	e5813000 	str	r3, [r1]
   1aa38:	eaffffeb 	b	1a9ec <_strtol_r+0x15c>
   1aa3c:	e5d62000 	ldrb	r2, [r6]
   1aa40:	e3520078 	cmp	r2, #120	; 0x78
   1aa44:	13520058 	cmpne	r2, #88	; 0x58
   1aa48:	1affffad 	bne	1a904 <_strtol_r+0x74>
   1aa4c:	e3a07010 	mov	r7, #16
   1aa50:	e5d65001 	ldrb	r5, [r6, #1]
   1aa54:	e1a0a007 	mov	sl, r7
   1aa58:	e2866002 	add	r6, r6, #2
   1aa5c:	eaffffb0 	b	1a924 <_strtol_r+0x94>
   1aa60:	400004b0 	.word	0x400004b0

0001aa64 <strtol>:
   1aa64:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   1aa68:	e1a03002 	mov	r3, r2
   1aa6c:	e59f2018 	ldr	r2, [pc, #24]	; 1aa8c <strtol+0x28>
   1aa70:	e1a04000 	mov	r4, r0
   1aa74:	e1a0c001 	mov	ip, r1
   1aa78:	e5920000 	ldr	r0, [r2]
   1aa7c:	e1a01004 	mov	r1, r4
   1aa80:	e1a0200c 	mov	r2, ip
   1aa84:	e8bd0010 	pop	{r4}
   1aa88:	eaffff80 	b	1a890 <_strtol_r>
   1aa8c:	400004b4 	.word	0x400004b4

0001aa90 <_svfprintf_r>:
   1aa90:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa94:	e24ddc01 	sub	sp, sp, #256	; 0x100
   1aa98:	e1a0b001 	mov	fp, r1
   1aa9c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   1aaa0:	e1a09002 	mov	r9, r2
   1aaa4:	e58d002c 	str	r0, [sp, #44]	; 0x2c
   1aaa8:	eb0011bc 	bl	1f1a0 <_localeconv_r>
   1aaac:	e5900000 	ldr	r0, [r0]
   1aab0:	e58d0050 	str	r0, [sp, #80]	; 0x50
   1aab4:	ebfff8b4 	bl	18d8c <strlen>
   1aab8:	e1db30bc 	ldrh	r3, [fp, #12]
   1aabc:	e3130080 	tst	r3, #128	; 0x80
   1aac0:	e58d005c 	str	r0, [sp, #92]	; 0x5c
   1aac4:	0a000002 	beq	1aad4 <_svfprintf_r+0x44>
   1aac8:	e59b3010 	ldr	r3, [fp, #16]
   1aacc:	e3530000 	cmp	r3, #0
   1aad0:	0a0006a5 	beq	1c56c <_svfprintf_r+0x1adc>
   1aad4:	e28dc0d4 	add	ip, sp, #212	; 0xd4
   1aad8:	e28d506c 	add	r5, sp, #108	; 0x6c
   1aadc:	e58dc014 	str	ip, [sp, #20]
   1aae0:	e58d50d4 	str	r5, [sp, #212]	; 0xd4
   1aae4:	e1a06005 	mov	r6, r5
   1aae8:	e59d5014 	ldr	r5, [sp, #20]
   1aaec:	e28d40d3 	add	r4, sp, #211	; 0xd3
   1aaf0:	e3a03000 	mov	r3, #0
   1aaf4:	e58d4010 	str	r4, [sp, #16]
   1aaf8:	e0644005 	rsb	r4, r4, r5
   1aafc:	e58d3030 	str	r3, [sp, #48]	; 0x30
   1ab00:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1ab04:	e58d30d8 	str	r3, [sp, #216]	; 0xd8
   1ab08:	e58d3054 	str	r3, [sp, #84]	; 0x54
   1ab0c:	e58d3058 	str	r3, [sp, #88]	; 0x58
   1ab10:	e58d3064 	str	r3, [sp, #100]	; 0x64
   1ab14:	e58d3060 	str	r3, [sp, #96]	; 0x60
   1ab18:	e58d3020 	str	r3, [sp, #32]
   1ab1c:	e58d4068 	str	r4, [sp, #104]	; 0x68
   1ab20:	e1a0c003 	mov	ip, r3
   1ab24:	e5d93000 	ldrb	r3, [r9]
   1ab28:	e3530025 	cmp	r3, #37	; 0x25
   1ab2c:	13530000 	cmpne	r3, #0
   1ab30:	0a0000a2 	beq	1adc0 <_svfprintf_r+0x330>
   1ab34:	e1a02009 	mov	r2, r9
   1ab38:	e1a07009 	mov	r7, r9
   1ab3c:	e5f23001 	ldrb	r3, [r2, #1]!
   1ab40:	e3530025 	cmp	r3, #37	; 0x25
   1ab44:	13530000 	cmpne	r3, #0
   1ab48:	e2877001 	add	r7, r7, #1
   1ab4c:	1afffffa 	bne	1ab3c <_svfprintf_r+0xac>
   1ab50:	e0578009 	subs	r8, r7, r9
   1ab54:	0a00000d 	beq	1ab90 <_svfprintf_r+0x100>
   1ab58:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1ab5c:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1ab60:	e2855001 	add	r5, r5, #1
   1ab64:	e0844008 	add	r4, r4, r8
   1ab68:	e3550007 	cmp	r5, #7
   1ab6c:	e5869000 	str	r9, [r6]
   1ab70:	e5868004 	str	r8, [r6, #4]
   1ab74:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1ab78:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1ab7c:	d2866008 	addle	r6, r6, #8
   1ab80:	ca000078 	bgt	1ad68 <_svfprintf_r+0x2d8>
   1ab84:	e59dc020 	ldr	ip, [sp, #32]
   1ab88:	e08cc008 	add	ip, ip, r8
   1ab8c:	e58dc020 	str	ip, [sp, #32]
   1ab90:	e5d73000 	ldrb	r3, [r7]
   1ab94:	e3530000 	cmp	r3, #0
   1ab98:	0a00007a 	beq	1ad88 <_svfprintf_r+0x2f8>
   1ab9c:	e3a02000 	mov	r2, #0
   1aba0:	e5cd20ff 	strb	r2, [sp, #255]	; 0xff
   1aba4:	e58d2034 	str	r2, [sp, #52]	; 0x34
   1aba8:	e58d2018 	str	r2, [sp, #24]
   1abac:	e1a03002 	mov	r3, r2
   1abb0:	e2879001 	add	r9, r7, #1
   1abb4:	e3e04000 	mvn	r4, #0
   1abb8:	e4d92001 	ldrb	r2, [r9], #1
   1abbc:	e2421020 	sub	r1, r2, #32
   1abc0:	e3510058 	cmp	r1, #88	; 0x58
   1abc4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   1abc8:	ea0001a9 	b	1b274 <_svfprintf_r+0x7e4>
   1abcc:	0001b2b8 	.word	0x0001b2b8
   1abd0:	0001b274 	.word	0x0001b274
   1abd4:	0001b274 	.word	0x0001b274
   1abd8:	0001b2c4 	.word	0x0001b2c4
   1abdc:	0001b274 	.word	0x0001b274
   1abe0:	0001b274 	.word	0x0001b274
   1abe4:	0001b274 	.word	0x0001b274
   1abe8:	0001b274 	.word	0x0001b274
   1abec:	0001b274 	.word	0x0001b274
   1abf0:	0001b274 	.word	0x0001b274
   1abf4:	0001ad30 	.word	0x0001ad30
   1abf8:	0001adc8 	.word	0x0001adc8
   1abfc:	0001b274 	.word	0x0001b274
   1ac00:	0001ad58 	.word	0x0001ad58
   1ac04:	0001add0 	.word	0x0001add0
   1ac08:	0001b274 	.word	0x0001b274
   1ac0c:	0001ae18 	.word	0x0001ae18
   1ac10:	0001ae28 	.word	0x0001ae28
   1ac14:	0001ae28 	.word	0x0001ae28
   1ac18:	0001ae28 	.word	0x0001ae28
   1ac1c:	0001ae28 	.word	0x0001ae28
   1ac20:	0001ae28 	.word	0x0001ae28
   1ac24:	0001ae28 	.word	0x0001ae28
   1ac28:	0001ae28 	.word	0x0001ae28
   1ac2c:	0001ae28 	.word	0x0001ae28
   1ac30:	0001ae28 	.word	0x0001ae28
   1ac34:	0001b274 	.word	0x0001b274
   1ac38:	0001b274 	.word	0x0001b274
   1ac3c:	0001b274 	.word	0x0001b274
   1ac40:	0001b274 	.word	0x0001b274
   1ac44:	0001b274 	.word	0x0001b274
   1ac48:	0001b274 	.word	0x0001b274
   1ac4c:	0001b274 	.word	0x0001b274
   1ac50:	0001b274 	.word	0x0001b274
   1ac54:	0001b274 	.word	0x0001b274
   1ac58:	0001b274 	.word	0x0001b274
   1ac5c:	0001ae58 	.word	0x0001ae58
   1ac60:	0001b044 	.word	0x0001b044
   1ac64:	0001b274 	.word	0x0001b274
   1ac68:	0001b044 	.word	0x0001b044
   1ac6c:	0001b274 	.word	0x0001b274
   1ac70:	0001b274 	.word	0x0001b274
   1ac74:	0001b274 	.word	0x0001b274
   1ac78:	0001b274 	.word	0x0001b274
   1ac7c:	0001b0fc 	.word	0x0001b0fc
   1ac80:	0001b274 	.word	0x0001b274
   1ac84:	0001b274 	.word	0x0001b274
   1ac88:	0001b10c 	.word	0x0001b10c
   1ac8c:	0001b274 	.word	0x0001b274
   1ac90:	0001b274 	.word	0x0001b274
   1ac94:	0001b274 	.word	0x0001b274
   1ac98:	0001b274 	.word	0x0001b274
   1ac9c:	0001b274 	.word	0x0001b274
   1aca0:	0001b150 	.word	0x0001b150
   1aca4:	0001b274 	.word	0x0001b274
   1aca8:	0001b274 	.word	0x0001b274
   1acac:	0001b18c 	.word	0x0001b18c
   1acb0:	0001b274 	.word	0x0001b274
   1acb4:	0001b274 	.word	0x0001b274
   1acb8:	0001b274 	.word	0x0001b274
   1acbc:	0001b274 	.word	0x0001b274
   1acc0:	0001b274 	.word	0x0001b274
   1acc4:	0001b274 	.word	0x0001b274
   1acc8:	0001b274 	.word	0x0001b274
   1accc:	0001b274 	.word	0x0001b274
   1acd0:	0001b274 	.word	0x0001b274
   1acd4:	0001b274 	.word	0x0001b274
   1acd8:	0001b3b4 	.word	0x0001b3b4
   1acdc:	0001b344 	.word	0x0001b344
   1ace0:	0001b044 	.word	0x0001b044
   1ace4:	0001b044 	.word	0x0001b044
   1ace8:	0001b044 	.word	0x0001b044
   1acec:	0001b3a4 	.word	0x0001b3a4
   1acf0:	0001b344 	.word	0x0001b344
   1acf4:	0001b274 	.word	0x0001b274
   1acf8:	0001b274 	.word	0x0001b274
   1acfc:	0001b1fc 	.word	0x0001b1fc
   1ad00:	0001b274 	.word	0x0001b274
   1ad04:	0001b20c 	.word	0x0001b20c
   1ad08:	0001b238 	.word	0x0001b238
   1ad0c:	0001b3f8 	.word	0x0001b3f8
   1ad10:	0001b1ec 	.word	0x0001b1ec
   1ad14:	0001b274 	.word	0x0001b274
   1ad18:	0001b440 	.word	0x0001b440
   1ad1c:	0001b274 	.word	0x0001b274
   1ad20:	0001b2d4 	.word	0x0001b2d4
   1ad24:	0001b274 	.word	0x0001b274
   1ad28:	0001b274 	.word	0x0001b274
   1ad2c:	0001b2fc 	.word	0x0001b2fc
   1ad30:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1ad34:	e5955000 	ldr	r5, [r5]
   1ad38:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1ad3c:	e3550000 	cmp	r5, #0
   1ad40:	e58d5034 	str	r5, [sp, #52]	; 0x34
   1ad44:	e28c2004 	add	r2, ip, #4
   1ad48:	aa0001e4 	bge	1b4e0 <_svfprintf_r+0xa50>
   1ad4c:	e2655000 	rsb	r5, r5, #0
   1ad50:	e58d5034 	str	r5, [sp, #52]	; 0x34
   1ad54:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1ad58:	e59d5018 	ldr	r5, [sp, #24]
   1ad5c:	e3855004 	orr	r5, r5, #4
   1ad60:	e58d5018 	str	r5, [sp, #24]
   1ad64:	eaffff93 	b	1abb8 <_svfprintf_r+0x128>
   1ad68:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1ad6c:	e1a0100b 	mov	r1, fp
   1ad70:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1ad74:	eb0014bb 	bl	20068 <__ssprint_r>
   1ad78:	e3500000 	cmp	r0, #0
   1ad7c:	1a000007 	bne	1ada0 <_svfprintf_r+0x310>
   1ad80:	e28d606c 	add	r6, sp, #108	; 0x6c
   1ad84:	eaffff7e 	b	1ab84 <_svfprintf_r+0xf4>
   1ad88:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1ad8c:	e3530000 	cmp	r3, #0
   1ad90:	159d002c 	ldrne	r0, [sp, #44]	; 0x2c
   1ad94:	11a0100b 	movne	r1, fp
   1ad98:	128d20d4 	addne	r2, sp, #212	; 0xd4
   1ad9c:	1b0014b1 	blne	20068 <__ssprint_r>
   1ada0:	e1db30bc 	ldrh	r3, [fp, #12]
   1ada4:	e59d4020 	ldr	r4, [sp, #32]
   1ada8:	e3130040 	tst	r3, #64	; 0x40
   1adac:	13e04000 	mvnne	r4, #0
   1adb0:	e58d4020 	str	r4, [sp, #32]
   1adb4:	e59d0020 	ldr	r0, [sp, #32]
   1adb8:	e28ddc01 	add	sp, sp, #256	; 0x100
   1adbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adc0:	e1a07009 	mov	r7, r9
   1adc4:	eaffff71 	b	1ab90 <_svfprintf_r+0x100>
   1adc8:	e3a0302b 	mov	r3, #43	; 0x2b
   1adcc:	eaffff79 	b	1abb8 <_svfprintf_r+0x128>
   1add0:	e4d92001 	ldrb	r2, [r9], #1
   1add4:	e352002a 	cmp	r2, #42	; 0x2a
   1add8:	0a0001b9 	beq	1b4c4 <_svfprintf_r+0xa34>
   1addc:	e2421030 	sub	r1, r2, #48	; 0x30
   1ade0:	e3510009 	cmp	r1, #9
   1ade4:	83a04000 	movhi	r4, #0
   1ade8:	8affff73 	bhi	1abbc <_svfprintf_r+0x12c>
   1adec:	e1a00009 	mov	r0, r9
   1adf0:	e3a04000 	mov	r4, #0
   1adf4:	e4d02001 	ldrb	r2, [r0], #1
   1adf8:	e0844104 	add	r4, r4, r4, lsl #2
   1adfc:	e0814084 	add	r4, r1, r4, lsl #1
   1ae00:	e2421030 	sub	r1, r2, #48	; 0x30
   1ae04:	e3510009 	cmp	r1, #9
   1ae08:	e1a09000 	mov	r9, r0
   1ae0c:	9afffff8 	bls	1adf4 <_svfprintf_r+0x364>
   1ae10:	e1844fc4 	orr	r4, r4, r4, asr #31
   1ae14:	eaffff68 	b	1abbc <_svfprintf_r+0x12c>
   1ae18:	e59d5018 	ldr	r5, [sp, #24]
   1ae1c:	e3855080 	orr	r5, r5, #128	; 0x80
   1ae20:	e58d5018 	str	r5, [sp, #24]
   1ae24:	eaffff63 	b	1abb8 <_svfprintf_r+0x128>
   1ae28:	e1a00009 	mov	r0, r9
   1ae2c:	e3a01000 	mov	r1, #0
   1ae30:	e242c030 	sub	ip, r2, #48	; 0x30
   1ae34:	e4d02001 	ldrb	r2, [r0], #1
   1ae38:	e2425030 	sub	r5, r2, #48	; 0x30
   1ae3c:	e0811101 	add	r1, r1, r1, lsl #2
   1ae40:	e3550009 	cmp	r5, #9
   1ae44:	e08c1081 	add	r1, ip, r1, lsl #1
   1ae48:	e1a09000 	mov	r9, r0
   1ae4c:	9afffff7 	bls	1ae30 <_svfprintf_r+0x3a0>
   1ae50:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1ae54:	eaffff58 	b	1abbc <_svfprintf_r+0x12c>
   1ae58:	e59dc018 	ldr	ip, [sp, #24]
   1ae5c:	e38cc010 	orr	ip, ip, #16
   1ae60:	e58dc018 	str	ip, [sp, #24]
   1ae64:	e59d5018 	ldr	r5, [sp, #24]
   1ae68:	e3150010 	tst	r5, #16
   1ae6c:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1ae70:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1ae74:	0a000137 	beq	1b358 <_svfprintf_r+0x8c8>
   1ae78:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1ae7c:	e59c2000 	ldr	r2, [ip]
   1ae80:	e28cc004 	add	ip, ip, #4
   1ae84:	e3520000 	cmp	r2, #0
   1ae88:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1ae8c:	ba00013d 	blt	1b388 <_svfprintf_r+0x8f8>
   1ae90:	e5dd30ff 	ldrb	r3, [sp, #255]	; 0xff
   1ae94:	03a00000 	moveq	r0, #0
   1ae98:	13a00001 	movne	r0, #1
   1ae9c:	e3a01001 	mov	r1, #1
   1aea0:	e3540000 	cmp	r4, #0
   1aea4:	a59d5018 	ldrge	r5, [sp, #24]
   1aea8:	a3c55080 	bicge	r5, r5, #128	; 0x80
   1aeac:	a58d5018 	strge	r5, [sp, #24]
   1aeb0:	e3540000 	cmp	r4, #0
   1aeb4:	13800001 	orrne	r0, r0, #1
   1aeb8:	e3500000 	cmp	r0, #0
   1aebc:	0a000290 	beq	1b904 <_svfprintf_r+0xe74>
   1aec0:	e3510001 	cmp	r1, #1
   1aec4:	0a000389 	beq	1bcf0 <_svfprintf_r+0x1260>
   1aec8:	e3510002 	cmp	r1, #2
   1aecc:	128d10d4 	addne	r1, sp, #212	; 0xd4
   1aed0:	1a000001 	bne	1aedc <_svfprintf_r+0x44c>
   1aed4:	ea000377 	b	1bcb8 <_svfprintf_r+0x1228>
   1aed8:	e1a0100c 	mov	r1, ip
   1aedc:	e2020007 	and	r0, r2, #7
   1aee0:	e2800030 	add	r0, r0, #48	; 0x30
   1aee4:	e1b021a2 	lsrs	r2, r2, #3
   1aee8:	e241c001 	sub	ip, r1, #1
   1aeec:	e5410001 	strb	r0, [r1, #-1]
   1aef0:	1afffff8 	bne	1aed8 <_svfprintf_r+0x448>
   1aef4:	e58dc038 	str	ip, [sp, #56]	; 0x38
   1aef8:	e59dc018 	ldr	ip, [sp, #24]
   1aefc:	e31c0001 	tst	ip, #1
   1af00:	0a0003bd 	beq	1bdfc <_svfprintf_r+0x136c>
   1af04:	e3500030 	cmp	r0, #48	; 0x30
   1af08:	0a0003bb 	beq	1bdfc <_svfprintf_r+0x136c>
   1af0c:	e59dc014 	ldr	ip, [sp, #20]
   1af10:	e2415002 	sub	r5, r1, #2
   1af14:	e3a02030 	mov	r2, #48	; 0x30
   1af18:	e065c00c 	rsb	ip, r5, ip
   1af1c:	e58d5038 	str	r5, [sp, #56]	; 0x38
   1af20:	e5412002 	strb	r2, [r1, #-2]
   1af24:	e58dc028 	str	ip, [sp, #40]	; 0x28
   1af28:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
   1af2c:	e58d403c 	str	r4, [sp, #60]	; 0x3c
   1af30:	e15c0004 	cmp	ip, r4
   1af34:	b1a0c004 	movlt	ip, r4
   1af38:	e3a04000 	mov	r4, #0
   1af3c:	e58dc01c 	str	ip, [sp, #28]
   1af40:	e58d404c 	str	r4, [sp, #76]	; 0x4c
   1af44:	e3530000 	cmp	r3, #0
   1af48:	0a000002 	beq	1af58 <_svfprintf_r+0x4c8>
   1af4c:	e59d501c 	ldr	r5, [sp, #28]
   1af50:	e2855001 	add	r5, r5, #1
   1af54:	e58d501c 	str	r5, [sp, #28]
   1af58:	e59dc018 	ldr	ip, [sp, #24]
   1af5c:	e21cc002 	ands	ip, ip, #2
   1af60:	159d401c 	ldrne	r4, [sp, #28]
   1af64:	e59d5018 	ldr	r5, [sp, #24]
   1af68:	12844002 	addne	r4, r4, #2
   1af6c:	158d401c 	strne	r4, [sp, #28]
   1af70:	e2155084 	ands	r5, r5, #132	; 0x84
   1af74:	e58dc040 	str	ip, [sp, #64]	; 0x40
   1af78:	e58d5044 	str	r5, [sp, #68]	; 0x44
   1af7c:	1a000159 	bne	1b4e8 <_svfprintf_r+0xa58>
   1af80:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   1af84:	e59d401c 	ldr	r4, [sp, #28]
   1af88:	e064700c 	rsb	r7, r4, ip
   1af8c:	e3570000 	cmp	r7, #0
   1af90:	da000154 	ble	1b4e8 <_svfprintf_r+0xa58>
   1af94:	e3570010 	cmp	r7, #16
   1af98:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1af9c:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1afa0:	e59f8fa4 	ldr	r8, [pc, #4004]	; 1bf4c <_svfprintf_r+0x14bc>
   1afa4:	da00001b 	ble	1b018 <_svfprintf_r+0x588>
   1afa8:	e1a03004 	mov	r3, r4
   1afac:	e3a0a010 	mov	sl, #16
   1afb0:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1afb4:	ea000002 	b	1afc4 <_svfprintf_r+0x534>
   1afb8:	e2477010 	sub	r7, r7, #16
   1afbc:	e3570010 	cmp	r7, #16
   1afc0:	da000013 	ble	1b014 <_svfprintf_r+0x584>
   1afc4:	e2855001 	add	r5, r5, #1
   1afc8:	e3550007 	cmp	r5, #7
   1afcc:	e2833010 	add	r3, r3, #16
   1afd0:	e8860500 	stm	r6, {r8, sl}
   1afd4:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1afd8:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1afdc:	d2866008 	addle	r6, r6, #8
   1afe0:	dafffff4 	ble	1afb8 <_svfprintf_r+0x528>
   1afe4:	e1a00004 	mov	r0, r4
   1afe8:	e1a0100b 	mov	r1, fp
   1afec:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1aff0:	eb00141c 	bl	20068 <__ssprint_r>
   1aff4:	e3500000 	cmp	r0, #0
   1aff8:	1affff68 	bne	1ada0 <_svfprintf_r+0x310>
   1affc:	e2477010 	sub	r7, r7, #16
   1b000:	e3570010 	cmp	r7, #16
   1b004:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1b008:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b00c:	e28d606c 	add	r6, sp, #108	; 0x6c
   1b010:	caffffeb 	bgt	1afc4 <_svfprintf_r+0x534>
   1b014:	e1a04003 	mov	r4, r3
   1b018:	e2855001 	add	r5, r5, #1
   1b01c:	e0844007 	add	r4, r4, r7
   1b020:	e3550007 	cmp	r5, #7
   1b024:	e5868000 	str	r8, [r6]
   1b028:	e5867004 	str	r7, [r6, #4]
   1b02c:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b030:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b034:	ca000347 	bgt	1bd58 <_svfprintf_r+0x12c8>
   1b038:	e2866008 	add	r6, r6, #8
   1b03c:	e5dd30ff 	ldrb	r3, [sp, #255]	; 0xff
   1b040:	ea000129 	b	1b4ec <_svfprintf_r+0xa5c>
   1b044:	e59dc018 	ldr	ip, [sp, #24]
   1b048:	e31c0008 	tst	ip, #8
   1b04c:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b050:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1b054:	0a00041e 	beq	1c0d4 <_svfprintf_r+0x1644>
   1b058:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1b05c:	e5955000 	ldr	r5, [r5]
   1b060:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1b064:	e58d5054 	str	r5, [sp, #84]	; 0x54
   1b068:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1b06c:	e59cc004 	ldr	ip, [ip, #4]
   1b070:	e2855008 	add	r5, r5, #8
   1b074:	e58dc058 	str	ip, [sp, #88]	; 0x58
   1b078:	e58d5024 	str	r5, [sp, #36]	; 0x24
   1b07c:	e28d0054 	add	r0, sp, #84	; 0x54
   1b080:	e8900003 	ldm	r0, {r0, r1}
   1b084:	eb0013d2 	bl	1ffd4 <__fpclassifyd>
   1b088:	e3500001 	cmp	r0, #1
   1b08c:	e28d0054 	add	r0, sp, #84	; 0x54
   1b090:	e8900003 	ldm	r0, {r0, r1}
   1b094:	1a0003fb 	bne	1c088 <_svfprintf_r+0x15f8>
   1b098:	e3a03000 	mov	r3, #0
   1b09c:	e3a02000 	mov	r2, #0
   1b0a0:	eb0027af 	bl	24f64 <__ledf2>
   1b0a4:	e3a04003 	mov	r4, #3
   1b0a8:	e3500000 	cmp	r0, #0
   1b0ac:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
   1b0b0:	b3a0302d 	movlt	r3, #45	; 0x2d
   1b0b4:	e58d401c 	str	r4, [sp, #28]
   1b0b8:	e59f2e90 	ldr	r2, [pc, #3728]	; 1bf50 <_svfprintf_r+0x14c0>
   1b0bc:	e59d4018 	ldr	r4, [sp, #24]
   1b0c0:	e3a05000 	mov	r5, #0
   1b0c4:	e59f1e88 	ldr	r1, [pc, #3720]	; 1bf54 <_svfprintf_r+0x14c4>
   1b0c8:	a5dd30ff 	ldrbge	r3, [sp, #255]	; 0xff
   1b0cc:	b5cd30ff 	strblt	r3, [sp, #255]	; 0xff
   1b0d0:	e35c0047 	cmp	ip, #71	; 0x47
   1b0d4:	e58d503c 	str	r5, [sp, #60]	; 0x3c
   1b0d8:	d1a01002 	movle	r1, r2
   1b0dc:	e3c44080 	bic	r4, r4, #128	; 0x80
   1b0e0:	e3a05003 	mov	r5, #3
   1b0e4:	e3a0c000 	mov	ip, #0
   1b0e8:	e58d1038 	str	r1, [sp, #56]	; 0x38
   1b0ec:	e58d4018 	str	r4, [sp, #24]
   1b0f0:	e58d5028 	str	r5, [sp, #40]	; 0x28
   1b0f4:	e58dc04c 	str	ip, [sp, #76]	; 0x4c
   1b0f8:	eaffff91 	b	1af44 <_svfprintf_r+0x4b4>
   1b0fc:	e59dc018 	ldr	ip, [sp, #24]
   1b100:	e38cc008 	orr	ip, ip, #8
   1b104:	e58dc018 	str	ip, [sp, #24]
   1b108:	eafffeaa 	b	1abb8 <_svfprintf_r+0x128>
   1b10c:	e59dc018 	ldr	ip, [sp, #24]
   1b110:	e38cc010 	orr	ip, ip, #16
   1b114:	e58dc018 	str	ip, [sp, #24]
   1b118:	e59d5018 	ldr	r5, [sp, #24]
   1b11c:	e2153010 	ands	r3, r5, #16
   1b120:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b124:	0a000047 	beq	1b248 <_svfprintf_r+0x7b8>
   1b128:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1b12c:	e59c2000 	ldr	r2, [ip]
   1b130:	e3a01000 	mov	r1, #0
   1b134:	e28cc004 	add	ip, ip, #4
   1b138:	e0520001 	subs	r0, r2, r1
   1b13c:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1b140:	13a00001 	movne	r0, #1
   1b144:	e3a03000 	mov	r3, #0
   1b148:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1b14c:	eaffff53 	b	1aea0 <_svfprintf_r+0x410>
   1b150:	e59d5018 	ldr	r5, [sp, #24]
   1b154:	e3855010 	orr	r5, r5, #16
   1b158:	e58d5018 	str	r5, [sp, #24]
   1b15c:	e59dc018 	ldr	ip, [sp, #24]
   1b160:	e31c0010 	tst	ip, #16
   1b164:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b168:	0a00005d 	beq	1b2e4 <_svfprintf_r+0x854>
   1b16c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1b170:	e5952000 	ldr	r2, [r5]
   1b174:	e2920000 	adds	r0, r2, #0
   1b178:	e2855004 	add	r5, r5, #4
   1b17c:	e3a01001 	mov	r1, #1
   1b180:	13a00001 	movne	r0, #1
   1b184:	e58d5024 	str	r5, [sp, #36]	; 0x24
   1b188:	eaffffed 	b	1b144 <_svfprintf_r+0x6b4>
   1b18c:	e59dc018 	ldr	ip, [sp, #24]
   1b190:	e59f5dc0 	ldr	r5, [pc, #3520]	; 1bf58 <_svfprintf_r+0x14c8>
   1b194:	e31c0010 	tst	ip, #16
   1b198:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b19c:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1b1a0:	e58d5064 	str	r5, [sp, #100]	; 0x64
   1b1a4:	0a00005b 	beq	1b318 <_svfprintf_r+0x888>
   1b1a8:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1b1ac:	e5952000 	ldr	r2, [r5]
   1b1b0:	e2855004 	add	r5, r5, #4
   1b1b4:	e58d5024 	str	r5, [sp, #36]	; 0x24
   1b1b8:	e2920000 	adds	r0, r2, #0
   1b1bc:	e59d5018 	ldr	r5, [sp, #24]
   1b1c0:	13a00001 	movne	r0, #1
   1b1c4:	e1150000 	tst	r5, r0
   1b1c8:	159dc048 	ldrne	ip, [sp, #72]	; 0x48
   1b1cc:	13a03030 	movne	r3, #48	; 0x30
   1b1d0:	13855002 	orrne	r5, r5, #2
   1b1d4:	15cd30fc 	strbne	r3, [sp, #252]	; 0xfc
   1b1d8:	15cdc0fd 	strbne	ip, [sp, #253]	; 0xfd
   1b1dc:	158d5018 	strne	r5, [sp, #24]
   1b1e0:	13a00001 	movne	r0, #1
   1b1e4:	e3a01002 	mov	r1, #2
   1b1e8:	eaffffd5 	b	1b144 <_svfprintf_r+0x6b4>
   1b1ec:	e59d5018 	ldr	r5, [sp, #24]
   1b1f0:	e3855010 	orr	r5, r5, #16
   1b1f4:	e58d5018 	str	r5, [sp, #24]
   1b1f8:	eafffe6e 	b	1abb8 <_svfprintf_r+0x128>
   1b1fc:	e59dc018 	ldr	ip, [sp, #24]
   1b200:	e38cc010 	orr	ip, ip, #16
   1b204:	e58dc018 	str	ip, [sp, #24]
   1b208:	eafffe6a 	b	1abb8 <_svfprintf_r+0x128>
   1b20c:	e59d4018 	ldr	r4, [sp, #24]
   1b210:	e3140010 	tst	r4, #16
   1b214:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1b218:	0a0003b7 	beq	1c0fc <_svfprintf_r+0x166c>
   1b21c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1b220:	e59dc020 	ldr	ip, [sp, #32]
   1b224:	e5953000 	ldr	r3, [r5]
   1b228:	e2855004 	add	r5, r5, #4
   1b22c:	e58d5024 	str	r5, [sp, #36]	; 0x24
   1b230:	e583c000 	str	ip, [r3]
   1b234:	eafffe3a 	b	1ab24 <_svfprintf_r+0x94>
   1b238:	e59d5018 	ldr	r5, [sp, #24]
   1b23c:	e2153010 	ands	r3, r5, #16
   1b240:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b244:	1affffb7 	bne	1b128 <_svfprintf_r+0x698>
   1b248:	e59d5018 	ldr	r5, [sp, #24]
   1b24c:	e2151040 	ands	r1, r5, #64	; 0x40
   1b250:	0a0003b3 	beq	1c124 <_svfprintf_r+0x1694>
   1b254:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1b258:	e1dc20b0 	ldrh	r2, [ip]
   1b25c:	e28cc004 	add	ip, ip, #4
   1b260:	e2920000 	adds	r0, r2, #0
   1b264:	e1a01003 	mov	r1, r3
   1b268:	13a00001 	movne	r0, #1
   1b26c:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1b270:	eaffffb3 	b	1b144 <_svfprintf_r+0x6b4>
   1b274:	e3520000 	cmp	r2, #0
   1b278:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b27c:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1b280:	0afffec0 	beq	1ad88 <_svfprintf_r+0x2f8>
   1b284:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
   1b288:	e3a02000 	mov	r2, #0
   1b28c:	e3a05001 	mov	r5, #1
   1b290:	e28d40ac 	add	r4, sp, #172	; 0xac
   1b294:	e1a03002 	mov	r3, r2
   1b298:	e58d501c 	str	r5, [sp, #28]
   1b29c:	e5cdc0ac 	strb	ip, [sp, #172]	; 0xac
   1b2a0:	e5cd20ff 	strb	r2, [sp, #255]	; 0xff
   1b2a4:	e58d5028 	str	r5, [sp, #40]	; 0x28
   1b2a8:	e58d203c 	str	r2, [sp, #60]	; 0x3c
   1b2ac:	e58d204c 	str	r2, [sp, #76]	; 0x4c
   1b2b0:	e58d4038 	str	r4, [sp, #56]	; 0x38
   1b2b4:	eaffff27 	b	1af58 <_svfprintf_r+0x4c8>
   1b2b8:	e3530000 	cmp	r3, #0
   1b2bc:	03a03020 	moveq	r3, #32
   1b2c0:	eafffe3c 	b	1abb8 <_svfprintf_r+0x128>
   1b2c4:	e59dc018 	ldr	ip, [sp, #24]
   1b2c8:	e38cc001 	orr	ip, ip, #1
   1b2cc:	e58dc018 	str	ip, [sp, #24]
   1b2d0:	eafffe38 	b	1abb8 <_svfprintf_r+0x128>
   1b2d4:	e59dc018 	ldr	ip, [sp, #24]
   1b2d8:	e31c0010 	tst	ip, #16
   1b2dc:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b2e0:	1affffa1 	bne	1b16c <_svfprintf_r+0x6dc>
   1b2e4:	e59dc018 	ldr	ip, [sp, #24]
   1b2e8:	e31c0040 	tst	ip, #64	; 0x40
   1b2ec:	0a000393 	beq	1c140 <_svfprintf_r+0x16b0>
   1b2f0:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1b2f4:	e1d520b0 	ldrh	r2, [r5]
   1b2f8:	eaffff9d 	b	1b174 <_svfprintf_r+0x6e4>
   1b2fc:	e59dc018 	ldr	ip, [sp, #24]
   1b300:	e59f5c54 	ldr	r5, [pc, #3156]	; 1bf5c <_svfprintf_r+0x14cc>
   1b304:	e31c0010 	tst	ip, #16
   1b308:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b30c:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1b310:	e58d5064 	str	r5, [sp, #100]	; 0x64
   1b314:	1affffa3 	bne	1b1a8 <_svfprintf_r+0x718>
   1b318:	e59dc018 	ldr	ip, [sp, #24]
   1b31c:	e31c0040 	tst	ip, #64	; 0x40
   1b320:	159d5024 	ldrne	r5, [sp, #36]	; 0x24
   1b324:	059dc024 	ldreq	ip, [sp, #36]	; 0x24
   1b328:	11d520b0 	ldrhne	r2, [r5]
   1b32c:	059c2000 	ldreq	r2, [ip]
   1b330:	12855004 	addne	r5, r5, #4
   1b334:	028cc004 	addeq	ip, ip, #4
   1b338:	158d5024 	strne	r5, [sp, #36]	; 0x24
   1b33c:	058dc024 	streq	ip, [sp, #36]	; 0x24
   1b340:	eaffff9c 	b	1b1b8 <_svfprintf_r+0x728>
   1b344:	e59d5018 	ldr	r5, [sp, #24]
   1b348:	e3150010 	tst	r5, #16
   1b34c:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b350:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1b354:	1afffec7 	bne	1ae78 <_svfprintf_r+0x3e8>
   1b358:	e59d5018 	ldr	r5, [sp, #24]
   1b35c:	e3150040 	tst	r5, #64	; 0x40
   1b360:	159dc024 	ldrne	ip, [sp, #36]	; 0x24
   1b364:	059d5024 	ldreq	r5, [sp, #36]	; 0x24
   1b368:	11dc20f0 	ldrshne	r2, [ip]
   1b36c:	05952000 	ldreq	r2, [r5]
   1b370:	128cc004 	addne	ip, ip, #4
   1b374:	02855004 	addeq	r5, r5, #4
   1b378:	158dc024 	strne	ip, [sp, #36]	; 0x24
   1b37c:	058d5024 	streq	r5, [sp, #36]	; 0x24
   1b380:	e3520000 	cmp	r2, #0
   1b384:	aafffec1 	bge	1ae90 <_svfprintf_r+0x400>
   1b388:	e2622000 	rsb	r2, r2, #0
   1b38c:	e3a0302d 	mov	r3, #45	; 0x2d
   1b390:	e2920000 	adds	r0, r2, #0
   1b394:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1b398:	13a00001 	movne	r0, #1
   1b39c:	e3a01001 	mov	r1, #1
   1b3a0:	eafffebe 	b	1aea0 <_svfprintf_r+0x410>
   1b3a4:	e59d5018 	ldr	r5, [sp, #24]
   1b3a8:	e3855040 	orr	r5, r5, #64	; 0x40
   1b3ac:	e58d5018 	str	r5, [sp, #24]
   1b3b0:	eafffe00 	b	1abb8 <_svfprintf_r+0x128>
   1b3b4:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1b3b8:	e59c1000 	ldr	r1, [ip]
   1b3bc:	e3a04001 	mov	r4, #1
   1b3c0:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b3c4:	e28cc004 	add	ip, ip, #4
   1b3c8:	e3a02000 	mov	r2, #0
   1b3cc:	e28d50ac 	add	r5, sp, #172	; 0xac
   1b3d0:	e1a03002 	mov	r3, r2
   1b3d4:	e58d401c 	str	r4, [sp, #28]
   1b3d8:	e5cd10ac 	strb	r1, [sp, #172]	; 0xac
   1b3dc:	e5cd20ff 	strb	r2, [sp, #255]	; 0xff
   1b3e0:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1b3e4:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1b3e8:	e58d203c 	str	r2, [sp, #60]	; 0x3c
   1b3ec:	e58d204c 	str	r2, [sp, #76]	; 0x4c
   1b3f0:	e58d5038 	str	r5, [sp, #56]	; 0x38
   1b3f4:	eafffed7 	b	1af58 <_svfprintf_r+0x4c8>
   1b3f8:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1b3fc:	e59d5018 	ldr	r5, [sp, #24]
   1b400:	e59c2000 	ldr	r2, [ip]
   1b404:	e28cc004 	add	ip, ip, #4
   1b408:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1b40c:	e59fcb48 	ldr	ip, [pc, #2888]	; 1bf5c <_svfprintf_r+0x14cc>
   1b410:	e3a03078 	mov	r3, #120	; 0x78
   1b414:	e3a01030 	mov	r1, #48	; 0x30
   1b418:	e3855002 	orr	r5, r5, #2
   1b41c:	e2920000 	adds	r0, r2, #0
   1b420:	e5cd10fc 	strb	r1, [sp, #252]	; 0xfc
   1b424:	e58d5018 	str	r5, [sp, #24]
   1b428:	e5cd30fd 	strb	r3, [sp, #253]	; 0xfd
   1b42c:	13a00001 	movne	r0, #1
   1b430:	e58dc064 	str	ip, [sp, #100]	; 0x64
   1b434:	e3a01002 	mov	r1, #2
   1b438:	e58d3048 	str	r3, [sp, #72]	; 0x48
   1b43c:	eaffff40 	b	1b144 <_svfprintf_r+0x6b4>
   1b440:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1b444:	e5955000 	ldr	r5, [r5]
   1b448:	e58d5038 	str	r5, [sp, #56]	; 0x38
   1b44c:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1b450:	e3a05000 	mov	r5, #0
   1b454:	e15c0005 	cmp	ip, r5
   1b458:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1b45c:	e58d2048 	str	r2, [sp, #72]	; 0x48
   1b460:	e5cd50ff 	strb	r5, [sp, #255]	; 0xff
   1b464:	e28c7004 	add	r7, ip, #4
   1b468:	0a0004b2 	beq	1c738 <_svfprintf_r+0x1ca8>
   1b46c:	e3540000 	cmp	r4, #0
   1b470:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   1b474:	ba000490 	blt	1c6bc <_svfprintf_r+0x1c2c>
   1b478:	e1a01005 	mov	r1, r5
   1b47c:	e1a02004 	mov	r2, r4
   1b480:	eb000f53 	bl	1f1d4 <memchr>
   1b484:	e3500000 	cmp	r0, #0
   1b488:	0a0004cd 	beq	1c7c4 <_svfprintf_r+0x1d34>
   1b48c:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1b490:	e06c0000 	rsb	r0, ip, r0
   1b494:	e1500004 	cmp	r0, r4
   1b498:	e58d0028 	str	r0, [sp, #40]	; 0x28
   1b49c:	e58d503c 	str	r5, [sp, #60]	; 0x3c
   1b4a0:	da000377 	ble	1c284 <_svfprintf_r+0x17f4>
   1b4a4:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   1b4a8:	e1c45fc4 	bic	r5, r4, r4, asr #31
   1b4ac:	e58d501c 	str	r5, [sp, #28]
   1b4b0:	e5dd30ff 	ldrb	r3, [sp, #255]	; 0xff
   1b4b4:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1b4b8:	e58d7024 	str	r7, [sp, #36]	; 0x24
   1b4bc:	e58dc04c 	str	ip, [sp, #76]	; 0x4c
   1b4c0:	eafffe9f 	b	1af44 <_svfprintf_r+0x4b4>
   1b4c4:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1b4c8:	e59c4000 	ldr	r4, [ip]
   1b4cc:	e28c2004 	add	r2, ip, #4
   1b4d0:	e3540000 	cmp	r4, #0
   1b4d4:	b58d2024 	strlt	r2, [sp, #36]	; 0x24
   1b4d8:	b3e04000 	mvnlt	r4, #0
   1b4dc:	bafffdb5 	blt	1abb8 <_svfprintf_r+0x128>
   1b4e0:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1b4e4:	eafffdb3 	b	1abb8 <_svfprintf_r+0x128>
   1b4e8:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1b4ec:	e3530000 	cmp	r3, #0
   1b4f0:	0a00000b 	beq	1b524 <_svfprintf_r+0xa94>
   1b4f4:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b4f8:	e28d30ff 	add	r3, sp, #255	; 0xff
   1b4fc:	e2855001 	add	r5, r5, #1
   1b500:	e5863000 	str	r3, [r6]
   1b504:	e2844001 	add	r4, r4, #1
   1b508:	e3550007 	cmp	r5, #7
   1b50c:	e3a03001 	mov	r3, #1
   1b510:	e5863004 	str	r3, [r6, #4]
   1b514:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b518:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b51c:	d2866008 	addle	r6, r6, #8
   1b520:	ca000198 	bgt	1bb88 <_svfprintf_r+0x10f8>
   1b524:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   1b528:	e3550000 	cmp	r5, #0
   1b52c:	0a00000b 	beq	1b560 <_svfprintf_r+0xad0>
   1b530:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b534:	e28d30fc 	add	r3, sp, #252	; 0xfc
   1b538:	e2855001 	add	r5, r5, #1
   1b53c:	e5863000 	str	r3, [r6]
   1b540:	e2844002 	add	r4, r4, #2
   1b544:	e3550007 	cmp	r5, #7
   1b548:	e3a03002 	mov	r3, #2
   1b54c:	e5863004 	str	r3, [r6, #4]
   1b550:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b554:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b558:	d2866008 	addle	r6, r6, #8
   1b55c:	ca000192 	bgt	1bbac <_svfprintf_r+0x111c>
   1b560:	e59dc044 	ldr	ip, [sp, #68]	; 0x44
   1b564:	e35c0080 	cmp	ip, #128	; 0x80
   1b568:	0a0000f5 	beq	1b944 <_svfprintf_r+0xeb4>
   1b56c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
   1b570:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1b574:	e0657003 	rsb	r7, r5, r3
   1b578:	e3570000 	cmp	r7, #0
   1b57c:	da000030 	ble	1b644 <_svfprintf_r+0xbb4>
   1b580:	e3570010 	cmp	r7, #16
   1b584:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b588:	e59f89e0 	ldr	r8, [pc, #2528]	; 1bf70 <_svfprintf_r+0x14e0>
   1b58c:	da00001b 	ble	1b600 <_svfprintf_r+0xb70>
   1b590:	e1a03004 	mov	r3, r4
   1b594:	e3a0a010 	mov	sl, #16
   1b598:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1b59c:	ea000002 	b	1b5ac <_svfprintf_r+0xb1c>
   1b5a0:	e2477010 	sub	r7, r7, #16
   1b5a4:	e3570010 	cmp	r7, #16
   1b5a8:	da000013 	ble	1b5fc <_svfprintf_r+0xb6c>
   1b5ac:	e2855001 	add	r5, r5, #1
   1b5b0:	e3550007 	cmp	r5, #7
   1b5b4:	e2833010 	add	r3, r3, #16
   1b5b8:	e8860500 	stm	r6, {r8, sl}
   1b5bc:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1b5c0:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b5c4:	d2866008 	addle	r6, r6, #8
   1b5c8:	dafffff4 	ble	1b5a0 <_svfprintf_r+0xb10>
   1b5cc:	e1a00004 	mov	r0, r4
   1b5d0:	e1a0100b 	mov	r1, fp
   1b5d4:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1b5d8:	eb0012a2 	bl	20068 <__ssprint_r>
   1b5dc:	e3500000 	cmp	r0, #0
   1b5e0:	1afffdee 	bne	1ada0 <_svfprintf_r+0x310>
   1b5e4:	e2477010 	sub	r7, r7, #16
   1b5e8:	e3570010 	cmp	r7, #16
   1b5ec:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1b5f0:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b5f4:	e28d606c 	add	r6, sp, #108	; 0x6c
   1b5f8:	caffffeb 	bgt	1b5ac <_svfprintf_r+0xb1c>
   1b5fc:	e1a04003 	mov	r4, r3
   1b600:	e2855001 	add	r5, r5, #1
   1b604:	e0844007 	add	r4, r4, r7
   1b608:	e3550007 	cmp	r5, #7
   1b60c:	e5868000 	str	r8, [r6]
   1b610:	e5867004 	str	r7, [r6, #4]
   1b614:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b618:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b61c:	d2866008 	addle	r6, r6, #8
   1b620:	da000007 	ble	1b644 <_svfprintf_r+0xbb4>
   1b624:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1b628:	e1a0100b 	mov	r1, fp
   1b62c:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1b630:	eb00128c 	bl	20068 <__ssprint_r>
   1b634:	e3500000 	cmp	r0, #0
   1b638:	1afffdd8 	bne	1ada0 <_svfprintf_r+0x310>
   1b63c:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1b640:	e28d606c 	add	r6, sp, #108	; 0x6c
   1b644:	e59dc018 	ldr	ip, [sp, #24]
   1b648:	e31c0c01 	tst	ip, #256	; 0x100
   1b64c:	1a000061 	bne	1b7d8 <_svfprintf_r+0xd48>
   1b650:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b654:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1b658:	e2855001 	add	r5, r5, #1
   1b65c:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1b660:	e0844003 	add	r4, r4, r3
   1b664:	e3550007 	cmp	r5, #7
   1b668:	e586c000 	str	ip, [r6]
   1b66c:	e5863004 	str	r3, [r6, #4]
   1b670:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b674:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b678:	ca00004d 	bgt	1b7b4 <_svfprintf_r+0xd24>
   1b67c:	e2866008 	add	r6, r6, #8
   1b680:	e59d5018 	ldr	r5, [sp, #24]
   1b684:	e3150004 	tst	r5, #4
   1b688:	0a000033 	beq	1b75c <_svfprintf_r+0xccc>
   1b68c:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
   1b690:	e59d501c 	ldr	r5, [sp, #28]
   1b694:	e065700c 	rsb	r7, r5, ip
   1b698:	e3570000 	cmp	r7, #0
   1b69c:	da00002e 	ble	1b75c <_svfprintf_r+0xccc>
   1b6a0:	e3570010 	cmp	r7, #16
   1b6a4:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b6a8:	e59f889c 	ldr	r8, [pc, #2204]	; 1bf4c <_svfprintf_r+0x14bc>
   1b6ac:	da00001b 	ble	1b720 <_svfprintf_r+0xc90>
   1b6b0:	e1a03004 	mov	r3, r4
   1b6b4:	e3a0a010 	mov	sl, #16
   1b6b8:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1b6bc:	ea000002 	b	1b6cc <_svfprintf_r+0xc3c>
   1b6c0:	e2477010 	sub	r7, r7, #16
   1b6c4:	e3570010 	cmp	r7, #16
   1b6c8:	da000013 	ble	1b71c <_svfprintf_r+0xc8c>
   1b6cc:	e2855001 	add	r5, r5, #1
   1b6d0:	e3550007 	cmp	r5, #7
   1b6d4:	e2833010 	add	r3, r3, #16
   1b6d8:	e8860500 	stm	r6, {r8, sl}
   1b6dc:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1b6e0:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b6e4:	d2866008 	addle	r6, r6, #8
   1b6e8:	dafffff4 	ble	1b6c0 <_svfprintf_r+0xc30>
   1b6ec:	e1a00004 	mov	r0, r4
   1b6f0:	e1a0100b 	mov	r1, fp
   1b6f4:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1b6f8:	eb00125a 	bl	20068 <__ssprint_r>
   1b6fc:	e3500000 	cmp	r0, #0
   1b700:	1afffda6 	bne	1ada0 <_svfprintf_r+0x310>
   1b704:	e2477010 	sub	r7, r7, #16
   1b708:	e3570010 	cmp	r7, #16
   1b70c:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1b710:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b714:	e28d606c 	add	r6, sp, #108	; 0x6c
   1b718:	caffffeb 	bgt	1b6cc <_svfprintf_r+0xc3c>
   1b71c:	e1a04003 	mov	r4, r3
   1b720:	e2855001 	add	r5, r5, #1
   1b724:	e0874004 	add	r4, r7, r4
   1b728:	e3550007 	cmp	r5, #7
   1b72c:	e5868000 	str	r8, [r6]
   1b730:	e5867004 	str	r7, [r6, #4]
   1b734:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b738:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b73c:	da000006 	ble	1b75c <_svfprintf_r+0xccc>
   1b740:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1b744:	e1a0100b 	mov	r1, fp
   1b748:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1b74c:	eb001245 	bl	20068 <__ssprint_r>
   1b750:	e3500000 	cmp	r0, #0
   1b754:	1afffd91 	bne	1ada0 <_svfprintf_r+0x310>
   1b758:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1b75c:	e28d501c 	add	r5, sp, #28
   1b760:	e8951020 	ldm	r5, {r5, ip}
   1b764:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
   1b768:	e1550000 	cmp	r5, r0
   1b76c:	a08cc005 	addge	ip, ip, r5
   1b770:	b08cc000 	addlt	ip, ip, r0
   1b774:	e3540000 	cmp	r4, #0
   1b778:	e58dc020 	str	ip, [sp, #32]
   1b77c:	1a0000fa 	bne	1bb6c <_svfprintf_r+0x10dc>
   1b780:	e3a03000 	mov	r3, #0
   1b784:	e58d30d8 	str	r3, [sp, #216]	; 0xd8
   1b788:	e28d606c 	add	r6, sp, #108	; 0x6c
   1b78c:	eafffce4 	b	1ab24 <_svfprintf_r+0x94>
   1b790:	e1a04003 	mov	r4, r3
   1b794:	e2855001 	add	r5, r5, #1
   1b798:	e0844007 	add	r4, r4, r7
   1b79c:	e3550007 	cmp	r5, #7
   1b7a0:	e5868000 	str	r8, [r6]
   1b7a4:	e5867004 	str	r7, [r6, #4]
   1b7a8:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b7ac:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b7b0:	daffffb1 	ble	1b67c <_svfprintf_r+0xbec>
   1b7b4:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1b7b8:	e1a0100b 	mov	r1, fp
   1b7bc:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1b7c0:	eb001228 	bl	20068 <__ssprint_r>
   1b7c4:	e3500000 	cmp	r0, #0
   1b7c8:	1afffd74 	bne	1ada0 <_svfprintf_r+0x310>
   1b7cc:	e28d606c 	add	r6, sp, #108	; 0x6c
   1b7d0:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1b7d4:	eaffffa9 	b	1b680 <_svfprintf_r+0xbf0>
   1b7d8:	e59d5048 	ldr	r5, [sp, #72]	; 0x48
   1b7dc:	e3550065 	cmp	r5, #101	; 0x65
   1b7e0:	da00008e 	ble	1ba20 <_svfprintf_r+0xf90>
   1b7e4:	e28d0054 	add	r0, sp, #84	; 0x54
   1b7e8:	e8900003 	ldm	r0, {r0, r1}
   1b7ec:	e3a02000 	mov	r2, #0
   1b7f0:	e3a03000 	mov	r3, #0
   1b7f4:	eb0025dc 	bl	24f6c <__cmpdf2>
   1b7f8:	e3500000 	cmp	r0, #0
   1b7fc:	1a0000f3 	bne	1bbd0 <_svfprintf_r+0x1140>
   1b800:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b804:	e59f3760 	ldr	r3, [pc, #1888]	; 1bf6c <_svfprintf_r+0x14dc>
   1b808:	e2855001 	add	r5, r5, #1
   1b80c:	e5863000 	str	r3, [r6]
   1b810:	e2844001 	add	r4, r4, #1
   1b814:	e3550007 	cmp	r5, #7
   1b818:	e3a03001 	mov	r3, #1
   1b81c:	e5863004 	str	r3, [r6, #4]
   1b820:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b824:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b828:	d2866008 	addle	r6, r6, #8
   1b82c:	ca00024b 	bgt	1c160 <_svfprintf_r+0x16d0>
   1b830:	e59d30f0 	ldr	r3, [sp, #240]	; 0xf0
   1b834:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1b838:	e153000c 	cmp	r3, ip
   1b83c:	ba000002 	blt	1b84c <_svfprintf_r+0xdbc>
   1b840:	e59d5018 	ldr	r5, [sp, #24]
   1b844:	e3150001 	tst	r5, #1
   1b848:	0affff8c 	beq	1b680 <_svfprintf_r+0xbf0>
   1b84c:	e59dc05c 	ldr	ip, [sp, #92]	; 0x5c
   1b850:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b854:	e084400c 	add	r4, r4, ip
   1b858:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
   1b85c:	e2855001 	add	r5, r5, #1
   1b860:	e586c000 	str	ip, [r6]
   1b864:	e59dc05c 	ldr	ip, [sp, #92]	; 0x5c
   1b868:	e3550007 	cmp	r5, #7
   1b86c:	e586c004 	str	ip, [r6, #4]
   1b870:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b874:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b878:	d2866008 	addle	r6, r6, #8
   1b87c:	ca00032a 	bgt	1c52c <_svfprintf_r+0x1a9c>
   1b880:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   1b884:	e2457001 	sub	r7, r5, #1
   1b888:	e3570000 	cmp	r7, #0
   1b88c:	daffff7b 	ble	1b680 <_svfprintf_r+0xbf0>
   1b890:	e3570010 	cmp	r7, #16
   1b894:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b898:	e59f86d0 	ldr	r8, [pc, #1744]	; 1bf70 <_svfprintf_r+0x14e0>
   1b89c:	daffffbc 	ble	1b794 <_svfprintf_r+0xd04>
   1b8a0:	e1a03004 	mov	r3, r4
   1b8a4:	e3a0a010 	mov	sl, #16
   1b8a8:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1b8ac:	ea000002 	b	1b8bc <_svfprintf_r+0xe2c>
   1b8b0:	e2477010 	sub	r7, r7, #16
   1b8b4:	e3570010 	cmp	r7, #16
   1b8b8:	daffffb4 	ble	1b790 <_svfprintf_r+0xd00>
   1b8bc:	e2855001 	add	r5, r5, #1
   1b8c0:	e3550007 	cmp	r5, #7
   1b8c4:	e2833010 	add	r3, r3, #16
   1b8c8:	e8860500 	stm	r6, {r8, sl}
   1b8cc:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1b8d0:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b8d4:	d2866008 	addle	r6, r6, #8
   1b8d8:	dafffff4 	ble	1b8b0 <_svfprintf_r+0xe20>
   1b8dc:	e1a00004 	mov	r0, r4
   1b8e0:	e1a0100b 	mov	r1, fp
   1b8e4:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1b8e8:	eb0011de 	bl	20068 <__ssprint_r>
   1b8ec:	e3500000 	cmp	r0, #0
   1b8f0:	1afffd2a 	bne	1ada0 <_svfprintf_r+0x310>
   1b8f4:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1b8f8:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b8fc:	e28d606c 	add	r6, sp, #108	; 0x6c
   1b900:	eaffffea 	b	1b8b0 <_svfprintf_r+0xe20>
   1b904:	e3510000 	cmp	r1, #0
   1b908:	128dc0d4 	addne	ip, sp, #212	; 0xd4
   1b90c:	158d0028 	strne	r0, [sp, #40]	; 0x28
   1b910:	158dc038 	strne	ip, [sp, #56]	; 0x38
   1b914:	1afffd83 	bne	1af28 <_svfprintf_r+0x498>
   1b918:	e59d5018 	ldr	r5, [sp, #24]
   1b91c:	e3150001 	tst	r5, #1
   1b920:	159dc068 	ldrne	ip, [sp, #104]	; 0x68
   1b924:	13a02030 	movne	r2, #48	; 0x30
   1b928:	128d50d3 	addne	r5, sp, #211	; 0xd3
   1b92c:	028d50d4 	addeq	r5, sp, #212	; 0xd4
   1b930:	15cd20d3 	strbne	r2, [sp, #211]	; 0xd3
   1b934:	158dc028 	strne	ip, [sp, #40]	; 0x28
   1b938:	058d1028 	streq	r1, [sp, #40]	; 0x28
   1b93c:	e58d5038 	str	r5, [sp, #56]	; 0x38
   1b940:	eafffd78 	b	1af28 <_svfprintf_r+0x498>
   1b944:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   1b948:	e59dc01c 	ldr	ip, [sp, #28]
   1b94c:	e06c7005 	rsb	r7, ip, r5
   1b950:	e3570000 	cmp	r7, #0
   1b954:	daffff04 	ble	1b56c <_svfprintf_r+0xadc>
   1b958:	e3570010 	cmp	r7, #16
   1b95c:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b960:	e59f8608 	ldr	r8, [pc, #1544]	; 1bf70 <_svfprintf_r+0x14e0>
   1b964:	da00001b 	ble	1b9d8 <_svfprintf_r+0xf48>
   1b968:	e1a03004 	mov	r3, r4
   1b96c:	e3a0a010 	mov	sl, #16
   1b970:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1b974:	ea000002 	b	1b984 <_svfprintf_r+0xef4>
   1b978:	e2477010 	sub	r7, r7, #16
   1b97c:	e3570010 	cmp	r7, #16
   1b980:	da000013 	ble	1b9d4 <_svfprintf_r+0xf44>
   1b984:	e2855001 	add	r5, r5, #1
   1b988:	e3550007 	cmp	r5, #7
   1b98c:	e2833010 	add	r3, r3, #16
   1b990:	e8860500 	stm	r6, {r8, sl}
   1b994:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1b998:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b99c:	d2866008 	addle	r6, r6, #8
   1b9a0:	dafffff4 	ble	1b978 <_svfprintf_r+0xee8>
   1b9a4:	e1a00004 	mov	r0, r4
   1b9a8:	e1a0100b 	mov	r1, fp
   1b9ac:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1b9b0:	eb0011ac 	bl	20068 <__ssprint_r>
   1b9b4:	e3500000 	cmp	r0, #0
   1b9b8:	1afffcf8 	bne	1ada0 <_svfprintf_r+0x310>
   1b9bc:	e2477010 	sub	r7, r7, #16
   1b9c0:	e3570010 	cmp	r7, #16
   1b9c4:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1b9c8:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1b9cc:	e28d606c 	add	r6, sp, #108	; 0x6c
   1b9d0:	caffffeb 	bgt	1b984 <_svfprintf_r+0xef4>
   1b9d4:	e1a04003 	mov	r4, r3
   1b9d8:	e2855001 	add	r5, r5, #1
   1b9dc:	e0844007 	add	r4, r4, r7
   1b9e0:	e3550007 	cmp	r5, #7
   1b9e4:	e5868000 	str	r8, [r6]
   1b9e8:	e5867004 	str	r7, [r6, #4]
   1b9ec:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1b9f0:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1b9f4:	d2866008 	addle	r6, r6, #8
   1b9f8:	dafffedb 	ble	1b56c <_svfprintf_r+0xadc>
   1b9fc:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1ba00:	e1a0100b 	mov	r1, fp
   1ba04:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1ba08:	eb001196 	bl	20068 <__ssprint_r>
   1ba0c:	e3500000 	cmp	r0, #0
   1ba10:	1afffce2 	bne	1ada0 <_svfprintf_r+0x310>
   1ba14:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1ba18:	e28d606c 	add	r6, sp, #108	; 0x6c
   1ba1c:	eafffed2 	b	1b56c <_svfprintf_r+0xadc>
   1ba20:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1ba24:	e35c0001 	cmp	ip, #1
   1ba28:	da00016a 	ble	1bfd8 <_svfprintf_r+0x1548>
   1ba2c:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1ba30:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1ba34:	e2855001 	add	r5, r5, #1
   1ba38:	e2844001 	add	r4, r4, #1
   1ba3c:	e3550007 	cmp	r5, #7
   1ba40:	e3a03001 	mov	r3, #1
   1ba44:	e586c000 	str	ip, [r6]
   1ba48:	e5863004 	str	r3, [r6, #4]
   1ba4c:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1ba50:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1ba54:	d2866008 	addle	r6, r6, #8
   1ba58:	ca000176 	bgt	1c038 <_svfprintf_r+0x15a8>
   1ba5c:	e59dc05c 	ldr	ip, [sp, #92]	; 0x5c
   1ba60:	e084400c 	add	r4, r4, ip
   1ba64:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
   1ba68:	e2855001 	add	r5, r5, #1
   1ba6c:	e586c000 	str	ip, [r6]
   1ba70:	e59dc05c 	ldr	ip, [sp, #92]	; 0x5c
   1ba74:	e3550007 	cmp	r5, #7
   1ba78:	e586c004 	str	ip, [r6, #4]
   1ba7c:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1ba80:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1ba84:	d2866008 	addle	r6, r6, #8
   1ba88:	ca000174 	bgt	1c060 <_svfprintf_r+0x15d0>
   1ba8c:	e28d0054 	add	r0, sp, #84	; 0x54
   1ba90:	e8900003 	ldm	r0, {r0, r1}
   1ba94:	e3a02000 	mov	r2, #0
   1ba98:	e3a03000 	mov	r3, #0
   1ba9c:	eb002532 	bl	24f6c <__cmpdf2>
   1baa0:	e3500000 	cmp	r0, #0
   1baa4:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1baa8:	0a0000b4 	beq	1bd80 <_svfprintf_r+0x12f0>
   1baac:	e24c3001 	sub	r3, ip, #1
   1bab0:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1bab4:	e2855001 	add	r5, r5, #1
   1bab8:	e28c2001 	add	r2, ip, #1
   1babc:	e0844003 	add	r4, r4, r3
   1bac0:	e3550007 	cmp	r5, #7
   1bac4:	e886000c 	stm	r6, {r2, r3}
   1bac8:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1bacc:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1bad0:	ca00001b 	bgt	1bb44 <_svfprintf_r+0x10b4>
   1bad4:	e2866008 	add	r6, r6, #8
   1bad8:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
   1badc:	e2855001 	add	r5, r5, #1
   1bae0:	e084400c 	add	r4, r4, ip
   1bae4:	e28d30e0 	add	r3, sp, #224	; 0xe0
   1bae8:	e3550007 	cmp	r5, #7
   1baec:	e8861008 	stm	r6, {r3, ip}
   1baf0:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1baf4:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1baf8:	dafffedf 	ble	1b67c <_svfprintf_r+0xbec>
   1bafc:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1bb00:	e1a0100b 	mov	r1, fp
   1bb04:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bb08:	eb001156 	bl	20068 <__ssprint_r>
   1bb0c:	e3500000 	cmp	r0, #0
   1bb10:	1afffca2 	bne	1ada0 <_svfprintf_r+0x310>
   1bb14:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1bb18:	e28d606c 	add	r6, sp, #108	; 0x6c
   1bb1c:	eafffed7 	b	1b680 <_svfprintf_r+0xbf0>
   1bb20:	e1a04003 	mov	r4, r3
   1bb24:	e2855001 	add	r5, r5, #1
   1bb28:	e0844007 	add	r4, r4, r7
   1bb2c:	e3550007 	cmp	r5, #7
   1bb30:	e5868000 	str	r8, [r6]
   1bb34:	e5867004 	str	r7, [r6, #4]
   1bb38:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1bb3c:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1bb40:	daffffe3 	ble	1bad4 <_svfprintf_r+0x1044>
   1bb44:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1bb48:	e1a0100b 	mov	r1, fp
   1bb4c:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bb50:	eb001144 	bl	20068 <__ssprint_r>
   1bb54:	e3500000 	cmp	r0, #0
   1bb58:	1afffc90 	bne	1ada0 <_svfprintf_r+0x310>
   1bb5c:	e28d606c 	add	r6, sp, #108	; 0x6c
   1bb60:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1bb64:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bb68:	eaffffda 	b	1bad8 <_svfprintf_r+0x1048>
   1bb6c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1bb70:	e1a0100b 	mov	r1, fp
   1bb74:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bb78:	eb00113a 	bl	20068 <__ssprint_r>
   1bb7c:	e3500000 	cmp	r0, #0
   1bb80:	0afffefe 	beq	1b780 <_svfprintf_r+0xcf0>
   1bb84:	eafffc85 	b	1ada0 <_svfprintf_r+0x310>
   1bb88:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1bb8c:	e1a0100b 	mov	r1, fp
   1bb90:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bb94:	eb001133 	bl	20068 <__ssprint_r>
   1bb98:	e3500000 	cmp	r0, #0
   1bb9c:	1afffc7f 	bne	1ada0 <_svfprintf_r+0x310>
   1bba0:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1bba4:	e28d606c 	add	r6, sp, #108	; 0x6c
   1bba8:	eafffe5d 	b	1b524 <_svfprintf_r+0xa94>
   1bbac:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1bbb0:	e1a0100b 	mov	r1, fp
   1bbb4:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bbb8:	eb00112a 	bl	20068 <__ssprint_r>
   1bbbc:	e3500000 	cmp	r0, #0
   1bbc0:	1afffc76 	bne	1ada0 <_svfprintf_r+0x310>
   1bbc4:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1bbc8:	e28d606c 	add	r6, sp, #108	; 0x6c
   1bbcc:	eafffe63 	b	1b560 <_svfprintf_r+0xad0>
   1bbd0:	e59d70f0 	ldr	r7, [sp, #240]	; 0xf0
   1bbd4:	e3570000 	cmp	r7, #0
   1bbd8:	da000169 	ble	1c184 <_svfprintf_r+0x16f4>
   1bbdc:	e59d504c 	ldr	r5, [sp, #76]	; 0x4c
   1bbe0:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
   1bbe4:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1bbe8:	e1570005 	cmp	r7, r5
   1bbec:	a1a07005 	movge	r7, r5
   1bbf0:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   1bbf4:	e3570000 	cmp	r7, #0
   1bbf8:	e08cc005 	add	ip, ip, r5
   1bbfc:	e58dc028 	str	ip, [sp, #40]	; 0x28
   1bc00:	da00000a 	ble	1bc30 <_svfprintf_r+0x11a0>
   1bc04:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bc08:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1bc0c:	e2855001 	add	r5, r5, #1
   1bc10:	e0844007 	add	r4, r4, r7
   1bc14:	e3550007 	cmp	r5, #7
   1bc18:	e586c000 	str	ip, [r6]
   1bc1c:	e5867004 	str	r7, [r6, #4]
   1bc20:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1bc24:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1bc28:	d2866008 	addle	r6, r6, #8
   1bc2c:	ca0002ac 	bgt	1c6e4 <_svfprintf_r+0x1c54>
   1bc30:	e59d504c 	ldr	r5, [sp, #76]	; 0x4c
   1bc34:	e1c77fc7 	bic	r7, r7, r7, asr #31
   1bc38:	e0677005 	rsb	r7, r7, r5
   1bc3c:	e3570000 	cmp	r7, #0
   1bc40:	da000084 	ble	1be58 <_svfprintf_r+0x13c8>
   1bc44:	e3570010 	cmp	r7, #16
   1bc48:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bc4c:	e59f831c 	ldr	r8, [pc, #796]	; 1bf70 <_svfprintf_r+0x14e0>
   1bc50:	da00006f 	ble	1be14 <_svfprintf_r+0x1384>
   1bc54:	e1a03004 	mov	r3, r4
   1bc58:	e3a0a010 	mov	sl, #16
   1bc5c:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1bc60:	ea000002 	b	1bc70 <_svfprintf_r+0x11e0>
   1bc64:	e2477010 	sub	r7, r7, #16
   1bc68:	e3570010 	cmp	r7, #16
   1bc6c:	da000067 	ble	1be10 <_svfprintf_r+0x1380>
   1bc70:	e2855001 	add	r5, r5, #1
   1bc74:	e3550007 	cmp	r5, #7
   1bc78:	e2833010 	add	r3, r3, #16
   1bc7c:	e8860500 	stm	r6, {r8, sl}
   1bc80:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1bc84:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1bc88:	d2866008 	addle	r6, r6, #8
   1bc8c:	dafffff4 	ble	1bc64 <_svfprintf_r+0x11d4>
   1bc90:	e1a00004 	mov	r0, r4
   1bc94:	e1a0100b 	mov	r1, fp
   1bc98:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bc9c:	eb0010f1 	bl	20068 <__ssprint_r>
   1bca0:	e3500000 	cmp	r0, #0
   1bca4:	1afffc3d 	bne	1ada0 <_svfprintf_r+0x310>
   1bca8:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1bcac:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bcb0:	e28d606c 	add	r6, sp, #108	; 0x6c
   1bcb4:	eaffffea 	b	1bc64 <_svfprintf_r+0x11d4>
   1bcb8:	e59d5064 	ldr	r5, [sp, #100]	; 0x64
   1bcbc:	e28d10d3 	add	r1, sp, #211	; 0xd3
   1bcc0:	e202000f 	and	r0, r2, #15
   1bcc4:	e7d5c000 	ldrb	ip, [r5, r0]
   1bcc8:	e1b02222 	lsrs	r2, r2, #4
   1bccc:	e1a00001 	mov	r0, r1
   1bcd0:	e5c1c000 	strb	ip, [r1]
   1bcd4:	e2411001 	sub	r1, r1, #1
   1bcd8:	1afffff8 	bne	1bcc0 <_svfprintf_r+0x1230>
   1bcdc:	e59dc014 	ldr	ip, [sp, #20]
   1bce0:	e060c00c 	rsb	ip, r0, ip
   1bce4:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1bce8:	e58dc028 	str	ip, [sp, #40]	; 0x28
   1bcec:	eafffc8d 	b	1af28 <_svfprintf_r+0x498>
   1bcf0:	e3520009 	cmp	r2, #9
   1bcf4:	828d00d3 	addhi	r0, sp, #211	; 0xd3
   1bcf8:	8a000006 	bhi	1bd18 <_svfprintf_r+0x1288>
   1bcfc:	e59d5068 	ldr	r5, [sp, #104]	; 0x68
   1bd00:	e2822030 	add	r2, r2, #48	; 0x30
   1bd04:	e28dc0d3 	add	ip, sp, #211	; 0xd3
   1bd08:	e5cd20d3 	strb	r2, [sp, #211]	; 0xd3
   1bd0c:	e58d5028 	str	r5, [sp, #40]	; 0x28
   1bd10:	e58dc038 	str	ip, [sp, #56]	; 0x38
   1bd14:	eafffc83 	b	1af28 <_svfprintf_r+0x498>
   1bd18:	e59f5240 	ldr	r5, [pc, #576]	; 1bf60 <_svfprintf_r+0x14d0>
   1bd1c:	e081c295 	umull	ip, r1, r5, r2
   1bd20:	e1a011a1 	lsr	r1, r1, #3
   1bd24:	e081c101 	add	ip, r1, r1, lsl #2
   1bd28:	e042208c 	sub	r2, r2, ip, lsl #1
   1bd2c:	e1a0c000 	mov	ip, r0
   1bd30:	e2820030 	add	r0, r2, #48	; 0x30
   1bd34:	e2512000 	subs	r2, r1, #0
   1bd38:	e5cc0000 	strb	r0, [ip]
   1bd3c:	e24c0001 	sub	r0, ip, #1
   1bd40:	1afffff4 	bne	1bd18 <_svfprintf_r+0x1288>
   1bd44:	e59d5014 	ldr	r5, [sp, #20]
   1bd48:	e06c5005 	rsb	r5, ip, r5
   1bd4c:	e58dc038 	str	ip, [sp, #56]	; 0x38
   1bd50:	e58d5028 	str	r5, [sp, #40]	; 0x28
   1bd54:	eafffc73 	b	1af28 <_svfprintf_r+0x498>
   1bd58:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1bd5c:	e1a0100b 	mov	r1, fp
   1bd60:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bd64:	eb0010bf 	bl	20068 <__ssprint_r>
   1bd68:	e3500000 	cmp	r0, #0
   1bd6c:	1afffc0b 	bne	1ada0 <_svfprintf_r+0x310>
   1bd70:	e5dd30ff 	ldrb	r3, [sp, #255]	; 0xff
   1bd74:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1bd78:	e28d606c 	add	r6, sp, #108	; 0x6c
   1bd7c:	eafffdda 	b	1b4ec <_svfprintf_r+0xa5c>
   1bd80:	e24c7001 	sub	r7, ip, #1
   1bd84:	e3570000 	cmp	r7, #0
   1bd88:	daffff52 	ble	1bad8 <_svfprintf_r+0x1048>
   1bd8c:	e3570010 	cmp	r7, #16
   1bd90:	e59f81d8 	ldr	r8, [pc, #472]	; 1bf70 <_svfprintf_r+0x14e0>
   1bd94:	daffff62 	ble	1bb24 <_svfprintf_r+0x1094>
   1bd98:	e1a03004 	mov	r3, r4
   1bd9c:	e3a0a010 	mov	sl, #16
   1bda0:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1bda4:	ea000002 	b	1bdb4 <_svfprintf_r+0x1324>
   1bda8:	e2477010 	sub	r7, r7, #16
   1bdac:	e3570010 	cmp	r7, #16
   1bdb0:	daffff5a 	ble	1bb20 <_svfprintf_r+0x1090>
   1bdb4:	e2855001 	add	r5, r5, #1
   1bdb8:	e3550007 	cmp	r5, #7
   1bdbc:	e2833010 	add	r3, r3, #16
   1bdc0:	e8860500 	stm	r6, {r8, sl}
   1bdc4:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1bdc8:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1bdcc:	d2866008 	addle	r6, r6, #8
   1bdd0:	dafffff4 	ble	1bda8 <_svfprintf_r+0x1318>
   1bdd4:	e1a00004 	mov	r0, r4
   1bdd8:	e1a0100b 	mov	r1, fp
   1bddc:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bde0:	eb0010a0 	bl	20068 <__ssprint_r>
   1bde4:	e3500000 	cmp	r0, #0
   1bde8:	1afffbec 	bne	1ada0 <_svfprintf_r+0x310>
   1bdec:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1bdf0:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bdf4:	e28d606c 	add	r6, sp, #108	; 0x6c
   1bdf8:	eaffffea 	b	1bda8 <_svfprintf_r+0x1318>
   1bdfc:	e59d5014 	ldr	r5, [sp, #20]
   1be00:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1be04:	e06c5005 	rsb	r5, ip, r5
   1be08:	e58d5028 	str	r5, [sp, #40]	; 0x28
   1be0c:	eafffc45 	b	1af28 <_svfprintf_r+0x498>
   1be10:	e1a04003 	mov	r4, r3
   1be14:	e2855001 	add	r5, r5, #1
   1be18:	e0844007 	add	r4, r4, r7
   1be1c:	e3550007 	cmp	r5, #7
   1be20:	e5868000 	str	r8, [r6]
   1be24:	e5867004 	str	r7, [r6, #4]
   1be28:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1be2c:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1be30:	d2866008 	addle	r6, r6, #8
   1be34:	da000007 	ble	1be58 <_svfprintf_r+0x13c8>
   1be38:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1be3c:	e1a0100b 	mov	r1, fp
   1be40:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1be44:	eb001087 	bl	20068 <__ssprint_r>
   1be48:	e3500000 	cmp	r0, #0
   1be4c:	1afffbd3 	bne	1ada0 <_svfprintf_r+0x310>
   1be50:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1be54:	e28d606c 	add	r6, sp, #108	; 0x6c
   1be58:	e59d30f0 	ldr	r3, [sp, #240]	; 0xf0
   1be5c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1be60:	e153000c 	cmp	r3, ip
   1be64:	ba000044 	blt	1bf7c <_svfprintf_r+0x14ec>
   1be68:	e59d5018 	ldr	r5, [sp, #24]
   1be6c:	e3150001 	tst	r5, #1
   1be70:	1a000041 	bne	1bf7c <_svfprintf_r+0x14ec>
   1be74:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
   1be78:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1be7c:	e085200c 	add	r2, r5, ip
   1be80:	e59d5028 	ldr	r5, [sp, #40]	; 0x28
   1be84:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1be88:	e0628005 	rsb	r8, r2, r5
   1be8c:	e063300c 	rsb	r3, r3, ip
   1be90:	e1530008 	cmp	r3, r8
   1be94:	b1a08003 	movlt	r8, r3
   1be98:	a1a08008 	movge	r8, r8
   1be9c:	e3580000 	cmp	r8, #0
   1bea0:	da000008 	ble	1bec8 <_svfprintf_r+0x1438>
   1bea4:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bea8:	e2855001 	add	r5, r5, #1
   1beac:	e0844008 	add	r4, r4, r8
   1beb0:	e3550007 	cmp	r5, #7
   1beb4:	e8860104 	stm	r6, {r2, r8}
   1beb8:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1bebc:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1bec0:	d2866008 	addle	r6, r6, #8
   1bec4:	ca00020f 	bgt	1c708 <_svfprintf_r+0x1c78>
   1bec8:	e1c87fc8 	bic	r7, r8, r8, asr #31
   1becc:	e0677003 	rsb	r7, r7, r3
   1bed0:	e3570000 	cmp	r7, #0
   1bed4:	dafffde9 	ble	1b680 <_svfprintf_r+0xbf0>
   1bed8:	e3570010 	cmp	r7, #16
   1bedc:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bee0:	e59f8088 	ldr	r8, [pc, #136]	; 1bf70 <_svfprintf_r+0x14e0>
   1bee4:	dafffe2a 	ble	1b794 <_svfprintf_r+0xd04>
   1bee8:	e1a03004 	mov	r3, r4
   1beec:	e3a0a010 	mov	sl, #16
   1bef0:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1bef4:	ea000002 	b	1bf04 <_svfprintf_r+0x1474>
   1bef8:	e2477010 	sub	r7, r7, #16
   1befc:	e3570010 	cmp	r7, #16
   1bf00:	dafffe22 	ble	1b790 <_svfprintf_r+0xd00>
   1bf04:	e2855001 	add	r5, r5, #1
   1bf08:	e3550007 	cmp	r5, #7
   1bf0c:	e2833010 	add	r3, r3, #16
   1bf10:	e8860500 	stm	r6, {r8, sl}
   1bf14:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1bf18:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1bf1c:	d2866008 	addle	r6, r6, #8
   1bf20:	dafffff4 	ble	1bef8 <_svfprintf_r+0x1468>
   1bf24:	e1a00004 	mov	r0, r4
   1bf28:	e1a0100b 	mov	r1, fp
   1bf2c:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bf30:	eb00104c 	bl	20068 <__ssprint_r>
   1bf34:	e3500000 	cmp	r0, #0
   1bf38:	1afffb98 	bne	1ada0 <_svfprintf_r+0x310>
   1bf3c:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1bf40:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bf44:	e28d606c 	add	r6, sp, #108	; 0x6c
   1bf48:	eaffffea 	b	1bef8 <_svfprintf_r+0x1468>
   1bf4c:	00025934 	.word	0x00025934
   1bf50:	000269f0 	.word	0x000269f0
   1bf54:	000269f4 	.word	0x000269f4
   1bf58:	00026a00 	.word	0x00026a00
   1bf5c:	00026a14 	.word	0x00026a14
   1bf60:	cccccccd 	.word	0xcccccccd
   1bf64:	000269f8 	.word	0x000269f8
   1bf68:	000269fc 	.word	0x000269fc
   1bf6c:	00026a30 	.word	0x00026a30
   1bf70:	00025944 	.word	0x00025944
   1bf74:	66666667 	.word	0x66666667
   1bf78:	00026a28 	.word	0x00026a28
   1bf7c:	e59dc05c 	ldr	ip, [sp, #92]	; 0x5c
   1bf80:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bf84:	e084400c 	add	r4, r4, ip
   1bf88:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
   1bf8c:	e2855001 	add	r5, r5, #1
   1bf90:	e586c000 	str	ip, [r6]
   1bf94:	e59dc05c 	ldr	ip, [sp, #92]	; 0x5c
   1bf98:	e3550007 	cmp	r5, #7
   1bf9c:	e586c004 	str	ip, [r6, #4]
   1bfa0:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1bfa4:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1bfa8:	d2866008 	addle	r6, r6, #8
   1bfac:	daffffb0 	ble	1be74 <_svfprintf_r+0x13e4>
   1bfb0:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1bfb4:	e1a0100b 	mov	r1, fp
   1bfb8:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1bfbc:	eb001029 	bl	20068 <__ssprint_r>
   1bfc0:	e3500000 	cmp	r0, #0
   1bfc4:	1afffb75 	bne	1ada0 <_svfprintf_r+0x310>
   1bfc8:	e59d30f0 	ldr	r3, [sp, #240]	; 0xf0
   1bfcc:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1bfd0:	e28d606c 	add	r6, sp, #108	; 0x6c
   1bfd4:	eaffffa6 	b	1be74 <_svfprintf_r+0x13e4>
   1bfd8:	e59d5018 	ldr	r5, [sp, #24]
   1bfdc:	e3150001 	tst	r5, #1
   1bfe0:	1afffe91 	bne	1ba2c <_svfprintf_r+0xf9c>
   1bfe4:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1bfe8:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1bfec:	e2855001 	add	r5, r5, #1
   1bff0:	e2844001 	add	r4, r4, #1
   1bff4:	e3a03001 	mov	r3, #1
   1bff8:	e3550007 	cmp	r5, #7
   1bffc:	e586c000 	str	ip, [r6]
   1c000:	e5863004 	str	r3, [r6, #4]
   1c004:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1c008:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1c00c:	dafffeb0 	ble	1bad4 <_svfprintf_r+0x1044>
   1c010:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c014:	e1a0100b 	mov	r1, fp
   1c018:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c01c:	eb001011 	bl	20068 <__ssprint_r>
   1c020:	e3500000 	cmp	r0, #0
   1c024:	1afffb5d 	bne	1ada0 <_svfprintf_r+0x310>
   1c028:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c02c:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1c030:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c034:	eafffea7 	b	1bad8 <_svfprintf_r+0x1048>
   1c038:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c03c:	e1a0100b 	mov	r1, fp
   1c040:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c044:	eb001007 	bl	20068 <__ssprint_r>
   1c048:	e3500000 	cmp	r0, #0
   1c04c:	1afffb53 	bne	1ada0 <_svfprintf_r+0x310>
   1c050:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c054:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1c058:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c05c:	eafffe7e 	b	1ba5c <_svfprintf_r+0xfcc>
   1c060:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c064:	e1a0100b 	mov	r1, fp
   1c068:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c06c:	eb000ffd 	bl	20068 <__ssprint_r>
   1c070:	e3500000 	cmp	r0, #0
   1c074:	1afffb49 	bne	1ada0 <_svfprintf_r+0x310>
   1c078:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c07c:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1c080:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c084:	eafffe80 	b	1ba8c <_svfprintf_r+0xffc>
   1c088:	eb000fd1 	bl	1ffd4 <__fpclassifyd>
   1c08c:	e3500000 	cmp	r0, #0
   1c090:	1a000082 	bne	1c2a0 <_svfprintf_r+0x1810>
   1c094:	e59d5048 	ldr	r5, [sp, #72]	; 0x48
   1c098:	e51f313c 	ldr	r3, [pc, #-316]	; 1bf64 <_svfprintf_r+0x14d4>
   1c09c:	e59dc018 	ldr	ip, [sp, #24]
   1c0a0:	e51f2140 	ldr	r2, [pc, #-320]	; 1bf68 <_svfprintf_r+0x14d8>
   1c0a4:	e3550047 	cmp	r5, #71	; 0x47
   1c0a8:	e3a04003 	mov	r4, #3
   1c0ac:	d1a02003 	movle	r2, r3
   1c0b0:	e3ccc080 	bic	ip, ip, #128	; 0x80
   1c0b4:	e58d401c 	str	r4, [sp, #28]
   1c0b8:	e58d003c 	str	r0, [sp, #60]	; 0x3c
   1c0bc:	e58d2038 	str	r2, [sp, #56]	; 0x38
   1c0c0:	e58dc018 	str	ip, [sp, #24]
   1c0c4:	e5dd30ff 	ldrb	r3, [sp, #255]	; 0xff
   1c0c8:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1c0cc:	e58d004c 	str	r0, [sp, #76]	; 0x4c
   1c0d0:	eafffb9b 	b	1af44 <_svfprintf_r+0x4b4>
   1c0d4:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1c0d8:	e59cc000 	ldr	ip, [ip]
   1c0dc:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1c0e0:	e58dc054 	str	ip, [sp, #84]	; 0x54
   1c0e4:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1c0e8:	e5955004 	ldr	r5, [r5, #4]
   1c0ec:	e28cc008 	add	ip, ip, #8
   1c0f0:	e58d5058 	str	r5, [sp, #88]	; 0x58
   1c0f4:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1c0f8:	eafffbdf 	b	1b07c <_svfprintf_r+0x5ec>
   1c0fc:	e59d4018 	ldr	r4, [sp, #24]
   1c100:	e3140040 	tst	r4, #64	; 0x40
   1c104:	0a000111 	beq	1c550 <_svfprintf_r+0x1ac0>
   1c108:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1c10c:	e59dc020 	ldr	ip, [sp, #32]
   1c110:	e5953000 	ldr	r3, [r5]
   1c114:	e2855004 	add	r5, r5, #4
   1c118:	e58d5024 	str	r5, [sp, #36]	; 0x24
   1c11c:	e1c3c0b0 	strh	ip, [r3]
   1c120:	eafffa7f 	b	1ab24 <_svfprintf_r+0x94>
   1c124:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
   1c128:	e5952000 	ldr	r2, [r5]
   1c12c:	e2855004 	add	r5, r5, #4
   1c130:	e2920000 	adds	r0, r2, #0
   1c134:	13a00001 	movne	r0, #1
   1c138:	e58d5024 	str	r5, [sp, #36]	; 0x24
   1c13c:	eafffc00 	b	1b144 <_svfprintf_r+0x6b4>
   1c140:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   1c144:	e59c2000 	ldr	r2, [ip]
   1c148:	e28cc004 	add	ip, ip, #4
   1c14c:	e2920000 	adds	r0, r2, #0
   1c150:	e3a01001 	mov	r1, #1
   1c154:	13a00001 	movne	r0, #1
   1c158:	e58dc024 	str	ip, [sp, #36]	; 0x24
   1c15c:	eafffbf8 	b	1b144 <_svfprintf_r+0x6b4>
   1c160:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c164:	e1a0100b 	mov	r1, fp
   1c168:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c16c:	eb000fbd 	bl	20068 <__ssprint_r>
   1c170:	e3500000 	cmp	r0, #0
   1c174:	1afffb09 	bne	1ada0 <_svfprintf_r+0x310>
   1c178:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c17c:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c180:	eafffdaa 	b	1b830 <_svfprintf_r+0xda0>
   1c184:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1c188:	e51f3224 	ldr	r3, [pc, #-548]	; 1bf6c <_svfprintf_r+0x14dc>
   1c18c:	e2855001 	add	r5, r5, #1
   1c190:	e5863000 	str	r3, [r6]
   1c194:	e2844001 	add	r4, r4, #1
   1c198:	e3550007 	cmp	r5, #7
   1c19c:	e3a03001 	mov	r3, #1
   1c1a0:	e5863004 	str	r3, [r6, #4]
   1c1a4:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1c1a8:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1c1ac:	d2866008 	addle	r6, r6, #8
   1c1b0:	ca0000fc 	bgt	1c5a8 <_svfprintf_r+0x1b18>
   1c1b4:	e3570000 	cmp	r7, #0
   1c1b8:	1a000005 	bne	1c1d4 <_svfprintf_r+0x1744>
   1c1bc:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1c1c0:	e35c0000 	cmp	ip, #0
   1c1c4:	1a000002 	bne	1c1d4 <_svfprintf_r+0x1744>
   1c1c8:	e59d5018 	ldr	r5, [sp, #24]
   1c1cc:	e3150001 	tst	r5, #1
   1c1d0:	0afffd2a 	beq	1b680 <_svfprintf_r+0xbf0>
   1c1d4:	e59dc05c 	ldr	ip, [sp, #92]	; 0x5c
   1c1d8:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1c1dc:	e084400c 	add	r4, r4, ip
   1c1e0:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
   1c1e4:	e2855001 	add	r5, r5, #1
   1c1e8:	e586c000 	str	ip, [r6]
   1c1ec:	e59dc05c 	ldr	ip, [sp, #92]	; 0x5c
   1c1f0:	e3550007 	cmp	r5, #7
   1c1f4:	e586c004 	str	ip, [r6, #4]
   1c1f8:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1c1fc:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1c200:	d2866008 	addle	r6, r6, #8
   1c204:	ca000110 	bgt	1c64c <_svfprintf_r+0x1bbc>
   1c208:	e2677000 	rsb	r7, r7, #0
   1c20c:	e3570000 	cmp	r7, #0
   1c210:	da000101 	ble	1c61c <_svfprintf_r+0x1b8c>
   1c214:	e3570010 	cmp	r7, #16
   1c218:	e51f82b0 	ldr	r8, [pc, #-688]	; 1bf70 <_svfprintf_r+0x14e0>
   1c21c:	da0000ec 	ble	1c5d4 <_svfprintf_r+0x1b44>
   1c220:	e1a03004 	mov	r3, r4
   1c224:	e3a0a010 	mov	sl, #16
   1c228:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1c22c:	ea000002 	b	1c23c <_svfprintf_r+0x17ac>
   1c230:	e2477010 	sub	r7, r7, #16
   1c234:	e3570010 	cmp	r7, #16
   1c238:	da0000e4 	ble	1c5d0 <_svfprintf_r+0x1b40>
   1c23c:	e2855001 	add	r5, r5, #1
   1c240:	e3550007 	cmp	r5, #7
   1c244:	e2833010 	add	r3, r3, #16
   1c248:	e8860500 	stm	r6, {r8, sl}
   1c24c:	e58d30dc 	str	r3, [sp, #220]	; 0xdc
   1c250:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1c254:	d2866008 	addle	r6, r6, #8
   1c258:	dafffff4 	ble	1c230 <_svfprintf_r+0x17a0>
   1c25c:	e1a00004 	mov	r0, r4
   1c260:	e1a0100b 	mov	r1, fp
   1c264:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c268:	eb000f7e 	bl	20068 <__ssprint_r>
   1c26c:	e3500000 	cmp	r0, #0
   1c270:	1afffaca 	bne	1ada0 <_svfprintf_r+0x310>
   1c274:	e59d30dc 	ldr	r3, [sp, #220]	; 0xdc
   1c278:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1c27c:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c280:	eaffffea 	b	1c230 <_svfprintf_r+0x17a0>
   1c284:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
   1c288:	e1c44fc4 	bic	r4, r4, r4, asr #31
   1c28c:	e58d401c 	str	r4, [sp, #28]
   1c290:	e5dd30ff 	ldrb	r3, [sp, #255]	; 0xff
   1c294:	e58d7024 	str	r7, [sp, #36]	; 0x24
   1c298:	e58d504c 	str	r5, [sp, #76]	; 0x4c
   1c29c:	eafffb28 	b	1af44 <_svfprintf_r+0x4b4>
   1c2a0:	e3740001 	cmn	r4, #1
   1c2a4:	0a0000f3 	beq	1c678 <_svfprintf_r+0x1be8>
   1c2a8:	e59d5048 	ldr	r5, [sp, #72]	; 0x48
   1c2ac:	e3550067 	cmp	r5, #103	; 0x67
   1c2b0:	13550047 	cmpne	r5, #71	; 0x47
   1c2b4:	13a0a000 	movne	sl, #0
   1c2b8:	03a0a001 	moveq	sl, #1
   1c2bc:	1a000003 	bne	1c2d0 <_svfprintf_r+0x1840>
   1c2c0:	e3540000 	cmp	r4, #0
   1c2c4:	03a04001 	moveq	r4, #1
   1c2c8:	13a0a001 	movne	sl, #1
   1c2cc:	01a0a004 	moveq	sl, r4
   1c2d0:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
   1c2d4:	e3530000 	cmp	r3, #0
   1c2d8:	b3a0502d 	movlt	r5, #45	; 0x2d
   1c2dc:	e59dc018 	ldr	ip, [sp, #24]
   1c2e0:	b58d503c 	strlt	r5, [sp, #60]	; 0x3c
   1c2e4:	e59d5048 	ldr	r5, [sp, #72]	; 0x48
   1c2e8:	e38ccc01 	orr	ip, ip, #256	; 0x100
   1c2ec:	e58dc018 	str	ip, [sp, #24]
   1c2f0:	b2838102 	addlt	r8, r3, #-2147483648	; 0x80000000
   1c2f4:	a3a0c000 	movge	ip, #0
   1c2f8:	e2453066 	sub	r3, r5, #102	; 0x66
   1c2fc:	a58dc03c 	strge	ip, [sp, #60]	; 0x3c
   1c300:	a59d8054 	ldrge	r8, [sp, #84]	; 0x54
   1c304:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
   1c308:	e2735000 	rsbs	r5, r3, #0
   1c30c:	e0a55003 	adc	r5, r5, r3
   1c310:	e58d501c 	str	r5, [sp, #28]
   1c314:	e35c0046 	cmp	ip, #70	; 0x46
   1c318:	03855001 	orreq	r5, r5, #1
   1c31c:	e3550000 	cmp	r5, #0
   1c320:	11a07004 	movne	r7, r4
   1c324:	13a03003 	movne	r3, #3
   1c328:	1a000005 	bne	1c344 <_svfprintf_r+0x18b4>
   1c32c:	e35c0065 	cmp	ip, #101	; 0x65
   1c330:	135c0045 	cmpne	ip, #69	; 0x45
   1c334:	02847001 	addeq	r7, r4, #1
   1c338:	03a03002 	moveq	r3, #2
   1c33c:	11a07004 	movne	r7, r4
   1c340:	13a03002 	movne	r3, #2
   1c344:	e28dc0f0 	add	ip, sp, #240	; 0xf0
   1c348:	e58dc004 	str	ip, [sp, #4]
   1c34c:	e28dc0f4 	add	ip, sp, #244	; 0xf4
   1c350:	e58dc008 	str	ip, [sp, #8]
   1c354:	e1a01008 	mov	r1, r8
   1c358:	e28dc0f8 	add	ip, sp, #248	; 0xf8
   1c35c:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
   1c360:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c364:	e58dc00c 	str	ip, [sp, #12]
   1c368:	e58d7000 	str	r7, [sp]
   1c36c:	eb0001e0 	bl	1caf4 <_dtoa_r>
   1c370:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
   1c374:	e35c0047 	cmp	ip, #71	; 0x47
   1c378:	135c0067 	cmpne	ip, #103	; 0x67
   1c37c:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1c380:	1a000003 	bne	1c394 <_svfprintf_r+0x1904>
   1c384:	e59dc018 	ldr	ip, [sp, #24]
   1c388:	e31c0001 	tst	ip, #1
   1c38c:	059d50f8 	ldreq	r5, [sp, #248]	; 0xf8
   1c390:	0a000019 	beq	1c3fc <_svfprintf_r+0x196c>
   1c394:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1c398:	e3550000 	cmp	r5, #0
   1c39c:	e08c5007 	add	r5, ip, r7
   1c3a0:	0a000004 	beq	1c3b8 <_svfprintf_r+0x1928>
   1c3a4:	e5dc3000 	ldrb	r3, [ip]
   1c3a8:	e3530030 	cmp	r3, #48	; 0x30
   1c3ac:	0a0000b8 	beq	1c694 <_svfprintf_r+0x1c04>
   1c3b0:	e59d70f0 	ldr	r7, [sp, #240]	; 0xf0
   1c3b4:	e0855007 	add	r5, r5, r7
   1c3b8:	e1a00008 	mov	r0, r8
   1c3bc:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
   1c3c0:	e3a02000 	mov	r2, #0
   1c3c4:	e3a03000 	mov	r3, #0
   1c3c8:	eb0022e7 	bl	24f6c <__cmpdf2>
   1c3cc:	e3500000 	cmp	r0, #0
   1c3d0:	058d50f8 	streq	r5, [sp, #248]	; 0xf8
   1c3d4:	0a000008 	beq	1c3fc <_svfprintf_r+0x196c>
   1c3d8:	e59d30f8 	ldr	r3, [sp, #248]	; 0xf8
   1c3dc:	e1550003 	cmp	r5, r3
   1c3e0:	91a05003 	movls	r5, r3
   1c3e4:	9a000004 	bls	1c3fc <_svfprintf_r+0x196c>
   1c3e8:	e3a02030 	mov	r2, #48	; 0x30
   1c3ec:	e4c32001 	strb	r2, [r3], #1
   1c3f0:	e1530005 	cmp	r3, r5
   1c3f4:	e58d30f8 	str	r3, [sp, #248]	; 0xf8
   1c3f8:	1afffffb 	bne	1c3ec <_svfprintf_r+0x195c>
   1c3fc:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1c400:	e35a0000 	cmp	sl, #0
   1c404:	e06c5005 	rsb	r5, ip, r5
   1c408:	e58d5030 	str	r5, [sp, #48]	; 0x30
   1c40c:	0a0000d5 	beq	1c768 <_svfprintf_r+0x1cd8>
   1c410:	e59d30f0 	ldr	r3, [sp, #240]	; 0xf0
   1c414:	e3730003 	cmn	r3, #3
   1c418:	ba000001 	blt	1c424 <_svfprintf_r+0x1994>
   1c41c:	e1540003 	cmp	r4, r3
   1c420:	aa0000d7 	bge	1c784 <_svfprintf_r+0x1cf4>
   1c424:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1c428:	e2444002 	sub	r4, r4, #2
   1c42c:	e58d4048 	str	r4, [sp, #72]	; 0x48
   1c430:	e2433001 	sub	r3, r3, #1
   1c434:	e3530000 	cmp	r3, #0
   1c438:	e58d30f0 	str	r3, [sp, #240]	; 0xf0
   1c43c:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
   1c440:	b2633000 	rsblt	r3, r3, #0
   1c444:	b3a0202d 	movlt	r2, #45	; 0x2d
   1c448:	a3a0202b 	movge	r2, #43	; 0x2b
   1c44c:	e3530009 	cmp	r3, #9
   1c450:	e5cdc0e0 	strb	ip, [sp, #224]	; 0xe0
   1c454:	e5cd20e1 	strb	r2, [sp, #225]	; 0xe1
   1c458:	da0000e1 	ble	1c7e4 <_svfprintf_r+0x1d54>
   1c45c:	e28dc0ef 	add	ip, sp, #239	; 0xef
   1c460:	e1a0000c 	mov	r0, ip
   1c464:	e51f24f8 	ldr	r2, [pc, #-1272]	; 1bf74 <_svfprintf_r+0x14e4>
   1c468:	e0c14392 	smull	r4, r1, r2, r3
   1c46c:	e1a02fc3 	asr	r2, r3, #31
   1c470:	e0622141 	rsb	r2, r2, r1, asr #2
   1c474:	e0821102 	add	r1, r2, r2, lsl #2
   1c478:	e0431081 	sub	r1, r3, r1, lsl #1
   1c47c:	e2811030 	add	r1, r1, #48	; 0x30
   1c480:	e3520009 	cmp	r2, #9
   1c484:	e1a03002 	mov	r3, r2
   1c488:	e1a02000 	mov	r2, r0
   1c48c:	e5601001 	strb	r1, [r0, #-1]!
   1c490:	cafffff3 	bgt	1c464 <_svfprintf_r+0x19d4>
   1c494:	e2833030 	add	r3, r3, #48	; 0x30
   1c498:	e20310ff 	and	r1, r3, #255	; 0xff
   1c49c:	e5621002 	strb	r1, [r2, #-2]!
   1c4a0:	e15c0002 	cmp	ip, r2
   1c4a4:	928d10e2 	addls	r1, sp, #226	; 0xe2
   1c4a8:	9a000007 	bls	1c4cc <_svfprintf_r+0x1a3c>
   1c4ac:	e28d30e2 	add	r3, sp, #226	; 0xe2
   1c4b0:	e28d00ee 	add	r0, sp, #238	; 0xee
   1c4b4:	ea000000 	b	1c4bc <_svfprintf_r+0x1a2c>
   1c4b8:	e5f21001 	ldrb	r1, [r2, #1]!
   1c4bc:	e4c31001 	strb	r1, [r3], #1
   1c4c0:	e1520000 	cmp	r2, r0
   1c4c4:	e1a01003 	mov	r1, r3
   1c4c8:	1afffffa 	bne	1c4b8 <_svfprintf_r+0x1a28>
   1c4cc:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   1c4d0:	e28d30e0 	add	r3, sp, #224	; 0xe0
   1c4d4:	e0633001 	rsb	r3, r3, r1
   1c4d8:	e083c005 	add	ip, r3, r5
   1c4dc:	e3550001 	cmp	r5, #1
   1c4e0:	e58d3060 	str	r3, [sp, #96]	; 0x60
   1c4e4:	e58dc028 	str	ip, [sp, #40]	; 0x28
   1c4e8:	da0000cf 	ble	1c82c <_svfprintf_r+0x1d9c>
   1c4ec:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
   1c4f0:	e28cc001 	add	ip, ip, #1
   1c4f4:	e1cc4fcc 	bic	r4, ip, ip, asr #31
   1c4f8:	e3a05000 	mov	r5, #0
   1c4fc:	e58dc028 	str	ip, [sp, #40]	; 0x28
   1c500:	e58d401c 	str	r4, [sp, #28]
   1c504:	e58d504c 	str	r5, [sp, #76]	; 0x4c
   1c508:	e59d503c 	ldr	r5, [sp, #60]	; 0x3c
   1c50c:	e3550000 	cmp	r5, #0
   1c510:	05dd30ff 	ldrbeq	r3, [sp, #255]	; 0xff
   1c514:	0afffa8a 	beq	1af44 <_svfprintf_r+0x4b4>
   1c518:	e3a0302d 	mov	r3, #45	; 0x2d
   1c51c:	e3a0c000 	mov	ip, #0
   1c520:	e5cd30ff 	strb	r3, [sp, #255]	; 0xff
   1c524:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
   1c528:	eafffa87 	b	1af4c <_svfprintf_r+0x4bc>
   1c52c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c530:	e1a0100b 	mov	r1, fp
   1c534:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c538:	eb000eca 	bl	20068 <__ssprint_r>
   1c53c:	e3500000 	cmp	r0, #0
   1c540:	1afffa16 	bne	1ada0 <_svfprintf_r+0x310>
   1c544:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c548:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c54c:	eafffccb 	b	1b880 <_svfprintf_r+0xdf0>
   1c550:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1c554:	e59d5020 	ldr	r5, [sp, #32]
   1c558:	e5943000 	ldr	r3, [r4]
   1c55c:	e2844004 	add	r4, r4, #4
   1c560:	e58d4024 	str	r4, [sp, #36]	; 0x24
   1c564:	e5835000 	str	r5, [r3]
   1c568:	eafff96d 	b	1ab24 <_svfprintf_r+0x94>
   1c56c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c570:	e3a01040 	mov	r1, #64	; 0x40
   1c574:	ebffee2f 	bl	17e38 <_malloc_r>
   1c578:	e3500000 	cmp	r0, #0
   1c57c:	13a03040 	movne	r3, #64	; 0x40
   1c580:	e58b0000 	str	r0, [fp]
   1c584:	e58b0010 	str	r0, [fp, #16]
   1c588:	158b3014 	strne	r3, [fp, #20]
   1c58c:	1afff950 	bne	1aad4 <_svfprintf_r+0x44>
   1c590:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
   1c594:	e3a0300c 	mov	r3, #12
   1c598:	e3e05000 	mvn	r5, #0
   1c59c:	e5843000 	str	r3, [r4]
   1c5a0:	e58d5020 	str	r5, [sp, #32]
   1c5a4:	eafffa02 	b	1adb4 <_svfprintf_r+0x324>
   1c5a8:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c5ac:	e1a0100b 	mov	r1, fp
   1c5b0:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c5b4:	eb000eab 	bl	20068 <__ssprint_r>
   1c5b8:	e3500000 	cmp	r0, #0
   1c5bc:	1afff9f7 	bne	1ada0 <_svfprintf_r+0x310>
   1c5c0:	e59d70f0 	ldr	r7, [sp, #240]	; 0xf0
   1c5c4:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c5c8:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c5cc:	eafffef8 	b	1c1b4 <_svfprintf_r+0x1724>
   1c5d0:	e1a04003 	mov	r4, r3
   1c5d4:	e2855001 	add	r5, r5, #1
   1c5d8:	e0844007 	add	r4, r4, r7
   1c5dc:	e3550007 	cmp	r5, #7
   1c5e0:	e5868000 	str	r8, [r6]
   1c5e4:	e5867004 	str	r7, [r6, #4]
   1c5e8:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1c5ec:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1c5f0:	d2866008 	addle	r6, r6, #8
   1c5f4:	da000008 	ble	1c61c <_svfprintf_r+0x1b8c>
   1c5f8:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c5fc:	e1a0100b 	mov	r1, fp
   1c600:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c604:	eb000e97 	bl	20068 <__ssprint_r>
   1c608:	e3500000 	cmp	r0, #0
   1c60c:	1afff9e3 	bne	1ada0 <_svfprintf_r+0x310>
   1c610:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c614:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1c618:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c61c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1c620:	e084400c 	add	r4, r4, ip
   1c624:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   1c628:	e2855001 	add	r5, r5, #1
   1c62c:	e586c000 	str	ip, [r6]
   1c630:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1c634:	e3550007 	cmp	r5, #7
   1c638:	e586c004 	str	ip, [r6, #4]
   1c63c:	e58d40dc 	str	r4, [sp, #220]	; 0xdc
   1c640:	e58d50d8 	str	r5, [sp, #216]	; 0xd8
   1c644:	dafffc0c 	ble	1b67c <_svfprintf_r+0xbec>
   1c648:	eafffc59 	b	1b7b4 <_svfprintf_r+0xd24>
   1c64c:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c650:	e1a0100b 	mov	r1, fp
   1c654:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c658:	eb000e82 	bl	20068 <__ssprint_r>
   1c65c:	e3500000 	cmp	r0, #0
   1c660:	1afff9ce 	bne	1ada0 <_svfprintf_r+0x310>
   1c664:	e59d70f0 	ldr	r7, [sp, #240]	; 0xf0
   1c668:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c66c:	e59d50d8 	ldr	r5, [sp, #216]	; 0xd8
   1c670:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c674:	eafffee3 	b	1c208 <_svfprintf_r+0x1778>
   1c678:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1c67c:	e3540067 	cmp	r4, #103	; 0x67
   1c680:	13540047 	cmpne	r4, #71	; 0x47
   1c684:	13a0a000 	movne	sl, #0
   1c688:	03a0a001 	moveq	sl, #1
   1c68c:	e3a04006 	mov	r4, #6
   1c690:	eaffff0e 	b	1c2d0 <_svfprintf_r+0x1840>
   1c694:	e1a00008 	mov	r0, r8
   1c698:	e59d1058 	ldr	r1, [sp, #88]	; 0x58
   1c69c:	e3a02000 	mov	r2, #0
   1c6a0:	e3a03000 	mov	r3, #0
   1c6a4:	eb002230 	bl	24f6c <__cmpdf2>
   1c6a8:	e3500000 	cmp	r0, #0
   1c6ac:	12677001 	rsbne	r7, r7, #1
   1c6b0:	158d70f0 	strne	r7, [sp, #240]	; 0xf0
   1c6b4:	059d70f0 	ldreq	r7, [sp, #240]	; 0xf0
   1c6b8:	eaffff3d 	b	1c3b4 <_svfprintf_r+0x1924>
   1c6bc:	ebfff1b2 	bl	18d8c <strlen>
   1c6c0:	e58d503c 	str	r5, [sp, #60]	; 0x3c
   1c6c4:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
   1c6c8:	e1c05fc0 	bic	r5, r0, r0, asr #31
   1c6cc:	e58d0028 	str	r0, [sp, #40]	; 0x28
   1c6d0:	e58d501c 	str	r5, [sp, #28]
   1c6d4:	e5dd30ff 	ldrb	r3, [sp, #255]	; 0xff
   1c6d8:	e58d7024 	str	r7, [sp, #36]	; 0x24
   1c6dc:	e58dc04c 	str	ip, [sp, #76]	; 0x4c
   1c6e0:	eafffa17 	b	1af44 <_svfprintf_r+0x4b4>
   1c6e4:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c6e8:	e1a0100b 	mov	r1, fp
   1c6ec:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c6f0:	eb000e5c 	bl	20068 <__ssprint_r>
   1c6f4:	e3500000 	cmp	r0, #0
   1c6f8:	1afff9a8 	bne	1ada0 <_svfprintf_r+0x310>
   1c6fc:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c700:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c704:	eafffd49 	b	1bc30 <_svfprintf_r+0x11a0>
   1c708:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
   1c70c:	e1a0100b 	mov	r1, fp
   1c710:	e28d20d4 	add	r2, sp, #212	; 0xd4
   1c714:	eb000e53 	bl	20068 <__ssprint_r>
   1c718:	e3500000 	cmp	r0, #0
   1c71c:	1afff99f 	bne	1ada0 <_svfprintf_r+0x310>
   1c720:	e59d30f0 	ldr	r3, [sp, #240]	; 0xf0
   1c724:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   1c728:	e59d40dc 	ldr	r4, [sp, #220]	; 0xdc
   1c72c:	e0633005 	rsb	r3, r3, r5
   1c730:	e28d606c 	add	r6, sp, #108	; 0x6c
   1c734:	eafffde3 	b	1bec8 <_svfprintf_r+0x1438>
   1c738:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
   1c73c:	e3540006 	cmp	r4, #6
   1c740:	23a04006 	movcs	r4, #6
   1c744:	e51f57d4 	ldr	r5, [pc, #-2004]	; 1bf78 <_svfprintf_r+0x14e8>
   1c748:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1c74c:	e1c44fc4 	bic	r4, r4, r4, asr #31
   1c750:	e58d401c 	str	r4, [sp, #28]
   1c754:	e58d7024 	str	r7, [sp, #36]	; 0x24
   1c758:	e58d303c 	str	r3, [sp, #60]	; 0x3c
   1c75c:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1c760:	e58d5038 	str	r5, [sp, #56]	; 0x38
   1c764:	eafff9f6 	b	1af44 <_svfprintf_r+0x4b4>
   1c768:	e59d5048 	ldr	r5, [sp, #72]	; 0x48
   1c76c:	e3550065 	cmp	r5, #101	; 0x65
   1c770:	da000042 	ble	1c880 <_svfprintf_r+0x1df0>
   1c774:	e59dc01c 	ldr	ip, [sp, #28]
   1c778:	e35c0000 	cmp	ip, #0
   1c77c:	e59d30f0 	ldr	r3, [sp, #240]	; 0xf0
   1c780:	1a000030 	bne	1c848 <_svfprintf_r+0x1db8>
   1c784:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
   1c788:	e1550003 	cmp	r5, r3
   1c78c:	ca00001a 	bgt	1c7fc <_svfprintf_r+0x1d6c>
   1c790:	e59dc018 	ldr	ip, [sp, #24]
   1c794:	e31c0001 	tst	ip, #1
   1c798:	1283c001 	addne	ip, r3, #1
   1c79c:	01c34fc3 	biceq	r4, r3, r3, asr #31
   1c7a0:	11cc4fcc 	bicne	r4, ip, ip, asr #31
   1c7a4:	e3a05067 	mov	r5, #103	; 0x67
   1c7a8:	058d401c 	streq	r4, [sp, #28]
   1c7ac:	058d3028 	streq	r3, [sp, #40]	; 0x28
   1c7b0:	158dc028 	strne	ip, [sp, #40]	; 0x28
   1c7b4:	158d401c 	strne	r4, [sp, #28]
   1c7b8:	e58d5048 	str	r5, [sp, #72]	; 0x48
   1c7bc:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1c7c0:	eaffff50 	b	1c508 <_svfprintf_r+0x1a78>
   1c7c4:	e1c4cfc4 	bic	ip, r4, r4, asr #31
   1c7c8:	e58d003c 	str	r0, [sp, #60]	; 0x3c
   1c7cc:	e58dc01c 	str	ip, [sp, #28]
   1c7d0:	e5dd30ff 	ldrb	r3, [sp, #255]	; 0xff
   1c7d4:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1c7d8:	e58d7024 	str	r7, [sp, #36]	; 0x24
   1c7dc:	e58d004c 	str	r0, [sp, #76]	; 0x4c
   1c7e0:	eafff9d7 	b	1af44 <_svfprintf_r+0x4b4>
   1c7e4:	e2833030 	add	r3, r3, #48	; 0x30
   1c7e8:	e3a02030 	mov	r2, #48	; 0x30
   1c7ec:	e5cd20e2 	strb	r2, [sp, #226]	; 0xe2
   1c7f0:	e5cd30e3 	strb	r3, [sp, #227]	; 0xe3
   1c7f4:	e28d10e4 	add	r1, sp, #228	; 0xe4
   1c7f8:	eaffff33 	b	1c4cc <_svfprintf_r+0x1a3c>
   1c7fc:	e3530000 	cmp	r3, #0
   1c800:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1c804:	d2632002 	rsble	r2, r3, #2
   1c808:	c3a02001 	movgt	r2, #1
   1c80c:	e082200c 	add	r2, r2, ip
   1c810:	e1c24fc2 	bic	r4, r2, r2, asr #31
   1c814:	e3a05067 	mov	r5, #103	; 0x67
   1c818:	e58d2028 	str	r2, [sp, #40]	; 0x28
   1c81c:	e58d401c 	str	r4, [sp, #28]
   1c820:	e58d5048 	str	r5, [sp, #72]	; 0x48
   1c824:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1c828:	eaffff36 	b	1c508 <_svfprintf_r+0x1a78>
   1c82c:	e59d4018 	ldr	r4, [sp, #24]
   1c830:	e2143001 	ands	r3, r4, #1
   1c834:	1affff2c 	bne	1c4ec <_svfprintf_r+0x1a5c>
   1c838:	e1cc5fcc 	bic	r5, ip, ip, asr #31
   1c83c:	e58d501c 	str	r5, [sp, #28]
   1c840:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1c844:	eaffff2f 	b	1c508 <_svfprintf_r+0x1a78>
   1c848:	e3530000 	cmp	r3, #0
   1c84c:	da000016 	ble	1c8ac <_svfprintf_r+0x1e1c>
   1c850:	e3540000 	cmp	r4, #0
   1c854:	1a00000b 	bne	1c888 <_svfprintf_r+0x1df8>
   1c858:	e59d5018 	ldr	r5, [sp, #24]
   1c85c:	e3150001 	tst	r5, #1
   1c860:	1a000008 	bne	1c888 <_svfprintf_r+0x1df8>
   1c864:	e1c3cfc3 	bic	ip, r3, r3, asr #31
   1c868:	e3a04066 	mov	r4, #102	; 0x66
   1c86c:	e58dc01c 	str	ip, [sp, #28]
   1c870:	e58d3028 	str	r3, [sp, #40]	; 0x28
   1c874:	e58d4048 	str	r4, [sp, #72]	; 0x48
   1c878:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1c87c:	eaffff21 	b	1c508 <_svfprintf_r+0x1a78>
   1c880:	e59d30f0 	ldr	r3, [sp, #240]	; 0xf0
   1c884:	eafffee9 	b	1c430 <_svfprintf_r+0x19a0>
   1c888:	e2844001 	add	r4, r4, #1
   1c88c:	e0834004 	add	r4, r3, r4
   1c890:	e1c45fc4 	bic	r5, r4, r4, asr #31
   1c894:	e3a0c066 	mov	ip, #102	; 0x66
   1c898:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1c89c:	e58d501c 	str	r5, [sp, #28]
   1c8a0:	e58dc048 	str	ip, [sp, #72]	; 0x48
   1c8a4:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1c8a8:	eaffff16 	b	1c508 <_svfprintf_r+0x1a78>
   1c8ac:	e3540000 	cmp	r4, #0
   1c8b0:	1a000002 	bne	1c8c0 <_svfprintf_r+0x1e30>
   1c8b4:	e59d5018 	ldr	r5, [sp, #24]
   1c8b8:	e3150001 	tst	r5, #1
   1c8bc:	0a000007 	beq	1c8e0 <_svfprintf_r+0x1e50>
   1c8c0:	e2844002 	add	r4, r4, #2
   1c8c4:	e1c4cfc4 	bic	ip, r4, r4, asr #31
   1c8c8:	e58d4028 	str	r4, [sp, #40]	; 0x28
   1c8cc:	e3a04066 	mov	r4, #102	; 0x66
   1c8d0:	e58dc01c 	str	ip, [sp, #28]
   1c8d4:	e58d4048 	str	r4, [sp, #72]	; 0x48
   1c8d8:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1c8dc:	eaffff09 	b	1c508 <_svfprintf_r+0x1a78>
   1c8e0:	e3a0c001 	mov	ip, #1
   1c8e4:	e3a04066 	mov	r4, #102	; 0x66
   1c8e8:	e58dc01c 	str	ip, [sp, #28]
   1c8ec:	e58d4048 	str	r4, [sp, #72]	; 0x48
   1c8f0:	e58dc028 	str	ip, [sp, #40]	; 0x28
   1c8f4:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1c8f8:	eaffff02 	b	1c508 <_svfprintf_r+0x1a78>

0001c8fc <quorem>:
   1c8fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c900:	e5903010 	ldr	r3, [r0, #16]
   1c904:	e5919010 	ldr	r9, [r1, #16]
   1c908:	e1590003 	cmp	r9, r3
   1c90c:	e1a08000 	mov	r8, r0
   1c910:	e24dd004 	sub	sp, sp, #4
   1c914:	e1a0a001 	mov	sl, r1
   1c918:	c3a00000 	movgt	r0, #0
   1c91c:	ca000072 	bgt	1caec <quorem+0x1f0>
   1c920:	e2897004 	add	r7, r9, #4
   1c924:	e7911107 	ldr	r1, [r1, r7, lsl #2]
   1c928:	e7980107 	ldr	r0, [r8, r7, lsl #2]
   1c92c:	e2811001 	add	r1, r1, #1
   1c930:	eb001ea1 	bl	243bc <__aeabi_uidiv>
   1c934:	e2883014 	add	r3, r8, #20
   1c938:	e2506000 	subs	r6, r0, #0
   1c93c:	e08a7107 	add	r7, sl, r7, lsl #2
   1c940:	e28a5014 	add	r5, sl, #20
   1c944:	e2494001 	sub	r4, r9, #1
   1c948:	e58d3000 	str	r3, [sp]
   1c94c:	0a000033 	beq	1ca20 <quorem+0x124>
   1c950:	e3a01000 	mov	r1, #0
   1c954:	e1a02003 	mov	r2, r3
   1c958:	e1a0e001 	mov	lr, r1
   1c95c:	e1a03005 	mov	r3, r5
   1c960:	e4930004 	ldr	r0, [r3], #4
   1c964:	e1a0c800 	lsl	ip, r0, #16
   1c968:	e1a0c82c 	lsr	ip, ip, #16
   1c96c:	e1a00820 	lsr	r0, r0, #16
   1c970:	e02c1c96 	mla	ip, r6, ip, r1
   1c974:	e0010096 	mul	r1, r6, r0
   1c978:	e5920000 	ldr	r0, [r2]
   1c97c:	e081182c 	add	r1, r1, ip, lsr #16
   1c980:	e1a0b800 	lsl	fp, r0, #16
   1c984:	e08ee82b 	add	lr, lr, fp, lsr #16
   1c988:	e1a0c80c 	lsl	ip, ip, #16
   1c98c:	e1a0b801 	lsl	fp, r1, #16
   1c990:	e04ec82c 	sub	ip, lr, ip, lsr #16
   1c994:	e1a0e82b 	lsr	lr, fp, #16
   1c998:	e06ee820 	rsb	lr, lr, r0, lsr #16
   1c99c:	e1a0080c 	lsl	r0, ip, #16
   1c9a0:	e08ee84c 	add	lr, lr, ip, asr #16
   1c9a4:	e1a00820 	lsr	r0, r0, #16
   1c9a8:	e180080e 	orr	r0, r0, lr, lsl #16
   1c9ac:	e1570003 	cmp	r7, r3
   1c9b0:	e1a01821 	lsr	r1, r1, #16
   1c9b4:	e1a0e84e 	asr	lr, lr, #16
   1c9b8:	e4820004 	str	r0, [r2], #4
   1c9bc:	2affffe7 	bcs	1c960 <quorem+0x64>
   1c9c0:	e2843005 	add	r3, r4, #5
   1c9c4:	e7982103 	ldr	r2, [r8, r3, lsl #2]
   1c9c8:	e3520000 	cmp	r2, #0
   1c9cc:	1a000013 	bne	1ca20 <quorem+0x124>
   1c9d0:	e0882103 	add	r2, r8, r3, lsl #2
   1c9d4:	e59d0000 	ldr	r0, [sp]
   1c9d8:	e2423004 	sub	r3, r2, #4
   1c9dc:	e1500003 	cmp	r0, r3
   1c9e0:	2a00000d 	bcs	1ca1c <quorem+0x120>
   1c9e4:	e5121004 	ldr	r1, [r2, #-4]
   1c9e8:	e3510000 	cmp	r1, #0
   1c9ec:	1a00000a 	bne	1ca1c <quorem+0x120>
   1c9f0:	e0602002 	rsb	r2, r0, r2
   1c9f4:	e2499002 	sub	r9, r9, #2
   1c9f8:	e2422005 	sub	r2, r2, #5
   1c9fc:	e0499122 	sub	r9, r9, r2, lsr #2
   1ca00:	ea000002 	b	1ca10 <quorem+0x114>
   1ca04:	e5332004 	ldr	r2, [r3, #-4]!
   1ca08:	e3520000 	cmp	r2, #0
   1ca0c:	1a000002 	bne	1ca1c <quorem+0x120>
   1ca10:	e2444001 	sub	r4, r4, #1
   1ca14:	e1540009 	cmp	r4, r9
   1ca18:	1afffff9 	bne	1ca04 <quorem+0x108>
   1ca1c:	e5884010 	str	r4, [r8, #16]
   1ca20:	e1a00008 	mov	r0, r8
   1ca24:	e1a0100a 	mov	r1, sl
   1ca28:	eb000bf8 	bl	1fa10 <__mcmp>
   1ca2c:	e3500000 	cmp	r0, #0
   1ca30:	ba00002c 	blt	1cae8 <quorem+0x1ec>
   1ca34:	e59d3000 	ldr	r3, [sp]
   1ca38:	e2866001 	add	r6, r6, #1
   1ca3c:	e3a02000 	mov	r2, #0
   1ca40:	e495c004 	ldr	ip, [r5], #4
   1ca44:	e5930000 	ldr	r0, [r3]
   1ca48:	e1a0180c 	lsl	r1, ip, #16
   1ca4c:	e1a0a800 	lsl	sl, r0, #16
   1ca50:	e1a01821 	lsr	r1, r1, #16
   1ca54:	e061182a 	rsb	r1, r1, sl, lsr #16
   1ca58:	e0811002 	add	r1, r1, r2
   1ca5c:	e1a0282c 	lsr	r2, ip, #16
   1ca60:	e0622820 	rsb	r2, r2, r0, lsr #16
   1ca64:	e1a0a801 	lsl	sl, r1, #16
   1ca68:	e0822841 	add	r2, r2, r1, asr #16
   1ca6c:	e1a0182a 	lsr	r1, sl, #16
   1ca70:	e1811802 	orr	r1, r1, r2, lsl #16
   1ca74:	e1570005 	cmp	r7, r5
   1ca78:	e1a02842 	asr	r2, r2, #16
   1ca7c:	e4831004 	str	r1, [r3], #4
   1ca80:	2affffee 	bcs	1ca40 <quorem+0x144>
   1ca84:	e2843005 	add	r3, r4, #5
   1ca88:	e7982103 	ldr	r2, [r8, r3, lsl #2]
   1ca8c:	e3520000 	cmp	r2, #0
   1ca90:	1a000014 	bne	1cae8 <quorem+0x1ec>
   1ca94:	e0882103 	add	r2, r8, r3, lsl #2
   1ca98:	e59d1000 	ldr	r1, [sp]
   1ca9c:	e2423004 	sub	r3, r2, #4
   1caa0:	e1510003 	cmp	r1, r3
   1caa4:	2a00000e 	bcs	1cae4 <quorem+0x1e8>
   1caa8:	e5121004 	ldr	r1, [r2, #-4]
   1caac:	e3510000 	cmp	r1, #0
   1cab0:	1a00000b 	bne	1cae4 <quorem+0x1e8>
   1cab4:	e59d0000 	ldr	r0, [sp]
   1cab8:	e0601002 	rsb	r1, r0, r2
   1cabc:	e2411005 	sub	r1, r1, #5
   1cac0:	e1e01121 	mvn	r1, r1, lsr #2
   1cac4:	e0841001 	add	r1, r4, r1
   1cac8:	ea000002 	b	1cad8 <quorem+0x1dc>
   1cacc:	e5332004 	ldr	r2, [r3, #-4]!
   1cad0:	e3520000 	cmp	r2, #0
   1cad4:	1a000002 	bne	1cae4 <quorem+0x1e8>
   1cad8:	e2444001 	sub	r4, r4, #1
   1cadc:	e1540001 	cmp	r4, r1
   1cae0:	1afffff9 	bne	1cacc <quorem+0x1d0>
   1cae4:	e5884010 	str	r4, [r8, #16]
   1cae8:	e1a00006 	mov	r0, r6
   1caec:	e28dd004 	add	sp, sp, #4
   1caf0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001caf4 <_dtoa_r>:
   1caf4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caf8:	e590c040 	ldr	ip, [r0, #64]	; 0x40
   1cafc:	e24dd06c 	sub	sp, sp, #108	; 0x6c
   1cb00:	e35c0000 	cmp	ip, #0
   1cb04:	e1a06000 	mov	r6, r0
   1cb08:	e58d3008 	str	r3, [sp, #8]
   1cb0c:	e59d5098 	ldr	r5, [sp, #152]	; 0x98
   1cb10:	e1a0a001 	mov	sl, r1
   1cb14:	e1a0b002 	mov	fp, r2
   1cb18:	0a000008 	beq	1cb40 <_dtoa_r+0x4c>
   1cb1c:	e5903044 	ldr	r3, [r0, #68]	; 0x44
   1cb20:	e3a02001 	mov	r2, #1
   1cb24:	e1a02312 	lsl	r2, r2, r3
   1cb28:	e58c3004 	str	r3, [ip, #4]
   1cb2c:	e58c2008 	str	r2, [ip, #8]
   1cb30:	e1a0100c 	mov	r1, ip
   1cb34:	eb000a07 	bl	1f358 <_Bfree>
   1cb38:	e3a03000 	mov	r3, #0
   1cb3c:	e5863040 	str	r3, [r6, #64]	; 0x40
   1cb40:	e25a4000 	subs	r4, sl, #0
   1cb44:	b3a03001 	movlt	r3, #1
   1cb48:	a3a03000 	movge	r3, #0
   1cb4c:	b5853000 	strlt	r3, [r5]
   1cb50:	a5853000 	strge	r3, [r5]
   1cb54:	e59f34a0 	ldr	r3, [pc, #1184]	; 1cffc <_dtoa_r+0x508>
   1cb58:	b3c44102 	biclt	r4, r4, #-2147483648	; 0x80000000
   1cb5c:	e59f2498 	ldr	r2, [pc, #1176]	; 1cffc <_dtoa_r+0x508>
   1cb60:	e0043003 	and	r3, r4, r3
   1cb64:	b1a0a004 	movlt	sl, r4
   1cb68:	e1530002 	cmp	r3, r2
   1cb6c:	0a000018 	beq	1cbd4 <_dtoa_r+0xe0>
   1cb70:	e3a03000 	mov	r3, #0
   1cb74:	e1a0000a 	mov	r0, sl
   1cb78:	e1a0100b 	mov	r1, fp
   1cb7c:	e3a02000 	mov	r2, #0
   1cb80:	eb0020f9 	bl	24f6c <__cmpdf2>
   1cb84:	e3500000 	cmp	r0, #0
   1cb88:	e3a03001 	mov	r3, #1
   1cb8c:	03a03000 	moveq	r3, #0
   1cb90:	e31300ff 	tst	r3, #255	; 0xff
   1cb94:	e1a0800a 	mov	r8, sl
   1cb98:	e1a0900b 	mov	r9, fp
   1cb9c:	1a00001c 	bne	1cc14 <_dtoa_r+0x120>
   1cba0:	e59d409c 	ldr	r4, [sp, #156]	; 0x9c
   1cba4:	e3540000 	cmp	r4, #0
   1cba8:	e59d4094 	ldr	r4, [sp, #148]	; 0x94
   1cbac:	e3a03001 	mov	r3, #1
   1cbb0:	e5843000 	str	r3, [r4]
   1cbb4:	059f8420 	ldreq	r8, [pc, #1056]	; 1cfdc <_dtoa_r+0x4e8>
   1cbb8:	159f8420 	ldrne	r8, [pc, #1056]	; 1cfe0 <_dtoa_r+0x4ec>
   1cbbc:	159d409c 	ldrne	r4, [sp, #156]	; 0x9c
   1cbc0:	15848000 	strne	r8, [r4]
   1cbc4:	12488001 	subne	r8, r8, #1
   1cbc8:	e1a00008 	mov	r0, r8
   1cbcc:	e28dd06c 	add	sp, sp, #108	; 0x6c
   1cbd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbd4:	e59f3408 	ldr	r3, [pc, #1032]	; 1cfe4 <_dtoa_r+0x4f0>
   1cbd8:	e59d1094 	ldr	r1, [sp, #148]	; 0x94
   1cbdc:	e35b0000 	cmp	fp, #0
   1cbe0:	e5813000 	str	r3, [r1]
   1cbe4:	159f83fc 	ldrne	r8, [pc, #1020]	; 1cfe8 <_dtoa_r+0x4f4>
   1cbe8:	0a00008e 	beq	1ce28 <_dtoa_r+0x334>
   1cbec:	e59d409c 	ldr	r4, [sp, #156]	; 0x9c
   1cbf0:	e3540000 	cmp	r4, #0
   1cbf4:	0afffff3 	beq	1cbc8 <_dtoa_r+0xd4>
   1cbf8:	e5d83003 	ldrb	r3, [r8, #3]
   1cbfc:	e59d409c 	ldr	r4, [sp, #156]	; 0x9c
   1cc00:	e3530000 	cmp	r3, #0
   1cc04:	12883008 	addne	r3, r8, #8
   1cc08:	02883003 	addeq	r3, r8, #3
   1cc0c:	e5843000 	str	r3, [r4]
   1cc10:	eaffffec 	b	1cbc8 <_dtoa_r+0xd4>
   1cc14:	e28dc064 	add	ip, sp, #100	; 0x64
   1cc18:	e1a00006 	mov	r0, r6
   1cc1c:	e1a0100a 	mov	r1, sl
   1cc20:	e1a0200b 	mov	r2, fp
   1cc24:	e28d3068 	add	r3, sp, #104	; 0x68
   1cc28:	e58dc000 	str	ip, [sp]
   1cc2c:	eb000c2d 	bl	1fce8 <__d2b>
   1cc30:	e1a05084 	lsl	r5, r4, #1
   1cc34:	e1b05aa5 	lsrs	r5, r5, #21
   1cc38:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1cc3c:	1a000081 	bne	1ce48 <_dtoa_r+0x354>
   1cc40:	e59d7064 	ldr	r7, [sp, #100]	; 0x64
   1cc44:	e59d5068 	ldr	r5, [sp, #104]	; 0x68
   1cc48:	e3e03e41 	mvn	r3, #1040	; 0x410
   1cc4c:	e0875005 	add	r5, r7, r5
   1cc50:	e1550003 	cmp	r5, r3
   1cc54:	a2850e41 	addge	r0, r5, #1040	; 0x410
   1cc58:	a2800002 	addge	r0, r0, #2
   1cc5c:	a1a0003b 	lsrge	r0, fp, r0
   1cc60:	b59f0384 	ldrlt	r0, [pc, #900]	; 1cfec <_dtoa_r+0x4f8>
   1cc64:	a283301f 	addge	r3, r3, #31
   1cc68:	a0653003 	rsbge	r3, r5, r3
   1cc6c:	b0650000 	rsblt	r0, r5, r0
   1cc70:	a1800314 	orrge	r0, r0, r4, lsl r3
   1cc74:	b1a0001b 	lsllt	r0, fp, r0
   1cc78:	eb001f56 	bl	249d8 <__aeabi_ui2d>
   1cc7c:	e1a03001 	mov	r3, r1
   1cc80:	e1a02000 	mov	r2, r0
   1cc84:	e58d2028 	str	r2, [sp, #40]	; 0x28
   1cc88:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   1cc8c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1cc90:	e3a04001 	mov	r4, #1
   1cc94:	e243361f 	sub	r3, r3, #32505856	; 0x1f00000
   1cc98:	e58d3028 	str	r3, [sp, #40]	; 0x28
   1cc9c:	e58d4058 	str	r4, [sp, #88]	; 0x58
   1cca0:	e2455001 	sub	r5, r5, #1
   1cca4:	e59f2344 	ldr	r2, [pc, #836]	; 1cff0 <_dtoa_r+0x4fc>
   1cca8:	e3a03000 	mov	r3, #0
   1ccac:	e28d1028 	add	r1, sp, #40	; 0x28
   1ccb0:	e8910003 	ldm	r1, {r0, r1}
   1ccb4:	eb001e8e 	bl	246f4 <__aeabi_dsub>
   1ccb8:	e28f3fc1 	add	r3, pc, #772	; 0x304
   1ccbc:	e893000c 	ldm	r3, {r2, r3}
   1ccc0:	eb001f89 	bl	24aec <__aeabi_dmul>
   1ccc4:	e28f3c03 	add	r3, pc, #768	; 0x300
   1ccc8:	e893000c 	ldm	r3, {r2, r3}
   1cccc:	eb001e89 	bl	246f8 <__adddf3>
   1ccd0:	e1a08000 	mov	r8, r0
   1ccd4:	e1a00005 	mov	r0, r5
   1ccd8:	e1a09001 	mov	r9, r1
   1ccdc:	eb001f47 	bl	24a00 <__aeabi_i2d>
   1cce0:	e28f3fbb 	add	r3, pc, #748	; 0x2ec
   1cce4:	e893000c 	ldm	r3, {r2, r3}
   1cce8:	eb001f7f 	bl	24aec <__aeabi_dmul>
   1ccec:	e1a02000 	mov	r2, r0
   1ccf0:	e1a03001 	mov	r3, r1
   1ccf4:	e1a00008 	mov	r0, r8
   1ccf8:	e1a01009 	mov	r1, r9
   1ccfc:	eb001e7d 	bl	246f8 <__adddf3>
   1cd00:	e1a08000 	mov	r8, r0
   1cd04:	e1a09001 	mov	r9, r1
   1cd08:	eb0020de 	bl	25088 <__aeabi_d2iz>
   1cd0c:	e1a01009 	mov	r1, r9
   1cd10:	e58d0010 	str	r0, [sp, #16]
   1cd14:	e3a02000 	mov	r2, #0
   1cd18:	e1a00008 	mov	r0, r8
   1cd1c:	e3a03000 	mov	r3, #0
   1cd20:	eb00208f 	bl	24f64 <__ledf2>
   1cd24:	e3500000 	cmp	r0, #0
   1cd28:	aa000008 	bge	1cd50 <_dtoa_r+0x25c>
   1cd2c:	e59d0010 	ldr	r0, [sp, #16]
   1cd30:	eb001f32 	bl	24a00 <__aeabi_i2d>
   1cd34:	e1a02008 	mov	r2, r8
   1cd38:	e1a03009 	mov	r3, r9
   1cd3c:	eb00208a 	bl	24f6c <__cmpdf2>
   1cd40:	e3500000 	cmp	r0, #0
   1cd44:	159d4010 	ldrne	r4, [sp, #16]
   1cd48:	12444001 	subne	r4, r4, #1
   1cd4c:	158d4010 	strne	r4, [sp, #16]
   1cd50:	e59d4010 	ldr	r4, [sp, #16]
   1cd54:	e3540016 	cmp	r4, #22
   1cd58:	83a04001 	movhi	r4, #1
   1cd5c:	858d4048 	strhi	r4, [sp, #72]	; 0x48
   1cd60:	8a00000b 	bhi	1cd94 <_dtoa_r+0x2a0>
   1cd64:	e59f32a0 	ldr	r3, [pc, #672]	; 1d00c <_dtoa_r+0x518>
   1cd68:	e0833184 	add	r3, r3, r4, lsl #3
   1cd6c:	e8930003 	ldm	r3, {r0, r1}
   1cd70:	e1a0200a 	mov	r2, sl
   1cd74:	e1a0300b 	mov	r3, fp
   1cd78:	eb002077 	bl	24f5c <__gedf2>
   1cd7c:	e3500000 	cmp	r0, #0
   1cd80:	c59d4010 	ldrgt	r4, [sp, #16]
   1cd84:	c2444001 	subgt	r4, r4, #1
   1cd88:	c58d4010 	strgt	r4, [sp, #16]
   1cd8c:	e3a04000 	mov	r4, #0
   1cd90:	e58d4048 	str	r4, [sp, #72]	; 0x48
   1cd94:	e0655007 	rsb	r5, r5, r7
   1cd98:	e2555001 	subs	r5, r5, #1
   1cd9c:	43a04000 	movmi	r4, #0
   1cda0:	53a04000 	movpl	r4, #0
   1cda4:	458d4024 	strmi	r4, [sp, #36]	; 0x24
   1cda8:	558d4034 	strpl	r4, [sp, #52]	; 0x34
   1cdac:	e59d4010 	ldr	r4, [sp, #16]
   1cdb0:	42655000 	rsbmi	r5, r5, #0
   1cdb4:	458d5034 	strmi	r5, [sp, #52]	; 0x34
   1cdb8:	558d5024 	strpl	r5, [sp, #36]	; 0x24
   1cdbc:	e3540000 	cmp	r4, #0
   1cdc0:	ba000181 	blt	1d3cc <_dtoa_r+0x8d8>
   1cdc4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   1cdc8:	e58d4044 	str	r4, [sp, #68]	; 0x44
   1cdcc:	e0811004 	add	r1, r1, r4
   1cdd0:	e3a04000 	mov	r4, #0
   1cdd4:	e58d1024 	str	r1, [sp, #36]	; 0x24
   1cdd8:	e58d403c 	str	r4, [sp, #60]	; 0x3c
   1cddc:	e59d4008 	ldr	r4, [sp, #8]
   1cde0:	e3540009 	cmp	r4, #9
   1cde4:	83a04000 	movhi	r4, #0
   1cde8:	858d4008 	strhi	r4, [sp, #8]
   1cdec:	8a000025 	bhi	1ce88 <_dtoa_r+0x394>
   1cdf0:	e3540005 	cmp	r4, #5
   1cdf4:	c2444004 	subgt	r4, r4, #4
   1cdf8:	c58d4008 	strgt	r4, [sp, #8]
   1cdfc:	e59d1008 	ldr	r1, [sp, #8]
   1ce00:	e2413002 	sub	r3, r1, #2
   1ce04:	c3a04000 	movgt	r4, #0
   1ce08:	d3a04001 	movle	r4, #1
   1ce0c:	e3530003 	cmp	r3, #3
   1ce10:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1ce14:	ea00001b 	b	1ce88 <_dtoa_r+0x394>
   1ce18:	0001d8a8 	.word	0x0001d8a8
   1ce1c:	0001d870 	.word	0x0001d870
   1ce20:	0001d4c4 	.word	0x0001d4c4
   1ce24:	0001d8b4 	.word	0x0001d8b4
   1ce28:	e3c484ff 	bic	r8, r4, #-16777216	; 0xff000000
   1ce2c:	e3c8860f 	bic	r8, r8, #15728640	; 0xf00000
   1ce30:	e59f31b0 	ldr	r3, [pc, #432]	; 1cfe8 <_dtoa_r+0x4f4>
   1ce34:	e59f21b8 	ldr	r2, [pc, #440]	; 1cff4 <_dtoa_r+0x500>
   1ce38:	e3580000 	cmp	r8, #0
   1ce3c:	01a08002 	moveq	r8, r2
   1ce40:	11a08003 	movne	r8, r3
   1ce44:	eaffff68 	b	1cbec <_dtoa_r+0xf8>
   1ce48:	e1a0200b 	mov	r2, fp
   1ce4c:	e1a0100a 	mov	r1, sl
   1ce50:	e58d1028 	str	r1, [sp, #40]	; 0x28
   1ce54:	e58d202c 	str	r2, [sp, #44]	; 0x2c
   1ce58:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1ce5c:	e3c234ff 	bic	r3, r2, #-16777216	; 0xff000000
   1ce60:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   1ce64:	e38335ff 	orr	r3, r3, #1069547520	; 0x3fc00000
   1ce68:	e2455fff 	sub	r5, r5, #1020	; 0x3fc
   1ce6c:	e3833603 	orr	r3, r3, #3145728	; 0x300000
   1ce70:	e3a04000 	mov	r4, #0
   1ce74:	e58d3028 	str	r3, [sp, #40]	; 0x28
   1ce78:	e2455003 	sub	r5, r5, #3
   1ce7c:	e59d7064 	ldr	r7, [sp, #100]	; 0x64
   1ce80:	e58d4058 	str	r4, [sp, #88]	; 0x58
   1ce84:	eaffff86 	b	1cca4 <_dtoa_r+0x1b0>
   1ce88:	e3a04000 	mov	r4, #0
   1ce8c:	e1a01004 	mov	r1, r4
   1ce90:	e5864044 	str	r4, [r6, #68]	; 0x44
   1ce94:	e1a00006 	mov	r0, r6
   1ce98:	eb00090d 	bl	1f2d4 <_Balloc>
   1ce9c:	e3e01000 	mvn	r1, #0
   1cea0:	e3a02001 	mov	r2, #1
   1cea4:	e58d0020 	str	r0, [sp, #32]
   1cea8:	e58d1030 	str	r1, [sp, #48]	; 0x30
   1ceac:	e5860040 	str	r0, [r6, #64]	; 0x40
   1ceb0:	e58d2040 	str	r2, [sp, #64]	; 0x40
   1ceb4:	e58d104c 	str	r1, [sp, #76]	; 0x4c
   1ceb8:	e58d4090 	str	r4, [sp, #144]	; 0x90
   1cebc:	e59d2010 	ldr	r2, [sp, #16]
   1cec0:	e59d3068 	ldr	r3, [sp, #104]	; 0x68
   1cec4:	e352000e 	cmp	r2, #14
   1cec8:	c3a04000 	movgt	r4, #0
   1cecc:	d3a04001 	movle	r4, #1
   1ced0:	e3530000 	cmp	r3, #0
   1ced4:	b3a04000 	movlt	r4, #0
   1ced8:	e3540000 	cmp	r4, #0
   1cedc:	0a0000a1 	beq	1d168 <_dtoa_r+0x674>
   1cee0:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   1cee4:	e1a04fa3 	lsr	r4, r3, #31
   1cee8:	e59f311c 	ldr	r3, [pc, #284]	; 1d00c <_dtoa_r+0x518>
   1ceec:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1cef0:	e0833182 	add	r3, r3, r2, lsl #3
   1cef4:	e3510000 	cmp	r1, #0
   1cef8:	c3a04000 	movgt	r4, #0
   1cefc:	d2044001 	andle	r4, r4, #1
   1cf00:	e8930006 	ldm	r3, {r1, r2}
   1cf04:	e3540000 	cmp	r4, #0
   1cf08:	e58d1008 	str	r1, [sp, #8]
   1cf0c:	e58d200c 	str	r2, [sp, #12]
   1cf10:	1a000156 	bne	1d470 <_dtoa_r+0x97c>
   1cf14:	e1a03002 	mov	r3, r2
   1cf18:	e1a0000a 	mov	r0, sl
   1cf1c:	e1a02001 	mov	r2, r1
   1cf20:	e1a0100b 	mov	r1, fp
   1cf24:	eb001f8b 	bl	24d58 <__aeabi_ddiv>
   1cf28:	eb002056 	bl	25088 <__aeabi_d2iz>
   1cf2c:	e1a05000 	mov	r5, r0
   1cf30:	eb001eb2 	bl	24a00 <__aeabi_i2d>
   1cf34:	e28d3008 	add	r3, sp, #8
   1cf38:	e893000c 	ldm	r3, {r2, r3}
   1cf3c:	eb001eea 	bl	24aec <__aeabi_dmul>
   1cf40:	e1a02000 	mov	r2, r0
   1cf44:	e1a03001 	mov	r3, r1
   1cf48:	e1a0000a 	mov	r0, sl
   1cf4c:	e1a0100b 	mov	r1, fp
   1cf50:	eb001de7 	bl	246f4 <__aeabi_dsub>
   1cf54:	e59d2020 	ldr	r2, [sp, #32]
   1cf58:	e2853030 	add	r3, r5, #48	; 0x30
   1cf5c:	e4c23001 	strb	r3, [r2], #1
   1cf60:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
   1cf64:	e3530001 	cmp	r3, #1
   1cf68:	e1a08000 	mov	r8, r0
   1cf6c:	e1a09001 	mov	r9, r1
   1cf70:	e58d2018 	str	r2, [sp, #24]
   1cf74:	e1a07002 	mov	r7, r2
   1cf78:	0a00004b 	beq	1d0ac <_dtoa_r+0x5b8>
   1cf7c:	e59f208c 	ldr	r2, [pc, #140]	; 1d010 <_dtoa_r+0x51c>
   1cf80:	e3a03000 	mov	r3, #0
   1cf84:	eb001ed8 	bl	24aec <__aeabi_dmul>
   1cf88:	e3a03000 	mov	r3, #0
   1cf8c:	e3a02000 	mov	r2, #0
   1cf90:	e1a08000 	mov	r8, r0
   1cf94:	e1a09001 	mov	r9, r1
   1cf98:	eb001ff3 	bl	24f6c <__cmpdf2>
   1cf9c:	e3500000 	cmp	r0, #0
   1cfa0:	e3a03001 	mov	r3, #1
   1cfa4:	01a03004 	moveq	r3, r4
   1cfa8:	e31300ff 	tst	r3, #255	; 0xff
   1cfac:	0a000450 	beq	1e0f4 <_dtoa_r+0x1600>
   1cfb0:	e59d1020 	ldr	r1, [sp, #32]
   1cfb4:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   1cfb8:	e2814002 	add	r4, r1, #2
   1cfbc:	e081a002 	add	sl, r1, r2
   1cfc0:	ea000020 	b	1d048 <_dtoa_r+0x554>
   1cfc4:	3fd287a7 	.word	0x3fd287a7
   1cfc8:	636f4361 	.word	0x636f4361
   1cfcc:	3fc68a28 	.word	0x3fc68a28
   1cfd0:	8b60c8b3 	.word	0x8b60c8b3
   1cfd4:	3fd34413 	.word	0x3fd34413
   1cfd8:	509f79fb 	.word	0x509f79fb
   1cfdc:	00026a30 	.word	0x00026a30
   1cfe0:	00026a31 	.word	0x00026a31
   1cfe4:	0000270f 	.word	0x0000270f
   1cfe8:	00026a40 	.word	0x00026a40
   1cfec:	fffffbee 	.word	0xfffffbee
   1cff0:	3ff80000 	.word	0x3ff80000
   1cff4:	00026a34 	.word	0x00026a34
   1cff8:	3ff00000 	.word	0x3ff00000
   1cffc:	7ff00000 	.word	0x7ff00000
   1d000:	401c0000 	.word	0x401c0000
   1d004:	40140000 	.word	0x40140000
   1d008:	00025b58 	.word	0x00025b58
   1d00c:	00025a68 	.word	0x00025a68
   1d010:	40240000 	.word	0x40240000
   1d014:	3fe00000 	.word	0x3fe00000
   1d018:	eb001eb3 	bl	24aec <__aeabi_dmul>
   1d01c:	e3a03000 	mov	r3, #0
   1d020:	e3a02000 	mov	r2, #0
   1d024:	e1a08000 	mov	r8, r0
   1d028:	e1a09001 	mov	r9, r1
   1d02c:	eb001fce 	bl	24f6c <__cmpdf2>
   1d030:	e3500000 	cmp	r0, #0
   1d034:	e3a03001 	mov	r3, #1
   1d038:	03a03000 	moveq	r3, #0
   1d03c:	e31300ff 	tst	r3, #255	; 0xff
   1d040:	e2844001 	add	r4, r4, #1
   1d044:	0a00033c 	beq	1dd3c <_dtoa_r+0x1248>
   1d048:	e28d3008 	add	r3, sp, #8
   1d04c:	e893000c 	ldm	r3, {r2, r3}
   1d050:	e1a00008 	mov	r0, r8
   1d054:	e1a01009 	mov	r1, r9
   1d058:	eb001f3e 	bl	24d58 <__aeabi_ddiv>
   1d05c:	eb002009 	bl	25088 <__aeabi_d2iz>
   1d060:	e1a05000 	mov	r5, r0
   1d064:	eb001e65 	bl	24a00 <__aeabi_i2d>
   1d068:	e28d3008 	add	r3, sp, #8
   1d06c:	e893000c 	ldm	r3, {r2, r3}
   1d070:	eb001e9d 	bl	24aec <__aeabi_dmul>
   1d074:	e1a02000 	mov	r2, r0
   1d078:	e1a03001 	mov	r3, r1
   1d07c:	e1a00008 	mov	r0, r8
   1d080:	e1a01009 	mov	r1, r9
   1d084:	eb001d9a 	bl	246f4 <__aeabi_dsub>
   1d088:	e285c030 	add	ip, r5, #48	; 0x30
   1d08c:	e154000a 	cmp	r4, sl
   1d090:	e1a08000 	mov	r8, r0
   1d094:	e1a09001 	mov	r9, r1
   1d098:	e51f2090 	ldr	r2, [pc, #-144]	; 1d010 <_dtoa_r+0x51c>
   1d09c:	e3a03000 	mov	r3, #0
   1d0a0:	e544c001 	strb	ip, [r4, #-1]
   1d0a4:	e1a07004 	mov	r7, r4
   1d0a8:	1affffda 	bne	1d018 <_dtoa_r+0x524>
   1d0ac:	e1a02008 	mov	r2, r8
   1d0b0:	e1a03009 	mov	r3, r9
   1d0b4:	e1a00008 	mov	r0, r8
   1d0b8:	e1a01009 	mov	r1, r9
   1d0bc:	eb001d8d 	bl	246f8 <__adddf3>
   1d0c0:	e1a08000 	mov	r8, r0
   1d0c4:	e1a09001 	mov	r9, r1
   1d0c8:	e1a02008 	mov	r2, r8
   1d0cc:	e28d1008 	add	r1, sp, #8
   1d0d0:	e8910003 	ldm	r1, {r0, r1}
   1d0d4:	e1a03009 	mov	r3, r9
   1d0d8:	eb001fa1 	bl	24f64 <__ledf2>
   1d0dc:	e3500000 	cmp	r0, #0
   1d0e0:	ba000008 	blt	1d108 <_dtoa_r+0x614>
   1d0e4:	e28d1008 	add	r1, sp, #8
   1d0e8:	e8910003 	ldm	r1, {r0, r1}
   1d0ec:	e1a02008 	mov	r2, r8
   1d0f0:	e1a03009 	mov	r3, r9
   1d0f4:	eb001f9c 	bl	24f6c <__cmpdf2>
   1d0f8:	e3500000 	cmp	r0, #0
   1d0fc:	1a00030e 	bne	1dd3c <_dtoa_r+0x1248>
   1d100:	e3150001 	tst	r5, #1
   1d104:	0a00030c 	beq	1dd3c <_dtoa_r+0x1248>
   1d108:	e59d4010 	ldr	r4, [sp, #16]
   1d10c:	e5575001 	ldrb	r5, [r7, #-1]
   1d110:	e59d8020 	ldr	r8, [sp, #32]
   1d114:	e58d405c 	str	r4, [sp, #92]	; 0x5c
   1d118:	e59d2018 	ldr	r2, [sp, #24]
   1d11c:	ea000001 	b	1d128 <_dtoa_r+0x634>
   1d120:	e5575002 	ldrb	r5, [r7, #-2]
   1d124:	e2477001 	sub	r7, r7, #1
   1d128:	e3550039 	cmp	r5, #57	; 0x39
   1d12c:	e1a03007 	mov	r3, r7
   1d130:	1a00039d 	bne	1dfac <_dtoa_r+0x14b8>
   1d134:	e1570002 	cmp	r7, r2
   1d138:	1afffff8 	bne	1d120 <_dtoa_r+0x62c>
   1d13c:	e59d405c 	ldr	r4, [sp, #92]	; 0x5c
   1d140:	e2844001 	add	r4, r4, #1
   1d144:	e58d4010 	str	r4, [sp, #16]
   1d148:	e59d4018 	ldr	r4, [sp, #24]
   1d14c:	e58d3020 	str	r3, [sp, #32]
   1d150:	e3a03030 	mov	r3, #48	; 0x30
   1d154:	e5443001 	strb	r3, [r4, #-1]
   1d158:	e3a02031 	mov	r2, #49	; 0x31
   1d15c:	e1a03004 	mov	r3, r4
   1d160:	e5432001 	strb	r2, [r3, #-1]
   1d164:	ea000088 	b	1d38c <_dtoa_r+0x898>
   1d168:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
   1d16c:	e3510000 	cmp	r1, #0
   1d170:	1a00009e 	bne	1d3f0 <_dtoa_r+0x8fc>
   1d174:	e59d403c 	ldr	r4, [sp, #60]	; 0x3c
   1d178:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   1d17c:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
   1d180:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   1d184:	e3530000 	cmp	r3, #0
   1d188:	c3550000 	cmpgt	r5, #0
   1d18c:	da000008 	ble	1d1b4 <_dtoa_r+0x6c0>
   1d190:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
   1d194:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1d198:	e1530005 	cmp	r3, r5
   1d19c:	a1a03005 	movge	r3, r5
   1d1a0:	e0631001 	rsb	r1, r3, r1
   1d1a4:	e0632002 	rsb	r2, r3, r2
   1d1a8:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1d1ac:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1d1b0:	e0635005 	rsb	r5, r3, r5
   1d1b4:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
   1d1b8:	e3530000 	cmp	r3, #0
   1d1bc:	da000015 	ble	1d218 <_dtoa_r+0x724>
   1d1c0:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
   1d1c4:	e3510000 	cmp	r1, #0
   1d1c8:	0a000347 	beq	1deec <_dtoa_r+0x13f8>
   1d1cc:	e3540000 	cmp	r4, #0
   1d1d0:	da00000d 	ble	1d20c <_dtoa_r+0x718>
   1d1d4:	e1a01009 	mov	r1, r9
   1d1d8:	e1a02004 	mov	r2, r4
   1d1dc:	e1a00006 	mov	r0, r6
   1d1e0:	eb000990 	bl	1f828 <__pow5mult>
   1d1e4:	e1a09000 	mov	r9, r0
   1d1e8:	e1a01009 	mov	r1, r9
   1d1ec:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
   1d1f0:	e1a00006 	mov	r0, r6
   1d1f4:	eb00090d 	bl	1f630 <__multiply>
   1d1f8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1d1fc:	e1a07000 	mov	r7, r0
   1d200:	e1a00006 	mov	r0, r6
   1d204:	eb000853 	bl	1f358 <_Bfree>
   1d208:	e58d7038 	str	r7, [sp, #56]	; 0x38
   1d20c:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
   1d210:	e0532004 	subs	r2, r3, r4
   1d214:	1a00034f 	bne	1df58 <_dtoa_r+0x1464>
   1d218:	e3a01001 	mov	r1, #1
   1d21c:	e1a00006 	mov	r0, r6
   1d220:	eb0008fa 	bl	1f610 <__i2b>
   1d224:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
   1d228:	e3510000 	cmp	r1, #0
   1d22c:	e1a04000 	mov	r4, r0
   1d230:	da000004 	ble	1d248 <_dtoa_r+0x754>
   1d234:	e1a01004 	mov	r1, r4
   1d238:	e1a00006 	mov	r0, r6
   1d23c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   1d240:	eb000978 	bl	1f828 <__pow5mult>
   1d244:	e1a04000 	mov	r4, r0
   1d248:	e59d2008 	ldr	r2, [sp, #8]
   1d24c:	e3520001 	cmp	r2, #1
   1d250:	da00019a 	ble	1d8c0 <_dtoa_r+0xdcc>
   1d254:	e3a07000 	mov	r7, #0
   1d258:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
   1d25c:	e3520000 	cmp	r2, #0
   1d260:	03a03001 	moveq	r3, #1
   1d264:	1a0002cb 	bne	1dd98 <_dtoa_r+0x12a4>
   1d268:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   1d26c:	e0833001 	add	r3, r3, r1
   1d270:	e213301f 	ands	r3, r3, #31
   1d274:	03a0301c 	moveq	r3, #28
   1d278:	1a000227 	bne	1db1c <_dtoa_r+0x1028>
   1d27c:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
   1d280:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1d284:	e0811003 	add	r1, r1, r3
   1d288:	e0822003 	add	r2, r2, r3
   1d28c:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1d290:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1d294:	e0855003 	add	r5, r5, r3
   1d298:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1d29c:	e3530000 	cmp	r3, #0
   1d2a0:	da000004 	ble	1d2b8 <_dtoa_r+0x7c4>
   1d2a4:	e1a00006 	mov	r0, r6
   1d2a8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1d2ac:	e1a02003 	mov	r2, r3
   1d2b0:	eb000998 	bl	1f918 <__lshift>
   1d2b4:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1d2b8:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   1d2bc:	e3510000 	cmp	r1, #0
   1d2c0:	da000004 	ble	1d2d8 <_dtoa_r+0x7e4>
   1d2c4:	e1a01004 	mov	r1, r4
   1d2c8:	e1a00006 	mov	r0, r6
   1d2cc:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1d2d0:	eb000990 	bl	1f918 <__lshift>
   1d2d4:	e1a04000 	mov	r4, r0
   1d2d8:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1d2dc:	e3520000 	cmp	r2, #0
   1d2e0:	1a000298 	bne	1dd48 <_dtoa_r+0x1254>
   1d2e4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1d2e8:	e59d2008 	ldr	r2, [sp, #8]
   1d2ec:	e3510000 	cmp	r1, #0
   1d2f0:	c3a03000 	movgt	r3, #0
   1d2f4:	d3a03001 	movle	r3, #1
   1d2f8:	e3520002 	cmp	r2, #2
   1d2fc:	d3a03000 	movle	r3, #0
   1d300:	e3530000 	cmp	r3, #0
   1d304:	0a0001a5 	beq	1d9a0 <_dtoa_r+0xeac>
   1d308:	e3510000 	cmp	r1, #0
   1d30c:	1a000066 	bne	1d4ac <_dtoa_r+0x9b8>
   1d310:	e1a03001 	mov	r3, r1
   1d314:	e3a02005 	mov	r2, #5
   1d318:	e1a01004 	mov	r1, r4
   1d31c:	e1a00006 	mov	r0, r6
   1d320:	eb000813 	bl	1f374 <__multadd>
   1d324:	e1a04000 	mov	r4, r0
   1d328:	e1a01004 	mov	r1, r4
   1d32c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   1d330:	eb0009b6 	bl	1fa10 <__mcmp>
   1d334:	e3500000 	cmp	r0, #0
   1d338:	da00005b 	ble	1d4ac <_dtoa_r+0x9b8>
   1d33c:	e59d3020 	ldr	r3, [sp, #32]
   1d340:	e59d1010 	ldr	r1, [sp, #16]
   1d344:	e3a02031 	mov	r2, #49	; 0x31
   1d348:	e4c32001 	strb	r2, [r3], #1
   1d34c:	e2811001 	add	r1, r1, #1
   1d350:	e59d8020 	ldr	r8, [sp, #32]
   1d354:	e58d1010 	str	r1, [sp, #16]
   1d358:	e58d3020 	str	r3, [sp, #32]
   1d35c:	e3a05000 	mov	r5, #0
   1d360:	e1a00006 	mov	r0, r6
   1d364:	e1a01004 	mov	r1, r4
   1d368:	eb0007fa 	bl	1f358 <_Bfree>
   1d36c:	e3590000 	cmp	r9, #0
   1d370:	0a000005 	beq	1d38c <_dtoa_r+0x898>
   1d374:	e1550009 	cmp	r5, r9
   1d378:	13550000 	cmpne	r5, #0
   1d37c:	1a0001f1 	bne	1db48 <_dtoa_r+0x1054>
   1d380:	e1a00006 	mov	r0, r6
   1d384:	e1a01009 	mov	r1, r9
   1d388:	eb0007f2 	bl	1f358 <_Bfree>
   1d38c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1d390:	e1a00006 	mov	r0, r6
   1d394:	eb0007ef 	bl	1f358 <_Bfree>
   1d398:	e59d4010 	ldr	r4, [sp, #16]
   1d39c:	e2843001 	add	r3, r4, #1
   1d3a0:	e59d409c 	ldr	r4, [sp, #156]	; 0x9c
   1d3a4:	e3540000 	cmp	r4, #0
   1d3a8:	e59d4020 	ldr	r4, [sp, #32]
   1d3ac:	e3a02000 	mov	r2, #0
   1d3b0:	e5c42000 	strb	r2, [r4]
   1d3b4:	e59d4094 	ldr	r4, [sp, #148]	; 0x94
   1d3b8:	159d109c 	ldrne	r1, [sp, #156]	; 0x9c
   1d3bc:	e5843000 	str	r3, [r4]
   1d3c0:	159d4020 	ldrne	r4, [sp, #32]
   1d3c4:	15814000 	strne	r4, [r1]
   1d3c8:	eafffdfe 	b	1cbc8 <_dtoa_r+0xd4>
   1d3cc:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
   1d3d0:	e59d1010 	ldr	r1, [sp, #16]
   1d3d4:	e0614004 	rsb	r4, r1, r4
   1d3d8:	e58d4034 	str	r4, [sp, #52]	; 0x34
   1d3dc:	e2614000 	rsb	r4, r1, #0
   1d3e0:	e58d403c 	str	r4, [sp, #60]	; 0x3c
   1d3e4:	e3a04000 	mov	r4, #0
   1d3e8:	e58d4044 	str	r4, [sp, #68]	; 0x44
   1d3ec:	eafffe7a 	b	1cddc <_dtoa_r+0x2e8>
   1d3f0:	e59d2008 	ldr	r2, [sp, #8]
   1d3f4:	e3520001 	cmp	r2, #1
   1d3f8:	da0002db 	ble	1df6c <_dtoa_r+0x1478>
   1d3fc:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1d400:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
   1d404:	e2412001 	sub	r2, r1, #1
   1d408:	e1530002 	cmp	r3, r2
   1d40c:	b59d103c 	ldrlt	r1, [sp, #60]	; 0x3c
   1d410:	b0613002 	rsblt	r3, r1, r2
   1d414:	b59d1044 	ldrlt	r1, [sp, #68]	; 0x44
   1d418:	a0624003 	rsbge	r4, r2, r3
   1d41c:	b58d203c 	strlt	r2, [sp, #60]	; 0x3c
   1d420:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   1d424:	b0811003 	addlt	r1, r1, r3
   1d428:	b58d1044 	strlt	r1, [sp, #68]	; 0x44
   1d42c:	e3520000 	cmp	r2, #0
   1d430:	b59d3034 	ldrlt	r3, [sp, #52]	; 0x34
   1d434:	a28d3030 	addge	r3, sp, #48	; 0x30
   1d438:	a8930028 	ldmge	r3, {r3, r5}
   1d43c:	b0625003 	rsblt	r5, r2, r3
   1d440:	b3a03000 	movlt	r3, #0
   1d444:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   1d448:	e0822003 	add	r2, r2, r3
   1d44c:	e58d2034 	str	r2, [sp, #52]	; 0x34
   1d450:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
   1d454:	e1a00006 	mov	r0, r6
   1d458:	e0822003 	add	r2, r2, r3
   1d45c:	e3a01001 	mov	r1, #1
   1d460:	e58d2024 	str	r2, [sp, #36]	; 0x24
   1d464:	eb000869 	bl	1f610 <__i2b>
   1d468:	e1a09000 	mov	r9, r0
   1d46c:	eaffff43 	b	1d180 <_dtoa_r+0x68c>
   1d470:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   1d474:	e3540000 	cmp	r4, #0
   1d478:	1a0002c5 	bne	1df94 <_dtoa_r+0x14a0>
   1d47c:	e51f2480 	ldr	r2, [pc, #-1152]	; 1d004 <_dtoa_r+0x510>
   1d480:	e3a03000 	mov	r3, #0
   1d484:	e28d1008 	add	r1, sp, #8
   1d488:	e8910003 	ldm	r1, {r0, r1}
   1d48c:	eb001d96 	bl	24aec <__aeabi_dmul>
   1d490:	e1a0200a 	mov	r2, sl
   1d494:	e1a0300b 	mov	r3, fp
   1d498:	eb001eaf 	bl	24f5c <__gedf2>
   1d49c:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   1d4a0:	e3500000 	cmp	r0, #0
   1d4a4:	e1a09004 	mov	r9, r4
   1d4a8:	baffffa3 	blt	1d33c <_dtoa_r+0x848>
   1d4ac:	e59d3090 	ldr	r3, [sp, #144]	; 0x90
   1d4b0:	e1e03003 	mvn	r3, r3
   1d4b4:	e58d3010 	str	r3, [sp, #16]
   1d4b8:	e59d8020 	ldr	r8, [sp, #32]
   1d4bc:	e3a05000 	mov	r5, #0
   1d4c0:	eaffffa6 	b	1d360 <_dtoa_r+0x86c>
   1d4c4:	e3a02001 	mov	r2, #1
   1d4c8:	e58d2040 	str	r2, [sp, #64]	; 0x40
   1d4cc:	e59d2090 	ldr	r2, [sp, #144]	; 0x90
   1d4d0:	e3520000 	cmp	r2, #0
   1d4d4:	da000235 	ble	1ddb0 <_dtoa_r+0x12bc>
   1d4d8:	e58d204c 	str	r2, [sp, #76]	; 0x4c
   1d4dc:	e58d2030 	str	r2, [sp, #48]	; 0x30
   1d4e0:	e1a0c002 	mov	ip, r2
   1d4e4:	e352000e 	cmp	r2, #14
   1d4e8:	83a04000 	movhi	r4, #0
   1d4ec:	92044001 	andls	r4, r4, #1
   1d4f0:	e3a01000 	mov	r1, #0
   1d4f4:	e35c0017 	cmp	ip, #23
   1d4f8:	e5861044 	str	r1, [r6, #68]	; 0x44
   1d4fc:	9a000008 	bls	1d524 <_dtoa_r+0xa30>
   1d500:	e3a02001 	mov	r2, #1
   1d504:	e3a03004 	mov	r3, #4
   1d508:	e1a03083 	lsl	r3, r3, #1
   1d50c:	e2830014 	add	r0, r3, #20
   1d510:	e150000c 	cmp	r0, ip
   1d514:	e1a01002 	mov	r1, r2
   1d518:	e2822001 	add	r2, r2, #1
   1d51c:	9afffff9 	bls	1d508 <_dtoa_r+0xa14>
   1d520:	e5861044 	str	r1, [r6, #68]	; 0x44
   1d524:	e1a00006 	mov	r0, r6
   1d528:	eb000769 	bl	1f2d4 <_Balloc>
   1d52c:	e3540000 	cmp	r4, #0
   1d530:	e58d0020 	str	r0, [sp, #32]
   1d534:	e5860040 	str	r0, [r6, #64]	; 0x40
   1d538:	0afffe5f 	beq	1cebc <_dtoa_r+0x3c8>
   1d53c:	e59d4010 	ldr	r4, [sp, #16]
   1d540:	e1a0100a 	mov	r1, sl
   1d544:	e1a0200b 	mov	r2, fp
   1d548:	e3540000 	cmp	r4, #0
   1d54c:	e58da018 	str	sl, [sp, #24]
   1d550:	e58db01c 	str	fp, [sp, #28]
   1d554:	e58d1028 	str	r1, [sp, #40]	; 0x28
   1d558:	e58d202c 	str	r2, [sp, #44]	; 0x2c
   1d55c:	da000190 	ble	1dba4 <_dtoa_r+0x10b0>
   1d560:	e51f355c 	ldr	r3, [pc, #-1372]	; 1d00c <_dtoa_r+0x518>
   1d564:	e204200f 	and	r2, r4, #15
   1d568:	e1a04244 	asr	r4, r4, #4
   1d56c:	e0833182 	add	r3, r3, r2, lsl #3
   1d570:	e3140010 	tst	r4, #16
   1d574:	e8930300 	ldm	r3, {r8, r9}
   1d578:	03a07002 	moveq	r7, #2
   1d57c:	0a000009 	beq	1d5a8 <_dtoa_r+0xab4>
   1d580:	e51f3580 	ldr	r3, [pc, #-1408]	; 1d008 <_dtoa_r+0x514>
   1d584:	e1a0000a 	mov	r0, sl
   1d588:	e1a0100b 	mov	r1, fp
   1d58c:	e2833020 	add	r3, r3, #32
   1d590:	e893000c 	ldm	r3, {r2, r3}
   1d594:	eb001def 	bl	24d58 <__aeabi_ddiv>
   1d598:	e58d0018 	str	r0, [sp, #24]
   1d59c:	e58d101c 	str	r1, [sp, #28]
   1d5a0:	e204400f 	and	r4, r4, #15
   1d5a4:	e3a07003 	mov	r7, #3
   1d5a8:	e3540000 	cmp	r4, #0
   1d5ac:	0a00000c 	beq	1d5e4 <_dtoa_r+0xaf0>
   1d5b0:	e51f55b0 	ldr	r5, [pc, #-1456]	; 1d008 <_dtoa_r+0x514>
   1d5b4:	e1a00008 	mov	r0, r8
   1d5b8:	e1a01009 	mov	r1, r9
   1d5bc:	e3140001 	tst	r4, #1
   1d5c0:	0a000002 	beq	1d5d0 <_dtoa_r+0xadc>
   1d5c4:	e895000c 	ldm	r5, {r2, r3}
   1d5c8:	eb001d47 	bl	24aec <__aeabi_dmul>
   1d5cc:	e2877001 	add	r7, r7, #1
   1d5d0:	e1b040c4 	asrs	r4, r4, #1
   1d5d4:	e2855008 	add	r5, r5, #8
   1d5d8:	1afffff7 	bne	1d5bc <_dtoa_r+0xac8>
   1d5dc:	e1a08000 	mov	r8, r0
   1d5e0:	e1a09001 	mov	r9, r1
   1d5e4:	e28d1018 	add	r1, sp, #24
   1d5e8:	e8910003 	ldm	r1, {r0, r1}
   1d5ec:	e1a02008 	mov	r2, r8
   1d5f0:	e1a03009 	mov	r3, r9
   1d5f4:	eb001dd7 	bl	24d58 <__aeabi_ddiv>
   1d5f8:	e58d0018 	str	r0, [sp, #24]
   1d5fc:	e58d101c 	str	r1, [sp, #28]
   1d600:	e59d4048 	ldr	r4, [sp, #72]	; 0x48
   1d604:	e3540000 	cmp	r4, #0
   1d608:	0a0000c0 	beq	1d910 <_dtoa_r+0xe1c>
   1d60c:	e3a03000 	mov	r3, #0
   1d610:	e28d1018 	add	r1, sp, #24
   1d614:	e8910003 	ldm	r1, {r0, r1}
   1d618:	e51f2628 	ldr	r2, [pc, #-1576]	; 1cff8 <_dtoa_r+0x504>
   1d61c:	eb001e50 	bl	24f64 <__ledf2>
   1d620:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   1d624:	e3500000 	cmp	r0, #0
   1d628:	e3a03001 	mov	r3, #1
   1d62c:	a3a03000 	movge	r3, #0
   1d630:	e3540000 	cmp	r4, #0
   1d634:	d3a03000 	movle	r3, #0
   1d638:	c2033001 	andgt	r3, r3, #1
   1d63c:	e3530000 	cmp	r3, #0
   1d640:	0a0000b2 	beq	1d910 <_dtoa_r+0xe1c>
   1d644:	e59d404c 	ldr	r4, [sp, #76]	; 0x4c
   1d648:	e3540000 	cmp	r4, #0
   1d64c:	da000142 	ble	1db5c <_dtoa_r+0x1068>
   1d650:	e51f2648 	ldr	r2, [pc, #-1608]	; 1d010 <_dtoa_r+0x51c>
   1d654:	e3a03000 	mov	r3, #0
   1d658:	e28d1018 	add	r1, sp, #24
   1d65c:	e8910003 	ldm	r1, {r0, r1}
   1d660:	eb001d21 	bl	24aec <__aeabi_dmul>
   1d664:	e58d0018 	str	r0, [sp, #24]
   1d668:	e58d101c 	str	r1, [sp, #28]
   1d66c:	e2870001 	add	r0, r7, #1
   1d670:	eb001ce2 	bl	24a00 <__aeabi_i2d>
   1d674:	e1a02000 	mov	r2, r0
   1d678:	e1a03001 	mov	r3, r1
   1d67c:	e28d1018 	add	r1, sp, #24
   1d680:	e8910003 	ldm	r1, {r0, r1}
   1d684:	eb001d18 	bl	24aec <__aeabi_dmul>
   1d688:	e51f2690 	ldr	r2, [pc, #-1680]	; 1d000 <_dtoa_r+0x50c>
   1d68c:	e3a03000 	mov	r3, #0
   1d690:	eb001c18 	bl	246f8 <__adddf3>
   1d694:	e59d4010 	ldr	r4, [sp, #16]
   1d698:	e2444001 	sub	r4, r4, #1
   1d69c:	e58d405c 	str	r4, [sp, #92]	; 0x5c
   1d6a0:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
   1d6a4:	e1a09001 	mov	r9, r1
   1d6a8:	e240850d 	sub	r8, r0, #54525952	; 0x3400000
   1d6ac:	e59d4040 	ldr	r4, [sp, #64]	; 0x40
   1d6b0:	e3540000 	cmp	r4, #0
   1d6b4:	0a000159 	beq	1dc20 <_dtoa_r+0x112c>
   1d6b8:	e51f36b4 	ldr	r3, [pc, #-1716]	; 1d00c <_dtoa_r+0x518>
   1d6bc:	e083318c 	add	r3, r3, ip, lsl #3
   1d6c0:	e913000c 	ldmdb	r3, {r2, r3}
   1d6c4:	e51f06b8 	ldr	r0, [pc, #-1720]	; 1d014 <_dtoa_r+0x520>
   1d6c8:	e3a01000 	mov	r1, #0
   1d6cc:	e58dc004 	str	ip, [sp, #4]
   1d6d0:	eb001da0 	bl	24d58 <__aeabi_ddiv>
   1d6d4:	e1a02008 	mov	r2, r8
   1d6d8:	e1a03009 	mov	r3, r9
   1d6dc:	eb001c04 	bl	246f4 <__aeabi_dsub>
   1d6e0:	e1a0a000 	mov	sl, r0
   1d6e4:	e1a0b001 	mov	fp, r1
   1d6e8:	e28d1018 	add	r1, sp, #24
   1d6ec:	e8910003 	ldm	r1, {r0, r1}
   1d6f0:	eb001e64 	bl	25088 <__aeabi_d2iz>
   1d6f4:	e1a05000 	mov	r5, r0
   1d6f8:	eb001cc0 	bl	24a00 <__aeabi_i2d>
   1d6fc:	e1a02000 	mov	r2, r0
   1d700:	e1a03001 	mov	r3, r1
   1d704:	e28d1018 	add	r1, sp, #24
   1d708:	e8910003 	ldm	r1, {r0, r1}
   1d70c:	eb001bf8 	bl	246f4 <__aeabi_dsub>
   1d710:	e2855030 	add	r5, r5, #48	; 0x30
   1d714:	e59d4020 	ldr	r4, [sp, #32]
   1d718:	e20550ff 	and	r5, r5, #255	; 0xff
   1d71c:	e1a08000 	mov	r8, r0
   1d720:	e1a09001 	mov	r9, r1
   1d724:	e4c45001 	strb	r5, [r4], #1
   1d728:	e1a0000a 	mov	r0, sl
   1d72c:	e1a0100b 	mov	r1, fp
   1d730:	e1a02008 	mov	r2, r8
   1d734:	e1a03009 	mov	r3, r9
   1d738:	e58d4018 	str	r4, [sp, #24]
   1d73c:	eb001e06 	bl	24f5c <__gedf2>
   1d740:	e3500000 	cmp	r0, #0
   1d744:	e59d7018 	ldr	r7, [sp, #24]
   1d748:	ca000271 	bgt	1e114 <_dtoa_r+0x1620>
   1d74c:	e1a02008 	mov	r2, r8
   1d750:	e1a03009 	mov	r3, r9
   1d754:	e51f0764 	ldr	r0, [pc, #-1892]	; 1cff8 <_dtoa_r+0x504>
   1d758:	e3a01000 	mov	r1, #0
   1d75c:	eb001be4 	bl	246f4 <__aeabi_dsub>
   1d760:	e1a02000 	mov	r2, r0
   1d764:	e1a03001 	mov	r3, r1
   1d768:	e1a0000a 	mov	r0, sl
   1d76c:	e1a0100b 	mov	r1, fp
   1d770:	eb001df9 	bl	24f5c <__gedf2>
   1d774:	e3500000 	cmp	r0, #0
   1d778:	e59dc004 	ldr	ip, [sp, #4]
   1d77c:	ca000208 	bgt	1dfa4 <_dtoa_r+0x14b0>
   1d780:	e35c0001 	cmp	ip, #1
   1d784:	da0000f4 	ble	1db5c <_dtoa_r+0x1068>
   1d788:	e59d1020 	ldr	r1, [sp, #32]
   1d78c:	e081c00c 	add	ip, r1, ip
   1d790:	e59d4018 	ldr	r4, [sp, #24]
   1d794:	e58dc050 	str	ip, [sp, #80]	; 0x50
   1d798:	e58d6060 	str	r6, [sp, #96]	; 0x60
   1d79c:	ea000008 	b	1d7c4 <_dtoa_r+0xcd0>
   1d7a0:	eb001bd3 	bl	246f4 <__aeabi_dsub>
   1d7a4:	e1a0200a 	mov	r2, sl
   1d7a8:	e1a0300b 	mov	r3, fp
   1d7ac:	eb001dec 	bl	24f64 <__ledf2>
   1d7b0:	e3500000 	cmp	r0, #0
   1d7b4:	ba0001f9 	blt	1dfa0 <_dtoa_r+0x14ac>
   1d7b8:	e59d2050 	ldr	r2, [sp, #80]	; 0x50
   1d7bc:	e1540002 	cmp	r4, r2
   1d7c0:	0a0000e4 	beq	1db58 <_dtoa_r+0x1064>
   1d7c4:	e51f27bc 	ldr	r2, [pc, #-1980]	; 1d010 <_dtoa_r+0x51c>
   1d7c8:	e3a03000 	mov	r3, #0
   1d7cc:	e1a0000a 	mov	r0, sl
   1d7d0:	e1a0100b 	mov	r1, fp
   1d7d4:	eb001cc4 	bl	24aec <__aeabi_dmul>
   1d7d8:	e51f27d0 	ldr	r2, [pc, #-2000]	; 1d010 <_dtoa_r+0x51c>
   1d7dc:	e3a03000 	mov	r3, #0
   1d7e0:	e1a0a000 	mov	sl, r0
   1d7e4:	e1a0b001 	mov	fp, r1
   1d7e8:	e1a00008 	mov	r0, r8
   1d7ec:	e1a01009 	mov	r1, r9
   1d7f0:	eb001cbd 	bl	24aec <__aeabi_dmul>
   1d7f4:	e1a07001 	mov	r7, r1
   1d7f8:	e1a06000 	mov	r6, r0
   1d7fc:	eb001e21 	bl	25088 <__aeabi_d2iz>
   1d800:	e1a05000 	mov	r5, r0
   1d804:	eb001c7d 	bl	24a00 <__aeabi_i2d>
   1d808:	e1a02000 	mov	r2, r0
   1d80c:	e1a03001 	mov	r3, r1
   1d810:	e1a00006 	mov	r0, r6
   1d814:	e1a01007 	mov	r1, r7
   1d818:	eb001bb5 	bl	246f4 <__aeabi_dsub>
   1d81c:	e2855030 	add	r5, r5, #48	; 0x30
   1d820:	e20550ff 	and	r5, r5, #255	; 0xff
   1d824:	e4c45001 	strb	r5, [r4], #1
   1d828:	e1a0200a 	mov	r2, sl
   1d82c:	e1a0300b 	mov	r3, fp
   1d830:	e1a09001 	mov	r9, r1
   1d834:	e1a08000 	mov	r8, r0
   1d838:	eb001dc9 	bl	24f64 <__ledf2>
   1d83c:	e3500000 	cmp	r0, #0
   1d840:	e1a02008 	mov	r2, r8
   1d844:	e1a03009 	mov	r3, r9
   1d848:	e51f0858 	ldr	r0, [pc, #-2136]	; 1cff8 <_dtoa_r+0x504>
   1d84c:	e3a01000 	mov	r1, #0
   1d850:	e1a07004 	mov	r7, r4
   1d854:	aaffffd1 	bge	1d7a0 <_dtoa_r+0xcac>
   1d858:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
   1d85c:	e59d8020 	ldr	r8, [sp, #32]
   1d860:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
   1d864:	e58d1010 	str	r1, [sp, #16]
   1d868:	e58d4020 	str	r4, [sp, #32]
   1d86c:	eafffec6 	b	1d38c <_dtoa_r+0x898>
   1d870:	e3a03000 	mov	r3, #0
   1d874:	e58d3040 	str	r3, [sp, #64]	; 0x40
   1d878:	e59d1090 	ldr	r1, [sp, #144]	; 0x90
   1d87c:	e59d2010 	ldr	r2, [sp, #16]
   1d880:	e0811002 	add	r1, r1, r2
   1d884:	e281c001 	add	ip, r1, #1
   1d888:	e35c0000 	cmp	ip, #0
   1d88c:	e58d104c 	str	r1, [sp, #76]	; 0x4c
   1d890:	da00014e 	ble	1ddd0 <_dtoa_r+0x12dc>
   1d894:	e35c000e 	cmp	ip, #14
   1d898:	83a04000 	movhi	r4, #0
   1d89c:	92044001 	andls	r4, r4, #1
   1d8a0:	e58dc030 	str	ip, [sp, #48]	; 0x30
   1d8a4:	eaffff11 	b	1d4f0 <_dtoa_r+0x9fc>
   1d8a8:	e3a01000 	mov	r1, #0
   1d8ac:	e58d1040 	str	r1, [sp, #64]	; 0x40
   1d8b0:	eaffff05 	b	1d4cc <_dtoa_r+0x9d8>
   1d8b4:	e3a03001 	mov	r3, #1
   1d8b8:	e58d3040 	str	r3, [sp, #64]	; 0x40
   1d8bc:	eaffffed 	b	1d878 <_dtoa_r+0xd84>
   1d8c0:	e35b0000 	cmp	fp, #0
   1d8c4:	1afffe62 	bne	1d254 <_dtoa_r+0x760>
   1d8c8:	e3ca34ff 	bic	r3, sl, #-16777216	; 0xff000000
   1d8cc:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   1d8d0:	e3530000 	cmp	r3, #0
   1d8d4:	11a0700b 	movne	r7, fp
   1d8d8:	1afffe5e 	bne	1d258 <_dtoa_r+0x764>
   1d8dc:	e51f38e8 	ldr	r3, [pc, #-2280]	; 1cffc <_dtoa_r+0x508>
   1d8e0:	e00a3003 	and	r3, sl, r3
   1d8e4:	e3530000 	cmp	r3, #0
   1d8e8:	01a07003 	moveq	r7, r3
   1d8ec:	0afffe59 	beq	1d258 <_dtoa_r+0x764>
   1d8f0:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   1d8f4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   1d8f8:	e2833001 	add	r3, r3, #1
   1d8fc:	e2811001 	add	r1, r1, #1
   1d900:	e58d3034 	str	r3, [sp, #52]	; 0x34
   1d904:	e58d1024 	str	r1, [sp, #36]	; 0x24
   1d908:	e3a07001 	mov	r7, #1
   1d90c:	eafffe51 	b	1d258 <_dtoa_r+0x764>
   1d910:	e1a00007 	mov	r0, r7
   1d914:	eb001c39 	bl	24a00 <__aeabi_i2d>
   1d918:	e28d3018 	add	r3, sp, #24
   1d91c:	e893000c 	ldm	r3, {r2, r3}
   1d920:	eb001c71 	bl	24aec <__aeabi_dmul>
   1d924:	e51f292c 	ldr	r2, [pc, #-2348]	; 1d000 <_dtoa_r+0x50c>
   1d928:	e3a03000 	mov	r3, #0
   1d92c:	eb001b71 	bl	246f8 <__adddf3>
   1d930:	e1a09001 	mov	r9, r1
   1d934:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1d938:	e240450d 	sub	r4, r0, #54525952	; 0x3400000
   1d93c:	e3510000 	cmp	r1, #0
   1d940:	e1a08004 	mov	r8, r4
   1d944:	1a000092 	bne	1db94 <_dtoa_r+0x10a0>
   1d948:	e51f294c 	ldr	r2, [pc, #-2380]	; 1d004 <_dtoa_r+0x510>
   1d94c:	e3a03000 	mov	r3, #0
   1d950:	e28d1018 	add	r1, sp, #24
   1d954:	e8910003 	ldm	r1, {r0, r1}
   1d958:	eb001b65 	bl	246f4 <__aeabi_dsub>
   1d95c:	e1a02004 	mov	r2, r4
   1d960:	e1a03009 	mov	r3, r9
   1d964:	e1a0a000 	mov	sl, r0
   1d968:	e1a0b001 	mov	fp, r1
   1d96c:	eb001d7a 	bl	24f5c <__gedf2>
   1d970:	e3500000 	cmp	r0, #0
   1d974:	ca0000a6 	bgt	1dc14 <_dtoa_r+0x1120>
   1d978:	e2842102 	add	r2, r4, #-2147483648	; 0x80000000
   1d97c:	e1a03009 	mov	r3, r9
   1d980:	e1a0000a 	mov	r0, sl
   1d984:	e1a0100b 	mov	r1, fp
   1d988:	eb001d75 	bl	24f64 <__ledf2>
   1d98c:	e3500000 	cmp	r0, #0
   1d990:	aa000071 	bge	1db5c <_dtoa_r+0x1068>
   1d994:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   1d998:	e1a09004 	mov	r9, r4
   1d99c:	eafffec2 	b	1d4ac <_dtoa_r+0x9b8>
   1d9a0:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
   1d9a4:	e3520000 	cmp	r2, #0
   1d9a8:	0a00010d 	beq	1dde4 <_dtoa_r+0x12f0>
   1d9ac:	e3550000 	cmp	r5, #0
   1d9b0:	da000004 	ble	1d9c8 <_dtoa_r+0xed4>
   1d9b4:	e1a01009 	mov	r1, r9
   1d9b8:	e1a00006 	mov	r0, r6
   1d9bc:	e1a02005 	mov	r2, r5
   1d9c0:	eb0007d4 	bl	1f918 <__lshift>
   1d9c4:	e1a09000 	mov	r9, r0
   1d9c8:	e3570000 	cmp	r7, #0
   1d9cc:	01a07009 	moveq	r7, r9
   1d9d0:	1a000199 	bne	1e03c <_dtoa_r+0x1548>
   1d9d4:	e59d3020 	ldr	r3, [sp, #32]
   1d9d8:	e3a08001 	mov	r8, #1
   1d9dc:	e00b1008 	and	r1, fp, r8
   1d9e0:	e58d4024 	str	r4, [sp, #36]	; 0x24
   1d9e4:	e58d3014 	str	r3, [sp, #20]
   1d9e8:	e58d1034 	str	r1, [sp, #52]	; 0x34
   1d9ec:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
   1d9f0:	e1a05009 	mov	r5, r9
   1d9f4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   1d9f8:	e1a00004 	mov	r0, r4
   1d9fc:	ebfffbbe 	bl	1c8fc <quorem>
   1da00:	e1a01005 	mov	r1, r5
   1da04:	e58d0028 	str	r0, [sp, #40]	; 0x28
   1da08:	e1a00004 	mov	r0, r4
   1da0c:	eb0007ff 	bl	1fa10 <__mcmp>
   1da10:	e1a02007 	mov	r2, r7
   1da14:	e1a0a000 	mov	sl, r0
   1da18:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
   1da1c:	e1a00006 	mov	r0, r6
   1da20:	eb000811 	bl	1fa6c <__mdiff>
   1da24:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
   1da28:	e590300c 	ldr	r3, [r0, #12]
   1da2c:	e2822030 	add	r2, r2, #48	; 0x30
   1da30:	e3530000 	cmp	r3, #0
   1da34:	e1a09000 	mov	r9, r0
   1da38:	e58d2018 	str	r2, [sp, #24]
   1da3c:	13a0b001 	movne	fp, #1
   1da40:	0a000030 	beq	1db08 <_dtoa_r+0x1014>
   1da44:	e1a00006 	mov	r0, r6
   1da48:	e1a01009 	mov	r1, r9
   1da4c:	eb000641 	bl	1f358 <_Bfree>
   1da50:	e59d3008 	ldr	r3, [sp, #8]
   1da54:	e19b3003 	orrs	r3, fp, r3
   1da58:	1a000002 	bne	1da68 <_dtoa_r+0xf74>
   1da5c:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
   1da60:	e3510000 	cmp	r1, #0
   1da64:	0a00019a 	beq	1e0d4 <_dtoa_r+0x15e0>
   1da68:	e35a0000 	cmp	sl, #0
   1da6c:	ba000155 	blt	1dfc8 <_dtoa_r+0x14d4>
   1da70:	e59d1008 	ldr	r1, [sp, #8]
   1da74:	e19a1001 	orrs	r1, sl, r1
   1da78:	1a000002 	bne	1da88 <_dtoa_r+0xf94>
   1da7c:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   1da80:	e3520000 	cmp	r2, #0
   1da84:	0a00014f 	beq	1dfc8 <_dtoa_r+0x14d4>
   1da88:	e35b0000 	cmp	fp, #0
   1da8c:	ca00017a 	bgt	1e07c <_dtoa_r+0x1588>
   1da90:	e59d3014 	ldr	r3, [sp, #20]
   1da94:	e59d2018 	ldr	r2, [sp, #24]
   1da98:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
   1da9c:	e4c32001 	strb	r2, [r3], #1
   1daa0:	e1580001 	cmp	r8, r1
   1daa4:	e58d3014 	str	r3, [sp, #20]
   1daa8:	e1a0a003 	mov	sl, r3
   1daac:	0a00017e 	beq	1e0ac <_dtoa_r+0x15b8>
   1dab0:	e1a01004 	mov	r1, r4
   1dab4:	e1a00006 	mov	r0, r6
   1dab8:	e3a0200a 	mov	r2, #10
   1dabc:	e3a03000 	mov	r3, #0
   1dac0:	eb00062b 	bl	1f374 <__multadd>
   1dac4:	e1550007 	cmp	r5, r7
   1dac8:	e1a04000 	mov	r4, r0
   1dacc:	0a000027 	beq	1db70 <_dtoa_r+0x107c>
   1dad0:	e1a01005 	mov	r1, r5
   1dad4:	e3a0200a 	mov	r2, #10
   1dad8:	e3a03000 	mov	r3, #0
   1dadc:	e1a00006 	mov	r0, r6
   1dae0:	eb000623 	bl	1f374 <__multadd>
   1dae4:	e1a01007 	mov	r1, r7
   1dae8:	e1a05000 	mov	r5, r0
   1daec:	e3a0200a 	mov	r2, #10
   1daf0:	e1a00006 	mov	r0, r6
   1daf4:	e3a03000 	mov	r3, #0
   1daf8:	eb00061d 	bl	1f374 <__multadd>
   1dafc:	e2888001 	add	r8, r8, #1
   1db00:	e1a07000 	mov	r7, r0
   1db04:	eaffffba 	b	1d9f4 <_dtoa_r+0xf00>
   1db08:	e1a00004 	mov	r0, r4
   1db0c:	e1a01009 	mov	r1, r9
   1db10:	eb0007be 	bl	1fa10 <__mcmp>
   1db14:	e1a0b000 	mov	fp, r0
   1db18:	eaffffc9 	b	1da44 <_dtoa_r+0xf50>
   1db1c:	e2632020 	rsb	r2, r3, #32
   1db20:	e3520004 	cmp	r2, #4
   1db24:	da000189 	ble	1e150 <_dtoa_r+0x165c>
   1db28:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
   1db2c:	e263301c 	rsb	r3, r3, #28
   1db30:	e0822003 	add	r2, r2, r3
   1db34:	e0811003 	add	r1, r1, r3
   1db38:	e58d2034 	str	r2, [sp, #52]	; 0x34
   1db3c:	e0855003 	add	r5, r5, r3
   1db40:	e58d1024 	str	r1, [sp, #36]	; 0x24
   1db44:	eafffdd3 	b	1d298 <_dtoa_r+0x7a4>
   1db48:	e1a00006 	mov	r0, r6
   1db4c:	e1a01005 	mov	r1, r5
   1db50:	eb000600 	bl	1f358 <_Bfree>
   1db54:	eafffe09 	b	1d380 <_dtoa_r+0x88c>
   1db58:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
   1db5c:	e28d2028 	add	r2, sp, #40	; 0x28
   1db60:	e8920006 	ldm	r2, {r1, r2}
   1db64:	e1a0a001 	mov	sl, r1
   1db68:	e1a0b002 	mov	fp, r2
   1db6c:	eafffcd2 	b	1cebc <_dtoa_r+0x3c8>
   1db70:	e1a01005 	mov	r1, r5
   1db74:	e1a00006 	mov	r0, r6
   1db78:	e3a0200a 	mov	r2, #10
   1db7c:	e3a03000 	mov	r3, #0
   1db80:	eb0005fb 	bl	1f374 <__multadd>
   1db84:	e2888001 	add	r8, r8, #1
   1db88:	e1a05000 	mov	r5, r0
   1db8c:	e1a07000 	mov	r7, r0
   1db90:	eaffff97 	b	1d9f4 <_dtoa_r+0xf00>
   1db94:	e59d4010 	ldr	r4, [sp, #16]
   1db98:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   1db9c:	e58d405c 	str	r4, [sp, #92]	; 0x5c
   1dba0:	eafffec1 	b	1d6ac <_dtoa_r+0xbb8>
   1dba4:	e59d2010 	ldr	r2, [sp, #16]
   1dba8:	e2624000 	rsb	r4, r2, #0
   1dbac:	e3540000 	cmp	r4, #0
   1dbb0:	0a0000cb 	beq	1dee4 <_dtoa_r+0x13f0>
   1dbb4:	e51f3bb0 	ldr	r3, [pc, #-2992]	; 1d00c <_dtoa_r+0x518>
   1dbb8:	e204200f 	and	r2, r4, #15
   1dbbc:	e0833182 	add	r3, r3, r2, lsl #3
   1dbc0:	e28d1018 	add	r1, sp, #24
   1dbc4:	e8910003 	ldm	r1, {r0, r1}
   1dbc8:	e893000c 	ldm	r3, {r2, r3}
   1dbcc:	eb001bc6 	bl	24aec <__aeabi_dmul>
   1dbd0:	e1b04244 	asrs	r4, r4, #4
   1dbd4:	e58d0018 	str	r0, [sp, #24]
   1dbd8:	e58d101c 	str	r1, [sp, #28]
   1dbdc:	0a0000c0 	beq	1dee4 <_dtoa_r+0x13f0>
   1dbe0:	e51f5be0 	ldr	r5, [pc, #-3040]	; 1d008 <_dtoa_r+0x514>
   1dbe4:	e3a07002 	mov	r7, #2
   1dbe8:	e3140001 	tst	r4, #1
   1dbec:	0a000002 	beq	1dbfc <_dtoa_r+0x1108>
   1dbf0:	e895000c 	ldm	r5, {r2, r3}
   1dbf4:	eb001bbc 	bl	24aec <__aeabi_dmul>
   1dbf8:	e2877001 	add	r7, r7, #1
   1dbfc:	e1b040c4 	asrs	r4, r4, #1
   1dc00:	e2855008 	add	r5, r5, #8
   1dc04:	1afffff7 	bne	1dbe8 <_dtoa_r+0x10f4>
   1dc08:	e58d0018 	str	r0, [sp, #24]
   1dc0c:	e58d101c 	str	r1, [sp, #28]
   1dc10:	eafffe7a 	b	1d600 <_dtoa_r+0xb0c>
   1dc14:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   1dc18:	e1a09004 	mov	r9, r4
   1dc1c:	eafffdc6 	b	1d33c <_dtoa_r+0x848>
   1dc20:	e51f1c1c 	ldr	r1, [pc, #-3100]	; 1d00c <_dtoa_r+0x518>
   1dc24:	e24ca001 	sub	sl, ip, #1
   1dc28:	e081118a 	add	r1, r1, sl, lsl #3
   1dc2c:	e1a02008 	mov	r2, r8
   1dc30:	e1a03009 	mov	r3, r9
   1dc34:	e8910003 	ldm	r1, {r0, r1}
   1dc38:	e58dc004 	str	ip, [sp, #4]
   1dc3c:	eb001baa 	bl	24aec <__aeabi_dmul>
   1dc40:	e58d0050 	str	r0, [sp, #80]	; 0x50
   1dc44:	e58d1054 	str	r1, [sp, #84]	; 0x54
   1dc48:	e28d1018 	add	r1, sp, #24
   1dc4c:	e8910003 	ldm	r1, {r0, r1}
   1dc50:	eb001d0c 	bl	25088 <__aeabi_d2iz>
   1dc54:	e1a04000 	mov	r4, r0
   1dc58:	eb001b68 	bl	24a00 <__aeabi_i2d>
   1dc5c:	e1a03001 	mov	r3, r1
   1dc60:	e1a02000 	mov	r2, r0
   1dc64:	e28d1018 	add	r1, sp, #24
   1dc68:	e8910003 	ldm	r1, {r0, r1}
   1dc6c:	eb001aa0 	bl	246f4 <__aeabi_dsub>
   1dc70:	e59d3020 	ldr	r3, [sp, #32]
   1dc74:	e58d3018 	str	r3, [sp, #24]
   1dc78:	e2843030 	add	r3, r4, #48	; 0x30
   1dc7c:	e59d4018 	ldr	r4, [sp, #24]
   1dc80:	e4c43001 	strb	r3, [r4], #1
   1dc84:	e59dc004 	ldr	ip, [sp, #4]
   1dc88:	e35c0001 	cmp	ip, #1
   1dc8c:	e1a08000 	mov	r8, r0
   1dc90:	e1a09001 	mov	r9, r1
   1dc94:	e58d4018 	str	r4, [sp, #24]
   1dc98:	e1a07004 	mov	r7, r4
   1dc9c:	0a000017 	beq	1dd00 <_dtoa_r+0x120c>
   1dca0:	e59d4020 	ldr	r4, [sp, #32]
   1dca4:	e2447001 	sub	r7, r4, #1
   1dca8:	e087700c 	add	r7, r7, ip
   1dcac:	e51f2ca4 	ldr	r2, [pc, #-3236]	; 1d010 <_dtoa_r+0x51c>
   1dcb0:	e3a03000 	mov	r3, #0
   1dcb4:	eb001b8c 	bl	24aec <__aeabi_dmul>
   1dcb8:	e1a09001 	mov	r9, r1
   1dcbc:	e1a08000 	mov	r8, r0
   1dcc0:	eb001cf0 	bl	25088 <__aeabi_d2iz>
   1dcc4:	e1a05000 	mov	r5, r0
   1dcc8:	eb001b4c 	bl	24a00 <__aeabi_i2d>
   1dccc:	e2855030 	add	r5, r5, #48	; 0x30
   1dcd0:	e1a02000 	mov	r2, r0
   1dcd4:	e1a03001 	mov	r3, r1
   1dcd8:	e1a00008 	mov	r0, r8
   1dcdc:	e1a01009 	mov	r1, r9
   1dce0:	eb001a83 	bl	246f4 <__aeabi_dsub>
   1dce4:	e5e45001 	strb	r5, [r4, #1]!
   1dce8:	e1540007 	cmp	r4, r7
   1dcec:	1affffee 	bne	1dcac <_dtoa_r+0x11b8>
   1dcf0:	e59d4018 	ldr	r4, [sp, #24]
   1dcf4:	e1a08000 	mov	r8, r0
   1dcf8:	e1a09001 	mov	r9, r1
   1dcfc:	e084700a 	add	r7, r4, sl
   1dd00:	e51f2cf4 	ldr	r2, [pc, #-3316]	; 1d014 <_dtoa_r+0x520>
   1dd04:	e3a03000 	mov	r3, #0
   1dd08:	e28d1050 	add	r1, sp, #80	; 0x50
   1dd0c:	e8910003 	ldm	r1, {r0, r1}
   1dd10:	eb001a78 	bl	246f8 <__adddf3>
   1dd14:	e1a02000 	mov	r2, r0
   1dd18:	e1a03001 	mov	r3, r1
   1dd1c:	e1a00008 	mov	r0, r8
   1dd20:	e1a01009 	mov	r1, r9
   1dd24:	eb001c8c 	bl	24f5c <__gedf2>
   1dd28:	e3500000 	cmp	r0, #0
   1dd2c:	da000074 	ble	1df04 <_dtoa_r+0x1410>
   1dd30:	e5575001 	ldrb	r5, [r7, #-1]
   1dd34:	e59d8020 	ldr	r8, [sp, #32]
   1dd38:	eafffcf6 	b	1d118 <_dtoa_r+0x624>
   1dd3c:	e59d8020 	ldr	r8, [sp, #32]
   1dd40:	e58d7020 	str	r7, [sp, #32]
   1dd44:	eafffd90 	b	1d38c <_dtoa_r+0x898>
   1dd48:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
   1dd4c:	e1a01004 	mov	r1, r4
   1dd50:	eb00072e 	bl	1fa10 <__mcmp>
   1dd54:	e3500000 	cmp	r0, #0
   1dd58:	aafffd61 	bge	1d2e4 <_dtoa_r+0x7f0>
   1dd5c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1dd60:	e3a03000 	mov	r3, #0
   1dd64:	e1a00006 	mov	r0, r6
   1dd68:	e3a0200a 	mov	r2, #10
   1dd6c:	eb000580 	bl	1f374 <__multadd>
   1dd70:	e59d1010 	ldr	r1, [sp, #16]
   1dd74:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
   1dd78:	e2411001 	sub	r1, r1, #1
   1dd7c:	e3530000 	cmp	r3, #0
   1dd80:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1dd84:	e58d1010 	str	r1, [sp, #16]
   1dd88:	1a0000e7 	bne	1e12c <_dtoa_r+0x1638>
   1dd8c:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
   1dd90:	e58d3030 	str	r3, [sp, #48]	; 0x30
   1dd94:	eafffd52 	b	1d2e4 <_dtoa_r+0x7f0>
   1dd98:	e5943010 	ldr	r3, [r4, #16]
   1dd9c:	e2833004 	add	r3, r3, #4
   1dda0:	e7940103 	ldr	r0, [r4, r3, lsl #2]
   1dda4:	eb0005e1 	bl	1f530 <__hi0bits>
   1dda8:	e2603020 	rsb	r3, r0, #32
   1ddac:	eafffd2d 	b	1d268 <_dtoa_r+0x774>
   1ddb0:	e3a03001 	mov	r3, #1
   1ddb4:	e58d304c 	str	r3, [sp, #76]	; 0x4c
   1ddb8:	e58d3030 	str	r3, [sp, #48]	; 0x30
   1ddbc:	e58d3090 	str	r3, [sp, #144]	; 0x90
   1ddc0:	e3a01000 	mov	r1, #0
   1ddc4:	e5861044 	str	r1, [r6, #68]	; 0x44
   1ddc8:	e0034004 	and	r4, r3, r4
   1ddcc:	eafffdd4 	b	1d524 <_dtoa_r+0xa30>
   1ddd0:	e35c000e 	cmp	ip, #14
   1ddd4:	83a03000 	movhi	r3, #0
   1ddd8:	93a03001 	movls	r3, #1
   1dddc:	e58dc030 	str	ip, [sp, #48]	; 0x30
   1dde0:	eafffff6 	b	1ddc0 <_dtoa_r+0x12cc>
   1dde4:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   1dde8:	e59da030 	ldr	sl, [sp, #48]	; 0x30
   1ddec:	e59db038 	ldr	fp, [sp, #56]	; 0x38
   1ddf0:	e59d7020 	ldr	r7, [sp, #32]
   1ddf4:	ea000005 	b	1de10 <_dtoa_r+0x131c>
   1ddf8:	e1a0100b 	mov	r1, fp
   1ddfc:	e1a00006 	mov	r0, r6
   1de00:	e3a0200a 	mov	r2, #10
   1de04:	e3a03000 	mov	r3, #0
   1de08:	eb000559 	bl	1f374 <__multadd>
   1de0c:	e1a0b000 	mov	fp, r0
   1de10:	e1a01004 	mov	r1, r4
   1de14:	e1a0000b 	mov	r0, fp
   1de18:	ebfffab7 	bl	1c8fc <quorem>
   1de1c:	e2800030 	add	r0, r0, #48	; 0x30
   1de20:	e7c70005 	strb	r0, [r7, r5]
   1de24:	e2855001 	add	r5, r5, #1
   1de28:	e15a0005 	cmp	sl, r5
   1de2c:	cafffff1 	bgt	1ddf8 <_dtoa_r+0x1304>
   1de30:	e59da020 	ldr	sl, [sp, #32]
   1de34:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   1de38:	e58db038 	str	fp, [sp, #56]	; 0x38
   1de3c:	e1a08000 	mov	r8, r0
   1de40:	e3520001 	cmp	r2, #1
   1de44:	a08aa002 	addge	sl, sl, r2
   1de48:	b28aa001 	addlt	sl, sl, #1
   1de4c:	e3a05000 	mov	r5, #0
   1de50:	e3a02001 	mov	r2, #1
   1de54:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1de58:	e1a00006 	mov	r0, r6
   1de5c:	eb0006ad 	bl	1f918 <__lshift>
   1de60:	e1a01004 	mov	r1, r4
   1de64:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1de68:	eb0006e8 	bl	1fa10 <__mcmp>
   1de6c:	e3500000 	cmp	r0, #0
   1de70:	da000011 	ble	1debc <_dtoa_r+0x13c8>
   1de74:	e55a3001 	ldrb	r3, [sl, #-1]
   1de78:	e59d1020 	ldr	r1, [sp, #32]
   1de7c:	e2812001 	add	r2, r1, #1
   1de80:	ea000001 	b	1de8c <_dtoa_r+0x1398>
   1de84:	e55a3002 	ldrb	r3, [sl, #-2]
   1de88:	e24aa001 	sub	sl, sl, #1
   1de8c:	e3530039 	cmp	r3, #57	; 0x39
   1de90:	1a000064 	bne	1e028 <_dtoa_r+0x1534>
   1de94:	e15a0002 	cmp	sl, r2
   1de98:	1afffff9 	bne	1de84 <_dtoa_r+0x1390>
   1de9c:	e59d3010 	ldr	r3, [sp, #16]
   1dea0:	e2833001 	add	r3, r3, #1
   1dea4:	e58d3010 	str	r3, [sp, #16]
   1dea8:	e3a03031 	mov	r3, #49	; 0x31
   1deac:	e59d8020 	ldr	r8, [sp, #32]
   1deb0:	e54a3001 	strb	r3, [sl, #-1]
   1deb4:	e58da020 	str	sl, [sp, #32]
   1deb8:	eafffd28 	b	1d360 <_dtoa_r+0x86c>
   1debc:	1a000001 	bne	1dec8 <_dtoa_r+0x13d4>
   1dec0:	e3180001 	tst	r8, #1
   1dec4:	1affffea 	bne	1de74 <_dtoa_r+0x1380>
   1dec8:	e1a0200a 	mov	r2, sl
   1decc:	e57a3001 	ldrb	r3, [sl, #-1]!
   1ded0:	e3530030 	cmp	r3, #48	; 0x30
   1ded4:	0afffffb 	beq	1dec8 <_dtoa_r+0x13d4>
   1ded8:	e59d8020 	ldr	r8, [sp, #32]
   1dedc:	e58d2020 	str	r2, [sp, #32]
   1dee0:	eafffd1e 	b	1d360 <_dtoa_r+0x86c>
   1dee4:	e3a07002 	mov	r7, #2
   1dee8:	eafffdc4 	b	1d600 <_dtoa_r+0xb0c>
   1deec:	e28d1038 	add	r1, sp, #56	; 0x38
   1def0:	e1a00006 	mov	r0, r6
   1def4:	e8910006 	ldm	r1, {r1, r2}
   1def8:	eb00064a 	bl	1f828 <__pow5mult>
   1defc:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1df00:	eafffcc4 	b	1d218 <_dtoa_r+0x724>
   1df04:	e28d3050 	add	r3, sp, #80	; 0x50
   1df08:	e893000c 	ldm	r3, {r2, r3}
   1df0c:	e51f0f00 	ldr	r0, [pc, #-3840]	; 1d014 <_dtoa_r+0x520>
   1df10:	e3a01000 	mov	r1, #0
   1df14:	eb0019f6 	bl	246f4 <__aeabi_dsub>
   1df18:	e1a02000 	mov	r2, r0
   1df1c:	e1a03001 	mov	r3, r1
   1df20:	e1a00008 	mov	r0, r8
   1df24:	e1a01009 	mov	r1, r9
   1df28:	eb001c0d 	bl	24f64 <__ledf2>
   1df2c:	e3500000 	cmp	r0, #0
   1df30:	aaffff09 	bge	1db5c <_dtoa_r+0x1068>
   1df34:	e1a02007 	mov	r2, r7
   1df38:	e5773001 	ldrb	r3, [r7, #-1]!
   1df3c:	e3530030 	cmp	r3, #48	; 0x30
   1df40:	0afffffb 	beq	1df34 <_dtoa_r+0x1440>
   1df44:	e59d405c 	ldr	r4, [sp, #92]	; 0x5c
   1df48:	e59d8020 	ldr	r8, [sp, #32]
   1df4c:	e58d4010 	str	r4, [sp, #16]
   1df50:	e58d2020 	str	r2, [sp, #32]
   1df54:	eafffd0c 	b	1d38c <_dtoa_r+0x898>
   1df58:	e1a00006 	mov	r0, r6
   1df5c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1df60:	eb000630 	bl	1f828 <__pow5mult>
   1df64:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1df68:	eafffcaa 	b	1d218 <_dtoa_r+0x724>
   1df6c:	e59d4058 	ldr	r4, [sp, #88]	; 0x58
   1df70:	e3540000 	cmp	r4, #0
   1df74:	059d3064 	ldreq	r3, [sp, #100]	; 0x64
   1df78:	12833e43 	addne	r3, r3, #1072	; 0x430
   1df7c:	12833003 	addne	r3, r3, #3
   1df80:	159d403c 	ldrne	r4, [sp, #60]	; 0x3c
   1df84:	059d403c 	ldreq	r4, [sp, #60]	; 0x3c
   1df88:	02633036 	rsbeq	r3, r3, #54	; 0x36
   1df8c:	e59d5034 	ldr	r5, [sp, #52]	; 0x34
   1df90:	eafffd2b 	b	1d444 <_dtoa_r+0x950>
   1df94:	e3a04000 	mov	r4, #0
   1df98:	e1a09004 	mov	r9, r4
   1df9c:	eafffd42 	b	1d4ac <_dtoa_r+0x9b8>
   1dfa0:	e59d6060 	ldr	r6, [sp, #96]	; 0x60
   1dfa4:	e59d8020 	ldr	r8, [sp, #32]
   1dfa8:	eafffc5a 	b	1d118 <_dtoa_r+0x624>
   1dfac:	e2852001 	add	r2, r5, #1
   1dfb0:	e59d405c 	ldr	r4, [sp, #92]	; 0x5c
   1dfb4:	e20220ff 	and	r2, r2, #255	; 0xff
   1dfb8:	e58d7020 	str	r7, [sp, #32]
   1dfbc:	e58d4010 	str	r4, [sp, #16]
   1dfc0:	e5432001 	strb	r2, [r3, #-1]
   1dfc4:	eafffcf0 	b	1d38c <_dtoa_r+0x898>
   1dfc8:	e35b0000 	cmp	fp, #0
   1dfcc:	e58d4038 	str	r4, [sp, #56]	; 0x38
   1dfd0:	e59d8018 	ldr	r8, [sp, #24]
   1dfd4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1dfd8:	da00000c 	ble	1e010 <_dtoa_r+0x151c>
   1dfdc:	e3a02001 	mov	r2, #1
   1dfe0:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
   1dfe4:	e1a00006 	mov	r0, r6
   1dfe8:	eb00064a 	bl	1f918 <__lshift>
   1dfec:	e1a01004 	mov	r1, r4
   1dff0:	e58d0038 	str	r0, [sp, #56]	; 0x38
   1dff4:	eb000685 	bl	1fa10 <__mcmp>
   1dff8:	e3500000 	cmp	r0, #0
   1dffc:	da000040 	ble	1e104 <_dtoa_r+0x1610>
   1e000:	e3580039 	cmp	r8, #57	; 0x39
   1e004:	0a00002d 	beq	1e0c0 <_dtoa_r+0x15cc>
   1e008:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
   1e00c:	e2838031 	add	r8, r3, #49	; 0x31
   1e010:	e59d3014 	ldr	r3, [sp, #20]
   1e014:	e4c38001 	strb	r8, [r3], #1
   1e018:	e59d8020 	ldr	r8, [sp, #32]
   1e01c:	e1a09007 	mov	r9, r7
   1e020:	e58d3020 	str	r3, [sp, #32]
   1e024:	eafffccd 	b	1d360 <_dtoa_r+0x86c>
   1e028:	e2833001 	add	r3, r3, #1
   1e02c:	e59d8020 	ldr	r8, [sp, #32]
   1e030:	e54a3001 	strb	r3, [sl, #-1]
   1e034:	e58da020 	str	sl, [sp, #32]
   1e038:	eafffcc8 	b	1d360 <_dtoa_r+0x86c>
   1e03c:	e5991004 	ldr	r1, [r9, #4]
   1e040:	e1a00006 	mov	r0, r6
   1e044:	eb0004a2 	bl	1f2d4 <_Balloc>
   1e048:	e5992010 	ldr	r2, [r9, #16]
   1e04c:	e2822002 	add	r2, r2, #2
   1e050:	e1a05000 	mov	r5, r0
   1e054:	e1a02102 	lsl	r2, r2, #2
   1e058:	e289100c 	add	r1, r9, #12
   1e05c:	e280000c 	add	r0, r0, #12
   1e060:	ebffe93b 	bl	18554 <memcpy>
   1e064:	e1a00006 	mov	r0, r6
   1e068:	e1a01005 	mov	r1, r5
   1e06c:	e3a02001 	mov	r2, #1
   1e070:	eb000628 	bl	1f918 <__lshift>
   1e074:	e1a07000 	mov	r7, r0
   1e078:	eafffe55 	b	1d9d4 <_dtoa_r+0xee0>
   1e07c:	e59d8018 	ldr	r8, [sp, #24]
   1e080:	e3580039 	cmp	r8, #57	; 0x39
   1e084:	e58d4038 	str	r4, [sp, #56]	; 0x38
   1e088:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1e08c:	0a00000b 	beq	1e0c0 <_dtoa_r+0x15cc>
   1e090:	e59d3014 	ldr	r3, [sp, #20]
   1e094:	e2888001 	add	r8, r8, #1
   1e098:	e4c38001 	strb	r8, [r3], #1
   1e09c:	e59d8020 	ldr	r8, [sp, #32]
   1e0a0:	e1a09007 	mov	r9, r7
   1e0a4:	e58d3020 	str	r3, [sp, #32]
   1e0a8:	eafffcac 	b	1d360 <_dtoa_r+0x86c>
   1e0ac:	e58d4038 	str	r4, [sp, #56]	; 0x38
   1e0b0:	e59d8018 	ldr	r8, [sp, #24]
   1e0b4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1e0b8:	e1a09007 	mov	r9, r7
   1e0bc:	eaffff63 	b	1de50 <_dtoa_r+0x135c>
   1e0c0:	e59da014 	ldr	sl, [sp, #20]
   1e0c4:	e3a03039 	mov	r3, #57	; 0x39
   1e0c8:	e4ca3001 	strb	r3, [sl], #1
   1e0cc:	e1a09007 	mov	r9, r7
   1e0d0:	eaffff68 	b	1de78 <_dtoa_r+0x1384>
   1e0d4:	e59d8018 	ldr	r8, [sp, #24]
   1e0d8:	e3580039 	cmp	r8, #57	; 0x39
   1e0dc:	e58d4038 	str	r4, [sp, #56]	; 0x38
   1e0e0:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   1e0e4:	0afffff5 	beq	1e0c0 <_dtoa_r+0x15cc>
   1e0e8:	e35a0000 	cmp	sl, #0
   1e0ec:	caffffc5 	bgt	1e008 <_dtoa_r+0x1514>
   1e0f0:	eaffffc6 	b	1e010 <_dtoa_r+0x151c>
   1e0f4:	e59d4018 	ldr	r4, [sp, #24]
   1e0f8:	e59d8020 	ldr	r8, [sp, #32]
   1e0fc:	e58d4020 	str	r4, [sp, #32]
   1e100:	eafffca1 	b	1d38c <_dtoa_r+0x898>
   1e104:	1affffc1 	bne	1e010 <_dtoa_r+0x151c>
   1e108:	e3180001 	tst	r8, #1
   1e10c:	0affffbf 	beq	1e010 <_dtoa_r+0x151c>
   1e110:	eaffffba 	b	1e000 <_dtoa_r+0x150c>
   1e114:	e59d405c 	ldr	r4, [sp, #92]	; 0x5c
   1e118:	e58d4010 	str	r4, [sp, #16]
   1e11c:	e59d4018 	ldr	r4, [sp, #24]
   1e120:	e59d8020 	ldr	r8, [sp, #32]
   1e124:	e58d4020 	str	r4, [sp, #32]
   1e128:	eafffc97 	b	1d38c <_dtoa_r+0x898>
   1e12c:	e1a01009 	mov	r1, r9
   1e130:	e3a0200a 	mov	r2, #10
   1e134:	e1a00006 	mov	r0, r6
   1e138:	e3a03000 	mov	r3, #0
   1e13c:	eb00048c 	bl	1f374 <__multadd>
   1e140:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
   1e144:	e1a09000 	mov	r9, r0
   1e148:	e58d2030 	str	r2, [sp, #48]	; 0x30
   1e14c:	eafffc64 	b	1d2e4 <_dtoa_r+0x7f0>
   1e150:	1263303c 	rsbne	r3, r3, #60	; 0x3c
   1e154:	0afffc4f 	beq	1d298 <_dtoa_r+0x7a4>
   1e158:	eafffc47 	b	1d27c <_dtoa_r+0x788>

0001e15c <_malloc_trim_r>:
   1e15c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e160:	e59f50e0 	ldr	r5, [pc, #224]	; 1e248 <_malloc_trim_r+0xec>
   1e164:	e1a07001 	mov	r7, r1
   1e168:	e1a04000 	mov	r4, r0
   1e16c:	ebffe96a 	bl	1871c <__malloc_lock>
   1e170:	e5953008 	ldr	r3, [r5, #8]
   1e174:	e5936004 	ldr	r6, [r3, #4]
   1e178:	e3c66003 	bic	r6, r6, #3
   1e17c:	e2863efe 	add	r3, r6, #4064	; 0xfe0
   1e180:	e283300f 	add	r3, r3, #15
   1e184:	e0677003 	rsb	r7, r7, r3
   1e188:	e1a07627 	lsr	r7, r7, #12
   1e18c:	e2477001 	sub	r7, r7, #1
   1e190:	e1a07607 	lsl	r7, r7, #12
   1e194:	e3570a01 	cmp	r7, #4096	; 0x1000
   1e198:	e1a00004 	mov	r0, r4
   1e19c:	ba000006 	blt	1e1bc <_malloc_trim_r+0x60>
   1e1a0:	e3a01000 	mov	r1, #0
   1e1a4:	ebffc808 	bl	101cc <_sbrk_r>
   1e1a8:	e5953008 	ldr	r3, [r5, #8]
   1e1ac:	e0833006 	add	r3, r3, r6
   1e1b0:	e1500003 	cmp	r0, r3
   1e1b4:	e1a00004 	mov	r0, r4
   1e1b8:	0a000002 	beq	1e1c8 <_malloc_trim_r+0x6c>
   1e1bc:	ebffe957 	bl	18720 <__malloc_unlock>
   1e1c0:	e3a00000 	mov	r0, #0
   1e1c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e1c8:	e2671000 	rsb	r1, r7, #0
   1e1cc:	ebffc7fe 	bl	101cc <_sbrk_r>
   1e1d0:	e3700001 	cmn	r0, #1
   1e1d4:	0a00000b 	beq	1e208 <_malloc_trim_r+0xac>
   1e1d8:	e59f306c 	ldr	r3, [pc, #108]	; 1e24c <_malloc_trim_r+0xf0>
   1e1dc:	e5931000 	ldr	r1, [r3]
   1e1e0:	e5952008 	ldr	r2, [r5, #8]
   1e1e4:	e0676006 	rsb	r6, r7, r6
   1e1e8:	e3866001 	orr	r6, r6, #1
   1e1ec:	e0677001 	rsb	r7, r7, r1
   1e1f0:	e1a00004 	mov	r0, r4
   1e1f4:	e5826004 	str	r6, [r2, #4]
   1e1f8:	e5837000 	str	r7, [r3]
   1e1fc:	ebffe947 	bl	18720 <__malloc_unlock>
   1e200:	e3a00001 	mov	r0, #1
   1e204:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e208:	e1a00004 	mov	r0, r4
   1e20c:	e3a01000 	mov	r1, #0
   1e210:	ebffc7ed 	bl	101cc <_sbrk_r>
   1e214:	e5953008 	ldr	r3, [r5, #8]
   1e218:	e0632000 	rsb	r2, r3, r0
   1e21c:	e352000f 	cmp	r2, #15
   1e220:	da000006 	ble	1e240 <_malloc_trim_r+0xe4>
   1e224:	e59f1024 	ldr	r1, [pc, #36]	; 1e250 <_malloc_trim_r+0xf4>
   1e228:	e5911000 	ldr	r1, [r1]
   1e22c:	e0610000 	rsb	r0, r1, r0
   1e230:	e59f1014 	ldr	r1, [pc, #20]	; 1e24c <_malloc_trim_r+0xf0>
   1e234:	e3822001 	orr	r2, r2, #1
   1e238:	e5810000 	str	r0, [r1]
   1e23c:	e5832004 	str	r2, [r3, #4]
   1e240:	e1a00004 	mov	r0, r4
   1e244:	eaffffdc 	b	1e1bc <_malloc_trim_r+0x60>
   1e248:	40000078 	.word	0x40000078
   1e24c:	400012b4 	.word	0x400012b4
   1e250:	40000480 	.word	0x40000480

0001e254 <_free_r>:
   1e254:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1e258:	e2515000 	subs	r5, r1, #0
   1e25c:	e1a04000 	mov	r4, r0
   1e260:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1e264:	ebffe92c 	bl	1871c <__malloc_lock>
   1e268:	e5150004 	ldr	r0, [r5, #-4]
   1e26c:	e59fc22c 	ldr	ip, [pc, #556]	; 1e4a0 <_free_r+0x24c>
   1e270:	e2451008 	sub	r1, r5, #8
   1e274:	e3c03001 	bic	r3, r0, #1
   1e278:	e0812003 	add	r2, r1, r3
   1e27c:	e59c7008 	ldr	r7, [ip, #8]
   1e280:	e5926004 	ldr	r6, [r2, #4]
   1e284:	e1570002 	cmp	r7, r2
   1e288:	e3c66003 	bic	r6, r6, #3
   1e28c:	0a00005f 	beq	1e410 <_free_r+0x1bc>
   1e290:	e2100001 	ands	r0, r0, #1
   1e294:	e5826004 	str	r6, [r2, #4]
   1e298:	13a00000 	movne	r0, #0
   1e29c:	1a000009 	bne	1e2c8 <_free_r+0x74>
   1e2a0:	e5157008 	ldr	r7, [r5, #-8]
   1e2a4:	e0671001 	rsb	r1, r7, r1
   1e2a8:	e5915008 	ldr	r5, [r1, #8]
   1e2ac:	e28c8008 	add	r8, ip, #8
   1e2b0:	e1550008 	cmp	r5, r8
   1e2b4:	e0833007 	add	r3, r3, r7
   1e2b8:	1591700c 	ldrne	r7, [r1, #12]
   1e2bc:	1585700c 	strne	r7, [r5, #12]
   1e2c0:	15875008 	strne	r5, [r7, #8]
   1e2c4:	03a00001 	moveq	r0, #1
   1e2c8:	e0825006 	add	r5, r2, r6
   1e2cc:	e5955004 	ldr	r5, [r5, #4]
   1e2d0:	e3150001 	tst	r5, #1
   1e2d4:	1a000009 	bne	1e300 <_free_r+0xac>
   1e2d8:	e3500000 	cmp	r0, #0
   1e2dc:	e5925008 	ldr	r5, [r2, #8]
   1e2e0:	e0833006 	add	r3, r3, r6
   1e2e4:	1a000002 	bne	1e2f4 <_free_r+0xa0>
   1e2e8:	e59f61b4 	ldr	r6, [pc, #436]	; 1e4a4 <_free_r+0x250>
   1e2ec:	e1550006 	cmp	r5, r6
   1e2f0:	0a00005c 	beq	1e468 <_free_r+0x214>
   1e2f4:	e592200c 	ldr	r2, [r2, #12]
   1e2f8:	e585200c 	str	r2, [r5, #12]
   1e2fc:	e5825008 	str	r5, [r2, #8]
   1e300:	e3832001 	orr	r2, r3, #1
   1e304:	e3500000 	cmp	r0, #0
   1e308:	e5812004 	str	r2, [r1, #4]
   1e30c:	e7813003 	str	r3, [r1, r3]
   1e310:	1a00002e 	bne	1e3d0 <_free_r+0x17c>
   1e314:	e3530c02 	cmp	r3, #512	; 0x200
   1e318:	3a00002f 	bcc	1e3dc <_free_r+0x188>
   1e31c:	e1a024a3 	lsr	r2, r3, #9
   1e320:	e3520004 	cmp	r2, #4
   1e324:	91a05323 	lsrls	r5, r3, #6
   1e328:	92855038 	addls	r5, r5, #56	; 0x38
   1e32c:	91a00185 	lslls	r0, r5, #3
   1e330:	9a000014 	bls	1e388 <_free_r+0x134>
   1e334:	e3520014 	cmp	r2, #20
   1e338:	9282505b 	addls	r5, r2, #91	; 0x5b
   1e33c:	91a00185 	lslls	r0, r5, #3
   1e340:	9a000010 	bls	1e388 <_free_r+0x134>
   1e344:	e3520054 	cmp	r2, #84	; 0x54
   1e348:	91a05623 	lsrls	r5, r3, #12
   1e34c:	9285506e 	addls	r5, r5, #110	; 0x6e
   1e350:	91a00185 	lslls	r0, r5, #3
   1e354:	9a00000b 	bls	1e388 <_free_r+0x134>
   1e358:	e3520f55 	cmp	r2, #340	; 0x154
   1e35c:	91a057a3 	lsrls	r5, r3, #15
   1e360:	92855077 	addls	r5, r5, #119	; 0x77
   1e364:	91a00185 	lslls	r0, r5, #3
   1e368:	9a000006 	bls	1e388 <_free_r+0x134>
   1e36c:	e59f0134 	ldr	r0, [pc, #308]	; 1e4a8 <_free_r+0x254>
   1e370:	e1520000 	cmp	r2, r0
   1e374:	91a05923 	lsrls	r5, r3, #18
   1e378:	9285507c 	addls	r5, r5, #124	; 0x7c
   1e37c:	91a00185 	lslls	r0, r5, #3
   1e380:	83a00e3f 	movhi	r0, #1008	; 0x3f0
   1e384:	83a0507e 	movhi	r5, #126	; 0x7e
   1e388:	e08cc000 	add	ip, ip, r0
   1e38c:	e59c2008 	ldr	r2, [ip, #8]
   1e390:	e152000c 	cmp	r2, ip
   1e394:	e59f0104 	ldr	r0, [pc, #260]	; 1e4a0 <_free_r+0x24c>
   1e398:	1a000003 	bne	1e3ac <_free_r+0x158>
   1e39c:	ea000038 	b	1e484 <_free_r+0x230>
   1e3a0:	e5922008 	ldr	r2, [r2, #8]
   1e3a4:	e15c0002 	cmp	ip, r2
   1e3a8:	0a000003 	beq	1e3bc <_free_r+0x168>
   1e3ac:	e5920004 	ldr	r0, [r2, #4]
   1e3b0:	e3c00003 	bic	r0, r0, #3
   1e3b4:	e1530000 	cmp	r3, r0
   1e3b8:	3afffff8 	bcc	1e3a0 <_free_r+0x14c>
   1e3bc:	e592300c 	ldr	r3, [r2, #12]
   1e3c0:	e581300c 	str	r3, [r1, #12]
   1e3c4:	e5812008 	str	r2, [r1, #8]
   1e3c8:	e582100c 	str	r1, [r2, #12]
   1e3cc:	e5831008 	str	r1, [r3, #8]
   1e3d0:	e1a00004 	mov	r0, r4
   1e3d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1e3d8:	eaffe8d0 	b	18720 <__malloc_unlock>
   1e3dc:	e59c2004 	ldr	r2, [ip, #4]
   1e3e0:	e1a031a3 	lsr	r3, r3, #3
   1e3e4:	e1a00143 	asr	r0, r3, #2
   1e3e8:	e3a05001 	mov	r5, #1
   1e3ec:	e1820015 	orr	r0, r2, r5, lsl r0
   1e3f0:	e08c3183 	add	r3, ip, r3, lsl #3
   1e3f4:	e5932008 	ldr	r2, [r3, #8]
   1e3f8:	e581300c 	str	r3, [r1, #12]
   1e3fc:	e5812008 	str	r2, [r1, #8]
   1e400:	e58c0004 	str	r0, [ip, #4]
   1e404:	e5831008 	str	r1, [r3, #8]
   1e408:	e582100c 	str	r1, [r2, #12]
   1e40c:	eaffffef 	b	1e3d0 <_free_r+0x17c>
   1e410:	e3100001 	tst	r0, #1
   1e414:	e0863003 	add	r3, r6, r3
   1e418:	1a000006 	bne	1e438 <_free_r+0x1e4>
   1e41c:	e5152008 	ldr	r2, [r5, #-8]
   1e420:	e0621001 	rsb	r1, r2, r1
   1e424:	e591000c 	ldr	r0, [r1, #12]
   1e428:	e5915008 	ldr	r5, [r1, #8]
   1e42c:	e585000c 	str	r0, [r5, #12]
   1e430:	e5805008 	str	r5, [r0, #8]
   1e434:	e0833002 	add	r3, r3, r2
   1e438:	e59f206c 	ldr	r2, [pc, #108]	; 1e4ac <_free_r+0x258>
   1e43c:	e5920000 	ldr	r0, [r2]
   1e440:	e3832001 	orr	r2, r3, #1
   1e444:	e1530000 	cmp	r3, r0
   1e448:	e5812004 	str	r2, [r1, #4]
   1e44c:	e58c1008 	str	r1, [ip, #8]
   1e450:	3affffde 	bcc	1e3d0 <_free_r+0x17c>
   1e454:	e59f3054 	ldr	r3, [pc, #84]	; 1e4b0 <_free_r+0x25c>
   1e458:	e1a00004 	mov	r0, r4
   1e45c:	e5931000 	ldr	r1, [r3]
   1e460:	ebffff3d 	bl	1e15c <_malloc_trim_r>
   1e464:	eaffffd9 	b	1e3d0 <_free_r+0x17c>
   1e468:	e3832001 	orr	r2, r3, #1
   1e46c:	e58c1014 	str	r1, [ip, #20]
   1e470:	e58c1010 	str	r1, [ip, #16]
   1e474:	e581500c 	str	r5, [r1, #12]
   1e478:	e9810024 	stmib	r1, {r2, r5}
   1e47c:	e7813003 	str	r3, [r1, r3]
   1e480:	eaffffd2 	b	1e3d0 <_free_r+0x17c>
   1e484:	e5903004 	ldr	r3, [r0, #4]
   1e488:	e1a05145 	asr	r5, r5, #2
   1e48c:	e3a0c001 	mov	ip, #1
   1e490:	e183c51c 	orr	ip, r3, ip, lsl r5
   1e494:	e1a03002 	mov	r3, r2
   1e498:	e580c004 	str	ip, [r0, #4]
   1e49c:	eaffffc7 	b	1e3c0 <_free_r+0x16c>
   1e4a0:	40000078 	.word	0x40000078
   1e4a4:	40000080 	.word	0x40000080
   1e4a8:	00000554 	.word	0x00000554
   1e4ac:	40000484 	.word	0x40000484
   1e4b0:	400012b0 	.word	0x400012b0

0001e4b4 <rshift>:
   1e4b4:	e5902010 	ldr	r2, [r0, #16]
   1e4b8:	e1a032c1 	asr	r3, r1, #5
   1e4bc:	e1530002 	cmp	r3, r2
   1e4c0:	e92d01f0 	push	{r4, r5, r6, r7, r8}
   1e4c4:	e2805014 	add	r5, r0, #20
   1e4c8:	aa000020 	bge	1e550 <rshift+0x9c>
   1e4cc:	e2822005 	add	r2, r2, #5
   1e4d0:	e2833005 	add	r3, r3, #5
   1e4d4:	e211101f 	ands	r1, r1, #31
   1e4d8:	e0802102 	add	r2, r0, r2, lsl #2
   1e4dc:	e0806103 	add	r6, r0, r3, lsl #2
   1e4e0:	0a000020 	beq	1e568 <rshift+0xb4>
   1e4e4:	e790c103 	ldr	ip, [r0, r3, lsl #2]
   1e4e8:	e2863004 	add	r3, r6, #4
   1e4ec:	e1520003 	cmp	r2, r3
   1e4f0:	e2618020 	rsb	r8, r1, #32
   1e4f4:	e1a0c13c 	lsr	ip, ip, r1
   1e4f8:	91a03005 	movls	r3, r5
   1e4fc:	9a00000c 	bls	1e534 <rshift+0x80>
   1e500:	e1a04005 	mov	r4, r5
   1e504:	e5937000 	ldr	r7, [r3]
   1e508:	e18cc817 	orr	ip, ip, r7, lsl r8
   1e50c:	e484c004 	str	ip, [r4], #4
   1e510:	e493c004 	ldr	ip, [r3], #4
   1e514:	e1520003 	cmp	r2, r3
   1e518:	e1a0c13c 	lsr	ip, ip, r1
   1e51c:	8afffff8 	bhi	1e504 <rshift+0x50>
   1e520:	e0663002 	rsb	r3, r6, r2
   1e524:	e2433005 	sub	r3, r3, #5
   1e528:	e3c33003 	bic	r3, r3, #3
   1e52c:	e2833018 	add	r3, r3, #24
   1e530:	e0803003 	add	r3, r0, r3
   1e534:	e35c0000 	cmp	ip, #0
   1e538:	e583c000 	str	ip, [r3]
   1e53c:	0a000016 	beq	1e59c <rshift+0xe8>
   1e540:	e2833004 	add	r3, r3, #4
   1e544:	e0655003 	rsb	r5, r5, r3
   1e548:	e1a05145 	asr	r5, r5, #2
   1e54c:	ea000014 	b	1e5a4 <rshift+0xf0>
   1e550:	e3a03000 	mov	r3, #0
   1e554:	e5803010 	str	r3, [r0, #16]
   1e558:	e3a03000 	mov	r3, #0
   1e55c:	e5803014 	str	r3, [r0, #20]
   1e560:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
   1e564:	e12fff1e 	bx	lr
   1e568:	e1520006 	cmp	r2, r6
   1e56c:	81a03006 	movhi	r3, r6
   1e570:	81a01005 	movhi	r1, r5
   1e574:	9afffff5 	bls	1e550 <rshift+0x9c>
   1e578:	e493c004 	ldr	ip, [r3], #4
   1e57c:	e1520003 	cmp	r2, r3
   1e580:	e481c004 	str	ip, [r1], #4
   1e584:	8afffffb 	bhi	1e578 <rshift+0xc4>
   1e588:	e1e03006 	mvn	r3, r6
   1e58c:	e0833002 	add	r3, r3, r2
   1e590:	e3c33003 	bic	r3, r3, #3
   1e594:	e2833018 	add	r3, r3, #24
   1e598:	e0803003 	add	r3, r0, r3
   1e59c:	e0655003 	rsb	r5, r5, r3
   1e5a0:	e1a05145 	asr	r5, r5, #2
   1e5a4:	e3550000 	cmp	r5, #0
   1e5a8:	e5805010 	str	r5, [r0, #16]
   1e5ac:	1affffeb 	bne	1e560 <rshift+0xac>
   1e5b0:	eaffffe8 	b	1e558 <rshift+0xa4>

0001e5b4 <__hexdig_init>:
   1e5b4:	e59f006c 	ldr	r0, [pc, #108]	; 1e628 <__hexdig_init+0x74>
   1e5b8:	e59f306c 	ldr	r3, [pc, #108]	; 1e62c <__hexdig_init+0x78>
   1e5bc:	e3a01010 	mov	r1, #16
   1e5c0:	e3a02030 	mov	r2, #48	; 0x30
   1e5c4:	e7c31002 	strb	r1, [r3, r2]
   1e5c8:	e5f02001 	ldrb	r2, [r0, #1]!
   1e5cc:	e2811001 	add	r1, r1, #1
   1e5d0:	e3520000 	cmp	r2, #0
   1e5d4:	e20110ff 	and	r1, r1, #255	; 0xff
   1e5d8:	1afffff9 	bne	1e5c4 <__hexdig_init+0x10>
   1e5dc:	e59f004c 	ldr	r0, [pc, #76]	; 1e630 <__hexdig_init+0x7c>
   1e5e0:	e3a0101a 	mov	r1, #26
   1e5e4:	e3a02061 	mov	r2, #97	; 0x61
   1e5e8:	e7c31002 	strb	r1, [r3, r2]
   1e5ec:	e5f02001 	ldrb	r2, [r0, #1]!
   1e5f0:	e2811001 	add	r1, r1, #1
   1e5f4:	e3520000 	cmp	r2, #0
   1e5f8:	e20110ff 	and	r1, r1, #255	; 0xff
   1e5fc:	1afffff9 	bne	1e5e8 <__hexdig_init+0x34>
   1e600:	e59f002c 	ldr	r0, [pc, #44]	; 1e634 <__hexdig_init+0x80>
   1e604:	e3a0101a 	mov	r1, #26
   1e608:	e3a02041 	mov	r2, #65	; 0x41
   1e60c:	e7c31002 	strb	r1, [r3, r2]
   1e610:	e5f02001 	ldrb	r2, [r0, #1]!
   1e614:	e2811001 	add	r1, r1, #1
   1e618:	e3520000 	cmp	r2, #0
   1e61c:	e20110ff 	and	r1, r1, #255	; 0xff
   1e620:	1afffff9 	bne	1e60c <__hexdig_init+0x58>
   1e624:	e12fff1e 	bx	lr
   1e628:	00026a54 	.word	0x00026a54
   1e62c:	4000140c 	.word	0x4000140c
   1e630:	00026a4c 	.word	0x00026a4c
   1e634:	00026a44 	.word	0x00026a44

0001e638 <__gethex>:
   1e638:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e63c:	e24dd024 	sub	sp, sp, #36	; 0x24
   1e640:	e1a08001 	mov	r8, r1
   1e644:	e58d2014 	str	r2, [sp, #20]
   1e648:	e58d3020 	str	r3, [sp, #32]
   1e64c:	e58d0018 	str	r0, [sp, #24]
   1e650:	eb0002d2 	bl	1f1a0 <_localeconv_r>
   1e654:	e5900000 	ldr	r0, [r0]
   1e658:	e58d0008 	str	r0, [sp, #8]
   1e65c:	ebffe9ca 	bl	18d8c <strlen>
   1e660:	e59f67e8 	ldr	r6, [pc, #2024]	; 1ee50 <__gethex+0x818>
   1e664:	e1a03000 	mov	r3, r0
   1e668:	e5d61030 	ldrb	r1, [r6, #48]	; 0x30
   1e66c:	e59d0008 	ldr	r0, [sp, #8]
   1e670:	e3510000 	cmp	r1, #0
   1e674:	e0802003 	add	r2, r0, r3
   1e678:	e552b001 	ldrb	fp, [r2, #-1]
   1e67c:	0a00010c 	beq	1eab4 <__gethex+0x47c>
   1e680:	e5982000 	ldr	r2, [r8]
   1e684:	e5d21002 	ldrb	r1, [r2, #2]
   1e688:	e3510030 	cmp	r1, #48	; 0x30
   1e68c:	e2825002 	add	r5, r2, #2
   1e690:	13a07000 	movne	r7, #0
   1e694:	1a000006 	bne	1e6b4 <__gethex+0x7c>
   1e698:	e2822003 	add	r2, r2, #3
   1e69c:	e3a07000 	mov	r7, #0
   1e6a0:	e1a05002 	mov	r5, r2
   1e6a4:	e4d21001 	ldrb	r1, [r2], #1
   1e6a8:	e3510030 	cmp	r1, #48	; 0x30
   1e6ac:	e2877001 	add	r7, r7, #1
   1e6b0:	0afffffa 	beq	1e6a0 <__gethex+0x68>
   1e6b4:	e7d6a001 	ldrb	sl, [r6, r1]
   1e6b8:	e35a0000 	cmp	sl, #0
   1e6bc:	e59f478c 	ldr	r4, [pc, #1932]	; 1ee50 <__gethex+0x818>
   1e6c0:	0a0000ff 	beq	1eac4 <__gethex+0x48c>
   1e6c4:	e5d52000 	ldrb	r2, [r5]
   1e6c8:	e7d4a002 	ldrb	sl, [r4, r2]
   1e6cc:	e35a0000 	cmp	sl, #0
   1e6d0:	01a04005 	moveq	r4, r5
   1e6d4:	01a0900a 	moveq	r9, sl
   1e6d8:	0a000007 	beq	1e6fc <__gethex+0xc4>
   1e6dc:	e3a0a000 	mov	sl, #0
   1e6e0:	e1a02005 	mov	r2, r5
   1e6e4:	e1a04005 	mov	r4, r5
   1e6e8:	e5f21001 	ldrb	r1, [r2, #1]!
   1e6ec:	e7d69001 	ldrb	r9, [r6, r1]
   1e6f0:	e3590000 	cmp	r9, #0
   1e6f4:	e2844001 	add	r4, r4, #1
   1e6f8:	1afffffa 	bne	1e6e8 <__gethex+0xb0>
   1e6fc:	e1a02003 	mov	r2, r3
   1e700:	e1a00004 	mov	r0, r4
   1e704:	e59d1008 	ldr	r1, [sp, #8]
   1e708:	e58d3000 	str	r3, [sp]
   1e70c:	ebffe9f0 	bl	18ed4 <strncmp>
   1e710:	e3500000 	cmp	r0, #0
   1e714:	e59d3000 	ldr	r3, [sp]
   1e718:	15d42000 	ldrbne	r2, [r4]
   1e71c:	0a000013 	beq	1e770 <__gethex+0x138>
   1e720:	e35a0000 	cmp	sl, #0
   1e724:	058da010 	streq	sl, [sp, #16]
   1e728:	0a000002 	beq	1e738 <__gethex+0x100>
   1e72c:	e064a00a 	rsb	sl, r4, sl
   1e730:	e1a0a10a 	lsl	sl, sl, #2
   1e734:	e58da010 	str	sl, [sp, #16]
   1e738:	e3520050 	cmp	r2, #80	; 0x50
   1e73c:	0a00001d 	beq	1e7b8 <__gethex+0x180>
   1e740:	e3520070 	cmp	r2, #112	; 0x70
   1e744:	0a00001b 	beq	1e7b8 <__gethex+0x180>
   1e748:	e1a0c004 	mov	ip, r4
   1e74c:	e3590000 	cmp	r9, #0
   1e750:	e588c000 	str	ip, [r8]
   1e754:	0a000042 	beq	1e864 <__gethex+0x22c>
   1e758:	e3570000 	cmp	r7, #0
   1e75c:	03a07006 	moveq	r7, #6
   1e760:	13a07000 	movne	r7, #0
   1e764:	e1a00007 	mov	r0, r7
   1e768:	e28dd024 	add	sp, sp, #36	; 0x24
   1e76c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e770:	e35a0000 	cmp	sl, #0
   1e774:	15d42000 	ldrbne	r2, [r4]
   1e778:	1affffeb 	bne	1e72c <__gethex+0xf4>
   1e77c:	e7d42003 	ldrb	r2, [r4, r3]
   1e780:	e7d61002 	ldrb	r1, [r6, r2]
   1e784:	e084a003 	add	sl, r4, r3
   1e788:	e3510000 	cmp	r1, #0
   1e78c:	01a0400a 	moveq	r4, sl
   1e790:	01a0a004 	moveq	sl, r4
   1e794:	0affffe1 	beq	1e720 <__gethex+0xe8>
   1e798:	e1a0100a 	mov	r1, sl
   1e79c:	e1a0400a 	mov	r4, sl
   1e7a0:	e5f12001 	ldrb	r2, [r1, #1]!
   1e7a4:	e7d60002 	ldrb	r0, [r6, r2]
   1e7a8:	e3500000 	cmp	r0, #0
   1e7ac:	e2844001 	add	r4, r4, #1
   1e7b0:	1afffffa 	bne	1e7a0 <__gethex+0x168>
   1e7b4:	eaffffd9 	b	1e720 <__gethex+0xe8>
   1e7b8:	e5d42001 	ldrb	r2, [r4, #1]
   1e7bc:	e352002b 	cmp	r2, #43	; 0x2b
   1e7c0:	0a0000b7 	beq	1eaa4 <__gethex+0x46c>
   1e7c4:	e352002d 	cmp	r2, #45	; 0x2d
   1e7c8:	1284c001 	addne	ip, r4, #1
   1e7cc:	13a0a000 	movne	sl, #0
   1e7d0:	03a0a001 	moveq	sl, #1
   1e7d4:	0a0000b3 	beq	1eaa8 <__gethex+0x470>
   1e7d8:	e7d61002 	ldrb	r1, [r6, r2]
   1e7dc:	e3510000 	cmp	r1, #0
   1e7e0:	0affffd8 	beq	1e748 <__gethex+0x110>
   1e7e4:	e3510019 	cmp	r1, #25
   1e7e8:	caffffd6 	bgt	1e748 <__gethex+0x110>
   1e7ec:	e5dc2001 	ldrb	r2, [ip, #1]
   1e7f0:	e59f0658 	ldr	r0, [pc, #1624]	; 1ee50 <__gethex+0x818>
   1e7f4:	e7d02002 	ldrb	r2, [r0, r2]
   1e7f8:	e3520000 	cmp	r2, #0
   1e7fc:	e2411010 	sub	r1, r1, #16
   1e800:	e28cc001 	add	ip, ip, #1
   1e804:	0a00000e 	beq	1e844 <__gethex+0x20c>
   1e808:	e3520019 	cmp	r2, #25
   1e80c:	ca00000c 	bgt	1e844 <__gethex+0x20c>
   1e810:	e1a0000c 	mov	r0, ip
   1e814:	ea000001 	b	1e820 <__gethex+0x1e8>
   1e818:	e3520019 	cmp	r2, #25
   1e81c:	ca000008 	bgt	1e844 <__gethex+0x20c>
   1e820:	e5d0c001 	ldrb	ip, [r0, #1]
   1e824:	e0811101 	add	r1, r1, r1, lsl #2
   1e828:	e0821081 	add	r1, r2, r1, lsl #1
   1e82c:	e7d6200c 	ldrb	r2, [r6, ip]
   1e830:	e2800001 	add	r0, r0, #1
   1e834:	e3520000 	cmp	r2, #0
   1e838:	e2411010 	sub	r1, r1, #16
   1e83c:	e1a0c000 	mov	ip, r0
   1e840:	1afffff4 	bne	1e818 <__gethex+0x1e0>
   1e844:	e35a0000 	cmp	sl, #0
   1e848:	e59d2010 	ldr	r2, [sp, #16]
   1e84c:	12611000 	rsbne	r1, r1, #0
   1e850:	e0822001 	add	r2, r2, r1
   1e854:	e3590000 	cmp	r9, #0
   1e858:	e58d2010 	str	r2, [sp, #16]
   1e85c:	e588c000 	str	ip, [r8]
   1e860:	1affffbc 	bne	1e758 <__gethex+0x120>
   1e864:	e0652004 	rsb	r2, r5, r4
   1e868:	e2422001 	sub	r2, r2, #1
   1e86c:	e3520007 	cmp	r2, #7
   1e870:	e1a01009 	mov	r1, r9
   1e874:	da000003 	ble	1e888 <__gethex+0x250>
   1e878:	e1a020c2 	asr	r2, r2, #1
   1e87c:	e3520007 	cmp	r2, #7
   1e880:	e2811001 	add	r1, r1, #1
   1e884:	cafffffb 	bgt	1e878 <__gethex+0x240>
   1e888:	e59d0018 	ldr	r0, [sp, #24]
   1e88c:	e58d3000 	str	r3, [sp]
   1e890:	eb00028f 	bl	1f2d4 <_Balloc>
   1e894:	e1550004 	cmp	r5, r4
   1e898:	e58d000c 	str	r0, [sp, #12]
   1e89c:	e2800014 	add	r0, r0, #20
   1e8a0:	e58d001c 	str	r0, [sp, #28]
   1e8a4:	e59d3000 	ldr	r3, [sp]
   1e8a8:	2a000128 	bcs	1ed50 <__gethex+0x718>
   1e8ac:	e3a08000 	mov	r8, #0
   1e8b0:	e1a0c000 	mov	ip, r0
   1e8b4:	e1a07008 	mov	r7, r8
   1e8b8:	e1a09005 	mov	r9, r5
   1e8bc:	ea00000d 	b	1e8f8 <__gethex+0x2c0>
   1e8c0:	e3570020 	cmp	r7, #32
   1e8c4:	048c8004 	streq	r8, [ip], #4
   1e8c8:	e5541001 	ldrb	r1, [r4, #-1]
   1e8cc:	e7d61001 	ldrb	r1, [r6, r1]
   1e8d0:	03a08000 	moveq	r8, #0
   1e8d4:	e1a04005 	mov	r4, r5
   1e8d8:	11a02007 	movne	r2, r7
   1e8dc:	01a02008 	moveq	r2, r8
   1e8e0:	12877004 	addne	r7, r7, #4
   1e8e4:	03a07004 	moveq	r7, #4
   1e8e8:	e201100f 	and	r1, r1, #15
   1e8ec:	e1590004 	cmp	r9, r4
   1e8f0:	e1888211 	orr	r8, r8, r1, lsl r2
   1e8f4:	2a000012 	bcs	1e944 <__gethex+0x30c>
   1e8f8:	e5542001 	ldrb	r2, [r4, #-1]
   1e8fc:	e152000b 	cmp	r2, fp
   1e900:	e2445001 	sub	r5, r4, #1
   1e904:	1affffed 	bne	1e8c0 <__gethex+0x288>
   1e908:	e263a001 	rsb	sl, r3, #1
   1e90c:	e085a00a 	add	sl, r5, sl
   1e910:	e159000a 	cmp	r9, sl
   1e914:	8affffe9 	bhi	1e8c0 <__gethex+0x288>
   1e918:	e1a02003 	mov	r2, r3
   1e91c:	e1a0000a 	mov	r0, sl
   1e920:	e59d1008 	ldr	r1, [sp, #8]
   1e924:	e88d1008 	stm	sp, {r3, ip}
   1e928:	ebffe969 	bl	18ed4 <strncmp>
   1e92c:	e3500000 	cmp	r0, #0
   1e930:	e89d1008 	ldm	sp, {r3, ip}
   1e934:	01a0400a 	moveq	r4, sl
   1e938:	1affffe0 	bne	1e8c0 <__gethex+0x288>
   1e93c:	e1590004 	cmp	r9, r4
   1e940:	3affffec 	bcc	1e8f8 <__gethex+0x2c0>
   1e944:	e48c8004 	str	r8, [ip], #4
   1e948:	e59d301c 	ldr	r3, [sp, #28]
   1e94c:	e063c00c 	rsb	ip, r3, ip
   1e950:	e59d300c 	ldr	r3, [sp, #12]
   1e954:	e1a0514c 	asr	r5, ip, #2
   1e958:	e5835010 	str	r5, [r3, #16]
   1e95c:	e1a00008 	mov	r0, r8
   1e960:	eb0002f2 	bl	1f530 <__hi0bits>
   1e964:	e59d1014 	ldr	r1, [sp, #20]
   1e968:	e1a05285 	lsl	r5, r5, #5
   1e96c:	e5914000 	ldr	r4, [r1]
   1e970:	e0605005 	rsb	r5, r0, r5
   1e974:	e1550004 	cmp	r5, r4
   1e978:	ca0000b4 	bgt	1ec50 <__gethex+0x618>
   1e97c:	a3a05000 	movge	r5, #0
   1e980:	ba0000d0 	blt	1ecc8 <__gethex+0x690>
   1e984:	e59d0014 	ldr	r0, [sp, #20]
   1e988:	e59d1010 	ldr	r1, [sp, #16]
   1e98c:	e5903008 	ldr	r3, [r0, #8]
   1e990:	e1510003 	cmp	r1, r3
   1e994:	ca0000a0 	bgt	1ec1c <__gethex+0x5e4>
   1e998:	e59d0014 	ldr	r0, [sp, #20]
   1e99c:	e59d1010 	ldr	r1, [sp, #16]
   1e9a0:	e5903004 	ldr	r3, [r0, #4]
   1e9a4:	e1510003 	cmp	r1, r3
   1e9a8:	a3a07001 	movge	r7, #1
   1e9ac:	aa00002a 	bge	1ea5c <__gethex+0x424>
   1e9b0:	e0616003 	rsb	r6, r1, r3
   1e9b4:	e1540006 	cmp	r4, r6
   1e9b8:	ca00000e 	bgt	1e9f8 <__gethex+0x3c0>
   1e9bc:	e590200c 	ldr	r2, [r0, #12]
   1e9c0:	e3520002 	cmp	r2, #2
   1e9c4:	0a0000d0 	beq	1ed0c <__gethex+0x6d4>
   1e9c8:	e3520003 	cmp	r2, #3
   1e9cc:	0a0000f6 	beq	1edac <__gethex+0x774>
   1e9d0:	e3520001 	cmp	r2, #1
   1e9d4:	0a0000e8 	beq	1ed7c <__gethex+0x744>
   1e9d8:	e59d100c 	ldr	r1, [sp, #12]
   1e9dc:	e59d0018 	ldr	r0, [sp, #24]
   1e9e0:	eb00025c 	bl	1f358 <_Bfree>
   1e9e4:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
   1e9e8:	e3a03000 	mov	r3, #0
   1e9ec:	e5813000 	str	r3, [r1]
   1e9f0:	e3a07050 	mov	r7, #80	; 0x50
   1e9f4:	eaffff5a 	b	1e764 <__gethex+0x12c>
   1e9f8:	e3550000 	cmp	r5, #0
   1e9fc:	e2467001 	sub	r7, r6, #1
   1ea00:	13a05001 	movne	r5, #1
   1ea04:	1a000005 	bne	1ea20 <__gethex+0x3e8>
   1ea08:	e3570000 	cmp	r7, #0
   1ea0c:	da000003 	ble	1ea20 <__gethex+0x3e8>
   1ea10:	e59d000c 	ldr	r0, [sp, #12]
   1ea14:	e1a01007 	mov	r1, r7
   1ea18:	eb000548 	bl	1ff40 <__any_on>
   1ea1c:	e1a05000 	mov	r5, r0
   1ea20:	e59d201c 	ldr	r2, [sp, #28]
   1ea24:	e1a032c7 	asr	r3, r7, #5
   1ea28:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   1ea2c:	e207701f 	and	r7, r7, #31
   1ea30:	e3a02001 	mov	r2, #1
   1ea34:	e0133712 	ands	r3, r3, r2, lsl r7
   1ea38:	e59d000c 	ldr	r0, [sp, #12]
   1ea3c:	e1a01006 	mov	r1, r6
   1ea40:	13855002 	orrne	r5, r5, #2
   1ea44:	ebfffe9a 	bl	1e4b4 <rshift>
   1ea48:	e59d3014 	ldr	r3, [sp, #20]
   1ea4c:	e5933004 	ldr	r3, [r3, #4]
   1ea50:	e58d3010 	str	r3, [sp, #16]
   1ea54:	e0664004 	rsb	r4, r6, r4
   1ea58:	e3a07002 	mov	r7, #2
   1ea5c:	e3550000 	cmp	r5, #0
   1ea60:	0a000008 	beq	1ea88 <__gethex+0x450>
   1ea64:	e59d0014 	ldr	r0, [sp, #20]
   1ea68:	e590300c 	ldr	r3, [r0, #12]
   1ea6c:	e3530002 	cmp	r3, #2
   1ea70:	0a0000be 	beq	1ed70 <__gethex+0x738>
   1ea74:	e3530003 	cmp	r3, #3
   1ea78:	0a0000b7 	beq	1ed5c <__gethex+0x724>
   1ea7c:	e3530001 	cmp	r3, #1
   1ea80:	0a00002e 	beq	1eb40 <__gethex+0x508>
   1ea84:	e3877010 	orr	r7, r7, #16
   1ea88:	e59d300c 	ldr	r3, [sp, #12]
   1ea8c:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
   1ea90:	e5803000 	str	r3, [r0]
   1ea94:	e59d3010 	ldr	r3, [sp, #16]
   1ea98:	e59d0020 	ldr	r0, [sp, #32]
   1ea9c:	e5803000 	str	r3, [r0]
   1eaa0:	eaffff2f 	b	1e764 <__gethex+0x12c>
   1eaa4:	e3a0a000 	mov	sl, #0
   1eaa8:	e5d42002 	ldrb	r2, [r4, #2]
   1eaac:	e284c002 	add	ip, r4, #2
   1eab0:	eaffff48 	b	1e7d8 <__gethex+0x1a0>
   1eab4:	e58d3000 	str	r3, [sp]
   1eab8:	ebfffebd 	bl	1e5b4 <__hexdig_init>
   1eabc:	e59d3000 	ldr	r3, [sp]
   1eac0:	eafffeee 	b	1e680 <__gethex+0x48>
   1eac4:	e1a02003 	mov	r2, r3
   1eac8:	e1a00005 	mov	r0, r5
   1eacc:	e59d1008 	ldr	r1, [sp, #8]
   1ead0:	e58d3000 	str	r3, [sp]
   1ead4:	ebffe8fe 	bl	18ed4 <strncmp>
   1ead8:	e3500000 	cmp	r0, #0
   1eadc:	e59d3000 	ldr	r3, [sp]
   1eae0:	1a000055 	bne	1ec3c <__gethex+0x604>
   1eae4:	e7d52003 	ldrb	r2, [r5, r3]
   1eae8:	e7d4a002 	ldrb	sl, [r4, r2]
   1eaec:	e35a0000 	cmp	sl, #0
   1eaf0:	e0854003 	add	r4, r5, r3
   1eaf4:	058da010 	streq	sl, [sp, #16]
   1eaf8:	03a09001 	moveq	r9, #1
   1eafc:	0affff0d 	beq	1e738 <__gethex+0x100>
   1eb00:	e3520030 	cmp	r2, #48	; 0x30
   1eb04:	1a00007c 	bne	1ecfc <__gethex+0x6c4>
   1eb08:	e1a01004 	mov	r1, r4
   1eb0c:	e1a05004 	mov	r5, r4
   1eb10:	e5f12001 	ldrb	r2, [r1, #1]!
   1eb14:	e3520030 	cmp	r2, #48	; 0x30
   1eb18:	e2855001 	add	r5, r5, #1
   1eb1c:	0afffffb 	beq	1eb10 <__gethex+0x4d8>
   1eb20:	e7d62002 	ldrb	r2, [r6, r2]
   1eb24:	e3520000 	cmp	r2, #0
   1eb28:	1a000074 	bne	1ed00 <__gethex+0x6c8>
   1eb2c:	e3a07001 	mov	r7, #1
   1eb30:	e1a0a004 	mov	sl, r4
   1eb34:	e1a09007 	mov	r9, r7
   1eb38:	e1a04005 	mov	r4, r5
   1eb3c:	eafffeee 	b	1e6fc <__gethex+0xc4>
   1eb40:	e3150002 	tst	r5, #2
   1eb44:	0affffce 	beq	1ea84 <__gethex+0x44c>
   1eb48:	e59d101c 	ldr	r1, [sp, #28]
   1eb4c:	e5913000 	ldr	r3, [r1]
   1eb50:	e1855003 	orr	r5, r5, r3
   1eb54:	e3150001 	tst	r5, #1
   1eb58:	0affffc9 	beq	1ea84 <__gethex+0x44c>
   1eb5c:	e59d300c 	ldr	r3, [sp, #12]
   1eb60:	e5935010 	ldr	r5, [r3, #16]
   1eb64:	e2850005 	add	r0, r5, #5
   1eb68:	e0830100 	add	r0, r3, r0, lsl #2
   1eb6c:	e59d301c 	ldr	r3, [sp, #28]
   1eb70:	e3a0c000 	mov	ip, #0
   1eb74:	e1a01003 	mov	r1, r3
   1eb78:	e4932004 	ldr	r2, [r3], #4
   1eb7c:	e3720001 	cmn	r2, #1
   1eb80:	1a00009d 	bne	1edfc <__gethex+0x7c4>
   1eb84:	e1500003 	cmp	r0, r3
   1eb88:	e503c004 	str	ip, [r3, #-4]
   1eb8c:	8afffff8 	bhi	1eb74 <__gethex+0x53c>
   1eb90:	e59d000c 	ldr	r0, [sp, #12]
   1eb94:	e5903008 	ldr	r3, [r0, #8]
   1eb98:	e1550003 	cmp	r5, r3
   1eb9c:	b1a03005 	movlt	r3, r5
   1eba0:	aa000098 	bge	1ee08 <__gethex+0x7d0>
   1eba4:	e59d000c 	ldr	r0, [sp, #12]
   1eba8:	e2832005 	add	r2, r3, #5
   1ebac:	e3a01001 	mov	r1, #1
   1ebb0:	e2833001 	add	r3, r3, #1
   1ebb4:	e7801102 	str	r1, [r0, r2, lsl #2]
   1ebb8:	e5803010 	str	r3, [r0, #16]
   1ebbc:	e3570002 	cmp	r7, #2
   1ebc0:	0a00007d 	beq	1edbc <__gethex+0x784>
   1ebc4:	e59d000c 	ldr	r0, [sp, #12]
   1ebc8:	e5903010 	ldr	r3, [r0, #16]
   1ebcc:	e1550003 	cmp	r5, r3
   1ebd0:	ba000007 	blt	1ebf4 <__gethex+0x5bc>
   1ebd4:	e214401f 	ands	r4, r4, #31
   1ebd8:	0a00005a 	beq	1ed48 <__gethex+0x710>
   1ebdc:	e2855004 	add	r5, r5, #4
   1ebe0:	e7900105 	ldr	r0, [r0, r5, lsl #2]
   1ebe4:	eb000251 	bl	1f530 <__hi0bits>
   1ebe8:	e2643020 	rsb	r3, r4, #32
   1ebec:	e1500003 	cmp	r0, r3
   1ebf0:	aa000054 	bge	1ed48 <__gethex+0x710>
   1ebf4:	e3a01001 	mov	r1, #1
   1ebf8:	e59d000c 	ldr	r0, [sp, #12]
   1ebfc:	ebfffe2c 	bl	1e4b4 <rshift>
   1ec00:	e59d1014 	ldr	r1, [sp, #20]
   1ec04:	e59d2010 	ldr	r2, [sp, #16]
   1ec08:	e5913008 	ldr	r3, [r1, #8]
   1ec0c:	e2822001 	add	r2, r2, #1
   1ec10:	e1520003 	cmp	r2, r3
   1ec14:	e58d2010 	str	r2, [sp, #16]
   1ec18:	da00004a 	ble	1ed48 <__gethex+0x710>
   1ec1c:	e59d0018 	ldr	r0, [sp, #24]
   1ec20:	e59d100c 	ldr	r1, [sp, #12]
   1ec24:	eb0001cb 	bl	1f358 <_Bfree>
   1ec28:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
   1ec2c:	e3a03000 	mov	r3, #0
   1ec30:	e5823000 	str	r3, [r2]
   1ec34:	e3a070a3 	mov	r7, #163	; 0xa3
   1ec38:	eafffec9 	b	1e764 <__gethex+0x12c>
   1ec3c:	e5d52000 	ldrb	r2, [r5]
   1ec40:	e1a04005 	mov	r4, r5
   1ec44:	e58da010 	str	sl, [sp, #16]
   1ec48:	e3a09001 	mov	r9, #1
   1ec4c:	eafffeb9 	b	1e738 <__gethex+0x100>
   1ec50:	e0646005 	rsb	r6, r4, r5
   1ec54:	e59d000c 	ldr	r0, [sp, #12]
   1ec58:	e1a01006 	mov	r1, r6
   1ec5c:	eb0004b7 	bl	1ff40 <__any_on>
   1ec60:	e2505000 	subs	r5, r0, #0
   1ec64:	0a000010 	beq	1ecac <__gethex+0x674>
   1ec68:	e2463001 	sub	r3, r6, #1
   1ec6c:	e1a022c3 	asr	r2, r3, #5
   1ec70:	e59d000c 	ldr	r0, [sp, #12]
   1ec74:	e2822005 	add	r2, r2, #5
   1ec78:	e7902102 	ldr	r2, [r0, r2, lsl #2]
   1ec7c:	e203101f 	and	r1, r3, #31
   1ec80:	e3a05001 	mov	r5, #1
   1ec84:	e0122115 	ands	r2, r2, r5, lsl r1
   1ec88:	0a000007 	beq	1ecac <__gethex+0x674>
   1ec8c:	e1530005 	cmp	r3, r5
   1ec90:	d3a05002 	movle	r5, #2
   1ec94:	da000004 	ble	1ecac <__gethex+0x674>
   1ec98:	e2461002 	sub	r1, r6, #2
   1ec9c:	eb0004a7 	bl	1ff40 <__any_on>
   1eca0:	e3500000 	cmp	r0, #0
   1eca4:	13a05003 	movne	r5, #3
   1eca8:	03a05002 	moveq	r5, #2
   1ecac:	e59d000c 	ldr	r0, [sp, #12]
   1ecb0:	e1a01006 	mov	r1, r6
   1ecb4:	ebfffdfe 	bl	1e4b4 <rshift>
   1ecb8:	e59d3010 	ldr	r3, [sp, #16]
   1ecbc:	e0833006 	add	r3, r3, r6
   1ecc0:	e58d3010 	str	r3, [sp, #16]
   1ecc4:	eaffff2e 	b	1e984 <__gethex+0x34c>
   1ecc8:	e0655004 	rsb	r5, r5, r4
   1eccc:	e1a02005 	mov	r2, r5
   1ecd0:	e59d0018 	ldr	r0, [sp, #24]
   1ecd4:	e59d100c 	ldr	r1, [sp, #12]
   1ecd8:	eb00030e 	bl	1f918 <__lshift>
   1ecdc:	e59d3010 	ldr	r3, [sp, #16]
   1ece0:	e0653003 	rsb	r3, r5, r3
   1ece4:	e58d3010 	str	r3, [sp, #16]
   1ece8:	e2803014 	add	r3, r0, #20
   1ecec:	e58d000c 	str	r0, [sp, #12]
   1ecf0:	e58d301c 	str	r3, [sp, #28]
   1ecf4:	e3a05000 	mov	r5, #0
   1ecf8:	eaffff21 	b	1e984 <__gethex+0x34c>
   1ecfc:	e1a05004 	mov	r5, r4
   1ed00:	e1a0a004 	mov	sl, r4
   1ed04:	e3a07001 	mov	r7, #1
   1ed08:	eafffe74 	b	1e6e0 <__gethex+0xa8>
   1ed0c:	e59d004c 	ldr	r0, [sp, #76]	; 0x4c
   1ed10:	e3500000 	cmp	r0, #0
   1ed14:	1affff2f 	bne	1e9d8 <__gethex+0x3a0>
   1ed18:	e59d0020 	ldr	r0, [sp, #32]
   1ed1c:	e5803000 	str	r3, [r0]
   1ed20:	e59d300c 	ldr	r3, [sp, #12]
   1ed24:	e3a02001 	mov	r2, #1
   1ed28:	e5832010 	str	r2, [r3, #16]
   1ed2c:	e59d301c 	ldr	r3, [sp, #28]
   1ed30:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
   1ed34:	e5832000 	str	r2, [r3]
   1ed38:	e59d300c 	ldr	r3, [sp, #12]
   1ed3c:	e3a07062 	mov	r7, #98	; 0x62
   1ed40:	e5803000 	str	r3, [r0]
   1ed44:	eafffe86 	b	1e764 <__gethex+0x12c>
   1ed48:	e3a07021 	mov	r7, #33	; 0x21
   1ed4c:	eaffff4d 	b	1ea88 <__gethex+0x450>
   1ed50:	e59dc01c 	ldr	ip, [sp, #28]
   1ed54:	e3a08000 	mov	r8, #0
   1ed58:	eafffef9 	b	1e944 <__gethex+0x30c>
   1ed5c:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
   1ed60:	e3530000 	cmp	r3, #0
   1ed64:	1affff7c 	bne	1eb5c <__gethex+0x524>
   1ed68:	e3877010 	orr	r7, r7, #16
   1ed6c:	eaffff45 	b	1ea88 <__gethex+0x450>
   1ed70:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
   1ed74:	e2623001 	rsb	r3, r2, #1
   1ed78:	eafffff8 	b	1ed60 <__gethex+0x728>
   1ed7c:	e1560004 	cmp	r6, r4
   1ed80:	1affff14 	bne	1e9d8 <__gethex+0x3a0>
   1ed84:	e3540001 	cmp	r4, #1
   1ed88:	daffffe2 	ble	1ed18 <__gethex+0x6e0>
   1ed8c:	e59d000c 	ldr	r0, [sp, #12]
   1ed90:	e2441001 	sub	r1, r4, #1
   1ed94:	eb000469 	bl	1ff40 <__any_on>
   1ed98:	e3500000 	cmp	r0, #0
   1ed9c:	0affff0d 	beq	1e9d8 <__gethex+0x3a0>
   1eda0:	e59d2014 	ldr	r2, [sp, #20]
   1eda4:	e5923004 	ldr	r3, [r2, #4]
   1eda8:	eaffffda 	b	1ed18 <__gethex+0x6e0>
   1edac:	e59d104c 	ldr	r1, [sp, #76]	; 0x4c
   1edb0:	e3510000 	cmp	r1, #0
   1edb4:	0affff07 	beq	1e9d8 <__gethex+0x3a0>
   1edb8:	eaffffd6 	b	1ed18 <__gethex+0x6e0>
   1edbc:	e59d1014 	ldr	r1, [sp, #20]
   1edc0:	e5913000 	ldr	r3, [r1]
   1edc4:	e2433001 	sub	r3, r3, #1
   1edc8:	e1530004 	cmp	r3, r4
   1edcc:	13a07022 	movne	r7, #34	; 0x22
   1edd0:	1affff2c 	bne	1ea88 <__gethex+0x450>
   1edd4:	e1a032c4 	asr	r3, r4, #5
   1edd8:	e59d200c 	ldr	r2, [sp, #12]
   1eddc:	e2833005 	add	r3, r3, #5
   1ede0:	e7923103 	ldr	r3, [r2, r3, lsl #2]
   1ede4:	e204401f 	and	r4, r4, #31
   1ede8:	e3a02001 	mov	r2, #1
   1edec:	e0133412 	ands	r3, r3, r2, lsl r4
   1edf0:	13a07021 	movne	r7, #33	; 0x21
   1edf4:	03a07022 	moveq	r7, #34	; 0x22
   1edf8:	eaffff22 	b	1ea88 <__gethex+0x450>
   1edfc:	e2822001 	add	r2, r2, #1
   1ee00:	e5812000 	str	r2, [r1]
   1ee04:	eaffff6c 	b	1ebbc <__gethex+0x584>
   1ee08:	e5901004 	ldr	r1, [r0, #4]
   1ee0c:	e59d0018 	ldr	r0, [sp, #24]
   1ee10:	e2811001 	add	r1, r1, #1
   1ee14:	eb00012e 	bl	1f2d4 <_Balloc>
   1ee18:	e59d300c 	ldr	r3, [sp, #12]
   1ee1c:	e5932010 	ldr	r2, [r3, #16]
   1ee20:	e2822002 	add	r2, r2, #2
   1ee24:	e283100c 	add	r1, r3, #12
   1ee28:	e1a06000 	mov	r6, r0
   1ee2c:	e1a02102 	lsl	r2, r2, #2
   1ee30:	e280000c 	add	r0, r0, #12
   1ee34:	ebffe5c6 	bl	18554 <memcpy>
   1ee38:	e59d0018 	ldr	r0, [sp, #24]
   1ee3c:	e59d100c 	ldr	r1, [sp, #12]
   1ee40:	eb000144 	bl	1f358 <_Bfree>
   1ee44:	e58d600c 	str	r6, [sp, #12]
   1ee48:	e5963010 	ldr	r3, [r6, #16]
   1ee4c:	eaffff54 	b	1eba4 <__gethex+0x56c>
   1ee50:	4000140c 	.word	0x4000140c

0001ee54 <__hexnan>:
   1ee54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee58:	e59f429c 	ldr	r4, [pc, #668]	; 1f0fc <__hexnan+0x2a8>
   1ee5c:	e5d43030 	ldrb	r3, [r4, #48]	; 0x30
   1ee60:	e24dd010 	sub	sp, sp, #16
   1ee64:	e3530000 	cmp	r3, #0
   1ee68:	e58d0008 	str	r0, [sp, #8]
   1ee6c:	e1a05001 	mov	r5, r1
   1ee70:	e1a09002 	mov	r9, r2
   1ee74:	0a000088 	beq	1f09c <__hexnan+0x248>
   1ee78:	e5953000 	ldr	r3, [r5]
   1ee7c:	e1a022c3 	asr	r2, r3, #5
   1ee80:	e0892102 	add	r2, r9, r2, lsl #2
   1ee84:	e213301f 	ands	r3, r3, #31
   1ee88:	e58d2000 	str	r2, [sp]
   1ee8c:	12822004 	addne	r2, r2, #4
   1ee90:	158d2000 	strne	r2, [sp]
   1ee94:	e59d2000 	ldr	r2, [sp]
   1ee98:	e58d300c 	str	r3, [sp, #12]
   1ee9c:	e3a03000 	mov	r3, #0
   1eea0:	e1a0a003 	mov	sl, r3
   1eea4:	e5023004 	str	r3, [r2, #-4]
   1eea8:	e59d3008 	ldr	r3, [sp, #8]
   1eeac:	e5930000 	ldr	r0, [r3]
   1eeb0:	e59d1000 	ldr	r1, [sp]
   1eeb4:	e5d03001 	ldrb	r3, [r0, #1]
   1eeb8:	e2411004 	sub	r1, r1, #4
   1eebc:	e3530000 	cmp	r3, #0
   1eec0:	e58d1004 	str	r1, [sp, #4]
   1eec4:	e1a08001 	mov	r8, r1
   1eec8:	e1a0b00a 	mov	fp, sl
   1eecc:	e1a0600a 	mov	r6, sl
   1eed0:	0a000026 	beq	1ef70 <__hexnan+0x11c>
   1eed4:	e7d42003 	ldrb	r2, [r4, r3]
   1eed8:	e3520000 	cmp	r2, #0
   1eedc:	1a000057 	bne	1f040 <__hexnan+0x1ec>
   1eee0:	e3530020 	cmp	r3, #32
   1eee4:	8a000067 	bhi	1f088 <__hexnan+0x234>
   1eee8:	e156000b 	cmp	r6, fp
   1eeec:	da00001b 	ble	1ef60 <__hexnan+0x10c>
   1eef0:	e35a0007 	cmp	sl, #7
   1eef4:	c3a03000 	movgt	r3, #0
   1eef8:	d3a03001 	movle	r3, #1
   1eefc:	e1510008 	cmp	r1, r8
   1ef00:	23a03000 	movcs	r3, #0
   1ef04:	e3530000 	cmp	r3, #0
   1ef08:	0a00000b 	beq	1ef3c <__hexnan+0xe8>
   1ef0c:	e26a7008 	rsb	r7, sl, #8
   1ef10:	e1a07107 	lsl	r7, r7, #2
   1ef14:	e5912000 	ldr	r2, [r1]
   1ef18:	e267a020 	rsb	sl, r7, #32
   1ef1c:	e1a03001 	mov	r3, r1
   1ef20:	e593c004 	ldr	ip, [r3, #4]
   1ef24:	e1825a1c 	orr	r5, r2, ip, lsl sl
   1ef28:	e1a0273c 	lsr	r2, ip, r7
   1ef2c:	e5835000 	str	r5, [r3]
   1ef30:	e5a32004 	str	r2, [r3, #4]!
   1ef34:	e1580003 	cmp	r8, r3
   1ef38:	8afffff8 	bhi	1ef20 <__hexnan+0xcc>
   1ef3c:	e1510009 	cmp	r1, r9
   1ef40:	93a0a008 	movls	sl, #8
   1ef44:	9a000005 	bls	1ef60 <__hexnan+0x10c>
   1ef48:	e3a02000 	mov	r2, #0
   1ef4c:	e5012004 	str	r2, [r1, #-4]
   1ef50:	e2411004 	sub	r1, r1, #4
   1ef54:	e1a0b006 	mov	fp, r6
   1ef58:	e1a08001 	mov	r8, r1
   1ef5c:	e1a0a002 	mov	sl, r2
   1ef60:	e2800001 	add	r0, r0, #1
   1ef64:	e5d03001 	ldrb	r3, [r0, #1]
   1ef68:	e3530000 	cmp	r3, #0
   1ef6c:	1affffd8 	bne	1eed4 <__hexnan+0x80>
   1ef70:	e1a02001 	mov	r2, r1
   1ef74:	e3560000 	cmp	r6, #0
   1ef78:	0a000044 	beq	1f090 <__hexnan+0x23c>
   1ef7c:	e35a0007 	cmp	sl, #7
   1ef80:	c3a03000 	movgt	r3, #0
   1ef84:	d3a03001 	movle	r3, #1
   1ef88:	e1580001 	cmp	r8, r1
   1ef8c:	93a03000 	movls	r3, #0
   1ef90:	e3530000 	cmp	r3, #0
   1ef94:	0a00000a 	beq	1efc4 <__hexnan+0x170>
   1ef98:	e26aa008 	rsb	sl, sl, #8
   1ef9c:	e1a0a10a 	lsl	sl, sl, #2
   1efa0:	e5913000 	ldr	r3, [r1]
   1efa4:	e26a4020 	rsb	r4, sl, #32
   1efa8:	e5910004 	ldr	r0, [r1, #4]
   1efac:	e183c410 	orr	ip, r3, r0, lsl r4
   1efb0:	e1a03a30 	lsr	r3, r0, sl
   1efb4:	e581c000 	str	ip, [r1]
   1efb8:	e5a13004 	str	r3, [r1, #4]!
   1efbc:	e1510008 	cmp	r1, r8
   1efc0:	3afffff8 	bcc	1efa8 <__hexnan+0x154>
   1efc4:	e1590002 	cmp	r9, r2
   1efc8:	2a000035 	bcs	1f0a4 <__hexnan+0x250>
   1efcc:	e59dc004 	ldr	ip, [sp, #4]
   1efd0:	e1a01009 	mov	r1, r9
   1efd4:	e4920004 	ldr	r0, [r2], #4
   1efd8:	e1a03001 	mov	r3, r1
   1efdc:	e4830004 	str	r0, [r3], #4
   1efe0:	e15c0002 	cmp	ip, r2
   1efe4:	e1a01003 	mov	r1, r3
   1efe8:	2afffff9 	bcs	1efd4 <__hexnan+0x180>
   1efec:	e59d1004 	ldr	r1, [sp, #4]
   1eff0:	e3a02000 	mov	r2, #0
   1eff4:	e4832004 	str	r2, [r3], #4
   1eff8:	e1510003 	cmp	r1, r3
   1effc:	2afffffc 	bcs	1eff4 <__hexnan+0x1a0>
   1f000:	e59d1000 	ldr	r1, [sp]
   1f004:	e5113004 	ldr	r3, [r1, #-4]
   1f008:	e3530000 	cmp	r3, #0
   1f00c:	1a000009 	bne	1f038 <__hexnan+0x1e4>
   1f010:	e59d3004 	ldr	r3, [sp, #4]
   1f014:	e1590003 	cmp	r9, r3
   1f018:	1a000002 	bne	1f028 <__hexnan+0x1d4>
   1f01c:	ea00002c 	b	1f0d4 <__hexnan+0x280>
   1f020:	e1590003 	cmp	r9, r3
   1f024:	0a00002b 	beq	1f0d8 <__hexnan+0x284>
   1f028:	e5132004 	ldr	r2, [r3, #-4]
   1f02c:	e3520000 	cmp	r2, #0
   1f030:	e2433004 	sub	r3, r3, #4
   1f034:	0afffff9 	beq	1f020 <__hexnan+0x1cc>
   1f038:	e3a00005 	mov	r0, #5
   1f03c:	ea000014 	b	1f094 <__hexnan+0x240>
   1f040:	e28aa001 	add	sl, sl, #1
   1f044:	e35a0008 	cmp	sl, #8
   1f048:	e2866001 	add	r6, r6, #1
   1f04c:	ca000006 	bgt	1f06c <__hexnan+0x218>
   1f050:	e5913000 	ldr	r3, [r1]
   1f054:	e1a03203 	lsl	r3, r3, #4
   1f058:	e202200f 	and	r2, r2, #15
   1f05c:	e1832002 	orr	r2, r3, r2
   1f060:	e5812000 	str	r2, [r1]
   1f064:	e2800001 	add	r0, r0, #1
   1f068:	eaffffbd 	b	1ef64 <__hexnan+0x110>
   1f06c:	e1510009 	cmp	r1, r9
   1f070:	9affffba 	bls	1ef60 <__hexnan+0x10c>
   1f074:	e3a03000 	mov	r3, #0
   1f078:	e5013004 	str	r3, [r1, #-4]
   1f07c:	e3a0a001 	mov	sl, #1
   1f080:	e2411004 	sub	r1, r1, #4
   1f084:	eafffff3 	b	1f058 <__hexnan+0x204>
   1f088:	e3530029 	cmp	r3, #41	; 0x29
   1f08c:	0a000015 	beq	1f0e8 <__hexnan+0x294>
   1f090:	e3a00004 	mov	r0, #4
   1f094:	e28dd010 	add	sp, sp, #16
   1f098:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f09c:	ebfffd44 	bl	1e5b4 <__hexdig_init>
   1f0a0:	eaffff74 	b	1ee78 <__hexnan+0x24>
   1f0a4:	e59d200c 	ldr	r2, [sp, #12]
   1f0a8:	e3520000 	cmp	r2, #0
   1f0ac:	0affffd3 	beq	1f000 <__hexnan+0x1ac>
   1f0b0:	e59d3000 	ldr	r3, [sp]
   1f0b4:	e59d100c 	ldr	r1, [sp, #12]
   1f0b8:	e5132004 	ldr	r2, [r3, #-4]
   1f0bc:	e2613020 	rsb	r3, r1, #32
   1f0c0:	e3e01000 	mvn	r1, #0
   1f0c4:	e0023331 	and	r3, r2, r1, lsr r3
   1f0c8:	e59d2000 	ldr	r2, [sp]
   1f0cc:	e5023004 	str	r3, [r2, #-4]
   1f0d0:	eaffffcc 	b	1f008 <__hexnan+0x1b4>
   1f0d4:	e1a03009 	mov	r3, r9
   1f0d8:	e3a02001 	mov	r2, #1
   1f0dc:	e5832000 	str	r2, [r3]
   1f0e0:	e3a00005 	mov	r0, #5
   1f0e4:	eaffffea 	b	1f094 <__hexnan+0x240>
   1f0e8:	e59d3008 	ldr	r3, [sp, #8]
   1f0ec:	e2800002 	add	r0, r0, #2
   1f0f0:	e5830000 	str	r0, [r3]
   1f0f4:	e1a02001 	mov	r2, r1
   1f0f8:	eaffff9d 	b	1ef74 <__hexnan+0x120>
   1f0fc:	4000140c 	.word	0x4000140c

0001f100 <_setlocale_r>:
   1f100:	e92d4010 	push	{r4, lr}
   1f104:	e2524000 	subs	r4, r2, #0
   1f108:	0a000004 	beq	1f120 <_setlocale_r+0x20>
   1f10c:	e1a00004 	mov	r0, r4
   1f110:	e59f104c 	ldr	r1, [pc, #76]	; 1f164 <_setlocale_r+0x64>
   1f114:	ebffe654 	bl	18a6c <strcmp>
   1f118:	e3500000 	cmp	r0, #0
   1f11c:	1a000001 	bne	1f128 <_setlocale_r+0x28>
   1f120:	e59f0040 	ldr	r0, [pc, #64]	; 1f168 <_setlocale_r+0x68>
   1f124:	e8bd8010 	pop	{r4, pc}
   1f128:	e1a00004 	mov	r0, r4
   1f12c:	e59f1034 	ldr	r1, [pc, #52]	; 1f168 <_setlocale_r+0x68>
   1f130:	ebffe64d 	bl	18a6c <strcmp>
   1f134:	e3500000 	cmp	r0, #0
   1f138:	1a000001 	bne	1f144 <_setlocale_r+0x44>
   1f13c:	e59f0024 	ldr	r0, [pc, #36]	; 1f168 <_setlocale_r+0x68>
   1f140:	e8bd8010 	pop	{r4, pc}
   1f144:	e1a00004 	mov	r0, r4
   1f148:	e59f101c 	ldr	r1, [pc, #28]	; 1f16c <_setlocale_r+0x6c>
   1f14c:	ebffe646 	bl	18a6c <strcmp>
   1f150:	e59f3010 	ldr	r3, [pc, #16]	; 1f168 <_setlocale_r+0x68>
   1f154:	e3500000 	cmp	r0, #0
   1f158:	01a00003 	moveq	r0, r3
   1f15c:	13a00000 	movne	r0, #0
   1f160:	e8bd8010 	pop	{r4, pc}
   1f164:	00026a64 	.word	0x00026a64
   1f168:	00026a60 	.word	0x00026a60
   1f16c:	00026a10 	.word	0x00026a10

0001f170 <__locale_charset>:
   1f170:	e59f0000 	ldr	r0, [pc]	; 1f178 <__locale_charset+0x8>
   1f174:	e12fff1e 	bx	lr
   1f178:	400008dc 	.word	0x400008dc

0001f17c <__locale_mb_cur_max>:
   1f17c:	e59f3004 	ldr	r3, [pc, #4]	; 1f188 <__locale_mb_cur_max+0xc>
   1f180:	e5930020 	ldr	r0, [r3, #32]
   1f184:	e12fff1e 	bx	lr
   1f188:	400008dc 	.word	0x400008dc

0001f18c <__locale_msgcharset>:
   1f18c:	e59f0000 	ldr	r0, [pc]	; 1f194 <__locale_msgcharset+0x8>
   1f190:	e12fff1e 	bx	lr
   1f194:	40000900 	.word	0x40000900

0001f198 <__locale_cjk_lang>:
   1f198:	e3a00000 	mov	r0, #0
   1f19c:	e12fff1e 	bx	lr

0001f1a0 <_localeconv_r>:
   1f1a0:	e59f0000 	ldr	r0, [pc]	; 1f1a8 <_localeconv_r+0x8>
   1f1a4:	e12fff1e 	bx	lr
   1f1a8:	40000920 	.word	0x40000920

0001f1ac <setlocale>:
   1f1ac:	e1a02001 	mov	r2, r1
   1f1b0:	e59f100c 	ldr	r1, [pc, #12]	; 1f1c4 <setlocale+0x18>
   1f1b4:	e1a03000 	mov	r3, r0
   1f1b8:	e5910000 	ldr	r0, [r1]
   1f1bc:	e1a01003 	mov	r1, r3
   1f1c0:	eaffffce 	b	1f100 <_setlocale_r>
   1f1c4:	400004b4 	.word	0x400004b4

0001f1c8 <localeconv>:
   1f1c8:	e59f0000 	ldr	r0, [pc]	; 1f1d0 <localeconv+0x8>
   1f1cc:	e12fff1e 	bx	lr
   1f1d0:	40000920 	.word	0x40000920

0001f1d4 <memchr>:
   1f1d4:	e3100003 	tst	r0, #3
   1f1d8:	e92d0070 	push	{r4, r5, r6}
   1f1dc:	e20110ff 	and	r1, r1, #255	; 0xff
   1f1e0:	0a000011 	beq	1f22c <memchr+0x58>
   1f1e4:	e3520000 	cmp	r2, #0
   1f1e8:	0a000033 	beq	1f2bc <memchr+0xe8>
   1f1ec:	e5d03000 	ldrb	r3, [r0]
   1f1f0:	e1530001 	cmp	r3, r1
   1f1f4:	11a03000 	movne	r3, r0
   1f1f8:	12422001 	subne	r2, r2, #1
   1f1fc:	11a00003 	movne	r0, r3
   1f200:	1a000006 	bne	1f220 <memchr+0x4c>
   1f204:	ea00001b 	b	1f278 <memchr+0xa4>
   1f208:	e3520000 	cmp	r2, #0
   1f20c:	0a00002a 	beq	1f2bc <memchr+0xe8>
   1f210:	e5f3c001 	ldrb	ip, [r3, #1]!
   1f214:	e15c0001 	cmp	ip, r1
   1f218:	e2422001 	sub	r2, r2, #1
   1f21c:	0a000015 	beq	1f278 <memchr+0xa4>
   1f220:	e2800001 	add	r0, r0, #1
   1f224:	e3100003 	tst	r0, #3
   1f228:	1afffff6 	bne	1f208 <memchr+0x34>
   1f22c:	e3520003 	cmp	r2, #3
   1f230:	81816401 	orrhi	r6, r1, r1, lsl #8
   1f234:	81866806 	orrhi	r6, r6, r6, lsl #16
   1f238:	8a000010 	bhi	1f280 <memchr+0xac>
   1f23c:	e3520000 	cmp	r2, #0
   1f240:	0a00001d 	beq	1f2bc <memchr+0xe8>
   1f244:	e5d03000 	ldrb	r3, [r0]
   1f248:	e1530001 	cmp	r3, r1
   1f24c:	12803001 	addne	r3, r0, #1
   1f250:	10802002 	addne	r2, r0, r2
   1f254:	1a000004 	bne	1f26c <memchr+0x98>
   1f258:	ea000006 	b	1f278 <memchr+0xa4>
   1f25c:	e4d3c001 	ldrb	ip, [r3], #1
   1f260:	e15c0001 	cmp	ip, r1
   1f264:	e2800001 	add	r0, r0, #1
   1f268:	0a000002 	beq	1f278 <memchr+0xa4>
   1f26c:	e1530002 	cmp	r3, r2
   1f270:	1afffff9 	bne	1f25c <memchr+0x88>
   1f274:	e3a00000 	mov	r0, #0
   1f278:	e8bd0070 	pop	{r4, r5, r6}
   1f27c:	e12fff1e 	bx	lr
   1f280:	e5904000 	ldr	r4, [r0]
   1f284:	e59fc040 	ldr	ip, [pc, #64]	; 1f2cc <memchr+0xf8>
   1f288:	e0264004 	eor	r4, r6, r4
   1f28c:	e084c00c 	add	ip, r4, ip
   1f290:	e59f3038 	ldr	r3, [pc, #56]	; 1f2d0 <memchr+0xfc>
   1f294:	e1ccc004 	bic	ip, ip, r4
   1f298:	e00c3003 	and	r3, ip, r3
   1f29c:	e3530000 	cmp	r3, #0
   1f2a0:	e1a05000 	mov	r5, r0
   1f2a4:	e2800004 	add	r0, r0, #4
   1f2a8:	1a000005 	bne	1f2c4 <memchr+0xf0>
   1f2ac:	e2422004 	sub	r2, r2, #4
   1f2b0:	e3520003 	cmp	r2, #3
   1f2b4:	8afffff1 	bhi	1f280 <memchr+0xac>
   1f2b8:	eaffffdf 	b	1f23c <memchr+0x68>
   1f2bc:	e1a00002 	mov	r0, r2
   1f2c0:	eaffffec 	b	1f278 <memchr+0xa4>
   1f2c4:	e1a00005 	mov	r0, r5
   1f2c8:	eaffffdb 	b	1f23c <memchr+0x68>
   1f2cc:	fefefeff 	.word	0xfefefeff
   1f2d0:	80808080 	.word	0x80808080

0001f2d4 <_Balloc>:
   1f2d4:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
   1f2d8:	e3530000 	cmp	r3, #0
   1f2dc:	e92d4070 	push	{r4, r5, r6, lr}
   1f2e0:	e1a05000 	mov	r5, r0
   1f2e4:	e1a04001 	mov	r4, r1
   1f2e8:	0a000008 	beq	1f310 <_Balloc+0x3c>
   1f2ec:	e7930104 	ldr	r0, [r3, r4, lsl #2]
   1f2f0:	e3500000 	cmp	r0, #0
   1f2f4:	0a00000d 	beq	1f330 <_Balloc+0x5c>
   1f2f8:	e5902000 	ldr	r2, [r0]
   1f2fc:	e7832104 	str	r2, [r3, r4, lsl #2]
   1f300:	e3a03000 	mov	r3, #0
   1f304:	e5803010 	str	r3, [r0, #16]
   1f308:	e580300c 	str	r3, [r0, #12]
   1f30c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f310:	e3a01004 	mov	r1, #4
   1f314:	e3a02021 	mov	r2, #33	; 0x21
   1f318:	eb000729 	bl	20fc4 <_calloc_r>
   1f31c:	e3500000 	cmp	r0, #0
   1f320:	e1a03000 	mov	r3, r0
   1f324:	e585004c 	str	r0, [r5, #76]	; 0x4c
   1f328:	1affffef 	bne	1f2ec <_Balloc+0x18>
   1f32c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f330:	e3a01001 	mov	r1, #1
   1f334:	e1a06411 	lsl	r6, r1, r4
   1f338:	e2862005 	add	r2, r6, #5
   1f33c:	e1a00005 	mov	r0, r5
   1f340:	e1a02102 	lsl	r2, r2, #2
   1f344:	eb00071e 	bl	20fc4 <_calloc_r>
   1f348:	e3500000 	cmp	r0, #0
   1f34c:	08bd8070 	popeq	{r4, r5, r6, pc}
   1f350:	e9800050 	stmib	r0, {r4, r6}
   1f354:	eaffffe9 	b	1f300 <_Balloc+0x2c>

0001f358 <_Bfree>:
   1f358:	e3510000 	cmp	r1, #0
   1f35c:	1590304c 	ldrne	r3, [r0, #76]	; 0x4c
   1f360:	15912004 	ldrne	r2, [r1, #4]
   1f364:	17930102 	ldrne	r0, [r3, r2, lsl #2]
   1f368:	15810000 	strne	r0, [r1]
   1f36c:	17831102 	strne	r1, [r3, r2, lsl #2]
   1f370:	e12fff1e 	bx	lr

0001f374 <__multadd>:
   1f374:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1f378:	e1a05001 	mov	r5, r1
   1f37c:	e5914010 	ldr	r4, [r1, #16]
   1f380:	e1a06000 	mov	r6, r0
   1f384:	e24dd004 	sub	sp, sp, #4
   1f388:	e2810014 	add	r0, r1, #20
   1f38c:	e3a01000 	mov	r1, #0
   1f390:	e590c000 	ldr	ip, [r0]
   1f394:	e1a0780c 	lsl	r7, ip, #16
   1f398:	e1a07827 	lsr	r7, r7, #16
   1f39c:	e0233792 	mla	r3, r2, r7, r3
   1f3a0:	e1a0c82c 	lsr	ip, ip, #16
   1f3a4:	e0070c92 	mul	r7, r2, ip
   1f3a8:	e1a0c803 	lsl	ip, r3, #16
   1f3ac:	e1a0c82c 	lsr	ip, ip, #16
   1f3b0:	e0873823 	add	r3, r7, r3, lsr #16
   1f3b4:	e2811001 	add	r1, r1, #1
   1f3b8:	e08cc803 	add	ip, ip, r3, lsl #16
   1f3bc:	e1540001 	cmp	r4, r1
   1f3c0:	e1a03823 	lsr	r3, r3, #16
   1f3c4:	e480c004 	str	ip, [r0], #4
   1f3c8:	cafffff0 	bgt	1f390 <__multadd+0x1c>
   1f3cc:	e3530000 	cmp	r3, #0
   1f3d0:	0a000006 	beq	1f3f0 <__multadd+0x7c>
   1f3d4:	e5952008 	ldr	r2, [r5, #8]
   1f3d8:	e1540002 	cmp	r4, r2
   1f3dc:	aa000006 	bge	1f3fc <__multadd+0x88>
   1f3e0:	e2842005 	add	r2, r4, #5
   1f3e4:	e2844001 	add	r4, r4, #1
   1f3e8:	e7853102 	str	r3, [r5, r2, lsl #2]
   1f3ec:	e5854010 	str	r4, [r5, #16]
   1f3f0:	e1a00005 	mov	r0, r5
   1f3f4:	e28dd004 	add	sp, sp, #4
   1f3f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1f3fc:	e5951004 	ldr	r1, [r5, #4]
   1f400:	e1a00006 	mov	r0, r6
   1f404:	e2811001 	add	r1, r1, #1
   1f408:	e58d3000 	str	r3, [sp]
   1f40c:	ebffffb0 	bl	1f2d4 <_Balloc>
   1f410:	e5952010 	ldr	r2, [r5, #16]
   1f414:	e2822002 	add	r2, r2, #2
   1f418:	e285100c 	add	r1, r5, #12
   1f41c:	e1a07000 	mov	r7, r0
   1f420:	e1a02102 	lsl	r2, r2, #2
   1f424:	e280000c 	add	r0, r0, #12
   1f428:	ebffe449 	bl	18554 <memcpy>
   1f42c:	e5951004 	ldr	r1, [r5, #4]
   1f430:	e596204c 	ldr	r2, [r6, #76]	; 0x4c
   1f434:	e7920101 	ldr	r0, [r2, r1, lsl #2]
   1f438:	e59d3000 	ldr	r3, [sp]
   1f43c:	e5850000 	str	r0, [r5]
   1f440:	e7825101 	str	r5, [r2, r1, lsl #2]
   1f444:	e1a05007 	mov	r5, r7
   1f448:	eaffffe4 	b	1f3e0 <__multadd+0x6c>

0001f44c <__s2b>:
   1f44c:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
   1f450:	e283c008 	add	ip, r3, #8
   1f454:	e1a06003 	mov	r6, r3
   1f458:	e59f30cc 	ldr	r3, [pc, #204]	; 1f52c <__s2b+0xe0>
   1f45c:	e0c3e39c 	smull	lr, r3, ip, r3
   1f460:	e1a0cfcc 	asr	ip, ip, #31
   1f464:	e06c30c3 	rsb	r3, ip, r3, asr #1
   1f468:	e3530001 	cmp	r3, #1
   1f46c:	e1a08001 	mov	r8, r1
   1f470:	e1a05000 	mov	r5, r0
   1f474:	e1a07002 	mov	r7, r2
   1f478:	d3a01000 	movle	r1, #0
   1f47c:	da000005 	ble	1f498 <__s2b+0x4c>
   1f480:	e3a02001 	mov	r2, #1
   1f484:	e3a01000 	mov	r1, #0
   1f488:	e1a02082 	lsl	r2, r2, #1
   1f48c:	e1530002 	cmp	r3, r2
   1f490:	e2811001 	add	r1, r1, #1
   1f494:	cafffffb 	bgt	1f488 <__s2b+0x3c>
   1f498:	e1a00005 	mov	r0, r5
   1f49c:	ebffff8c 	bl	1f2d4 <_Balloc>
   1f4a0:	e59d301c 	ldr	r3, [sp, #28]
   1f4a4:	e3570009 	cmp	r7, #9
   1f4a8:	e5803014 	str	r3, [r0, #20]
   1f4ac:	e3a03001 	mov	r3, #1
   1f4b0:	e1a01000 	mov	r1, r0
   1f4b4:	e5803010 	str	r3, [r0, #16]
   1f4b8:	d288800a 	addle	r8, r8, #10
   1f4bc:	d3a04009 	movle	r4, #9
   1f4c0:	da00000c 	ble	1f4f8 <__s2b+0xac>
   1f4c4:	e288a009 	add	sl, r8, #9
   1f4c8:	e3a04009 	mov	r4, #9
   1f4cc:	e7d83004 	ldrb	r3, [r8, r4]
   1f4d0:	e1a00005 	mov	r0, r5
   1f4d4:	e3a0200a 	mov	r2, #10
   1f4d8:	e2433030 	sub	r3, r3, #48	; 0x30
   1f4dc:	ebffffa4 	bl	1f374 <__multadd>
   1f4e0:	e2844001 	add	r4, r4, #1
   1f4e4:	e1540007 	cmp	r4, r7
   1f4e8:	e1a01000 	mov	r1, r0
   1f4ec:	1afffff6 	bne	1f4cc <__s2b+0x80>
   1f4f0:	e08a8004 	add	r8, sl, r4
   1f4f4:	e2488008 	sub	r8, r8, #8
   1f4f8:	e1560004 	cmp	r6, r4
   1f4fc:	da000008 	ble	1f524 <__s2b+0xd8>
   1f500:	e4d83001 	ldrb	r3, [r8], #1
   1f504:	e1a00005 	mov	r0, r5
   1f508:	e3a0200a 	mov	r2, #10
   1f50c:	e2433030 	sub	r3, r3, #48	; 0x30
   1f510:	ebffff97 	bl	1f374 <__multadd>
   1f514:	e2844001 	add	r4, r4, #1
   1f518:	e1540006 	cmp	r4, r6
   1f51c:	e1a01000 	mov	r1, r0
   1f520:	1afffff6 	bne	1f500 <__s2b+0xb4>
   1f524:	e1a00001 	mov	r0, r1
   1f528:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
   1f52c:	38e38e39 	.word	0x38e38e39

0001f530 <__hi0bits>:
   1f530:	e1b02820 	lsrs	r2, r0, #16
   1f534:	e1a03000 	mov	r3, r0
   1f538:	01a03800 	lsleq	r3, r0, #16
   1f53c:	13a00000 	movne	r0, #0
   1f540:	03a00010 	moveq	r0, #16
   1f544:	e31304ff 	tst	r3, #-16777216	; 0xff000000
   1f548:	01a03403 	lsleq	r3, r3, #8
   1f54c:	02800008 	addeq	r0, r0, #8
   1f550:	e313020f 	tst	r3, #-268435456	; 0xf0000000
   1f554:	01a03203 	lsleq	r3, r3, #4
   1f558:	02800004 	addeq	r0, r0, #4
   1f55c:	e3130103 	tst	r3, #-1073741824	; 0xc0000000
   1f560:	01a03103 	lsleq	r3, r3, #2
   1f564:	02800002 	addeq	r0, r0, #2
   1f568:	e3530000 	cmp	r3, #0
   1f56c:	b12fff1e 	bxlt	lr
   1f570:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1f574:	12800001 	addne	r0, r0, #1
   1f578:	03a00020 	moveq	r0, #32
   1f57c:	e12fff1e 	bx	lr

0001f580 <__lo0bits>:
   1f580:	e5903000 	ldr	r3, [r0]
   1f584:	e1a02000 	mov	r2, r0
   1f588:	e2130007 	ands	r0, r3, #7
   1f58c:	0a00000a 	beq	1f5bc <__lo0bits+0x3c>
   1f590:	e3130001 	tst	r3, #1
   1f594:	13a00000 	movne	r0, #0
   1f598:	112fff1e 	bxne	lr
   1f59c:	e3130002 	tst	r3, #2
   1f5a0:	11a030a3 	lsrne	r3, r3, #1
   1f5a4:	01a03123 	lsreq	r3, r3, #2
   1f5a8:	15823000 	strne	r3, [r2]
   1f5ac:	13a00001 	movne	r0, #1
   1f5b0:	05823000 	streq	r3, [r2]
   1f5b4:	03a00002 	moveq	r0, #2
   1f5b8:	e12fff1e 	bx	lr
   1f5bc:	e1b01803 	lsls	r1, r3, #16
   1f5c0:	01a03823 	lsreq	r3, r3, #16
   1f5c4:	03a00010 	moveq	r0, #16
   1f5c8:	e31300ff 	tst	r3, #255	; 0xff
   1f5cc:	01a03423 	lsreq	r3, r3, #8
   1f5d0:	02800008 	addeq	r0, r0, #8
   1f5d4:	e313000f 	tst	r3, #15
   1f5d8:	01a03223 	lsreq	r3, r3, #4
   1f5dc:	02800004 	addeq	r0, r0, #4
   1f5e0:	e3130003 	tst	r3, #3
   1f5e4:	01a03123 	lsreq	r3, r3, #2
   1f5e8:	02800002 	addeq	r0, r0, #2
   1f5ec:	e3130001 	tst	r3, #1
   1f5f0:	1a000004 	bne	1f608 <__lo0bits+0x88>
   1f5f4:	e1b030a3 	lsrs	r3, r3, #1
   1f5f8:	1a000001 	bne	1f604 <__lo0bits+0x84>
   1f5fc:	e3a00020 	mov	r0, #32
   1f600:	e12fff1e 	bx	lr
   1f604:	e2800001 	add	r0, r0, #1
   1f608:	e5823000 	str	r3, [r2]
   1f60c:	e12fff1e 	bx	lr

0001f610 <__i2b>:
   1f610:	e92d4010 	push	{r4, lr}
   1f614:	e1a04001 	mov	r4, r1
   1f618:	e3a01001 	mov	r1, #1
   1f61c:	ebffff2c 	bl	1f2d4 <_Balloc>
   1f620:	e3a02001 	mov	r2, #1
   1f624:	e5804014 	str	r4, [r0, #20]
   1f628:	e5802010 	str	r2, [r0, #16]
   1f62c:	e8bd8010 	pop	{r4, pc}

0001f630 <__multiply>:
   1f630:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f634:	e5916010 	ldr	r6, [r1, #16]
   1f638:	e5927010 	ldr	r7, [r2, #16]
   1f63c:	e1560007 	cmp	r6, r7
   1f640:	e24dd014 	sub	sp, sp, #20
   1f644:	e1a04001 	mov	r4, r1
   1f648:	e1a05002 	mov	r5, r2
   1f64c:	aa000004 	bge	1f664 <__multiply+0x34>
   1f650:	e1a02006 	mov	r2, r6
   1f654:	e1a04005 	mov	r4, r5
   1f658:	e1a06007 	mov	r6, r7
   1f65c:	e1a05001 	mov	r5, r1
   1f660:	e1a07002 	mov	r7, r2
   1f664:	e5943008 	ldr	r3, [r4, #8]
   1f668:	e5941004 	ldr	r1, [r4, #4]
   1f66c:	e086b007 	add	fp, r6, r7
   1f670:	e15b0003 	cmp	fp, r3
   1f674:	c2811001 	addgt	r1, r1, #1
   1f678:	ebffff15 	bl	1f2d4 <_Balloc>
   1f67c:	e28b1005 	add	r1, fp, #5
   1f680:	e0802101 	add	r2, r0, r1, lsl #2
   1f684:	e280a014 	add	sl, r0, #20
   1f688:	e15a0002 	cmp	sl, r2
   1f68c:	e58d0004 	str	r0, [sp, #4]
   1f690:	e58d100c 	str	r1, [sp, #12]
   1f694:	e58d2008 	str	r2, [sp, #8]
   1f698:	2a000005 	bcs	1f6b4 <__multiply+0x84>
   1f69c:	e59d1008 	ldr	r1, [sp, #8]
   1f6a0:	e1a0300a 	mov	r3, sl
   1f6a4:	e3a02000 	mov	r2, #0
   1f6a8:	e4832004 	str	r2, [r3], #4
   1f6ac:	e1510003 	cmp	r1, r3
   1f6b0:	8afffffc 	bhi	1f6a8 <__multiply+0x78>
   1f6b4:	e2877005 	add	r7, r7, #5
   1f6b8:	e2859014 	add	r9, r5, #20
   1f6bc:	e0855107 	add	r5, r5, r7, lsl #2
   1f6c0:	e2866005 	add	r6, r6, #5
   1f6c4:	e2843014 	add	r3, r4, #20
   1f6c8:	e1590005 	cmp	r9, r5
   1f6cc:	e58d3000 	str	r3, [sp]
   1f6d0:	e0846106 	add	r6, r4, r6, lsl #2
   1f6d4:	2a00003e 	bcs	1f7d4 <__multiply+0x1a4>
   1f6d8:	e58db010 	str	fp, [sp, #16]
   1f6dc:	e1a0b005 	mov	fp, r5
   1f6e0:	e499c004 	ldr	ip, [r9], #4
   1f6e4:	e1a0480c 	lsl	r4, ip, #16
   1f6e8:	e1b04824 	lsrs	r4, r4, #16
   1f6ec:	0a000017 	beq	1f750 <__multiply+0x120>
   1f6f0:	e59d2000 	ldr	r2, [sp]
   1f6f4:	e1a0300a 	mov	r3, sl
   1f6f8:	e3a0c000 	mov	ip, #0
   1f6fc:	e4920004 	ldr	r0, [r2], #4
   1f700:	e5931000 	ldr	r1, [r3]
   1f704:	e1a05800 	lsl	r5, r0, #16
   1f708:	e1a07801 	lsl	r7, r1, #16
   1f70c:	e08cc827 	add	ip, ip, r7, lsr #16
   1f710:	e1a05825 	lsr	r5, r5, #16
   1f714:	e025c594 	mla	r5, r4, r5, ip
   1f718:	e1a00820 	lsr	r0, r0, #16
   1f71c:	e1a0c821 	lsr	ip, r1, #16
   1f720:	e02cc094 	mla	ip, r4, r0, ip
   1f724:	e1a08805 	lsl	r8, r5, #16
   1f728:	e08cc825 	add	ip, ip, r5, lsr #16
   1f72c:	e1a08828 	lsr	r8, r8, #16
   1f730:	e188880c 	orr	r8, r8, ip, lsl #16
   1f734:	e1560002 	cmp	r6, r2
   1f738:	e1a07003 	mov	r7, r3
   1f73c:	e1a0c82c 	lsr	ip, ip, #16
   1f740:	e4838004 	str	r8, [r3], #4
   1f744:	8affffec 	bhi	1f6fc <__multiply+0xcc>
   1f748:	e587c004 	str	ip, [r7, #4]
   1f74c:	e519c004 	ldr	ip, [r9, #-4]
   1f750:	e1b0c82c 	lsrs	ip, ip, #16
   1f754:	0a00001a 	beq	1f7c4 <__multiply+0x194>
   1f758:	e59a7000 	ldr	r7, [sl]
   1f75c:	e59d3000 	ldr	r3, [sp]
   1f760:	e1a0500a 	mov	r5, sl
   1f764:	e1a01007 	mov	r1, r7
   1f768:	e1a0400a 	mov	r4, sl
   1f76c:	e3a08000 	mov	r8, #0
   1f770:	ea000000 	b	1f778 <__multiply+0x148>
   1f774:	e1a04002 	mov	r4, r2
   1f778:	e1d320b0 	ldrh	r2, [r3]
   1f77c:	e0888821 	add	r8, r8, r1, lsr #16
   1f780:	e028829c 	mla	r8, ip, r2, r8
   1f784:	e1a07807 	lsl	r7, r7, #16
   1f788:	e1a07827 	lsr	r7, r7, #16
   1f78c:	e1877808 	orr	r7, r7, r8, lsl #16
   1f790:	e1a02004 	mov	r2, r4
   1f794:	e4827004 	str	r7, [r2], #4
   1f798:	e5b51004 	ldr	r1, [r5, #4]!
   1f79c:	e4937004 	ldr	r7, [r3], #4
   1f7a0:	e1a00801 	lsl	r0, r1, #16
   1f7a4:	e1a07827 	lsr	r7, r7, #16
   1f7a8:	e1a00820 	lsr	r0, r0, #16
   1f7ac:	e027079c 	mla	r7, ip, r7, r0
   1f7b0:	e1560003 	cmp	r6, r3
   1f7b4:	e0877828 	add	r7, r7, r8, lsr #16
   1f7b8:	e1a08827 	lsr	r8, r7, #16
   1f7bc:	8affffec 	bhi	1f774 <__multiply+0x144>
   1f7c0:	e5847004 	str	r7, [r4, #4]
   1f7c4:	e15b0009 	cmp	fp, r9
   1f7c8:	e28aa004 	add	sl, sl, #4
   1f7cc:	8affffc3 	bhi	1f6e0 <__multiply+0xb0>
   1f7d0:	e59db010 	ldr	fp, [sp, #16]
   1f7d4:	e35b0000 	cmp	fp, #0
   1f7d8:	da00000d 	ble	1f814 <__multiply+0x1e4>
   1f7dc:	e59d1004 	ldr	r1, [sp, #4]
   1f7e0:	e59d200c 	ldr	r2, [sp, #12]
   1f7e4:	e0813102 	add	r3, r1, r2, lsl #2
   1f7e8:	e5133004 	ldr	r3, [r3, #-4]
   1f7ec:	e3530000 	cmp	r3, #0
   1f7f0:	1a000007 	bne	1f814 <__multiply+0x1e4>
   1f7f4:	e59d1008 	ldr	r1, [sp, #8]
   1f7f8:	e2413004 	sub	r3, r1, #4
   1f7fc:	ea000002 	b	1f80c <__multiply+0x1dc>
   1f800:	e5332004 	ldr	r2, [r3, #-4]!
   1f804:	e3520000 	cmp	r2, #0
   1f808:	1a000001 	bne	1f814 <__multiply+0x1e4>
   1f80c:	e25bb001 	subs	fp, fp, #1
   1f810:	1afffffa 	bne	1f800 <__multiply+0x1d0>
   1f814:	e59d2004 	ldr	r2, [sp, #4]
   1f818:	e582b010 	str	fp, [r2, #16]
   1f81c:	e1a00002 	mov	r0, r2
   1f820:	e28dd014 	add	sp, sp, #20
   1f824:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001f828 <__pow5mult>:
   1f828:	e2123003 	ands	r3, r2, #3
   1f82c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f830:	e1a05002 	mov	r5, r2
   1f834:	e1a04000 	mov	r4, r0
   1f838:	e1a08001 	mov	r8, r1
   1f83c:	1a000024 	bne	1f8d4 <__pow5mult+0xac>
   1f840:	e1b05145 	asrs	r5, r5, #2
   1f844:	0a000018 	beq	1f8ac <__pow5mult+0x84>
   1f848:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   1f84c:	e3570000 	cmp	r7, #0
   1f850:	1a000006 	bne	1f870 <__pow5mult+0x48>
   1f854:	ea000025 	b	1f8f0 <__pow5mult+0xc8>
   1f858:	e1b050c5 	asrs	r5, r5, #1
   1f85c:	0a000012 	beq	1f8ac <__pow5mult+0x84>
   1f860:	e5976000 	ldr	r6, [r7]
   1f864:	e3560000 	cmp	r6, #0
   1f868:	11a07006 	movne	r7, r6
   1f86c:	0a000010 	beq	1f8b4 <__pow5mult+0x8c>
   1f870:	e3150001 	tst	r5, #1
   1f874:	0afffff7 	beq	1f858 <__pow5mult+0x30>
   1f878:	e1a01008 	mov	r1, r8
   1f87c:	e1a02007 	mov	r2, r7
   1f880:	e1a00004 	mov	r0, r4
   1f884:	ebffff69 	bl	1f630 <__multiply>
   1f888:	e3580000 	cmp	r8, #0
   1f88c:	15982004 	ldrne	r2, [r8, #4]
   1f890:	1594304c 	ldrne	r3, [r4, #76]	; 0x4c
   1f894:	17931102 	ldrne	r1, [r3, r2, lsl #2]
   1f898:	15881000 	strne	r1, [r8]
   1f89c:	17838102 	strne	r8, [r3, r2, lsl #2]
   1f8a0:	e1b050c5 	asrs	r5, r5, #1
   1f8a4:	e1a08000 	mov	r8, r0
   1f8a8:	1affffec 	bne	1f860 <__pow5mult+0x38>
   1f8ac:	e1a00008 	mov	r0, r8
   1f8b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1f8b4:	e1a01007 	mov	r1, r7
   1f8b8:	e1a02007 	mov	r2, r7
   1f8bc:	e1a00004 	mov	r0, r4
   1f8c0:	ebffff5a 	bl	1f630 <__multiply>
   1f8c4:	e5870000 	str	r0, [r7]
   1f8c8:	e5806000 	str	r6, [r0]
   1f8cc:	e1a07000 	mov	r7, r0
   1f8d0:	eaffffe6 	b	1f870 <__pow5mult+0x48>
   1f8d4:	e59f2034 	ldr	r2, [pc, #52]	; 1f910 <__pow5mult+0xe8>
   1f8d8:	e2433001 	sub	r3, r3, #1
   1f8dc:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   1f8e0:	e3a03000 	mov	r3, #0
   1f8e4:	ebfffea2 	bl	1f374 <__multadd>
   1f8e8:	e1a08000 	mov	r8, r0
   1f8ec:	eaffffd3 	b	1f840 <__pow5mult+0x18>
   1f8f0:	e1a00004 	mov	r0, r4
   1f8f4:	e59f1018 	ldr	r1, [pc, #24]	; 1f914 <__pow5mult+0xec>
   1f8f8:	ebffff44 	bl	1f610 <__i2b>
   1f8fc:	e3a03000 	mov	r3, #0
   1f900:	e5840048 	str	r0, [r4, #72]	; 0x48
   1f904:	e1a07000 	mov	r7, r0
   1f908:	e5803000 	str	r3, [r0]
   1f90c:	eaffffd7 	b	1f870 <__pow5mult+0x48>
   1f910:	00025a5c 	.word	0x00025a5c
   1f914:	00000271 	.word	0x00000271

0001f918 <__lshift>:
   1f918:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f91c:	e591a010 	ldr	sl, [r1, #16]
   1f920:	e1a062c2 	asr	r6, r2, #5
   1f924:	e5913008 	ldr	r3, [r1, #8]
   1f928:	e086a00a 	add	sl, r6, sl
   1f92c:	e28a5001 	add	r5, sl, #1
   1f930:	e1550003 	cmp	r5, r3
   1f934:	e1a04001 	mov	r4, r1
   1f938:	e1a07002 	mov	r7, r2
   1f93c:	e1a08000 	mov	r8, r0
   1f940:	e5911004 	ldr	r1, [r1, #4]
   1f944:	da000003 	ble	1f958 <__lshift+0x40>
   1f948:	e1a03083 	lsl	r3, r3, #1
   1f94c:	e1550003 	cmp	r5, r3
   1f950:	e2811001 	add	r1, r1, #1
   1f954:	cafffffb 	bgt	1f948 <__lshift+0x30>
   1f958:	e1a00008 	mov	r0, r8
   1f95c:	ebfffe5c 	bl	1f2d4 <_Balloc>
   1f960:	e3560000 	cmp	r6, #0
   1f964:	e2803014 	add	r3, r0, #20
   1f968:	da000007 	ble	1f98c <__lshift+0x74>
   1f96c:	e3a02000 	mov	r2, #0
   1f970:	e1a01002 	mov	r1, r2
   1f974:	e2822001 	add	r2, r2, #1
   1f978:	e1520006 	cmp	r2, r6
   1f97c:	e4831004 	str	r1, [r3], #4
   1f980:	1afffffb 	bne	1f974 <__lshift+0x5c>
   1f984:	e2823005 	add	r3, r2, #5
   1f988:	e0803103 	add	r3, r0, r3, lsl #2
   1f98c:	e5946010 	ldr	r6, [r4, #16]
   1f990:	e217701f 	ands	r7, r7, #31
   1f994:	e2866005 	add	r6, r6, #5
   1f998:	e2842014 	add	r2, r4, #20
   1f99c:	e0846106 	add	r6, r4, r6, lsl #2
   1f9a0:	12679020 	rsbne	r9, r7, #32
   1f9a4:	13a0c000 	movne	ip, #0
   1f9a8:	1a00000c 	bne	1f9e0 <__lshift+0xc8>
   1f9ac:	e4921004 	ldr	r1, [r2], #4
   1f9b0:	e1560002 	cmp	r6, r2
   1f9b4:	e4831004 	str	r1, [r3], #4
   1f9b8:	8afffffb 	bhi	1f9ac <__lshift+0x94>
   1f9bc:	e598304c 	ldr	r3, [r8, #76]	; 0x4c
   1f9c0:	e5942004 	ldr	r2, [r4, #4]
   1f9c4:	e7931102 	ldr	r1, [r3, r2, lsl #2]
   1f9c8:	e2455001 	sub	r5, r5, #1
   1f9cc:	e5805010 	str	r5, [r0, #16]
   1f9d0:	e5841000 	str	r1, [r4]
   1f9d4:	e7834102 	str	r4, [r3, r2, lsl #2]
   1f9d8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f9dc:	e1a03001 	mov	r3, r1
   1f9e0:	e5921000 	ldr	r1, [r2]
   1f9e4:	e18cc711 	orr	ip, ip, r1, lsl r7
   1f9e8:	e1a01003 	mov	r1, r3
   1f9ec:	e481c004 	str	ip, [r1], #4
   1f9f0:	e492c004 	ldr	ip, [r2], #4
   1f9f4:	e1560002 	cmp	r6, r2
   1f9f8:	e1a0c93c 	lsr	ip, ip, r9
   1f9fc:	8afffff6 	bhi	1f9dc <__lshift+0xc4>
   1fa00:	e35c0000 	cmp	ip, #0
   1fa04:	e583c004 	str	ip, [r3, #4]
   1fa08:	128a5002 	addne	r5, sl, #2
   1fa0c:	eaffffea 	b	1f9bc <__lshift+0xa4>

0001fa10 <__mcmp>:
   1fa10:	e1a03000 	mov	r3, r0
   1fa14:	e5912010 	ldr	r2, [r1, #16]
   1fa18:	e5900010 	ldr	r0, [r0, #16]
   1fa1c:	e0500002 	subs	r0, r0, r2
   1fa20:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
   1fa24:	1a00000b 	bne	1fa58 <__mcmp+0x48>
   1fa28:	e2822005 	add	r2, r2, #5
   1fa2c:	e1a02102 	lsl	r2, r2, #2
   1fa30:	e2834014 	add	r4, r3, #20
   1fa34:	e0811002 	add	r1, r1, r2
   1fa38:	e0833002 	add	r3, r3, r2
   1fa3c:	e513c004 	ldr	ip, [r3, #-4]
   1fa40:	e5312004 	ldr	r2, [r1, #-4]!
   1fa44:	e15c0002 	cmp	ip, r2
   1fa48:	e2433004 	sub	r3, r3, #4
   1fa4c:	1a000003 	bne	1fa60 <__mcmp+0x50>
   1fa50:	e1540003 	cmp	r4, r3
   1fa54:	3afffff8 	bcc	1fa3c <__mcmp+0x2c>
   1fa58:	e8bd0010 	pop	{r4}
   1fa5c:	e12fff1e 	bx	lr
   1fa60:	33e00000 	mvncc	r0, #0
   1fa64:	23a00001 	movcs	r0, #1
   1fa68:	eafffffa 	b	1fa58 <__mcmp+0x48>

0001fa6c <__mdiff>:
   1fa6c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fa70:	e1a04001 	mov	r4, r1
   1fa74:	e1a06000 	mov	r6, r0
   1fa78:	e1a01002 	mov	r1, r2
   1fa7c:	e1a00004 	mov	r0, r4
   1fa80:	e1a05002 	mov	r5, r2
   1fa84:	ebffffe1 	bl	1fa10 <__mcmp>
   1fa88:	e2507000 	subs	r7, r0, #0
   1fa8c:	0a000042 	beq	1fb9c <__mdiff+0x130>
   1fa90:	b1a03004 	movlt	r3, r4
   1fa94:	b1a04005 	movlt	r4, r5
   1fa98:	e1a00006 	mov	r0, r6
   1fa9c:	e5941004 	ldr	r1, [r4, #4]
   1faa0:	b1a05003 	movlt	r5, r3
   1faa4:	a3a07000 	movge	r7, #0
   1faa8:	b3a07001 	movlt	r7, #1
   1faac:	ebfffe08 	bl	1f2d4 <_Balloc>
   1fab0:	e5946010 	ldr	r6, [r4, #16]
   1fab4:	e5958010 	ldr	r8, [r5, #16]
   1fab8:	e2863005 	add	r3, r6, #5
   1fabc:	e2888005 	add	r8, r8, #5
   1fac0:	e580700c 	str	r7, [r0, #12]
   1fac4:	e0858108 	add	r8, r5, r8, lsl #2
   1fac8:	e0847103 	add	r7, r4, r3, lsl #2
   1facc:	e2855014 	add	r5, r5, #20
   1fad0:	e2844014 	add	r4, r4, #20
   1fad4:	e280a014 	add	sl, r0, #20
   1fad8:	e3a0c000 	mov	ip, #0
   1fadc:	e4942004 	ldr	r2, [r4], #4
   1fae0:	e4951004 	ldr	r1, [r5], #4
   1fae4:	e1a03802 	lsl	r3, r2, #16
   1fae8:	e08cc823 	add	ip, ip, r3, lsr #16
   1faec:	e1a09801 	lsl	r9, r1, #16
   1faf0:	e04c3829 	sub	r3, ip, r9, lsr #16
   1faf4:	e1a0c821 	lsr	ip, r1, #16
   1faf8:	e06cc822 	rsb	ip, ip, r2, lsr #16
   1fafc:	e1a01803 	lsl	r1, r3, #16
   1fb00:	e08cc843 	add	ip, ip, r3, asr #16
   1fb04:	e1a01821 	lsr	r1, r1, #16
   1fb08:	e1a0300a 	mov	r3, sl
   1fb0c:	e181180c 	orr	r1, r1, ip, lsl #16
   1fb10:	e4831004 	str	r1, [r3], #4
   1fb14:	e1580005 	cmp	r8, r5
   1fb18:	e1a02004 	mov	r2, r4
   1fb1c:	e1a0c84c 	asr	ip, ip, #16
   1fb20:	e1a0a003 	mov	sl, r3
   1fb24:	8affffec 	bhi	1fadc <__mdiff+0x70>
   1fb28:	e1570004 	cmp	r7, r4
   1fb2c:	e1a05003 	mov	r5, r3
   1fb30:	9a000010 	bls	1fb78 <__mdiff+0x10c>
   1fb34:	e4921004 	ldr	r1, [r2], #4
   1fb38:	e1a08801 	lsl	r8, r1, #16
   1fb3c:	e08cc828 	add	ip, ip, r8, lsr #16
   1fb40:	e1a08821 	lsr	r8, r1, #16
   1fb44:	e1a0180c 	lsl	r1, ip, #16
   1fb48:	e1a01821 	lsr	r1, r1, #16
   1fb4c:	e088c84c 	add	ip, r8, ip, asr #16
   1fb50:	e181180c 	orr	r1, r1, ip, lsl #16
   1fb54:	e1570002 	cmp	r7, r2
   1fb58:	e1a0c84c 	asr	ip, ip, #16
   1fb5c:	e4831004 	str	r1, [r3], #4
   1fb60:	8afffff3 	bhi	1fb34 <__mdiff+0xc8>
   1fb64:	e1e03004 	mvn	r3, r4
   1fb68:	e0833007 	add	r3, r3, r7
   1fb6c:	e3c33003 	bic	r3, r3, #3
   1fb70:	e2833004 	add	r3, r3, #4
   1fb74:	e0853003 	add	r3, r5, r3
   1fb78:	e3510000 	cmp	r1, #0
   1fb7c:	1a000004 	bne	1fb94 <__mdiff+0x128>
   1fb80:	e2433004 	sub	r3, r3, #4
   1fb84:	e5332004 	ldr	r2, [r3, #-4]!
   1fb88:	e3520000 	cmp	r2, #0
   1fb8c:	e2466001 	sub	r6, r6, #1
   1fb90:	0afffffb 	beq	1fb84 <__mdiff+0x118>
   1fb94:	e5806010 	str	r6, [r0, #16]
   1fb98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fb9c:	e1a00006 	mov	r0, r6
   1fba0:	e1a01007 	mov	r1, r7
   1fba4:	ebfffdca 	bl	1f2d4 <_Balloc>
   1fba8:	e3a03001 	mov	r3, #1
   1fbac:	e5803010 	str	r3, [r0, #16]
   1fbb0:	e5807014 	str	r7, [r0, #20]
   1fbb4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001fbb8 <__ulp>:
   1fbb8:	e59f3050 	ldr	r3, [pc, #80]	; 1fc10 <__ulp+0x58>
   1fbbc:	e0003003 	and	r3, r0, r3
   1fbc0:	e243350d 	sub	r3, r3, #54525952	; 0x3400000
   1fbc4:	e3530000 	cmp	r3, #0
   1fbc8:	c1a00003 	movgt	r0, r3
   1fbcc:	c3a01000 	movgt	r1, #0
   1fbd0:	c12fff1e 	bxgt	lr
   1fbd4:	e2633000 	rsb	r3, r3, #0
   1fbd8:	e1a03a43 	asr	r3, r3, #20
   1fbdc:	e3530013 	cmp	r3, #19
   1fbe0:	d3a02702 	movle	r2, #524288	; 0x80000
   1fbe4:	d1a00352 	asrle	r0, r2, r3
   1fbe8:	d3a01000 	movle	r1, #0
   1fbec:	d12fff1e 	bxle	lr
   1fbf0:	e3530032 	cmp	r3, #50	; 0x32
   1fbf4:	d2633033 	rsble	r3, r3, #51	; 0x33
   1fbf8:	d3a02001 	movle	r2, #1
   1fbfc:	d1a03312 	lslle	r3, r2, r3
   1fc00:	c3a03001 	movgt	r3, #1
   1fc04:	e3a00000 	mov	r0, #0
   1fc08:	e1a01003 	mov	r1, r3
   1fc0c:	e12fff1e 	bx	lr
   1fc10:	7ff00000 	.word	0x7ff00000

0001fc14 <__b2d>:
   1fc14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1fc18:	e5904010 	ldr	r4, [r0, #16]
   1fc1c:	e2844005 	add	r4, r4, #5
   1fc20:	e0804104 	add	r4, r0, r4, lsl #2
   1fc24:	e5145004 	ldr	r5, [r4, #-4]
   1fc28:	e1a03000 	mov	r3, r0
   1fc2c:	e1a00005 	mov	r0, r5
   1fc30:	e1a07001 	mov	r7, r1
   1fc34:	e2836014 	add	r6, r3, #20
   1fc38:	ebfffe3c 	bl	1f530 <__hi0bits>
   1fc3c:	e2603020 	rsb	r3, r0, #32
   1fc40:	e350000a 	cmp	r0, #10
   1fc44:	e2441004 	sub	r1, r4, #4
   1fc48:	e5873000 	str	r3, [r7]
   1fc4c:	ca00000c 	bgt	1fc84 <__b2d+0x70>
   1fc50:	e1560001 	cmp	r6, r1
   1fc54:	35141008 	ldrcc	r1, [r4, #-8]
   1fc58:	e260c00b 	rsb	ip, r0, #11
   1fc5c:	e1a07c35 	lsr	r7, r5, ip
   1fc60:	31a0cc31 	lsrcc	ip, r1, ip
   1fc64:	23a0c000 	movcs	ip, #0
   1fc68:	e2800015 	add	r0, r0, #21
   1fc6c:	e18c3015 	orr	r3, ip, r5, lsl r0
   1fc70:	e38775ff 	orr	r7, r7, #1069547520	; 0x3fc00000
   1fc74:	e3872603 	orr	r2, r7, #3145728	; 0x300000
   1fc78:	e1a00002 	mov	r0, r2
   1fc7c:	e1a01003 	mov	r1, r3
   1fc80:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1fc84:	e1560001 	cmp	r6, r1
   1fc88:	32441008 	subcc	r1, r4, #8
   1fc8c:	3514c008 	ldrcc	ip, [r4, #-8]
   1fc90:	23a0c000 	movcs	ip, #0
   1fc94:	e250400b 	subs	r4, r0, #11
   1fc98:	0a00000c 	beq	1fcd0 <__b2d+0xbc>
   1fc9c:	e1a05415 	lsl	r5, r5, r4
   1fca0:	e1510006 	cmp	r1, r6
   1fca4:	85111004 	ldrhi	r1, [r1, #-4]
   1fca8:	e38555ff 	orr	r5, r5, #1069547520	; 0x3fc00000
   1fcac:	e260002b 	rsb	r0, r0, #43	; 0x2b
   1fcb0:	e3855603 	orr	r5, r5, #3145728	; 0x300000
   1fcb4:	e185203c 	orr	r2, r5, ip, lsr r0
   1fcb8:	81a00031 	lsrhi	r0, r1, r0
   1fcbc:	93a00000 	movls	r0, #0
   1fcc0:	e180341c 	orr	r3, r0, ip, lsl r4
   1fcc4:	e1a00002 	mov	r0, r2
   1fcc8:	e1a01003 	mov	r1, r3
   1fccc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1fcd0:	e38555ff 	orr	r5, r5, #1069547520	; 0x3fc00000
   1fcd4:	e3852603 	orr	r2, r5, #3145728	; 0x300000
   1fcd8:	e1a0300c 	mov	r3, ip
   1fcdc:	e1a00002 	mov	r0, r2
   1fce0:	e1a01003 	mov	r1, r3
   1fce4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001fce8 <__d2b>:
   1fce8:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
   1fcec:	e1a04001 	mov	r4, r1
   1fcf0:	e24dd008 	sub	sp, sp, #8
   1fcf4:	e3a01001 	mov	r1, #1
   1fcf8:	e1a05002 	mov	r5, r2
   1fcfc:	e1a07003 	mov	r7, r3
   1fd00:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
   1fd04:	ebfffd72 	bl	1f2d4 <_Balloc>
   1fd08:	e3c4a102 	bic	sl, r4, #-2147483648	; 0x80000000
   1fd0c:	e3c434ff 	bic	r3, r4, #-16777216	; 0xff000000
   1fd10:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   1fd14:	e1b0aa2a 	lsrs	sl, sl, #20
   1fd18:	e58d3004 	str	r3, [sp, #4]
   1fd1c:	13833601 	orrne	r3, r3, #1048576	; 0x100000
   1fd20:	158d3004 	strne	r3, [sp, #4]
   1fd24:	e3550000 	cmp	r5, #0
   1fd28:	e1a08000 	mov	r8, r0
   1fd2c:	0a00001f 	beq	1fdb0 <__d2b+0xc8>
   1fd30:	e28d0008 	add	r0, sp, #8
   1fd34:	e5205008 	str	r5, [r0, #-8]!
   1fd38:	e1a0000d 	mov	r0, sp
   1fd3c:	ebfffe0f 	bl	1f580 <__lo0bits>
   1fd40:	e3500000 	cmp	r0, #0
   1fd44:	e59d3004 	ldr	r3, [sp, #4]
   1fd48:	159d2000 	ldrne	r2, [sp]
   1fd4c:	12601020 	rsbne	r1, r0, #32
   1fd50:	11822113 	orrne	r2, r2, r3, lsl r1
   1fd54:	11a03033 	lsrne	r3, r3, r0
   1fd58:	059d2000 	ldreq	r2, [sp]
   1fd5c:	15882014 	strne	r2, [r8, #20]
   1fd60:	158d3004 	strne	r3, [sp, #4]
   1fd64:	05882014 	streq	r2, [r8, #20]
   1fd68:	e3530000 	cmp	r3, #0
   1fd6c:	03a04001 	moveq	r4, #1
   1fd70:	13a04002 	movne	r4, #2
   1fd74:	e35a0000 	cmp	sl, #0
   1fd78:	e5883018 	str	r3, [r8, #24]
   1fd7c:	e5884010 	str	r4, [r8, #16]
   1fd80:	1a000013 	bne	1fdd4 <__d2b+0xec>
   1fd84:	e2400e43 	sub	r0, r0, #1072	; 0x430
   1fd88:	e2403002 	sub	r3, r0, #2
   1fd8c:	e2842004 	add	r2, r4, #4
   1fd90:	e7980102 	ldr	r0, [r8, r2, lsl #2]
   1fd94:	e5873000 	str	r3, [r7]
   1fd98:	ebfffde4 	bl	1f530 <__hi0bits>
   1fd9c:	e0600284 	rsb	r0, r0, r4, lsl #5
   1fda0:	e5860000 	str	r0, [r6]
   1fda4:	e1a00008 	mov	r0, r8
   1fda8:	e28dd008 	add	sp, sp, #8
   1fdac:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
   1fdb0:	e28d0004 	add	r0, sp, #4
   1fdb4:	ebfffdf1 	bl	1f580 <__lo0bits>
   1fdb8:	e59d3004 	ldr	r3, [sp, #4]
   1fdbc:	e3a04001 	mov	r4, #1
   1fdc0:	e35a0000 	cmp	sl, #0
   1fdc4:	e5883014 	str	r3, [r8, #20]
   1fdc8:	e5884010 	str	r4, [r8, #16]
   1fdcc:	e2800020 	add	r0, r0, #32
   1fdd0:	0affffeb 	beq	1fd84 <__d2b+0x9c>
   1fdd4:	e24aae43 	sub	sl, sl, #1072	; 0x430
   1fdd8:	e24aa003 	sub	sl, sl, #3
   1fddc:	e08aa000 	add	sl, sl, r0
   1fde0:	e2600035 	rsb	r0, r0, #53	; 0x35
   1fde4:	e587a000 	str	sl, [r7]
   1fde8:	e5860000 	str	r0, [r6]
   1fdec:	eaffffec 	b	1fda4 <__d2b+0xbc>

0001fdf0 <__ratio>:
   1fdf0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1fdf4:	e24dd008 	sub	sp, sp, #8
   1fdf8:	e1a06001 	mov	r6, r1
   1fdfc:	e1a0100d 	mov	r1, sp
   1fe00:	e1a07000 	mov	r7, r0
   1fe04:	ebffff82 	bl	1fc14 <__b2d>
   1fe08:	e1a08000 	mov	r8, r0
   1fe0c:	e1a09001 	mov	r9, r1
   1fe10:	e1a00006 	mov	r0, r6
   1fe14:	e28d1004 	add	r1, sp, #4
   1fe18:	ebffff7d 	bl	1fc14 <__b2d>
   1fe1c:	e5962010 	ldr	r2, [r6, #16]
   1fe20:	e1a05001 	mov	r5, r1
   1fe24:	e597c010 	ldr	ip, [r7, #16]
   1fe28:	e89d000a 	ldm	sp, {r1, r3}
   1fe2c:	e062c00c 	rsb	ip, r2, ip
   1fe30:	e0633001 	rsb	r3, r3, r1
   1fe34:	e083c28c 	add	ip, r3, ip, lsl #5
   1fe38:	e35c0000 	cmp	ip, #0
   1fe3c:	e1a04000 	mov	r4, r0
   1fe40:	e1a02008 	mov	r2, r8
   1fe44:	e1a00004 	mov	r0, r4
   1fe48:	c0882a0c 	addgt	r2, r8, ip, lsl #20
   1fe4c:	d0440a0c 	suble	r0, r4, ip, lsl #20
   1fe50:	c1a08002 	movgt	r8, r2
   1fe54:	d1a04000 	movle	r4, r0
   1fe58:	c1a09009 	movgt	r9, r9
   1fe5c:	d1a05005 	movle	r5, r5
   1fe60:	e1a00008 	mov	r0, r8
   1fe64:	e1a01009 	mov	r1, r9
   1fe68:	e1a02004 	mov	r2, r4
   1fe6c:	e1a03005 	mov	r3, r5
   1fe70:	eb0013b8 	bl	24d58 <__aeabi_ddiv>
   1fe74:	e28dd008 	add	sp, sp, #8
   1fe78:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0001fe7c <_mprec_log10>:
   1fe7c:	e3500017 	cmp	r0, #23
   1fe80:	e92d4010 	push	{r4, lr}
   1fe84:	c3a01000 	movgt	r1, #0
   1fe88:	e1a04000 	mov	r4, r0
   1fe8c:	c59f002c 	ldrgt	r0, [pc, #44]	; 1fec0 <_mprec_log10+0x44>
   1fe90:	da000005 	ble	1feac <_mprec_log10+0x30>
   1fe94:	e59f2028 	ldr	r2, [pc, #40]	; 1fec4 <_mprec_log10+0x48>
   1fe98:	e3a03000 	mov	r3, #0
   1fe9c:	eb001312 	bl	24aec <__aeabi_dmul>
   1fea0:	e2544001 	subs	r4, r4, #1
   1fea4:	1afffffa 	bne	1fe94 <_mprec_log10+0x18>
   1fea8:	e8bd8010 	pop	{r4, pc}
   1feac:	e59f3014 	ldr	r3, [pc, #20]	; 1fec8 <_mprec_log10+0x4c>
   1feb0:	e0834184 	add	r4, r3, r4, lsl #3
   1feb4:	e284100c 	add	r1, r4, #12
   1feb8:	e8910003 	ldm	r1, {r0, r1}
   1febc:	e8bd8010 	pop	{r4, pc}
   1fec0:	3ff00000 	.word	0x3ff00000
   1fec4:	40240000 	.word	0x40240000
   1fec8:	00025a5c 	.word	0x00025a5c

0001fecc <__copybits>:
   1fecc:	e5923010 	ldr	r3, [r2, #16]
   1fed0:	e2411001 	sub	r1, r1, #1
   1fed4:	e2833005 	add	r3, r3, #5
   1fed8:	e1a0c2c1 	asr	ip, r1, #5
   1fedc:	e0823103 	add	r3, r2, r3, lsl #2
   1fee0:	e2821014 	add	r1, r2, #20
   1fee4:	e28cc001 	add	ip, ip, #1
   1fee8:	e1510003 	cmp	r1, r3
   1feec:	e92d0030 	push	{r4, r5}
   1fef0:	e080c10c 	add	ip, r0, ip, lsl #2
   1fef4:	2a000009 	bcs	1ff20 <__copybits+0x54>
   1fef8:	e1a04000 	mov	r4, r0
   1fefc:	e4915004 	ldr	r5, [r1], #4
   1ff00:	e1530001 	cmp	r3, r1
   1ff04:	e4845004 	str	r5, [r4], #4
   1ff08:	8afffffb 	bhi	1fefc <__copybits+0x30>
   1ff0c:	e0623003 	rsb	r3, r2, r3
   1ff10:	e2433015 	sub	r3, r3, #21
   1ff14:	e3c33003 	bic	r3, r3, #3
   1ff18:	e2833004 	add	r3, r3, #4
   1ff1c:	e0800003 	add	r0, r0, r3
   1ff20:	e15c0000 	cmp	ip, r0
   1ff24:	9a000003 	bls	1ff38 <__copybits+0x6c>
   1ff28:	e3a03000 	mov	r3, #0
   1ff2c:	e4803004 	str	r3, [r0], #4
   1ff30:	e15c0000 	cmp	ip, r0
   1ff34:	8afffffc 	bhi	1ff2c <__copybits+0x60>
   1ff38:	e8bd0030 	pop	{r4, r5}
   1ff3c:	e12fff1e 	bx	lr

0001ff40 <__any_on>:
   1ff40:	e5902010 	ldr	r2, [r0, #16]
   1ff44:	e1a032c1 	asr	r3, r1, #5
   1ff48:	e1520003 	cmp	r2, r3
   1ff4c:	b1a03002 	movlt	r3, r2
   1ff50:	ba000000 	blt	1ff58 <__any_on+0x18>
   1ff54:	ca000013 	bgt	1ffa8 <__any_on+0x68>
   1ff58:	e2832005 	add	r2, r3, #5
   1ff5c:	e2803014 	add	r3, r0, #20
   1ff60:	e0800102 	add	r0, r0, r2, lsl #2
   1ff64:	e1530000 	cmp	r3, r0
   1ff68:	2a000017 	bcs	1ffcc <__any_on+0x8c>
   1ff6c:	e5102004 	ldr	r2, [r0, #-4]
   1ff70:	e3520000 	cmp	r2, #0
   1ff74:	1a000012 	bne	1ffc4 <__any_on+0x84>
   1ff78:	e2400004 	sub	r0, r0, #4
   1ff7c:	e0632000 	rsb	r2, r3, r0
   1ff80:	e2822003 	add	r2, r2, #3
   1ff84:	e3c22003 	bic	r2, r2, #3
   1ff88:	e0622000 	rsb	r2, r2, r0
   1ff8c:	e1500002 	cmp	r0, r2
   1ff90:	0a00000d 	beq	1ffcc <__any_on+0x8c>
   1ff94:	e5303004 	ldr	r3, [r0, #-4]!
   1ff98:	e3530000 	cmp	r3, #0
   1ff9c:	0afffffa 	beq	1ff8c <__any_on+0x4c>
   1ffa0:	e3a00001 	mov	r0, #1
   1ffa4:	e12fff1e 	bx	lr
   1ffa8:	e211101f 	ands	r1, r1, #31
   1ffac:	0affffe9 	beq	1ff58 <__any_on+0x18>
   1ffb0:	e2832005 	add	r2, r3, #5
   1ffb4:	e7902102 	ldr	r2, [r0, r2, lsl #2]
   1ffb8:	e1a0c132 	lsr	ip, r2, r1
   1ffbc:	e152011c 	cmp	r2, ip, lsl r1
   1ffc0:	0affffe4 	beq	1ff58 <__any_on+0x18>
   1ffc4:	e3a00001 	mov	r0, #1
   1ffc8:	e12fff1e 	bx	lr
   1ffcc:	e3a00000 	mov	r0, #0
   1ffd0:	e12fff1e 	bx	lr

0001ffd4 <__fpclassifyd>:
   1ffd4:	e1a03001 	mov	r3, r1
   1ffd8:	e1931000 	orrs	r1, r3, r0
   1ffdc:	e1a02000 	mov	r2, r0
   1ffe0:	1a000001 	bne	1ffec <__fpclassifyd+0x18>
   1ffe4:	e3a00002 	mov	r0, #2
   1ffe8:	e12fff1e 	bx	lr
   1ffec:	e2731001 	rsbs	r1, r3, #1
   1fff0:	33a01000 	movcc	r1, #0
   1fff4:	e3500102 	cmp	r0, #-2147483648	; 0x80000000
   1fff8:	03530000 	cmpeq	r3, #0
   1fffc:	0afffff8 	beq	1ffe4 <__fpclassifyd+0x10>
   20000:	e280c47f 	add	ip, r0, #2130706432	; 0x7f000000
   20004:	e59f3048 	ldr	r3, [pc, #72]	; 20054 <__fpclassifyd+0x80>
   20008:	e2400601 	sub	r0, r0, #1048576	; 0x100000
   2000c:	e28cc60f 	add	ip, ip, #15728640	; 0xf00000
   20010:	e1500003 	cmp	r0, r3
   20014:	815c0003 	cmphi	ip, r3
   20018:	93a00004 	movls	r0, #4
   2001c:	912fff1e 	bxls	lr
   20020:	e2823102 	add	r3, r2, #-2147483648	; 0x80000000
   20024:	e3520601 	cmp	r2, #1048576	; 0x100000
   20028:	23530601 	cmpcs	r3, #1048576	; 0x100000
   2002c:	2a000001 	bcs	20038 <__fpclassifyd+0x64>
   20030:	e3a00003 	mov	r0, #3
   20034:	e12fff1e 	bx	lr
   20038:	e59f3018 	ldr	r3, [pc, #24]	; 20058 <__fpclassifyd+0x84>
   2003c:	e3720601 	cmn	r2, #1048576	; 0x100000
   20040:	11520003 	cmpne	r2, r3
   20044:	13a02000 	movne	r2, #0
   20048:	03a02001 	moveq	r2, #1
   2004c:	e0010002 	and	r0, r1, r2
   20050:	e12fff1e 	bx	lr
   20054:	7fdfffff 	.word	0x7fdfffff
   20058:	7ff00000 	.word	0x7ff00000

0002005c <nanf>:
   2005c:	e59f0000 	ldr	r0, [pc]	; 20064 <nanf+0x8>
   20060:	e12fff1e 	bx	lr
   20064:	7fc00000 	.word	0x7fc00000

00020068 <__ssprint_r>:
   20068:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2006c:	e5924008 	ldr	r4, [r2, #8]
   20070:	e24dd004 	sub	sp, sp, #4
   20074:	e3540000 	cmp	r4, #0
   20078:	e1a0a002 	mov	sl, r2
   2007c:	e58d0000 	str	r0, [sp]
   20080:	e1a05001 	mov	r5, r1
   20084:	e5927000 	ldr	r7, [r2]
   20088:	0a000053 	beq	201dc <__ssprint_r+0x174>
   2008c:	e3a09000 	mov	r9, #0
   20090:	e1a04009 	mov	r4, r9
   20094:	e3540000 	cmp	r4, #0
   20098:	e5910000 	ldr	r0, [r1]
   2009c:	e5913008 	ldr	r3, [r1, #8]
   200a0:	0a000036 	beq	20180 <__ssprint_r+0x118>
   200a4:	e1540003 	cmp	r4, r3
   200a8:	e1a06003 	mov	r6, r3
   200ac:	e1a08003 	mov	r8, r3
   200b0:	3a000022 	bcc	20140 <__ssprint_r+0xd8>
   200b4:	e1d530bc 	ldrh	r3, [r5, #12]
   200b8:	e3130d12 	tst	r3, #1152	; 0x480
   200bc:	0a000021 	beq	20148 <__ssprint_r+0xe0>
   200c0:	e2851010 	add	r1, r5, #16
   200c4:	e8910042 	ldm	r1, {r1, r6}
   200c8:	e0866086 	add	r6, r6, r6, lsl #1
   200cc:	e0618000 	rsb	r8, r1, r0
   200d0:	e0866fa6 	add	r6, r6, r6, lsr #31
   200d4:	e2840001 	add	r0, r4, #1
   200d8:	e1a060c6 	asr	r6, r6, #1
   200dc:	e0800008 	add	r0, r0, r8
   200e0:	e1560000 	cmp	r6, r0
   200e4:	e1a02006 	mov	r2, r6
   200e8:	31a06000 	movcc	r6, r0
   200ec:	31a02006 	movcc	r2, r6
   200f0:	e3130b01 	tst	r3, #1024	; 0x400
   200f4:	e59d0000 	ldr	r0, [sp]
   200f8:	0a000026 	beq	20198 <__ssprint_r+0x130>
   200fc:	e1a01002 	mov	r1, r2
   20100:	ebffdf4c 	bl	17e38 <_malloc_r>
   20104:	e250b000 	subs	fp, r0, #0
   20108:	0a000028 	beq	201b0 <__ssprint_r+0x148>
   2010c:	e5951010 	ldr	r1, [r5, #16]
   20110:	e1a02008 	mov	r2, r8
   20114:	ebffe10e 	bl	18554 <memcpy>
   20118:	e1d530bc 	ldrh	r3, [r5, #12]
   2011c:	e3c33d12 	bic	r3, r3, #1152	; 0x480
   20120:	e3833080 	orr	r3, r3, #128	; 0x80
   20124:	e1c530bc 	strh	r3, [r5, #12]
   20128:	e08b0008 	add	r0, fp, r8
   2012c:	e0688006 	rsb	r8, r8, r6
   20130:	e585b010 	str	fp, [r5, #16]
   20134:	e5850000 	str	r0, [r5]
   20138:	e5856014 	str	r6, [r5, #20]
   2013c:	e5858008 	str	r8, [r5, #8]
   20140:	e1a06004 	mov	r6, r4
   20144:	e1a08004 	mov	r8, r4
   20148:	e1a02008 	mov	r2, r8
   2014c:	e1a01009 	mov	r1, r9
   20150:	eb0003bf 	bl	21054 <memmove>
   20154:	e59a2008 	ldr	r2, [sl, #8]
   20158:	e5953008 	ldr	r3, [r5, #8]
   2015c:	e5950000 	ldr	r0, [r5]
   20160:	e0644002 	rsb	r4, r4, r2
   20164:	e0663003 	rsb	r3, r6, r3
   20168:	e0800008 	add	r0, r0, r8
   2016c:	e3540000 	cmp	r4, #0
   20170:	e5853008 	str	r3, [r5, #8]
   20174:	e5850000 	str	r0, [r5]
   20178:	e58a4008 	str	r4, [sl, #8]
   2017c:	0a000016 	beq	201dc <__ssprint_r+0x174>
   20180:	e5974004 	ldr	r4, [r7, #4]
   20184:	e3540000 	cmp	r4, #0
   20188:	e5979000 	ldr	r9, [r7]
   2018c:	e2877008 	add	r7, r7, #8
   20190:	0afffffa 	beq	20180 <__ssprint_r+0x118>
   20194:	eaffffc2 	b	200a4 <__ssprint_r+0x3c>
   20198:	eb0003fa 	bl	21188 <_realloc_r>
   2019c:	e250b000 	subs	fp, r0, #0
   201a0:	1affffe0 	bne	20128 <__ssprint_r+0xc0>
   201a4:	e59d0000 	ldr	r0, [sp]
   201a8:	e5951010 	ldr	r1, [r5, #16]
   201ac:	ebfff828 	bl	1e254 <_free_r>
   201b0:	e59d2000 	ldr	r2, [sp]
   201b4:	e3a0300c 	mov	r3, #12
   201b8:	e5823000 	str	r3, [r2]
   201bc:	e1d520bc 	ldrh	r2, [r5, #12]
   201c0:	e3a03000 	mov	r3, #0
   201c4:	e3822040 	orr	r2, r2, #64	; 0x40
   201c8:	e1c520bc 	strh	r2, [r5, #12]
   201cc:	e3e00000 	mvn	r0, #0
   201d0:	e58a3008 	str	r3, [sl, #8]
   201d4:	e58a3004 	str	r3, [sl, #4]
   201d8:	ea000001 	b	201e4 <__ssprint_r+0x17c>
   201dc:	e58a4004 	str	r4, [sl, #4]
   201e0:	e1a00004 	mov	r0, r4
   201e4:	e28dd004 	add	sp, sp, #4
   201e8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000201ec <_svfiprintf_r>:
   201ec:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201f0:	e1a09001 	mov	r9, r1
   201f4:	e1d110bc 	ldrh	r1, [r1, #12]
   201f8:	e24dd0b0 	sub	sp, sp, #176	; 0xb0
   201fc:	e3110080 	tst	r1, #128	; 0x80
   20200:	e58d001c 	str	r0, [sp, #28]
   20204:	e58d3014 	str	r3, [sp, #20]
   20208:	0a000002 	beq	20218 <_svfiprintf_r+0x2c>
   2020c:	e5993010 	ldr	r3, [r9, #16]
   20210:	e3530000 	cmp	r3, #0
   20214:	0a00034c 	beq	20f4c <_svfiprintf_r+0xd60>
   20218:	e3a03000 	mov	r3, #0
   2021c:	e28dc09f 	add	ip, sp, #159	; 0x9f
   20220:	e28d80a0 	add	r8, sp, #160	; 0xa0
   20224:	e28d0038 	add	r0, sp, #56	; 0x38
   20228:	e58d3030 	str	r3, [sp, #48]	; 0x30
   2022c:	e58d30a8 	str	r3, [sp, #168]	; 0xa8
   20230:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   20234:	e58d3010 	str	r3, [sp, #16]
   20238:	e06c3008 	rsb	r3, ip, r8
   2023c:	e58dc004 	str	ip, [sp, #4]
   20240:	e58d00a0 	str	r0, [sp, #160]	; 0xa0
   20244:	e58d3034 	str	r3, [sp, #52]	; 0x34
   20248:	e1a07002 	mov	r7, r2
   2024c:	e1a04000 	mov	r4, r0
   20250:	e5d73000 	ldrb	r3, [r7]
   20254:	e3530000 	cmp	r3, #0
   20258:	13530025 	cmpne	r3, #37	; 0x25
   2025c:	0a00015c 	beq	207d4 <_svfiprintf_r+0x5e8>
   20260:	e1a02007 	mov	r2, r7
   20264:	e1a05007 	mov	r5, r7
   20268:	e5f23001 	ldrb	r3, [r2, #1]!
   2026c:	e3530025 	cmp	r3, #37	; 0x25
   20270:	13530000 	cmpne	r3, #0
   20274:	e2855001 	add	r5, r5, #1
   20278:	1afffffa 	bne	20268 <_svfiprintf_r+0x7c>
   2027c:	e0556007 	subs	r6, r5, r7
   20280:	0a00000d 	beq	202bc <_svfiprintf_r+0xd0>
   20284:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   20288:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   2028c:	e2833001 	add	r3, r3, #1
   20290:	e0822006 	add	r2, r2, r6
   20294:	e3530007 	cmp	r3, #7
   20298:	e5847000 	str	r7, [r4]
   2029c:	e5846004 	str	r6, [r4, #4]
   202a0:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   202a4:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   202a8:	d2844008 	addle	r4, r4, #8
   202ac:	ca0002c8 	bgt	20dd4 <_svfiprintf_r+0xbe8>
   202b0:	e59dc010 	ldr	ip, [sp, #16]
   202b4:	e08cc006 	add	ip, ip, r6
   202b8:	e58dc010 	str	ip, [sp, #16]
   202bc:	e5d53000 	ldrb	r3, [r5]
   202c0:	e3530000 	cmp	r3, #0
   202c4:	0a00026d 	beq	20c80 <_svfiprintf_r+0xa94>
   202c8:	e3a02000 	mov	r2, #0
   202cc:	e5cd20af 	strb	r2, [sp, #175]	; 0xaf
   202d0:	e58d2018 	str	r2, [sp, #24]
   202d4:	e2857001 	add	r7, r5, #1
   202d8:	e1a03002 	mov	r3, r2
   202dc:	e3e05000 	mvn	r5, #0
   202e0:	e1a0b002 	mov	fp, r2
   202e4:	e4d72001 	ldrb	r2, [r7], #1
   202e8:	e2421020 	sub	r1, r2, #32
   202ec:	e3510058 	cmp	r1, #88	; 0x58
   202f0:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   202f4:	ea000201 	b	20b00 <_svfiprintf_r+0x914>
   202f8:	00020af4 	.word	0x00020af4
   202fc:	00020b00 	.word	0x00020b00
   20300:	00020b00 	.word	0x00020b00
   20304:	00020c2c 	.word	0x00020c2c
   20308:	00020b00 	.word	0x00020b00
   2030c:	00020b00 	.word	0x00020b00
   20310:	00020b00 	.word	0x00020b00
   20314:	00020b00 	.word	0x00020b00
   20318:	00020b00 	.word	0x00020b00
   2031c:	00020b00 	.word	0x00020b00
   20320:	00020814 	.word	0x00020814
   20324:	00020848 	.word	0x00020848
   20328:	00020b00 	.word	0x00020b00
   2032c:	00020840 	.word	0x00020840
   20330:	00020be4 	.word	0x00020be4
   20334:	00020b00 	.word	0x00020b00
   20338:	00020bdc 	.word	0x00020bdc
   2033c:	00020bac 	.word	0x00020bac
   20340:	00020bac 	.word	0x00020bac
   20344:	00020bac 	.word	0x00020bac
   20348:	00020bac 	.word	0x00020bac
   2034c:	00020bac 	.word	0x00020bac
   20350:	00020bac 	.word	0x00020bac
   20354:	00020bac 	.word	0x00020bac
   20358:	00020bac 	.word	0x00020bac
   2035c:	00020bac 	.word	0x00020bac
   20360:	00020b00 	.word	0x00020b00
   20364:	00020b00 	.word	0x00020b00
   20368:	00020b00 	.word	0x00020b00
   2036c:	00020b00 	.word	0x00020b00
   20370:	00020b00 	.word	0x00020b00
   20374:	00020b00 	.word	0x00020b00
   20378:	00020b00 	.word	0x00020b00
   2037c:	00020b00 	.word	0x00020b00
   20380:	00020b00 	.word	0x00020b00
   20384:	00020b00 	.word	0x00020b00
   20388:	00020ba0 	.word	0x00020ba0
   2038c:	00020b00 	.word	0x00020b00
   20390:	00020b00 	.word	0x00020b00
   20394:	00020b00 	.word	0x00020b00
   20398:	00020b00 	.word	0x00020b00
   2039c:	00020b00 	.word	0x00020b00
   203a0:	00020b00 	.word	0x00020b00
   203a4:	00020b00 	.word	0x00020b00
   203a8:	00020b00 	.word	0x00020b00
   203ac:	00020b00 	.word	0x00020b00
   203b0:	00020b00 	.word	0x00020b00
   203b4:	00020464 	.word	0x00020464
   203b8:	00020b00 	.word	0x00020b00
   203bc:	00020b00 	.word	0x00020b00
   203c0:	00020b00 	.word	0x00020b00
   203c4:	00020b00 	.word	0x00020b00
   203c8:	00020b00 	.word	0x00020b00
   203cc:	000207dc 	.word	0x000207dc
   203d0:	00020b00 	.word	0x00020b00
   203d4:	00020b00 	.word	0x00020b00
   203d8:	00020ae4 	.word	0x00020ae4
   203dc:	00020b00 	.word	0x00020b00
   203e0:	00020b00 	.word	0x00020b00
   203e4:	00020b00 	.word	0x00020b00
   203e8:	00020b00 	.word	0x00020b00
   203ec:	00020b00 	.word	0x00020b00
   203f0:	00020b00 	.word	0x00020b00
   203f4:	00020b00 	.word	0x00020b00
   203f8:	00020b00 	.word	0x00020b00
   203fc:	00020b00 	.word	0x00020b00
   20400:	00020b00 	.word	0x00020b00
   20404:	000209a4 	.word	0x000209a4
   20408:	00020918 	.word	0x00020918
   2040c:	00020b00 	.word	0x00020b00
   20410:	00020b00 	.word	0x00020b00
   20414:	00020b00 	.word	0x00020b00
   20418:	00020910 	.word	0x00020910
   2041c:	00020918 	.word	0x00020918
   20420:	00020b00 	.word	0x00020b00
   20424:	00020b00 	.word	0x00020b00
   20428:	0002045c 	.word	0x0002045c
   2042c:	00020b00 	.word	0x00020b00
   20430:	0002088c 	.word	0x0002088c
   20434:	00020468 	.word	0x00020468
   20438:	00020850 	.word	0x00020850
   2043c:	0002045c 	.word	0x0002045c
   20440:	00020b00 	.word	0x00020b00
   20444:	00020b34 	.word	0x00020b34
   20448:	00020b00 	.word	0x00020b00
   2044c:	000207e0 	.word	0x000207e0
   20450:	00020b00 	.word	0x00020b00
   20454:	00020b00 	.word	0x00020b00
   20458:	000208bc 	.word	0x000208bc
   2045c:	e38bb010 	orr	fp, fp, #16
   20460:	eaffff9f 	b	202e4 <_svfiprintf_r+0xf8>
   20464:	e38bb010 	orr	fp, fp, #16
   20468:	e21b2010 	ands	r2, fp, #16
   2046c:	e59dc014 	ldr	ip, [sp, #20]
   20470:	0a000280 	beq	20e78 <_svfiprintf_r+0xc8c>
   20474:	e59c3000 	ldr	r3, [ip]
   20478:	e3a02000 	mov	r2, #0
   2047c:	e28cc004 	add	ip, ip, #4
   20480:	e0531002 	subs	r1, r3, r2
   20484:	e58dc014 	str	ip, [sp, #20]
   20488:	13a01001 	movne	r1, #1
   2048c:	e3a00000 	mov	r0, #0
   20490:	e5cd00af 	strb	r0, [sp, #175]	; 0xaf
   20494:	e3550000 	cmp	r5, #0
   20498:	a3cbb080 	bicge	fp, fp, #128	; 0x80
   2049c:	e3550000 	cmp	r5, #0
   204a0:	13811001 	orrne	r1, r1, #1
   204a4:	e3510000 	cmp	r1, #0
   204a8:	0a00012e 	beq	20968 <_svfiprintf_r+0x77c>
   204ac:	e3520001 	cmp	r2, #1
   204b0:	0a0001df 	beq	20c34 <_svfiprintf_r+0xa48>
   204b4:	e3520002 	cmp	r2, #2
   204b8:	11a02008 	movne	r2, r8
   204bc:	1a000001 	bne	204c8 <_svfiprintf_r+0x2dc>
   204c0:	ea00025f 	b	20e44 <_svfiprintf_r+0xc58>
   204c4:	e1a02000 	mov	r2, r0
   204c8:	e2031007 	and	r1, r3, #7
   204cc:	e2811030 	add	r1, r1, #48	; 0x30
   204d0:	e1b031a3 	lsrs	r3, r3, #3
   204d4:	e2420001 	sub	r0, r2, #1
   204d8:	e5421001 	strb	r1, [r2, #-1]
   204dc:	1afffff8 	bne	204c4 <_svfiprintf_r+0x2d8>
   204e0:	e31b0001 	tst	fp, #1
   204e4:	e58d0024 	str	r0, [sp, #36]	; 0x24
   204e8:	0a0001e1 	beq	20c74 <_svfiprintf_r+0xa88>
   204ec:	e3510030 	cmp	r1, #48	; 0x30
   204f0:	12423002 	subne	r3, r2, #2
   204f4:	158d3024 	strne	r3, [sp, #36]	; 0x24
   204f8:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   204fc:	13a03030 	movne	r3, #48	; 0x30
   20500:	e06cc008 	rsb	ip, ip, r8
   20504:	15423002 	strbne	r3, [r2, #-2]
   20508:	e58dc00c 	str	ip, [sp, #12]
   2050c:	e58d5020 	str	r5, [sp, #32]
   20510:	e5dd30af 	ldrb	r3, [sp, #175]	; 0xaf
   20514:	e59dc00c 	ldr	ip, [sp, #12]
   20518:	e59d0020 	ldr	r0, [sp, #32]
   2051c:	e15c0000 	cmp	ip, r0
   20520:	b1a0c000 	movlt	ip, r0
   20524:	e3530000 	cmp	r3, #0
   20528:	e58dc008 	str	ip, [sp, #8]
   2052c:	128cc001 	addne	ip, ip, #1
   20530:	158dc008 	strne	ip, [sp, #8]
   20534:	e21b3002 	ands	r3, fp, #2
   20538:	159dc008 	ldrne	ip, [sp, #8]
   2053c:	128cc002 	addne	ip, ip, #2
   20540:	e58d3028 	str	r3, [sp, #40]	; 0x28
   20544:	158dc008 	strne	ip, [sp, #8]
   20548:	e21b3084 	ands	r3, fp, #132	; 0x84
   2054c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   20550:	0a00012a 	beq	20a00 <_svfiprintf_r+0x814>
   20554:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20558:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   2055c:	e5dd10af 	ldrb	r1, [sp, #175]	; 0xaf
   20560:	e3510000 	cmp	r1, #0
   20564:	0a00000a 	beq	20594 <_svfiprintf_r+0x3a8>
   20568:	e2833001 	add	r3, r3, #1
   2056c:	e28d10af 	add	r1, sp, #175	; 0xaf
   20570:	e5841000 	str	r1, [r4]
   20574:	e2822001 	add	r2, r2, #1
   20578:	e3530007 	cmp	r3, #7
   2057c:	e3a01001 	mov	r1, #1
   20580:	e5841004 	str	r1, [r4, #4]
   20584:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   20588:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   2058c:	d2844008 	addle	r4, r4, #8
   20590:	ca000217 	bgt	20df4 <_svfiprintf_r+0xc08>
   20594:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
   20598:	e35c0000 	cmp	ip, #0
   2059c:	0a00000a 	beq	205cc <_svfiprintf_r+0x3e0>
   205a0:	e2833001 	add	r3, r3, #1
   205a4:	e28d10ac 	add	r1, sp, #172	; 0xac
   205a8:	e5841000 	str	r1, [r4]
   205ac:	e2822002 	add	r2, r2, #2
   205b0:	e3530007 	cmp	r3, #7
   205b4:	e3a01002 	mov	r1, #2
   205b8:	e5841004 	str	r1, [r4, #4]
   205bc:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   205c0:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   205c4:	d2844008 	addle	r4, r4, #8
   205c8:	ca000213 	bgt	20e1c <_svfiprintf_r+0xc30>
   205cc:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   205d0:	e35c0080 	cmp	ip, #128	; 0x80
   205d4:	0a0001b7 	beq	20cb8 <_svfiprintf_r+0xacc>
   205d8:	e59dc020 	ldr	ip, [sp, #32]
   205dc:	e59d000c 	ldr	r0, [sp, #12]
   205e0:	e060500c 	rsb	r5, r0, ip
   205e4:	e3550000 	cmp	r5, #0
   205e8:	da000030 	ble	206b0 <_svfiprintf_r+0x4c4>
   205ec:	e3550010 	cmp	r5, #16
   205f0:	e59f69b4 	ldr	r6, [pc, #2484]	; 20fac <_svfiprintf_r+0xdc0>
   205f4:	da00001b 	ble	20668 <_svfiprintf_r+0x47c>
   205f8:	e1a01004 	mov	r1, r4
   205fc:	e3a0a010 	mov	sl, #16
   20600:	e59d401c 	ldr	r4, [sp, #28]
   20604:	ea000002 	b	20614 <_svfiprintf_r+0x428>
   20608:	e2455010 	sub	r5, r5, #16
   2060c:	e3550010 	cmp	r5, #16
   20610:	da000013 	ble	20664 <_svfiprintf_r+0x478>
   20614:	e2833001 	add	r3, r3, #1
   20618:	e2822010 	add	r2, r2, #16
   2061c:	e3530007 	cmp	r3, #7
   20620:	e8810440 	stm	r1, {r6, sl}
   20624:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   20628:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   2062c:	d2811008 	addle	r1, r1, #8
   20630:	dafffff4 	ble	20608 <_svfiprintf_r+0x41c>
   20634:	e1a00004 	mov	r0, r4
   20638:	e1a01009 	mov	r1, r9
   2063c:	e1a02008 	mov	r2, r8
   20640:	ebfffe88 	bl	20068 <__ssprint_r>
   20644:	e3500000 	cmp	r0, #0
   20648:	1a000192 	bne	20c98 <_svfiprintf_r+0xaac>
   2064c:	e2455010 	sub	r5, r5, #16
   20650:	e3550010 	cmp	r5, #16
   20654:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20658:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   2065c:	e28d1038 	add	r1, sp, #56	; 0x38
   20660:	caffffeb 	bgt	20614 <_svfiprintf_r+0x428>
   20664:	e1a04001 	mov	r4, r1
   20668:	e2833001 	add	r3, r3, #1
   2066c:	e0822005 	add	r2, r2, r5
   20670:	e3530007 	cmp	r3, #7
   20674:	e5846000 	str	r6, [r4]
   20678:	e5845004 	str	r5, [r4, #4]
   2067c:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   20680:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   20684:	d2844008 	addle	r4, r4, #8
   20688:	da000008 	ble	206b0 <_svfiprintf_r+0x4c4>
   2068c:	e59d001c 	ldr	r0, [sp, #28]
   20690:	e1a01009 	mov	r1, r9
   20694:	e1a02008 	mov	r2, r8
   20698:	ebfffe72 	bl	20068 <__ssprint_r>
   2069c:	e3500000 	cmp	r0, #0
   206a0:	1a00017c 	bne	20c98 <_svfiprintf_r+0xaac>
   206a4:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   206a8:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   206ac:	e28d4038 	add	r4, sp, #56	; 0x38
   206b0:	e59dc00c 	ldr	ip, [sp, #12]
   206b4:	e082200c 	add	r2, r2, ip
   206b8:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   206bc:	e2833001 	add	r3, r3, #1
   206c0:	e584c000 	str	ip, [r4]
   206c4:	e59dc00c 	ldr	ip, [sp, #12]
   206c8:	e3530007 	cmp	r3, #7
   206cc:	e584c004 	str	ip, [r4, #4]
   206d0:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   206d4:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   206d8:	d2844008 	addle	r4, r4, #8
   206dc:	ca0001ac 	bgt	20d94 <_svfiprintf_r+0xba8>
   206e0:	e31b0004 	tst	fp, #4
   206e4:	0a00002a 	beq	20794 <_svfiprintf_r+0x5a8>
   206e8:	e59d3018 	ldr	r3, [sp, #24]
   206ec:	e59dc008 	ldr	ip, [sp, #8]
   206f0:	e06c5003 	rsb	r5, ip, r3
   206f4:	e3550000 	cmp	r5, #0
   206f8:	da000025 	ble	20794 <_svfiprintf_r+0x5a8>
   206fc:	e3550010 	cmp	r5, #16
   20700:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   20704:	e59f68a4 	ldr	r6, [pc, #2212]	; 20fb0 <_svfiprintf_r+0xdc4>
   20708:	da000019 	ble	20774 <_svfiprintf_r+0x588>
   2070c:	e3a0a010 	mov	sl, #16
   20710:	e59db01c 	ldr	fp, [sp, #28]
   20714:	ea000002 	b	20724 <_svfiprintf_r+0x538>
   20718:	e2455010 	sub	r5, r5, #16
   2071c:	e3550010 	cmp	r5, #16
   20720:	da000013 	ble	20774 <_svfiprintf_r+0x588>
   20724:	e2833001 	add	r3, r3, #1
   20728:	e2822010 	add	r2, r2, #16
   2072c:	e3530007 	cmp	r3, #7
   20730:	e8840440 	stm	r4, {r6, sl}
   20734:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   20738:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   2073c:	d2844008 	addle	r4, r4, #8
   20740:	dafffff4 	ble	20718 <_svfiprintf_r+0x52c>
   20744:	e1a0000b 	mov	r0, fp
   20748:	e1a01009 	mov	r1, r9
   2074c:	e1a02008 	mov	r2, r8
   20750:	ebfffe44 	bl	20068 <__ssprint_r>
   20754:	e3500000 	cmp	r0, #0
   20758:	1a00014e 	bne	20c98 <_svfiprintf_r+0xaac>
   2075c:	e2455010 	sub	r5, r5, #16
   20760:	e3550010 	cmp	r5, #16
   20764:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20768:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   2076c:	e28d4038 	add	r4, sp, #56	; 0x38
   20770:	caffffeb 	bgt	20724 <_svfiprintf_r+0x538>
   20774:	e2833001 	add	r3, r3, #1
   20778:	e0852002 	add	r2, r5, r2
   2077c:	e3530007 	cmp	r3, #7
   20780:	e5846000 	str	r6, [r4]
   20784:	e5845004 	str	r5, [r4, #4]
   20788:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   2078c:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   20790:	ca0001ca 	bgt	20ec0 <_svfiprintf_r+0xcd4>
   20794:	e59d3010 	ldr	r3, [sp, #16]
   20798:	e59dc008 	ldr	ip, [sp, #8]
   2079c:	e59d0018 	ldr	r0, [sp, #24]
   207a0:	e15c0000 	cmp	ip, r0
   207a4:	a083300c 	addge	r3, r3, ip
   207a8:	b0833000 	addlt	r3, r3, r0
   207ac:	e3520000 	cmp	r2, #0
   207b0:	e58d3010 	str	r3, [sp, #16]
   207b4:	1a00017f 	bne	20db8 <_svfiprintf_r+0xbcc>
   207b8:	e3a03000 	mov	r3, #0
   207bc:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   207c0:	e5d73000 	ldrb	r3, [r7]
   207c4:	e3530000 	cmp	r3, #0
   207c8:	13530025 	cmpne	r3, #37	; 0x25
   207cc:	e28d4038 	add	r4, sp, #56	; 0x38
   207d0:	1afffea2 	bne	20260 <_svfiprintf_r+0x74>
   207d4:	e1a05007 	mov	r5, r7
   207d8:	eafffeb7 	b	202bc <_svfiprintf_r+0xd0>
   207dc:	e38bb010 	orr	fp, fp, #16
   207e0:	e31b0010 	tst	fp, #16
   207e4:	e59dc014 	ldr	ip, [sp, #20]
   207e8:	1a000002 	bne	207f8 <_svfiprintf_r+0x60c>
   207ec:	e31b0040 	tst	fp, #64	; 0x40
   207f0:	11dc30b0 	ldrhne	r3, [ip]
   207f4:	1a000000 	bne	207fc <_svfiprintf_r+0x610>
   207f8:	e59c3000 	ldr	r3, [ip]
   207fc:	e2931000 	adds	r1, r3, #0
   20800:	e28cc004 	add	ip, ip, #4
   20804:	e3a02001 	mov	r2, #1
   20808:	13a01001 	movne	r1, #1
   2080c:	e58dc014 	str	ip, [sp, #20]
   20810:	eaffff1d 	b	2048c <_svfiprintf_r+0x2a0>
   20814:	e59dc014 	ldr	ip, [sp, #20]
   20818:	e59cc000 	ldr	ip, [ip]
   2081c:	e58dc018 	str	ip, [sp, #24]
   20820:	e35c0000 	cmp	ip, #0
   20824:	e59dc014 	ldr	ip, [sp, #20]
   20828:	e28c2004 	add	r2, ip, #4
   2082c:	aa0001a1 	bge	20eb8 <_svfiprintf_r+0xccc>
   20830:	e59dc018 	ldr	ip, [sp, #24]
   20834:	e26cc000 	rsb	ip, ip, #0
   20838:	e58dc018 	str	ip, [sp, #24]
   2083c:	e58d2014 	str	r2, [sp, #20]
   20840:	e38bb004 	orr	fp, fp, #4
   20844:	eafffea6 	b	202e4 <_svfiprintf_r+0xf8>
   20848:	e3a0302b 	mov	r3, #43	; 0x2b
   2084c:	eafffea4 	b	202e4 <_svfiprintf_r+0xf8>
   20850:	e59dc014 	ldr	ip, [sp, #20]
   20854:	e59c3000 	ldr	r3, [ip]
   20858:	e28cc004 	add	ip, ip, #4
   2085c:	e3a02030 	mov	r2, #48	; 0x30
   20860:	e58dc014 	str	ip, [sp, #20]
   20864:	e59fc748 	ldr	ip, [pc, #1864]	; 20fb4 <_svfiprintf_r+0xdc8>
   20868:	e5cd20ac 	strb	r2, [sp, #172]	; 0xac
   2086c:	e2931000 	adds	r1, r3, #0
   20870:	e3a02078 	mov	r2, #120	; 0x78
   20874:	e5cd20ad 	strb	r2, [sp, #173]	; 0xad
   20878:	e38bb002 	orr	fp, fp, #2
   2087c:	13a01001 	movne	r1, #1
   20880:	e58dc030 	str	ip, [sp, #48]	; 0x30
   20884:	e3a02002 	mov	r2, #2
   20888:	eafffeff 	b	2048c <_svfiprintf_r+0x2a0>
   2088c:	e31b0010 	tst	fp, #16
   20890:	e5cd30af 	strb	r3, [sp, #175]	; 0xaf
   20894:	1a000191 	bne	20ee0 <_svfiprintf_r+0xcf4>
   20898:	e31b0040 	tst	fp, #64	; 0x40
   2089c:	0a00018f 	beq	20ee0 <_svfiprintf_r+0xcf4>
   208a0:	e59dc014 	ldr	ip, [sp, #20]
   208a4:	e59c3000 	ldr	r3, [ip]
   208a8:	e28cc004 	add	ip, ip, #4
   208ac:	e58dc014 	str	ip, [sp, #20]
   208b0:	e59dc010 	ldr	ip, [sp, #16]
   208b4:	e1c3c0b0 	strh	ip, [r3]
   208b8:	eafffe64 	b	20250 <_svfiprintf_r+0x64>
   208bc:	e5cd30af 	strb	r3, [sp, #175]	; 0xaf
   208c0:	e59f36ec 	ldr	r3, [pc, #1772]	; 20fb4 <_svfiprintf_r+0xdc8>
   208c4:	e58d3030 	str	r3, [sp, #48]	; 0x30
   208c8:	e31b0010 	tst	fp, #16
   208cc:	e59dc014 	ldr	ip, [sp, #20]
   208d0:	1a000001 	bne	208dc <_svfiprintf_r+0x6f0>
   208d4:	e31b0040 	tst	fp, #64	; 0x40
   208d8:	1a000193 	bne	20f2c <_svfiprintf_r+0xd40>
   208dc:	e59c3000 	ldr	r3, [ip]
   208e0:	e28cc004 	add	ip, ip, #4
   208e4:	e58dc014 	str	ip, [sp, #20]
   208e8:	e2931000 	adds	r1, r3, #0
   208ec:	13a01001 	movne	r1, #1
   208f0:	e11b0001 	tst	fp, r1
   208f4:	13a01030 	movne	r1, #48	; 0x30
   208f8:	15cd10ac 	strbne	r1, [sp, #172]	; 0xac
   208fc:	15cd20ad 	strbne	r2, [sp, #173]	; 0xad
   20900:	138bb002 	orrne	fp, fp, #2
   20904:	13a01001 	movne	r1, #1
   20908:	e3a02002 	mov	r2, #2
   2090c:	eafffede 	b	2048c <_svfiprintf_r+0x2a0>
   20910:	e38bb040 	orr	fp, fp, #64	; 0x40
   20914:	eafffe72 	b	202e4 <_svfiprintf_r+0xf8>
   20918:	e5cd30af 	strb	r3, [sp, #175]	; 0xaf
   2091c:	e31b0010 	tst	fp, #16
   20920:	e59dc014 	ldr	ip, [sp, #20]
   20924:	1a000001 	bne	20930 <_svfiprintf_r+0x744>
   20928:	e31b0040 	tst	fp, #64	; 0x40
   2092c:	1a000172 	bne	20efc <_svfiprintf_r+0xd10>
   20930:	e59c3000 	ldr	r3, [ip]
   20934:	e28cc004 	add	ip, ip, #4
   20938:	e3530000 	cmp	r3, #0
   2093c:	e58dc014 	str	ip, [sp, #20]
   20940:	ba000172 	blt	20f10 <_svfiprintf_r+0xd24>
   20944:	03a01000 	moveq	r1, #0
   20948:	13a01001 	movne	r1, #1
   2094c:	e3550000 	cmp	r5, #0
   20950:	a3cbb080 	bicge	fp, fp, #128	; 0x80
   20954:	e3550000 	cmp	r5, #0
   20958:	13811001 	orrne	r1, r1, #1
   2095c:	e3510000 	cmp	r1, #0
   20960:	e3a02001 	mov	r2, #1
   20964:	1afffed0 	bne	204ac <_svfiprintf_r+0x2c0>
   20968:	e3520000 	cmp	r2, #0
   2096c:	158d100c 	strne	r1, [sp, #12]
   20970:	158d8024 	strne	r8, [sp, #36]	; 0x24
   20974:	1afffee4 	bne	2050c <_svfiprintf_r+0x320>
   20978:	e31b0001 	tst	fp, #1
   2097c:	058d200c 	streq	r2, [sp, #12]
   20980:	058d8024 	streq	r8, [sp, #36]	; 0x24
   20984:	0afffee0 	beq	2050c <_svfiprintf_r+0x320>
   20988:	e3a03030 	mov	r3, #48	; 0x30
   2098c:	e5cd309f 	strb	r3, [sp, #159]	; 0x9f
   20990:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   20994:	e28dc09f 	add	ip, sp, #159	; 0x9f
   20998:	e58d300c 	str	r3, [sp, #12]
   2099c:	e58dc024 	str	ip, [sp, #36]	; 0x24
   209a0:	eafffed9 	b	2050c <_svfiprintf_r+0x320>
   209a4:	e59dc014 	ldr	ip, [sp, #20]
   209a8:	e59c3000 	ldr	r3, [ip]
   209ac:	e5cd3078 	strb	r3, [sp, #120]	; 0x78
   209b0:	e3a03000 	mov	r3, #0
   209b4:	e5cd30af 	strb	r3, [sp, #175]	; 0xaf
   209b8:	e59d3014 	ldr	r3, [sp, #20]
   209bc:	e3a0c001 	mov	ip, #1
   209c0:	e58dc008 	str	ip, [sp, #8]
   209c4:	e2833004 	add	r3, r3, #4
   209c8:	e58dc00c 	str	ip, [sp, #12]
   209cc:	e28dc078 	add	ip, sp, #120	; 0x78
   209d0:	e58d3014 	str	r3, [sp, #20]
   209d4:	e58dc024 	str	ip, [sp, #36]	; 0x24
   209d8:	e21b3002 	ands	r3, fp, #2
   209dc:	e3a0c000 	mov	ip, #0
   209e0:	e58dc020 	str	ip, [sp, #32]
   209e4:	159dc008 	ldrne	ip, [sp, #8]
   209e8:	128cc002 	addne	ip, ip, #2
   209ec:	e58d3028 	str	r3, [sp, #40]	; 0x28
   209f0:	158dc008 	strne	ip, [sp, #8]
   209f4:	e21b3084 	ands	r3, fp, #132	; 0x84
   209f8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
   209fc:	1afffed4 	bne	20554 <_svfiprintf_r+0x368>
   20a00:	e59dc018 	ldr	ip, [sp, #24]
   20a04:	e59d3008 	ldr	r3, [sp, #8]
   20a08:	e063500c 	rsb	r5, r3, ip
   20a0c:	e3550000 	cmp	r5, #0
   20a10:	dafffecf 	ble	20554 <_svfiprintf_r+0x368>
   20a14:	e3550010 	cmp	r5, #16
   20a18:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20a1c:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   20a20:	e59f6588 	ldr	r6, [pc, #1416]	; 20fb0 <_svfiprintf_r+0xdc4>
   20a24:	da00001b 	ble	20a98 <_svfiprintf_r+0x8ac>
   20a28:	e1a01004 	mov	r1, r4
   20a2c:	e3a0a010 	mov	sl, #16
   20a30:	e59d401c 	ldr	r4, [sp, #28]
   20a34:	ea000002 	b	20a44 <_svfiprintf_r+0x858>
   20a38:	e2455010 	sub	r5, r5, #16
   20a3c:	e3550010 	cmp	r5, #16
   20a40:	da000013 	ble	20a94 <_svfiprintf_r+0x8a8>
   20a44:	e2833001 	add	r3, r3, #1
   20a48:	e2822010 	add	r2, r2, #16
   20a4c:	e3530007 	cmp	r3, #7
   20a50:	e8810440 	stm	r1, {r6, sl}
   20a54:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   20a58:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   20a5c:	d2811008 	addle	r1, r1, #8
   20a60:	dafffff4 	ble	20a38 <_svfiprintf_r+0x84c>
   20a64:	e1a00004 	mov	r0, r4
   20a68:	e1a01009 	mov	r1, r9
   20a6c:	e1a02008 	mov	r2, r8
   20a70:	ebfffd7c 	bl	20068 <__ssprint_r>
   20a74:	e3500000 	cmp	r0, #0
   20a78:	1a000086 	bne	20c98 <_svfiprintf_r+0xaac>
   20a7c:	e2455010 	sub	r5, r5, #16
   20a80:	e3550010 	cmp	r5, #16
   20a84:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20a88:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   20a8c:	e28d1038 	add	r1, sp, #56	; 0x38
   20a90:	caffffeb 	bgt	20a44 <_svfiprintf_r+0x858>
   20a94:	e1a04001 	mov	r4, r1
   20a98:	e2833001 	add	r3, r3, #1
   20a9c:	e0822005 	add	r2, r2, r5
   20aa0:	e3530007 	cmp	r3, #7
   20aa4:	e5846000 	str	r6, [r4]
   20aa8:	e5845004 	str	r5, [r4, #4]
   20aac:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   20ab0:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   20ab4:	d2844008 	addle	r4, r4, #8
   20ab8:	dafffea7 	ble	2055c <_svfiprintf_r+0x370>
   20abc:	e59d001c 	ldr	r0, [sp, #28]
   20ac0:	e1a01009 	mov	r1, r9
   20ac4:	e1a02008 	mov	r2, r8
   20ac8:	ebfffd66 	bl	20068 <__ssprint_r>
   20acc:	e3500000 	cmp	r0, #0
   20ad0:	1a000070 	bne	20c98 <_svfiprintf_r+0xaac>
   20ad4:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20ad8:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   20adc:	e28d4038 	add	r4, sp, #56	; 0x38
   20ae0:	eafffe9d 	b	2055c <_svfiprintf_r+0x370>
   20ae4:	e5cd30af 	strb	r3, [sp, #175]	; 0xaf
   20ae8:	e59f34c8 	ldr	r3, [pc, #1224]	; 20fb8 <_svfiprintf_r+0xdcc>
   20aec:	e58d3030 	str	r3, [sp, #48]	; 0x30
   20af0:	eaffff74 	b	208c8 <_svfiprintf_r+0x6dc>
   20af4:	e3530000 	cmp	r3, #0
   20af8:	03a03020 	moveq	r3, #32
   20afc:	eafffdf8 	b	202e4 <_svfiprintf_r+0xf8>
   20b00:	e3520000 	cmp	r2, #0
   20b04:	e5cd30af 	strb	r3, [sp, #175]	; 0xaf
   20b08:	0a00005c 	beq	20c80 <_svfiprintf_r+0xa94>
   20b0c:	e3a03001 	mov	r3, #1
   20b10:	e58d3008 	str	r3, [sp, #8]
   20b14:	e3a03000 	mov	r3, #0
   20b18:	e5cd30af 	strb	r3, [sp, #175]	; 0xaf
   20b1c:	e3a0c001 	mov	ip, #1
   20b20:	e28d3078 	add	r3, sp, #120	; 0x78
   20b24:	e5cd2078 	strb	r2, [sp, #120]	; 0x78
   20b28:	e58dc00c 	str	ip, [sp, #12]
   20b2c:	e58d3024 	str	r3, [sp, #36]	; 0x24
   20b30:	eaffffa8 	b	209d8 <_svfiprintf_r+0x7ec>
   20b34:	e59d3014 	ldr	r3, [sp, #20]
   20b38:	e5933000 	ldr	r3, [r3]
   20b3c:	e3a06000 	mov	r6, #0
   20b40:	e58d3024 	str	r3, [sp, #36]	; 0x24
   20b44:	e1530006 	cmp	r3, r6
   20b48:	e59d3014 	ldr	r3, [sp, #20]
   20b4c:	e2833004 	add	r3, r3, #4
   20b50:	e5cd60af 	strb	r6, [sp, #175]	; 0xaf
   20b54:	e58d3014 	str	r3, [sp, #20]
   20b58:	0a00010b 	beq	20f8c <_svfiprintf_r+0xda0>
   20b5c:	e3550000 	cmp	r5, #0
   20b60:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   20b64:	ba0000f4 	blt	20f3c <_svfiprintf_r+0xd50>
   20b68:	e1a01006 	mov	r1, r6
   20b6c:	e1a02005 	mov	r2, r5
   20b70:	ebfff997 	bl	1f1d4 <memchr>
   20b74:	e3500000 	cmp	r0, #0
   20b78:	058d500c 	streq	r5, [sp, #12]
   20b7c:	058d0020 	streq	r0, [sp, #32]
   20b80:	0afffe62 	beq	20510 <_svfiprintf_r+0x324>
   20b84:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   20b88:	e06c0000 	rsb	r0, ip, r0
   20b8c:	e1500005 	cmp	r0, r5
   20b90:	e58d000c 	str	r0, [sp, #12]
   20b94:	e58d6020 	str	r6, [sp, #32]
   20b98:	c58d500c 	strgt	r5, [sp, #12]
   20b9c:	eafffe5b 	b	20510 <_svfiprintf_r+0x324>
   20ba0:	e5cd30af 	strb	r3, [sp, #175]	; 0xaf
   20ba4:	e38bb010 	orr	fp, fp, #16
   20ba8:	eaffff5b 	b	2091c <_svfiprintf_r+0x730>
   20bac:	e1a00007 	mov	r0, r7
   20bb0:	e3a01000 	mov	r1, #0
   20bb4:	e242c030 	sub	ip, r2, #48	; 0x30
   20bb8:	e4d02001 	ldrb	r2, [r0], #1
   20bbc:	e2426030 	sub	r6, r2, #48	; 0x30
   20bc0:	e0811101 	add	r1, r1, r1, lsl #2
   20bc4:	e3560009 	cmp	r6, #9
   20bc8:	e08c1081 	add	r1, ip, r1, lsl #1
   20bcc:	e1a07000 	mov	r7, r0
   20bd0:	9afffff7 	bls	20bb4 <_svfiprintf_r+0x9c8>
   20bd4:	e58d1018 	str	r1, [sp, #24]
   20bd8:	eafffdc2 	b	202e8 <_svfiprintf_r+0xfc>
   20bdc:	e38bb080 	orr	fp, fp, #128	; 0x80
   20be0:	eafffdbf 	b	202e4 <_svfiprintf_r+0xf8>
   20be4:	e4d72001 	ldrb	r2, [r7], #1
   20be8:	e352002a 	cmp	r2, #42	; 0x2a
   20bec:	0a0000aa 	beq	20e9c <_svfiprintf_r+0xcb0>
   20bf0:	e2421030 	sub	r1, r2, #48	; 0x30
   20bf4:	e3510009 	cmp	r1, #9
   20bf8:	83a05000 	movhi	r5, #0
   20bfc:	8afffdb9 	bhi	202e8 <_svfiprintf_r+0xfc>
   20c00:	e1a00007 	mov	r0, r7
   20c04:	e3a05000 	mov	r5, #0
   20c08:	e4d02001 	ldrb	r2, [r0], #1
   20c0c:	e0855105 	add	r5, r5, r5, lsl #2
   20c10:	e0815085 	add	r5, r1, r5, lsl #1
   20c14:	e2421030 	sub	r1, r2, #48	; 0x30
   20c18:	e3510009 	cmp	r1, #9
   20c1c:	e1a07000 	mov	r7, r0
   20c20:	9afffff8 	bls	20c08 <_svfiprintf_r+0xa1c>
   20c24:	e1855fc5 	orr	r5, r5, r5, asr #31
   20c28:	eafffdae 	b	202e8 <_svfiprintf_r+0xfc>
   20c2c:	e38bb001 	orr	fp, fp, #1
   20c30:	eafffdab 	b	202e4 <_svfiprintf_r+0xf8>
   20c34:	e3530009 	cmp	r3, #9
   20c38:	92833030 	addls	r3, r3, #48	; 0x30
   20c3c:	9affff52 	bls	2098c <_svfiprintf_r+0x7a0>
   20c40:	e28d109f 	add	r1, sp, #159	; 0x9f
   20c44:	e59f0370 	ldr	r0, [pc, #880]	; 20fbc <_svfiprintf_r+0xdd0>
   20c48:	e082c390 	umull	ip, r2, r0, r3
   20c4c:	e1a021a2 	lsr	r2, r2, #3
   20c50:	e0820102 	add	r0, r2, r2, lsl #2
   20c54:	e0433080 	sub	r3, r3, r0, lsl #1
   20c58:	e1a00001 	mov	r0, r1
   20c5c:	e2831030 	add	r1, r3, #48	; 0x30
   20c60:	e2523000 	subs	r3, r2, #0
   20c64:	e5c01000 	strb	r1, [r0]
   20c68:	e2401001 	sub	r1, r0, #1
   20c6c:	1afffff4 	bne	20c44 <_svfiprintf_r+0xa58>
   20c70:	e58d0024 	str	r0, [sp, #36]	; 0x24
   20c74:	e0603008 	rsb	r3, r0, r8
   20c78:	e58d300c 	str	r3, [sp, #12]
   20c7c:	eafffe22 	b	2050c <_svfiprintf_r+0x320>
   20c80:	e59d30a8 	ldr	r3, [sp, #168]	; 0xa8
   20c84:	e3530000 	cmp	r3, #0
   20c88:	159d001c 	ldrne	r0, [sp, #28]
   20c8c:	11a01009 	movne	r1, r9
   20c90:	128d20a0 	addne	r2, sp, #160	; 0xa0
   20c94:	1bfffcf3 	blne	20068 <__ssprint_r>
   20c98:	e1d930bc 	ldrh	r3, [r9, #12]
   20c9c:	e3130040 	tst	r3, #64	; 0x40
   20ca0:	e59d3010 	ldr	r3, [sp, #16]
   20ca4:	13e03000 	mvnne	r3, #0
   20ca8:	e58d3010 	str	r3, [sp, #16]
   20cac:	e59d0010 	ldr	r0, [sp, #16]
   20cb0:	e28dd0b0 	add	sp, sp, #176	; 0xb0
   20cb4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20cb8:	e59dc018 	ldr	ip, [sp, #24]
   20cbc:	e59d0008 	ldr	r0, [sp, #8]
   20cc0:	e060500c 	rsb	r5, r0, ip
   20cc4:	e3550000 	cmp	r5, #0
   20cc8:	dafffe42 	ble	205d8 <_svfiprintf_r+0x3ec>
   20ccc:	e3550010 	cmp	r5, #16
   20cd0:	e59f62d4 	ldr	r6, [pc, #724]	; 20fac <_svfiprintf_r+0xdc0>
   20cd4:	da00001b 	ble	20d48 <_svfiprintf_r+0xb5c>
   20cd8:	e1a01004 	mov	r1, r4
   20cdc:	e3a0a010 	mov	sl, #16
   20ce0:	e59d401c 	ldr	r4, [sp, #28]
   20ce4:	ea000002 	b	20cf4 <_svfiprintf_r+0xb08>
   20ce8:	e2455010 	sub	r5, r5, #16
   20cec:	e3550010 	cmp	r5, #16
   20cf0:	da000013 	ble	20d44 <_svfiprintf_r+0xb58>
   20cf4:	e2833001 	add	r3, r3, #1
   20cf8:	e2822010 	add	r2, r2, #16
   20cfc:	e3530007 	cmp	r3, #7
   20d00:	e8810440 	stm	r1, {r6, sl}
   20d04:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   20d08:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   20d0c:	d2811008 	addle	r1, r1, #8
   20d10:	dafffff4 	ble	20ce8 <_svfiprintf_r+0xafc>
   20d14:	e1a00004 	mov	r0, r4
   20d18:	e1a01009 	mov	r1, r9
   20d1c:	e1a02008 	mov	r2, r8
   20d20:	ebfffcd0 	bl	20068 <__ssprint_r>
   20d24:	e3500000 	cmp	r0, #0
   20d28:	1affffda 	bne	20c98 <_svfiprintf_r+0xaac>
   20d2c:	e2455010 	sub	r5, r5, #16
   20d30:	e3550010 	cmp	r5, #16
   20d34:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20d38:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   20d3c:	e28d1038 	add	r1, sp, #56	; 0x38
   20d40:	caffffeb 	bgt	20cf4 <_svfiprintf_r+0xb08>
   20d44:	e1a04001 	mov	r4, r1
   20d48:	e2833001 	add	r3, r3, #1
   20d4c:	e0822005 	add	r2, r2, r5
   20d50:	e3530007 	cmp	r3, #7
   20d54:	e5846000 	str	r6, [r4]
   20d58:	e5845004 	str	r5, [r4, #4]
   20d5c:	e58d20a8 	str	r2, [sp, #168]	; 0xa8
   20d60:	e58d30a4 	str	r3, [sp, #164]	; 0xa4
   20d64:	d2844008 	addle	r4, r4, #8
   20d68:	dafffe1a 	ble	205d8 <_svfiprintf_r+0x3ec>
   20d6c:	e59d001c 	ldr	r0, [sp, #28]
   20d70:	e1a01009 	mov	r1, r9
   20d74:	e1a02008 	mov	r2, r8
   20d78:	ebfffcba 	bl	20068 <__ssprint_r>
   20d7c:	e3500000 	cmp	r0, #0
   20d80:	1affffc4 	bne	20c98 <_svfiprintf_r+0xaac>
   20d84:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20d88:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   20d8c:	e28d4038 	add	r4, sp, #56	; 0x38
   20d90:	eafffe10 	b	205d8 <_svfiprintf_r+0x3ec>
   20d94:	e59d001c 	ldr	r0, [sp, #28]
   20d98:	e1a01009 	mov	r1, r9
   20d9c:	e1a02008 	mov	r2, r8
   20da0:	ebfffcb0 	bl	20068 <__ssprint_r>
   20da4:	e3500000 	cmp	r0, #0
   20da8:	1affffba 	bne	20c98 <_svfiprintf_r+0xaac>
   20dac:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20db0:	e28d4038 	add	r4, sp, #56	; 0x38
   20db4:	eafffe49 	b	206e0 <_svfiprintf_r+0x4f4>
   20db8:	e59d001c 	ldr	r0, [sp, #28]
   20dbc:	e1a01009 	mov	r1, r9
   20dc0:	e1a02008 	mov	r2, r8
   20dc4:	ebfffca7 	bl	20068 <__ssprint_r>
   20dc8:	e3500000 	cmp	r0, #0
   20dcc:	0afffe79 	beq	207b8 <_svfiprintf_r+0x5cc>
   20dd0:	eaffffb0 	b	20c98 <_svfiprintf_r+0xaac>
   20dd4:	e59d001c 	ldr	r0, [sp, #28]
   20dd8:	e1a01009 	mov	r1, r9
   20ddc:	e1a02008 	mov	r2, r8
   20de0:	ebfffca0 	bl	20068 <__ssprint_r>
   20de4:	e3500000 	cmp	r0, #0
   20de8:	1affffaa 	bne	20c98 <_svfiprintf_r+0xaac>
   20dec:	e28d4038 	add	r4, sp, #56	; 0x38
   20df0:	eafffd2e 	b	202b0 <_svfiprintf_r+0xc4>
   20df4:	e59d001c 	ldr	r0, [sp, #28]
   20df8:	e1a01009 	mov	r1, r9
   20dfc:	e1a02008 	mov	r2, r8
   20e00:	ebfffc98 	bl	20068 <__ssprint_r>
   20e04:	e3500000 	cmp	r0, #0
   20e08:	1affffa2 	bne	20c98 <_svfiprintf_r+0xaac>
   20e0c:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20e10:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   20e14:	e28d4038 	add	r4, sp, #56	; 0x38
   20e18:	eafffddd 	b	20594 <_svfiprintf_r+0x3a8>
   20e1c:	e59d001c 	ldr	r0, [sp, #28]
   20e20:	e1a01009 	mov	r1, r9
   20e24:	e1a02008 	mov	r2, r8
   20e28:	ebfffc8e 	bl	20068 <__ssprint_r>
   20e2c:	e3500000 	cmp	r0, #0
   20e30:	1affff98 	bne	20c98 <_svfiprintf_r+0xaac>
   20e34:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20e38:	e59d30a4 	ldr	r3, [sp, #164]	; 0xa4
   20e3c:	e28d4038 	add	r4, sp, #56	; 0x38
   20e40:	eafffde1 	b	205cc <_svfiprintf_r+0x3e0>
   20e44:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
   20e48:	e28d209f 	add	r2, sp, #159	; 0x9f
   20e4c:	e203100f 	and	r1, r3, #15
   20e50:	e7dc0001 	ldrb	r0, [ip, r1]
   20e54:	e1b03223 	lsrs	r3, r3, #4
   20e58:	e1a01002 	mov	r1, r2
   20e5c:	e5c20000 	strb	r0, [r2]
   20e60:	e2422001 	sub	r2, r2, #1
   20e64:	1afffff8 	bne	20e4c <_svfiprintf_r+0xc60>
   20e68:	e061c008 	rsb	ip, r1, r8
   20e6c:	e58d1024 	str	r1, [sp, #36]	; 0x24
   20e70:	e58dc00c 	str	ip, [sp, #12]
   20e74:	eafffda4 	b	2050c <_svfiprintf_r+0x320>
   20e78:	e21b1040 	ands	r1, fp, #64	; 0x40
   20e7c:	11dc30b0 	ldrhne	r3, [ip]
   20e80:	059c3000 	ldreq	r3, [ip]
   20e84:	01a02001 	moveq	r2, r1
   20e88:	e28cc004 	add	ip, ip, #4
   20e8c:	e2931000 	adds	r1, r3, #0
   20e90:	13a01001 	movne	r1, #1
   20e94:	e58dc014 	str	ip, [sp, #20]
   20e98:	eafffd7b 	b	2048c <_svfiprintf_r+0x2a0>
   20e9c:	e59dc014 	ldr	ip, [sp, #20]
   20ea0:	e59c5000 	ldr	r5, [ip]
   20ea4:	e28c2004 	add	r2, ip, #4
   20ea8:	e3550000 	cmp	r5, #0
   20eac:	b58d2014 	strlt	r2, [sp, #20]
   20eb0:	b3e05000 	mvnlt	r5, #0
   20eb4:	bafffd0a 	blt	202e4 <_svfiprintf_r+0xf8>
   20eb8:	e58d2014 	str	r2, [sp, #20]
   20ebc:	eafffd08 	b	202e4 <_svfiprintf_r+0xf8>
   20ec0:	e59d001c 	ldr	r0, [sp, #28]
   20ec4:	e1a01009 	mov	r1, r9
   20ec8:	e1a02008 	mov	r2, r8
   20ecc:	ebfffc65 	bl	20068 <__ssprint_r>
   20ed0:	e3500000 	cmp	r0, #0
   20ed4:	1affff6f 	bne	20c98 <_svfiprintf_r+0xaac>
   20ed8:	e59d20a8 	ldr	r2, [sp, #168]	; 0xa8
   20edc:	eafffe2c 	b	20794 <_svfiprintf_r+0x5a8>
   20ee0:	e59dc014 	ldr	ip, [sp, #20]
   20ee4:	e59c3000 	ldr	r3, [ip]
   20ee8:	e28cc004 	add	ip, ip, #4
   20eec:	e58dc014 	str	ip, [sp, #20]
   20ef0:	e59dc010 	ldr	ip, [sp, #16]
   20ef4:	e583c000 	str	ip, [r3]
   20ef8:	eafffcd4 	b	20250 <_svfiprintf_r+0x64>
   20efc:	e1dc30f0 	ldrsh	r3, [ip]
   20f00:	e28cc004 	add	ip, ip, #4
   20f04:	e3530000 	cmp	r3, #0
   20f08:	e58dc014 	str	ip, [sp, #20]
   20f0c:	aafffe8c 	bge	20944 <_svfiprintf_r+0x758>
   20f10:	e2633000 	rsb	r3, r3, #0
   20f14:	e3a0202d 	mov	r2, #45	; 0x2d
   20f18:	e2931000 	adds	r1, r3, #0
   20f1c:	e5cd20af 	strb	r2, [sp, #175]	; 0xaf
   20f20:	13a01001 	movne	r1, #1
   20f24:	e3a02001 	mov	r2, #1
   20f28:	eafffd59 	b	20494 <_svfiprintf_r+0x2a8>
   20f2c:	e1dc30b0 	ldrh	r3, [ip]
   20f30:	e28cc004 	add	ip, ip, #4
   20f34:	e58dc014 	str	ip, [sp, #20]
   20f38:	eafffe6a 	b	208e8 <_svfiprintf_r+0x6fc>
   20f3c:	ebffdf92 	bl	18d8c <strlen>
   20f40:	e58d6020 	str	r6, [sp, #32]
   20f44:	e58d000c 	str	r0, [sp, #12]
   20f48:	eafffd70 	b	20510 <_svfiprintf_r+0x324>
   20f4c:	e3a01040 	mov	r1, #64	; 0x40
   20f50:	e58d2000 	str	r2, [sp]
   20f54:	ebffdbb7 	bl	17e38 <_malloc_r>
   20f58:	e3500000 	cmp	r0, #0
   20f5c:	13a03040 	movne	r3, #64	; 0x40
   20f60:	e59d2000 	ldr	r2, [sp]
   20f64:	e5890000 	str	r0, [r9]
   20f68:	e5890010 	str	r0, [r9, #16]
   20f6c:	15893014 	strne	r3, [r9, #20]
   20f70:	1afffca8 	bne	20218 <_svfiprintf_r+0x2c>
   20f74:	e59dc01c 	ldr	ip, [sp, #28]
   20f78:	e3a0300c 	mov	r3, #12
   20f7c:	e58c3000 	str	r3, [ip]
   20f80:	e3e03000 	mvn	r3, #0
   20f84:	e58d3010 	str	r3, [sp, #16]
   20f88:	eaffff47 	b	20cac <_svfiprintf_r+0xac0>
   20f8c:	e3550006 	cmp	r5, #6
   20f90:	23a05006 	movcs	r5, #6
   20f94:	e59f3024 	ldr	r3, [pc, #36]	; 20fc0 <_svfiprintf_r+0xdd4>
   20f98:	e1c5cfc5 	bic	ip, r5, r5, asr #31
   20f9c:	e58d500c 	str	r5, [sp, #12]
   20fa0:	e58dc008 	str	ip, [sp, #8]
   20fa4:	e58d3024 	str	r3, [sp, #36]	; 0x24
   20fa8:	eafffe8a 	b	209d8 <_svfiprintf_r+0x7ec>
   20fac:	00025b90 	.word	0x00025b90
   20fb0:	00025b80 	.word	0x00025b80
   20fb4:	00026a14 	.word	0x00026a14
   20fb8:	00026a00 	.word	0x00026a00
   20fbc:	cccccccd 	.word	0xcccccccd
   20fc0:	00026a28 	.word	0x00026a28

00020fc4 <_calloc_r>:
   20fc4:	e92d4010 	push	{r4, lr}
   20fc8:	e0010192 	mul	r1, r2, r1
   20fcc:	ebffdb99 	bl	17e38 <_malloc_r>
   20fd0:	e2504000 	subs	r4, r0, #0
   20fd4:	0a000018 	beq	2103c <_calloc_r+0x78>
   20fd8:	e5142004 	ldr	r2, [r4, #-4]
   20fdc:	e3c22003 	bic	r2, r2, #3
   20fe0:	e2422004 	sub	r2, r2, #4
   20fe4:	e3520024 	cmp	r2, #36	; 0x24
   20fe8:	8a000015 	bhi	21044 <_calloc_r+0x80>
   20fec:	e3520013 	cmp	r2, #19
   20ff0:	91a02004 	movls	r2, r4
   20ff4:	9a00000c 	bls	2102c <_calloc_r+0x68>
   20ff8:	e3a03000 	mov	r3, #0
   20ffc:	e352001b 	cmp	r2, #27
   21000:	e5843000 	str	r3, [r4]
   21004:	e5843004 	str	r3, [r4, #4]
   21008:	92842008 	addls	r2, r4, #8
   2100c:	9a000006 	bls	2102c <_calloc_r+0x68>
   21010:	e3520024 	cmp	r2, #36	; 0x24
   21014:	e5843008 	str	r3, [r4, #8]
   21018:	e584300c 	str	r3, [r4, #12]
   2101c:	05843010 	streq	r3, [r4, #16]
   21020:	05843014 	streq	r3, [r4, #20]
   21024:	12842010 	addne	r2, r4, #16
   21028:	02842018 	addeq	r2, r4, #24
   2102c:	e3a03000 	mov	r3, #0
   21030:	e5823000 	str	r3, [r2]
   21034:	e5823004 	str	r3, [r2, #4]
   21038:	e5823008 	str	r3, [r2, #8]
   2103c:	e1a00004 	mov	r0, r4
   21040:	e8bd8010 	pop	{r4, pc}
   21044:	e3a01000 	mov	r1, #0
   21048:	ebffdd77 	bl	1862c <memset>
   2104c:	e1a00004 	mov	r0, r4
   21050:	e8bd8010 	pop	{r4, pc}

00021054 <memmove>:
   21054:	e1500001 	cmp	r0, r1
   21058:	e92d0070 	push	{r4, r5, r6}
   2105c:	9a000011 	bls	210a8 <memmove+0x54>
   21060:	e0814002 	add	r4, r1, r2
   21064:	e1500004 	cmp	r0, r4
   21068:	2a00000e 	bcs	210a8 <memmove+0x54>
   2106c:	e3520000 	cmp	r2, #0
   21070:	0a00000a 	beq	210a0 <memmove+0x4c>
   21074:	e2621000 	rsb	r1, r2, #0
   21078:	e1a03002 	mov	r3, r2
   2107c:	e0802002 	add	r2, r0, r2
   21080:	e0844001 	add	r4, r4, r1
   21084:	e0822001 	add	r2, r2, r1
   21088:	e0841003 	add	r1, r4, r3
   2108c:	e551c001 	ldrb	ip, [r1, #-1]
   21090:	e0821003 	add	r1, r2, r3
   21094:	e2533001 	subs	r3, r3, #1
   21098:	e541c001 	strb	ip, [r1, #-1]
   2109c:	1afffff9 	bne	21088 <memmove+0x34>
   210a0:	e8bd0070 	pop	{r4, r5, r6}
   210a4:	e12fff1e 	bx	lr
   210a8:	e352000f 	cmp	r2, #15
   210ac:	91a03000 	movls	r3, r0
   210b0:	9a000029 	bls	2115c <memmove+0x108>
   210b4:	e1813000 	orr	r3, r1, r0
   210b8:	e3130003 	tst	r3, #3
   210bc:	11a03000 	movne	r3, r0
   210c0:	1a000027 	bne	21164 <memmove+0x110>
   210c4:	e1a0c001 	mov	ip, r1
   210c8:	e1a03000 	mov	r3, r0
   210cc:	e1a04002 	mov	r4, r2
   210d0:	e59c5000 	ldr	r5, [ip]
   210d4:	e5835000 	str	r5, [r3]
   210d8:	e59c5004 	ldr	r5, [ip, #4]
   210dc:	e5835004 	str	r5, [r3, #4]
   210e0:	e59c5008 	ldr	r5, [ip, #8]
   210e4:	e5835008 	str	r5, [r3, #8]
   210e8:	e2444010 	sub	r4, r4, #16
   210ec:	e59c500c 	ldr	r5, [ip, #12]
   210f0:	e354000f 	cmp	r4, #15
   210f4:	e583500c 	str	r5, [r3, #12]
   210f8:	e28cc010 	add	ip, ip, #16
   210fc:	e2833010 	add	r3, r3, #16
   21100:	8afffff2 	bhi	210d0 <memmove+0x7c>
   21104:	e242c010 	sub	ip, r2, #16
   21108:	e3ccc00f 	bic	ip, ip, #15
   2110c:	e202200f 	and	r2, r2, #15
   21110:	e28cc010 	add	ip, ip, #16
   21114:	e3520003 	cmp	r2, #3
   21118:	e080300c 	add	r3, r0, ip
   2111c:	e081100c 	add	r1, r1, ip
   21120:	9a00000d 	bls	2115c <memmove+0x108>
   21124:	e1a05001 	mov	r5, r1
   21128:	e1a04003 	mov	r4, r3
   2112c:	e1a0c002 	mov	ip, r2
   21130:	e4956004 	ldr	r6, [r5], #4
   21134:	e24cc004 	sub	ip, ip, #4
   21138:	e35c0003 	cmp	ip, #3
   2113c:	e4846004 	str	r6, [r4], #4
   21140:	8afffffa 	bhi	21130 <memmove+0xdc>
   21144:	e242c004 	sub	ip, r2, #4
   21148:	e3ccc003 	bic	ip, ip, #3
   2114c:	e28cc004 	add	ip, ip, #4
   21150:	e2022003 	and	r2, r2, #3
   21154:	e081100c 	add	r1, r1, ip
   21158:	e083300c 	add	r3, r3, ip
   2115c:	e3520000 	cmp	r2, #0
   21160:	0affffce 	beq	210a0 <memmove+0x4c>
   21164:	e4d1c001 	ldrb	ip, [r1], #1
   21168:	e2522001 	subs	r2, r2, #1
   2116c:	e4c3c001 	strb	ip, [r3], #1
   21170:	0affffca 	beq	210a0 <memmove+0x4c>
   21174:	e4d1c001 	ldrb	ip, [r1], #1
   21178:	e2522001 	subs	r2, r2, #1
   2117c:	e4c3c001 	strb	ip, [r3], #1
   21180:	1afffff7 	bne	21164 <memmove+0x110>
   21184:	eaffffc5 	b	210a0 <memmove+0x4c>

00021188 <_realloc_r>:
   21188:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2118c:	e2514000 	subs	r4, r1, #0
   21190:	e24dd008 	sub	sp, sp, #8
   21194:	e1a07000 	mov	r7, r0
   21198:	e1a08002 	mov	r8, r2
   2119c:	0a0000cf 	beq	214e0 <_realloc_r+0x358>
   211a0:	ebffdd5d 	bl	1871c <__malloc_lock>
   211a4:	e288500b 	add	r5, r8, #11
   211a8:	e3550016 	cmp	r5, #22
   211ac:	83c55007 	bichi	r5, r5, #7
   211b0:	93a02010 	movls	r2, #16
   211b4:	81a00fa5 	lsrhi	r0, r5, #31
   211b8:	93a00000 	movls	r0, #0
   211bc:	91a05002 	movls	r5, r2
   211c0:	81a02005 	movhi	r2, r5
   211c4:	e1550008 	cmp	r5, r8
   211c8:	33800001 	orrcc	r0, r0, #1
   211cc:	e3500000 	cmp	r0, #0
   211d0:	13a0300c 	movne	r3, #12
   211d4:	e514c004 	ldr	ip, [r4, #-4]
   211d8:	13a08000 	movne	r8, #0
   211dc:	15873000 	strne	r3, [r7]
   211e0:	1a000059 	bne	2134c <_realloc_r+0x1c4>
   211e4:	e3cc9003 	bic	r9, ip, #3
   211e8:	e1590002 	cmp	r9, r2
   211ec:	e244b008 	sub	fp, r4, #8
   211f0:	a1a06009 	movge	r6, r9
   211f4:	aa000047 	bge	21318 <_realloc_r+0x190>
   211f8:	e59f34dc 	ldr	r3, [pc, #1244]	; 216dc <_realloc_r+0x554>
   211fc:	e593e008 	ldr	lr, [r3, #8]
   21200:	e08b1009 	add	r1, fp, r9
   21204:	e15e0001 	cmp	lr, r1
   21208:	0a0000b8 	beq	214f0 <_realloc_r+0x368>
   2120c:	e5916004 	ldr	r6, [r1, #4]
   21210:	e3c6a001 	bic	sl, r6, #1
   21214:	e081a00a 	add	sl, r1, sl
   21218:	e59aa004 	ldr	sl, [sl, #4]
   2121c:	e31a0001 	tst	sl, #1
   21220:	11a01000 	movne	r1, r0
   21224:	0a000058 	beq	2138c <_realloc_r+0x204>
   21228:	e31c0001 	tst	ip, #1
   2122c:	1a00008d 	bne	21468 <_realloc_r+0x2e0>
   21230:	e514a008 	ldr	sl, [r4, #-8]
   21234:	e06aa00b 	rsb	sl, sl, fp
   21238:	e59ac004 	ldr	ip, [sl, #4]
   2123c:	e3ccc003 	bic	ip, ip, #3
   21240:	e08cc009 	add	ip, ip, r9
   21244:	e3510000 	cmp	r1, #0
   21248:	e58dc004 	str	ip, [sp, #4]
   2124c:	0a000057 	beq	213b0 <_realloc_r+0x228>
   21250:	e151000e 	cmp	r1, lr
   21254:	e080600c 	add	r6, r0, ip
   21258:	0a0000d9 	beq	215c4 <_realloc_r+0x43c>
   2125c:	e1520006 	cmp	r2, r6
   21260:	ca000052 	bgt	213b0 <_realloc_r+0x228>
   21264:	e2812008 	add	r2, r1, #8
   21268:	e892000c 	ldm	r2, {r2, r3}
   2126c:	e5832008 	str	r2, [r3, #8]
   21270:	e582300c 	str	r3, [r2, #12]
   21274:	e1a0800a 	mov	r8, sl
   21278:	e59a300c 	ldr	r3, [sl, #12]
   2127c:	e5b81008 	ldr	r1, [r8, #8]!
   21280:	e2492004 	sub	r2, r9, #4
   21284:	e3520024 	cmp	r2, #36	; 0x24
   21288:	e581300c 	str	r3, [r1, #12]
   2128c:	e5831008 	str	r1, [r3, #8]
   21290:	8a000104 	bhi	216a8 <_realloc_r+0x520>
   21294:	e3520013 	cmp	r2, #19
   21298:	91a03008 	movls	r3, r8
   2129c:	9a000014 	bls	212f4 <_realloc_r+0x16c>
   212a0:	e5943000 	ldr	r3, [r4]
   212a4:	e58a3008 	str	r3, [sl, #8]
   212a8:	e5943004 	ldr	r3, [r4, #4]
   212ac:	e352001b 	cmp	r2, #27
   212b0:	e58a300c 	str	r3, [sl, #12]
   212b4:	92844008 	addls	r4, r4, #8
   212b8:	928a3010 	addls	r3, sl, #16
   212bc:	9a00000c 	bls	212f4 <_realloc_r+0x16c>
   212c0:	e5943008 	ldr	r3, [r4, #8]
   212c4:	e58a3010 	str	r3, [sl, #16]
   212c8:	e594300c 	ldr	r3, [r4, #12]
   212cc:	e58a3014 	str	r3, [sl, #20]
   212d0:	e3520024 	cmp	r2, #36	; 0x24
   212d4:	05943010 	ldreq	r3, [r4, #16]
   212d8:	058a3018 	streq	r3, [sl, #24]
   212dc:	05942014 	ldreq	r2, [r4, #20]
   212e0:	058a201c 	streq	r2, [sl, #28]
   212e4:	128a3018 	addne	r3, sl, #24
   212e8:	12844010 	addne	r4, r4, #16
   212ec:	028a3020 	addeq	r3, sl, #32
   212f0:	02844018 	addeq	r4, r4, #24
   212f4:	e5942000 	ldr	r2, [r4]
   212f8:	e5832000 	str	r2, [r3]
   212fc:	e5942004 	ldr	r2, [r4, #4]
   21300:	e5832004 	str	r2, [r3, #4]
   21304:	e5942008 	ldr	r2, [r4, #8]
   21308:	e5832008 	str	r2, [r3, #8]
   2130c:	e59ac004 	ldr	ip, [sl, #4]
   21310:	e1a04008 	mov	r4, r8
   21314:	e1a0b00a 	mov	fp, sl
   21318:	e0653006 	rsb	r3, r5, r6
   2131c:	e353000f 	cmp	r3, #15
   21320:	e20cc001 	and	ip, ip, #1
   21324:	8a00000b 	bhi	21358 <_realloc_r+0x1d0>
   21328:	e18cc006 	orr	ip, ip, r6
   2132c:	e58bc004 	str	ip, [fp, #4]
   21330:	e08bb006 	add	fp, fp, r6
   21334:	e59b3004 	ldr	r3, [fp, #4]
   21338:	e3833001 	orr	r3, r3, #1
   2133c:	e58b3004 	str	r3, [fp, #4]
   21340:	e1a00007 	mov	r0, r7
   21344:	ebffdcf5 	bl	18720 <__malloc_unlock>
   21348:	e1a08004 	mov	r8, r4
   2134c:	e1a00008 	mov	r0, r8
   21350:	e28dd008 	add	sp, sp, #8
   21354:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21358:	e08b1005 	add	r1, fp, r5
   2135c:	e3832001 	orr	r2, r3, #1
   21360:	e18c5005 	orr	r5, ip, r5
   21364:	e58b5004 	str	r5, [fp, #4]
   21368:	e5812004 	str	r2, [r1, #4]
   2136c:	e0813003 	add	r3, r1, r3
   21370:	e5932004 	ldr	r2, [r3, #4]
   21374:	e3822001 	orr	r2, r2, #1
   21378:	e5832004 	str	r2, [r3, #4]
   2137c:	e1a00007 	mov	r0, r7
   21380:	e2811008 	add	r1, r1, #8
   21384:	ebfff3b2 	bl	1e254 <_free_r>
   21388:	eaffffec 	b	21340 <_realloc_r+0x1b8>
   2138c:	e3c60003 	bic	r0, r6, #3
   21390:	e0806009 	add	r6, r0, r9
   21394:	e1520006 	cmp	r2, r6
   21398:	caffffa2 	bgt	21228 <_realloc_r+0xa0>
   2139c:	e2812008 	add	r2, r1, #8
   213a0:	e892000c 	ldm	r2, {r2, r3}
   213a4:	e582300c 	str	r3, [r2, #12]
   213a8:	e5832008 	str	r2, [r3, #8]
   213ac:	eaffffd9 	b	21318 <_realloc_r+0x190>
   213b0:	e59d3004 	ldr	r3, [sp, #4]
   213b4:	e1520003 	cmp	r2, r3
   213b8:	ca00002a 	bgt	21468 <_realloc_r+0x2e0>
   213bc:	e1a0600a 	mov	r6, sl
   213c0:	e59a300c 	ldr	r3, [sl, #12]
   213c4:	e5b61008 	ldr	r1, [r6, #8]!
   213c8:	e2492004 	sub	r2, r9, #4
   213cc:	e3520024 	cmp	r2, #36	; 0x24
   213d0:	e581300c 	str	r3, [r1, #12]
   213d4:	e5831008 	str	r1, [r3, #8]
   213d8:	8a00006e 	bhi	21598 <_realloc_r+0x410>
   213dc:	e3520013 	cmp	r2, #19
   213e0:	91a03006 	movls	r3, r6
   213e4:	9a000014 	bls	2143c <_realloc_r+0x2b4>
   213e8:	e5943000 	ldr	r3, [r4]
   213ec:	e58a3008 	str	r3, [sl, #8]
   213f0:	e5943004 	ldr	r3, [r4, #4]
   213f4:	e352001b 	cmp	r2, #27
   213f8:	e58a300c 	str	r3, [sl, #12]
   213fc:	92844008 	addls	r4, r4, #8
   21400:	928a3010 	addls	r3, sl, #16
   21404:	9a00000c 	bls	2143c <_realloc_r+0x2b4>
   21408:	e5943008 	ldr	r3, [r4, #8]
   2140c:	e58a3010 	str	r3, [sl, #16]
   21410:	e594300c 	ldr	r3, [r4, #12]
   21414:	e58a3014 	str	r3, [sl, #20]
   21418:	e3520024 	cmp	r2, #36	; 0x24
   2141c:	05943010 	ldreq	r3, [r4, #16]
   21420:	058a3018 	streq	r3, [sl, #24]
   21424:	05942014 	ldreq	r2, [r4, #20]
   21428:	058a201c 	streq	r2, [sl, #28]
   2142c:	128a3018 	addne	r3, sl, #24
   21430:	12844010 	addne	r4, r4, #16
   21434:	028a3020 	addeq	r3, sl, #32
   21438:	02844018 	addeq	r4, r4, #24
   2143c:	e5942000 	ldr	r2, [r4]
   21440:	e5832000 	str	r2, [r3]
   21444:	e5942004 	ldr	r2, [r4, #4]
   21448:	e5832004 	str	r2, [r3, #4]
   2144c:	e5942008 	ldr	r2, [r4, #8]
   21450:	e5832008 	str	r2, [r3, #8]
   21454:	e1a04006 	mov	r4, r6
   21458:	e59ac004 	ldr	ip, [sl, #4]
   2145c:	e59d6004 	ldr	r6, [sp, #4]
   21460:	e1a0b00a 	mov	fp, sl
   21464:	eaffffab 	b	21318 <_realloc_r+0x190>
   21468:	e1a01008 	mov	r1, r8
   2146c:	e1a00007 	mov	r0, r7
   21470:	ebffda70 	bl	17e38 <_malloc_r>
   21474:	e2508000 	subs	r8, r0, #0
   21478:	0a000015 	beq	214d4 <_realloc_r+0x34c>
   2147c:	e514c004 	ldr	ip, [r4, #-4]
   21480:	e3cc3001 	bic	r3, ip, #1
   21484:	e2482008 	sub	r2, r8, #8
   21488:	e08b3003 	add	r3, fp, r3
   2148c:	e1520003 	cmp	r2, r3
   21490:	0a000080 	beq	21698 <_realloc_r+0x510>
   21494:	e2492004 	sub	r2, r9, #4
   21498:	e3520024 	cmp	r2, #36	; 0x24
   2149c:	8a000045 	bhi	215b8 <_realloc_r+0x430>
   214a0:	e3520013 	cmp	r2, #19
   214a4:	91a03008 	movls	r3, r8
   214a8:	91a02004 	movls	r2, r4
   214ac:	8a000023 	bhi	21540 <_realloc_r+0x3b8>
   214b0:	e5921000 	ldr	r1, [r2]
   214b4:	e5831000 	str	r1, [r3]
   214b8:	e5921004 	ldr	r1, [r2, #4]
   214bc:	e5831004 	str	r1, [r3, #4]
   214c0:	e5922008 	ldr	r2, [r2, #8]
   214c4:	e5832008 	str	r2, [r3, #8]
   214c8:	e1a00007 	mov	r0, r7
   214cc:	e1a01004 	mov	r1, r4
   214d0:	ebfff35f 	bl	1e254 <_free_r>
   214d4:	e1a00007 	mov	r0, r7
   214d8:	ebffdc90 	bl	18720 <__malloc_unlock>
   214dc:	eaffff9a 	b	2134c <_realloc_r+0x1c4>
   214e0:	e1a01002 	mov	r1, r2
   214e4:	e28dd008 	add	sp, sp, #8
   214e8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214ec:	eaffda51 	b	17e38 <_malloc_r>
   214f0:	e59e0004 	ldr	r0, [lr, #4]
   214f4:	e3c00003 	bic	r0, r0, #3
   214f8:	e0801009 	add	r1, r0, r9
   214fc:	e2856010 	add	r6, r5, #16
   21500:	e1510006 	cmp	r1, r6
   21504:	b1a0100e 	movlt	r1, lr
   21508:	baffff46 	blt	21228 <_realloc_r+0xa0>
   2150c:	e0652001 	rsb	r2, r5, r1
   21510:	e08bb005 	add	fp, fp, r5
   21514:	e3822001 	orr	r2, r2, #1
   21518:	e58b2004 	str	r2, [fp, #4]
   2151c:	e5142004 	ldr	r2, [r4, #-4]
   21520:	e2022001 	and	r2, r2, #1
   21524:	e1855002 	orr	r5, r5, r2
   21528:	e5045004 	str	r5, [r4, #-4]
   2152c:	e1a00007 	mov	r0, r7
   21530:	e583b008 	str	fp, [r3, #8]
   21534:	e1a08004 	mov	r8, r4
   21538:	ebffdc78 	bl	18720 <__malloc_unlock>
   2153c:	eaffff82 	b	2134c <_realloc_r+0x1c4>
   21540:	e5943000 	ldr	r3, [r4]
   21544:	e5883000 	str	r3, [r8]
   21548:	e5943004 	ldr	r3, [r4, #4]
   2154c:	e352001b 	cmp	r2, #27
   21550:	e5883004 	str	r3, [r8, #4]
   21554:	92842008 	addls	r2, r4, #8
   21558:	92883008 	addls	r3, r8, #8
   2155c:	9affffd3 	bls	214b0 <_realloc_r+0x328>
   21560:	e5943008 	ldr	r3, [r4, #8]
   21564:	e5883008 	str	r3, [r8, #8]
   21568:	e594300c 	ldr	r3, [r4, #12]
   2156c:	e588300c 	str	r3, [r8, #12]
   21570:	e3520024 	cmp	r2, #36	; 0x24
   21574:	05943010 	ldreq	r3, [r4, #16]
   21578:	05883010 	streq	r3, [r8, #16]
   2157c:	05942014 	ldreq	r2, [r4, #20]
   21580:	12883010 	addne	r3, r8, #16
   21584:	05882014 	streq	r2, [r8, #20]
   21588:	12842010 	addne	r2, r4, #16
   2158c:	02883018 	addeq	r3, r8, #24
   21590:	02842018 	addeq	r2, r4, #24
   21594:	eaffffc5 	b	214b0 <_realloc_r+0x328>
   21598:	e1a01004 	mov	r1, r4
   2159c:	e1a00006 	mov	r0, r6
   215a0:	ebfffeab 	bl	21054 <memmove>
   215a4:	e1a04006 	mov	r4, r6
   215a8:	e59ac004 	ldr	ip, [sl, #4]
   215ac:	e59d6004 	ldr	r6, [sp, #4]
   215b0:	e1a0b00a 	mov	fp, sl
   215b4:	eaffff57 	b	21318 <_realloc_r+0x190>
   215b8:	e1a01004 	mov	r1, r4
   215bc:	ebfffea4 	bl	21054 <memmove>
   215c0:	eaffffc0 	b	214c8 <_realloc_r+0x340>
   215c4:	e2851010 	add	r1, r5, #16
   215c8:	e1560001 	cmp	r6, r1
   215cc:	baffff77 	blt	213b0 <_realloc_r+0x228>
   215d0:	e1a0800a 	mov	r8, sl
   215d4:	e59a100c 	ldr	r1, [sl, #12]
   215d8:	e5b80008 	ldr	r0, [r8, #8]!
   215dc:	e2492004 	sub	r2, r9, #4
   215e0:	e3520024 	cmp	r2, #36	; 0x24
   215e4:	e580100c 	str	r1, [r0, #12]
   215e8:	e5810008 	str	r0, [r1, #8]
   215ec:	8a000034 	bhi	216c4 <_realloc_r+0x53c>
   215f0:	e3520013 	cmp	r2, #19
   215f4:	91a02008 	movls	r2, r8
   215f8:	9a000014 	bls	21650 <_realloc_r+0x4c8>
   215fc:	e5941000 	ldr	r1, [r4]
   21600:	e58a1008 	str	r1, [sl, #8]
   21604:	e5941004 	ldr	r1, [r4, #4]
   21608:	e352001b 	cmp	r2, #27
   2160c:	e58a100c 	str	r1, [sl, #12]
   21610:	928a2010 	addls	r2, sl, #16
   21614:	92844008 	addls	r4, r4, #8
   21618:	9a00000c 	bls	21650 <_realloc_r+0x4c8>
   2161c:	e5941008 	ldr	r1, [r4, #8]
   21620:	e58a1010 	str	r1, [sl, #16]
   21624:	e594100c 	ldr	r1, [r4, #12]
   21628:	e58a1014 	str	r1, [sl, #20]
   2162c:	e3520024 	cmp	r2, #36	; 0x24
   21630:	05942010 	ldreq	r2, [r4, #16]
   21634:	058a2018 	streq	r2, [sl, #24]
   21638:	05941014 	ldreq	r1, [r4, #20]
   2163c:	058a101c 	streq	r1, [sl, #28]
   21640:	128a2018 	addne	r2, sl, #24
   21644:	12844010 	addne	r4, r4, #16
   21648:	028a2020 	addeq	r2, sl, #32
   2164c:	02844018 	addeq	r4, r4, #24
   21650:	e5941000 	ldr	r1, [r4]
   21654:	e5821000 	str	r1, [r2]
   21658:	e5941004 	ldr	r1, [r4, #4]
   2165c:	e5821004 	str	r1, [r2, #4]
   21660:	e5941008 	ldr	r1, [r4, #8]
   21664:	e5821008 	str	r1, [r2, #8]
   21668:	e0651006 	rsb	r1, r5, r6
   2166c:	e08a2005 	add	r2, sl, r5
   21670:	e3811001 	orr	r1, r1, #1
   21674:	e5821004 	str	r1, [r2, #4]
   21678:	e59a1004 	ldr	r1, [sl, #4]
   2167c:	e2011001 	and	r1, r1, #1
   21680:	e1855001 	orr	r5, r5, r1
   21684:	e58a5004 	str	r5, [sl, #4]
   21688:	e1a00007 	mov	r0, r7
   2168c:	e5832008 	str	r2, [r3, #8]
   21690:	ebffdc22 	bl	18720 <__malloc_unlock>
   21694:	eaffff2c 	b	2134c <_realloc_r+0x1c4>
   21698:	e5186004 	ldr	r6, [r8, #-4]
   2169c:	e3c66003 	bic	r6, r6, #3
   216a0:	e0866009 	add	r6, r6, r9
   216a4:	eaffff1b 	b	21318 <_realloc_r+0x190>
   216a8:	e1a01004 	mov	r1, r4
   216ac:	e1a00008 	mov	r0, r8
   216b0:	ebfffe67 	bl	21054 <memmove>
   216b4:	e1a04008 	mov	r4, r8
   216b8:	e59ac004 	ldr	ip, [sl, #4]
   216bc:	e1a0b00a 	mov	fp, sl
   216c0:	eaffff14 	b	21318 <_realloc_r+0x190>
   216c4:	e1a00008 	mov	r0, r8
   216c8:	e1a01004 	mov	r1, r4
   216cc:	e58d3000 	str	r3, [sp]
   216d0:	ebfffe5f 	bl	21054 <memmove>
   216d4:	e59d3000 	ldr	r3, [sp]
   216d8:	eaffffe2 	b	21668 <_realloc_r+0x4e0>
   216dc:	40000078 	.word	0x40000078

000216e0 <cos>:
   216e0:	e92d4030 	push	{r4, r5, lr}
   216e4:	e59f20d8 	ldr	r2, [pc, #216]	; 217c4 <cos+0xe4>
   216e8:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
   216ec:	e1530002 	cmp	r3, r2
   216f0:	e24dd014 	sub	sp, sp, #20
   216f4:	e1a04000 	mov	r4, r0
   216f8:	e1a05001 	mov	r5, r1
   216fc:	da00001b 	ble	21770 <cos+0x90>
   21700:	e59f20c0 	ldr	r2, [pc, #192]	; 217c8 <cos+0xe8>
   21704:	e1530002 	cmp	r3, r2
   21708:	da000008 	ble	21730 <cos+0x50>
   2170c:	e1a02000 	mov	r2, r0
   21710:	e1a03001 	mov	r3, r1
   21714:	eb000bf6 	bl	246f4 <__aeabi_dsub>
   21718:	e1a03000 	mov	r3, r0
   2171c:	e1a02001 	mov	r2, r1
   21720:	e1a00003 	mov	r0, r3
   21724:	e1a01002 	mov	r1, r2
   21728:	e28dd014 	add	sp, sp, #20
   2172c:	e8bd8030 	pop	{r4, r5, pc}
   21730:	e28d2004 	add	r2, sp, #4
   21734:	eb00018c 	bl	21d6c <__ieee754_rem_pio2>
   21738:	e200c003 	and	ip, r0, #3
   2173c:	e35c0001 	cmp	ip, #1
   21740:	e99d0003 	ldmib	sp, {r0, r1}
   21744:	e28d300c 	add	r3, sp, #12
   21748:	e893000c 	ldm	r3, {r2, r3}
   2174c:	0a000011 	beq	21798 <cos+0xb8>
   21750:	e35c0002 	cmp	ip, #2
   21754:	0a00000b 	beq	21788 <cos+0xa8>
   21758:	e35c0000 	cmp	ip, #0
   2175c:	1a000012 	bne	217ac <cos+0xcc>
   21760:	eb00039c 	bl	225d8 <__kernel_cos>
   21764:	e1a03000 	mov	r3, r0
   21768:	e1a02001 	mov	r2, r1
   2176c:	eaffffeb 	b	21720 <cos+0x40>
   21770:	e3a02000 	mov	r2, #0
   21774:	e3a03000 	mov	r3, #0
   21778:	eb000396 	bl	225d8 <__kernel_cos>
   2177c:	e1a03000 	mov	r3, r0
   21780:	e1a02001 	mov	r2, r1
   21784:	eaffffe5 	b	21720 <cos+0x40>
   21788:	eb000392 	bl	225d8 <__kernel_cos>
   2178c:	e2803102 	add	r3, r0, #-2147483648	; 0x80000000
   21790:	e1a02001 	mov	r2, r1
   21794:	eaffffe1 	b	21720 <cos+0x40>
   21798:	e58dc000 	str	ip, [sp]
   2179c:	eb000730 	bl	23464 <__kernel_sin>
   217a0:	e2803102 	add	r3, r0, #-2147483648	; 0x80000000
   217a4:	e1a02001 	mov	r2, r1
   217a8:	eaffffdc 	b	21720 <cos+0x40>
   217ac:	e3a0c001 	mov	ip, #1
   217b0:	e58dc000 	str	ip, [sp]
   217b4:	eb00072a 	bl	23464 <__kernel_sin>
   217b8:	e1a03000 	mov	r3, r0
   217bc:	e1a02001 	mov	r2, r1
   217c0:	eaffffd6 	b	21720 <cos+0x40>
   217c4:	3fe921fb 	.word	0x3fe921fb
   217c8:	7fefffff 	.word	0x7fefffff

000217cc <sin>:
   217cc:	e92d4030 	push	{r4, r5, lr}
   217d0:	e59f20fc 	ldr	r2, [pc, #252]	; 218d4 <sin+0x108>
   217d4:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
   217d8:	e1530002 	cmp	r3, r2
   217dc:	e24dd014 	sub	sp, sp, #20
   217e0:	e1a04000 	mov	r4, r0
   217e4:	e1a05001 	mov	r5, r1
   217e8:	da00001d 	ble	21864 <sin+0x98>
   217ec:	e59f20e4 	ldr	r2, [pc, #228]	; 218d8 <sin+0x10c>
   217f0:	e1530002 	cmp	r3, r2
   217f4:	da000008 	ble	2181c <sin+0x50>
   217f8:	e1a02000 	mov	r2, r0
   217fc:	e1a03001 	mov	r3, r1
   21800:	eb000bbb 	bl	246f4 <__aeabi_dsub>
   21804:	e1a03000 	mov	r3, r0
   21808:	e1a02001 	mov	r2, r1
   2180c:	e1a00003 	mov	r0, r3
   21810:	e1a01002 	mov	r1, r2
   21814:	e28dd014 	add	sp, sp, #20
   21818:	e8bd8030 	pop	{r4, r5, pc}
   2181c:	e28d2004 	add	r2, sp, #4
   21820:	eb000151 	bl	21d6c <__ieee754_rem_pio2>
   21824:	e2000003 	and	r0, r0, #3
   21828:	e3500001 	cmp	r0, #1
   2182c:	0a00001d 	beq	218a8 <sin+0xdc>
   21830:	e3500002 	cmp	r0, #2
   21834:	0a000012 	beq	21884 <sin+0xb8>
   21838:	e3500000 	cmp	r0, #0
   2183c:	e28d300c 	add	r3, sp, #12
   21840:	e893000c 	ldm	r3, {r2, r3}
   21844:	e99d0003 	ldmib	sp, {r0, r1}
   21848:	1a00001d 	bne	218c4 <sin+0xf8>
   2184c:	e3a0c001 	mov	ip, #1
   21850:	e58dc000 	str	ip, [sp]
   21854:	eb000702 	bl	23464 <__kernel_sin>
   21858:	e1a03000 	mov	r3, r0
   2185c:	e1a02001 	mov	r2, r1
   21860:	eaffffe9 	b	2180c <sin+0x40>
   21864:	e3a02000 	mov	r2, #0
   21868:	e3a03000 	mov	r3, #0
   2186c:	e3a0c000 	mov	ip, #0
   21870:	e58dc000 	str	ip, [sp]
   21874:	eb0006fa 	bl	23464 <__kernel_sin>
   21878:	e1a03000 	mov	r3, r0
   2187c:	e1a02001 	mov	r2, r1
   21880:	eaffffe1 	b	2180c <sin+0x40>
   21884:	e28d300c 	add	r3, sp, #12
   21888:	e893000c 	ldm	r3, {r2, r3}
   2188c:	e3a0c001 	mov	ip, #1
   21890:	e99d0003 	ldmib	sp, {r0, r1}
   21894:	e58dc000 	str	ip, [sp]
   21898:	eb0006f1 	bl	23464 <__kernel_sin>
   2189c:	e2803102 	add	r3, r0, #-2147483648	; 0x80000000
   218a0:	e1a02001 	mov	r2, r1
   218a4:	eaffffd8 	b	2180c <sin+0x40>
   218a8:	e28d300c 	add	r3, sp, #12
   218ac:	e893000c 	ldm	r3, {r2, r3}
   218b0:	e99d0003 	ldmib	sp, {r0, r1}
   218b4:	eb000347 	bl	225d8 <__kernel_cos>
   218b8:	e1a03000 	mov	r3, r0
   218bc:	e1a02001 	mov	r2, r1
   218c0:	eaffffd1 	b	2180c <sin+0x40>
   218c4:	eb000343 	bl	225d8 <__kernel_cos>
   218c8:	e2803102 	add	r3, r0, #-2147483648	; 0x80000000
   218cc:	e1a02001 	mov	r2, r1
   218d0:	eaffffcd 	b	2180c <sin+0x40>
   218d4:	3fe921fb 	.word	0x3fe921fb
   218d8:	7fefffff 	.word	0x7fefffff

000218dc <tan>:
   218dc:	e92d4030 	push	{r4, r5, lr}
   218e0:	e59f2078 	ldr	r2, [pc, #120]	; 21960 <tan+0x84>
   218e4:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
   218e8:	e1530002 	cmp	r3, r2
   218ec:	e24dd014 	sub	sp, sp, #20
   218f0:	e1a04000 	mov	r4, r0
   218f4:	e1a05001 	mov	r5, r1
   218f8:	da000012 	ble	21948 <tan+0x6c>
   218fc:	e59f2060 	ldr	r2, [pc, #96]	; 21964 <tan+0x88>
   21900:	e1530002 	cmp	r3, r2
   21904:	da000004 	ble	2191c <tan+0x40>
   21908:	e1a02000 	mov	r2, r0
   2190c:	e1a03001 	mov	r3, r1
   21910:	eb000b77 	bl	246f4 <__aeabi_dsub>
   21914:	e28dd014 	add	sp, sp, #20
   21918:	e8bd8030 	pop	{r4, r5, pc}
   2191c:	e28d2004 	add	r2, sp, #4
   21920:	eb000111 	bl	21d6c <__ieee754_rem_pio2>
   21924:	e200c001 	and	ip, r0, #1
   21928:	e1a0c08c 	lsl	ip, ip, #1
   2192c:	e26cc001 	rsb	ip, ip, #1
   21930:	e99d0003 	ldmib	sp, {r0, r1}
   21934:	e28d300c 	add	r3, sp, #12
   21938:	e893000c 	ldm	r3, {r2, r3}
   2193c:	e58dc000 	str	ip, [sp]
   21940:	eb00074b 	bl	23674 <__kernel_tan>
   21944:	eafffff2 	b	21914 <tan+0x38>
   21948:	e3a0c001 	mov	ip, #1
   2194c:	e3a02000 	mov	r2, #0
   21950:	e3a03000 	mov	r3, #0
   21954:	e58dc000 	str	ip, [sp]
   21958:	eb000745 	bl	23674 <__kernel_tan>
   2195c:	eaffffec 	b	21914 <tan+0x38>
   21960:	3fe921fb 	.word	0x3fe921fb
   21964:	7fefffff 	.word	0x7fefffff

00021968 <atan2>:
   21968:	ea000047 	b	21a8c <__ieee754_atan2>

0002196c <sqrt>:
   2196c:	e92d4fd0 	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   21970:	e24dd024 	sub	sp, sp, #36	; 0x24
   21974:	e1a06000 	mov	r6, r0
   21978:	e1a07001 	mov	r7, r1
   2197c:	eb000287 	bl	223a0 <__ieee754_sqrt>
   21980:	e59f40fc 	ldr	r4, [pc, #252]	; 21a84 <sqrt+0x118>
   21984:	e5943000 	ldr	r3, [r4]
   21988:	e3730001 	cmn	r3, #1
   2198c:	e1a08000 	mov	r8, r0
   21990:	e1a09001 	mov	r9, r1
   21994:	0a00002b 	beq	21a48 <sqrt+0xdc>
   21998:	e1a00006 	mov	r0, r6
   2199c:	e1a01007 	mov	r1, r7
   219a0:	ebfff98b 	bl	1ffd4 <__fpclassifyd>
   219a4:	e3500000 	cmp	r0, #0
   219a8:	0a000026 	beq	21a48 <sqrt+0xdc>
   219ac:	e3a0a000 	mov	sl, #0
   219b0:	e3a0b000 	mov	fp, #0
   219b4:	e1a00006 	mov	r0, r6
   219b8:	e1a01007 	mov	r1, r7
   219bc:	e1a0200a 	mov	r2, sl
   219c0:	e1a0300b 	mov	r3, fp
   219c4:	eb000d66 	bl	24f64 <__ledf2>
   219c8:	e3500000 	cmp	r0, #0
   219cc:	aa00001d 	bge	21a48 <sqrt+0xdc>
   219d0:	e3a03001 	mov	r3, #1
   219d4:	e5944000 	ldr	r4, [r4]
   219d8:	e58d3000 	str	r3, [sp]
   219dc:	e59f30a4 	ldr	r3, [pc, #164]	; 21a88 <sqrt+0x11c>
   219e0:	e3540000 	cmp	r4, #0
   219e4:	e58d3004 	str	r3, [sp, #4]
   219e8:	e3a03000 	mov	r3, #0
   219ec:	e58d3020 	str	r3, [sp, #32]
   219f0:	e58d6010 	str	r6, [sp, #16]
   219f4:	e58d7014 	str	r7, [sp, #20]
   219f8:	e58d6008 	str	r6, [sp, #8]
   219fc:	e58d700c 	str	r7, [sp, #12]
   21a00:	0a000014 	beq	21a58 <sqrt+0xec>
   21a04:	e1a0000a 	mov	r0, sl
   21a08:	e1a0100b 	mov	r1, fp
   21a0c:	e1a0200a 	mov	r2, sl
   21a10:	e1a0300b 	mov	r3, fp
   21a14:	eb000ccf 	bl	24d58 <__aeabi_ddiv>
   21a18:	e3540002 	cmp	r4, #2
   21a1c:	e58d0018 	str	r0, [sp, #24]
   21a20:	e58d101c 	str	r1, [sp, #28]
   21a24:	1a00000d 	bne	21a60 <sqrt+0xf4>
   21a28:	eb000a5f 	bl	243ac <__errno>
   21a2c:	e3a03021 	mov	r3, #33	; 0x21
   21a30:	e5803000 	str	r3, [r0]
   21a34:	e59d3020 	ldr	r3, [sp, #32]
   21a38:	e3530000 	cmp	r3, #0
   21a3c:	1a00000c 	bne	21a74 <sqrt+0x108>
   21a40:	e28d9018 	add	r9, sp, #24
   21a44:	e8990300 	ldm	r9, {r8, r9}
   21a48:	e1a00008 	mov	r0, r8
   21a4c:	e1a01009 	mov	r1, r9
   21a50:	e28dd024 	add	sp, sp, #36	; 0x24
   21a54:	e8bd8fd0 	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   21a58:	e58da018 	str	sl, [sp, #24]
   21a5c:	e58db01c 	str	fp, [sp, #28]
   21a60:	e1a0000d 	mov	r0, sp
   21a64:	eb0009dd 	bl	241e0 <matherr>
   21a68:	e3500000 	cmp	r0, #0
   21a6c:	1afffff0 	bne	21a34 <sqrt+0xc8>
   21a70:	eaffffec 	b	21a28 <sqrt+0xbc>
   21a74:	eb000a4c 	bl	243ac <__errno>
   21a78:	e59d3020 	ldr	r3, [sp, #32]
   21a7c:	e5803000 	str	r3, [r0]
   21a80:	eaffffee 	b	21a40 <sqrt+0xd4>
   21a84:	40000958 	.word	0x40000958
   21a88:	00026a70 	.word	0x00026a70

00021a8c <__ieee754_atan2>:
   21a8c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a90:	e24dd010 	sub	sp, sp, #16
   21a94:	e1a04002 	mov	r4, r2
   21a98:	e58d2008 	str	r2, [sp, #8]
   21a9c:	e58d300c 	str	r3, [sp, #12]
   21aa0:	e2632000 	rsb	r2, r3, #0
   21aa4:	e3c46102 	bic	r6, r4, #-2147483648	; 0x80000000
   21aa8:	e1822003 	orr	r2, r2, r3
   21aac:	e59f52b4 	ldr	r5, [pc, #692]	; 21d68 <__ieee754_atan2+0x2dc>
   21ab0:	e1862fa2 	orr	r2, r6, r2, lsr #31
   21ab4:	e1a0a000 	mov	sl, r0
   21ab8:	e1a0b001 	mov	fp, r1
   21abc:	e88d0c00 	stm	sp, {sl, fp}
   21ac0:	e1520005 	cmp	r2, r5
   21ac4:	e1a08000 	mov	r8, r0
   21ac8:	e1a09001 	mov	r9, r1
   21acc:	e59dc000 	ldr	ip, [sp]
   21ad0:	e59d2004 	ldr	r2, [sp, #4]
   21ad4:	8a000036 	bhi	21bb4 <__ieee754_atan2+0x128>
   21ad8:	e262a000 	rsb	sl, r2, #0
   21adc:	e3cc7102 	bic	r7, ip, #-2147483648	; 0x80000000
   21ae0:	e18ac002 	orr	ip, sl, r2
   21ae4:	e187cfac 	orr	ip, r7, ip, lsr #31
   21ae8:	e15c0005 	cmp	ip, r5
   21aec:	e59d5000 	ldr	r5, [sp]
   21af0:	8a00002f 	bhi	21bb4 <__ieee754_atan2+0x128>
   21af4:	e284c103 	add	ip, r4, #-1073741824	; 0xc0000000
   21af8:	e28cc601 	add	ip, ip, #1048576	; 0x100000
   21afc:	e19cc003 	orrs	ip, ip, r3
   21b00:	0a000042 	beq	21c10 <__ieee754_atan2+0x184>
   21b04:	e1a01f44 	asr	r1, r4, #30
   21b08:	e2011002 	and	r1, r1, #2
   21b0c:	e1972002 	orrs	r2, r7, r2
   21b10:	e181afa5 	orr	sl, r1, r5, lsr #31
   21b14:	0a000031 	beq	21be0 <__ieee754_atan2+0x154>
   21b18:	e1963003 	orrs	r3, r6, r3
   21b1c:	0a000036 	beq	21bfc <__ieee754_atan2+0x170>
   21b20:	e59f3240 	ldr	r3, [pc, #576]	; 21d68 <__ieee754_atan2+0x2dc>
   21b24:	e1560003 	cmp	r6, r3
   21b28:	0a000044 	beq	21c40 <__ieee754_atan2+0x1b4>
   21b2c:	e59f3234 	ldr	r3, [pc, #564]	; 21d68 <__ieee754_atan2+0x2dc>
   21b30:	e1570003 	cmp	r7, r3
   21b34:	0a000030 	beq	21bfc <__ieee754_atan2+0x170>
   21b38:	e0666007 	rsb	r6, r6, r7
   21b3c:	e1a06a46 	asr	r6, r6, #20
   21b40:	e356003c 	cmp	r6, #60	; 0x3c
   21b44:	ca00003a 	bgt	21c34 <__ieee754_atan2+0x1a8>
   21b48:	e376003c 	cmn	r6, #60	; 0x3c
   21b4c:	a3a06000 	movge	r6, #0
   21b50:	b3a06001 	movlt	r6, #1
   21b54:	e0166fa4 	ands	r6, r6, r4, lsr #31
   21b58:	13a00000 	movne	r0, #0
   21b5c:	13a01000 	movne	r1, #0
   21b60:	0a000053 	beq	21cb4 <__ieee754_atan2+0x228>
   21b64:	e35a0001 	cmp	sl, #1
   21b68:	01a02000 	moveq	r2, r0
   21b6c:	01a09001 	moveq	r9, r1
   21b70:	02828102 	addeq	r8, r2, #-2147483648	; 0x80000000
   21b74:	0a000015 	beq	21bd0 <__ieee754_atan2+0x144>
   21b78:	e35a0002 	cmp	sl, #2
   21b7c:	0a000041 	beq	21c88 <__ieee754_atan2+0x1fc>
   21b80:	e35a0000 	cmp	sl, #0
   21b84:	01a08000 	moveq	r8, r0
   21b88:	01a09001 	moveq	r9, r1
   21b8c:	0a00000f 	beq	21bd0 <__ieee754_atan2+0x144>
   21b90:	e28f3f62 	add	r3, pc, #392	; 0x188
   21b94:	e893000c 	ldm	r3, {r2, r3}
   21b98:	eb000ad5 	bl	246f4 <__aeabi_dsub>
   21b9c:	e28f3f61 	add	r3, pc, #388	; 0x184
   21ba0:	e893000c 	ldm	r3, {r2, r3}
   21ba4:	eb000ad2 	bl	246f4 <__aeabi_dsub>
   21ba8:	e1a08000 	mov	r8, r0
   21bac:	e1a09001 	mov	r9, r1
   21bb0:	ea000006 	b	21bd0 <__ieee754_atan2+0x144>
   21bb4:	e1a00008 	mov	r0, r8
   21bb8:	e1a01009 	mov	r1, r9
   21bbc:	e28d3008 	add	r3, sp, #8
   21bc0:	e893000c 	ldm	r3, {r2, r3}
   21bc4:	eb000acb 	bl	246f8 <__adddf3>
   21bc8:	e1a08000 	mov	r8, r0
   21bcc:	e1a09001 	mov	r9, r1
   21bd0:	e1a00008 	mov	r0, r8
   21bd4:	e1a01009 	mov	r1, r9
   21bd8:	e28dd010 	add	sp, sp, #16
   21bdc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21be0:	e35a0003 	cmp	sl, #3
   21be4:	979ff10a 	ldrls	pc, [pc, sl, lsl #2]
   21be8:	eaffffca 	b	21b18 <__ieee754_atan2+0x8c>
   21bec:	00021bd0 	.word	0x00021bd0
   21bf0:	00021bd0 	.word	0x00021bd0
   21bf4:	00021c28 	.word	0x00021c28
   21bf8:	00021c1c 	.word	0x00021c1c
   21bfc:	e3550000 	cmp	r5, #0
   21c00:	ba00001d 	blt	21c7c <__ieee754_atan2+0x1f0>
   21c04:	e28f9f49 	add	r9, pc, #292	; 0x124
   21c08:	e8990300 	ldm	r9, {r8, r9}
   21c0c:	eaffffef 	b	21bd0 <__ieee754_atan2+0x144>
   21c10:	e28dd010 	add	sp, sp, #16
   21c14:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c18:	ea0007e0 	b	23ba0 <atan>
   21c1c:	e28f9f45 	add	r9, pc, #276	; 0x114
   21c20:	e8990300 	ldm	r9, {r8, r9}
   21c24:	eaffffe9 	b	21bd0 <__ieee754_atan2+0x144>
   21c28:	e28f90f8 	add	r9, pc, #248	; 0xf8
   21c2c:	e8990300 	ldm	r9, {r8, r9}
   21c30:	eaffffe6 	b	21bd0 <__ieee754_atan2+0x144>
   21c34:	e28f10f4 	add	r1, pc, #244	; 0xf4
   21c38:	e8910003 	ldm	r1, {r0, r1}
   21c3c:	eaffffc8 	b	21b64 <__ieee754_atan2+0xd8>
   21c40:	e1570006 	cmp	r7, r6
   21c44:	0a000022 	beq	21cd4 <__ieee754_atan2+0x248>
   21c48:	e35a0003 	cmp	sl, #3
   21c4c:	979ff10a 	ldrls	pc, [pc, sl, lsl #2]
   21c50:	eaffffb5 	b	21b2c <__ieee754_atan2+0xa0>
   21c54:	00021c70 	.word	0x00021c70
   21c58:	00021c64 	.word	0x00021c64
   21c5c:	00021c28 	.word	0x00021c28
   21c60:	00021c1c 	.word	0x00021c1c
   21c64:	e3a08102 	mov	r8, #-2147483648	; 0x80000000
   21c68:	e3a09000 	mov	r9, #0
   21c6c:	eaffffd7 	b	21bd0 <__ieee754_atan2+0x144>
   21c70:	e3a08000 	mov	r8, #0
   21c74:	e3a09000 	mov	r9, #0
   21c78:	eaffffd4 	b	21bd0 <__ieee754_atan2+0x144>
   21c7c:	e28f90bc 	add	r9, pc, #188	; 0xbc
   21c80:	e8990300 	ldm	r9, {r8, r9}
   21c84:	eaffffd1 	b	21bd0 <__ieee754_atan2+0x144>
   21c88:	e28f3090 	add	r3, pc, #144	; 0x90
   21c8c:	e893000c 	ldm	r3, {r2, r3}
   21c90:	eb000a97 	bl	246f4 <__aeabi_dsub>
   21c94:	e1a02000 	mov	r2, r0
   21c98:	e1a03001 	mov	r3, r1
   21c9c:	e28f1084 	add	r1, pc, #132	; 0x84
   21ca0:	e8910003 	ldm	r1, {r0, r1}
   21ca4:	eb000a92 	bl	246f4 <__aeabi_dsub>
   21ca8:	e1a08000 	mov	r8, r0
   21cac:	e1a09001 	mov	r9, r1
   21cb0:	eaffffc6 	b	21bd0 <__ieee754_atan2+0x144>
   21cb4:	e28d3008 	add	r3, sp, #8
   21cb8:	e893000c 	ldm	r3, {r2, r3}
   21cbc:	e1a00008 	mov	r0, r8
   21cc0:	e1a01009 	mov	r1, r9
   21cc4:	eb000c23 	bl	24d58 <__aeabi_ddiv>
   21cc8:	eb0008d2 	bl	24018 <fabs>
   21ccc:	eb0007b3 	bl	23ba0 <atan>
   21cd0:	eaffffa3 	b	21b64 <__ieee754_atan2+0xd8>
   21cd4:	e35a0003 	cmp	sl, #3
   21cd8:	979ff10a 	ldrls	pc, [pc, sl, lsl #2]
   21cdc:	eaffffc6 	b	21bfc <__ieee754_atan2+0x170>
   21ce0:	00021d14 	.word	0x00021d14
   21ce4:	00021d08 	.word	0x00021d08
   21ce8:	00021cfc 	.word	0x00021cfc
   21cec:	00021cf0 	.word	0x00021cf0
   21cf0:	e28f9050 	add	r9, pc, #80	; 0x50
   21cf4:	e8990300 	ldm	r9, {r8, r9}
   21cf8:	eaffffb4 	b	21bd0 <__ieee754_atan2+0x144>
   21cfc:	e28f904c 	add	r9, pc, #76	; 0x4c
   21d00:	e8990300 	ldm	r9, {r8, r9}
   21d04:	eaffffb1 	b	21bd0 <__ieee754_atan2+0x144>
   21d08:	e28f9048 	add	r9, pc, #72	; 0x48
   21d0c:	e8990300 	ldm	r9, {r8, r9}
   21d10:	eaffffae 	b	21bd0 <__ieee754_atan2+0x144>
   21d14:	e28f9044 	add	r9, pc, #68	; 0x44
   21d18:	e8990300 	ldm	r9, {r8, r9}
   21d1c:	eaffffab 	b	21bd0 <__ieee754_atan2+0x144>
   21d20:	3ca1a626 	.word	0x3ca1a626
   21d24:	33145c07 	.word	0x33145c07
   21d28:	400921fb 	.word	0x400921fb
   21d2c:	54442d18 	.word	0x54442d18
   21d30:	3ff921fb 	.word	0x3ff921fb
   21d34:	54442d18 	.word	0x54442d18
   21d38:	c00921fb 	.word	0xc00921fb
   21d3c:	54442d18 	.word	0x54442d18
   21d40:	bff921fb 	.word	0xbff921fb
   21d44:	54442d18 	.word	0x54442d18
   21d48:	c002d97c 	.word	0xc002d97c
   21d4c:	7f3321d2 	.word	0x7f3321d2
   21d50:	4002d97c 	.word	0x4002d97c
   21d54:	7f3321d2 	.word	0x7f3321d2
   21d58:	bfe921fb 	.word	0xbfe921fb
   21d5c:	54442d18 	.word	0x54442d18
   21d60:	3fe921fb 	.word	0x3fe921fb
   21d64:	54442d18 	.word	0x54442d18
   21d68:	7ff00000 	.word	0x7ff00000

00021d6c <__ieee754_rem_pio2>:
   21d6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d70:	e59f33a8 	ldr	r3, [pc, #936]	; 22120 <__ieee754_rem_pio2+0x3b4>
   21d74:	e3c06102 	bic	r6, r0, #-2147483648	; 0x80000000
   21d78:	e1560003 	cmp	r6, r3
   21d7c:	e24dd040 	sub	sp, sp, #64	; 0x40
   21d80:	e1a04000 	mov	r4, r0
   21d84:	e1a05001 	mov	r5, r1
   21d88:	e1a08000 	mov	r8, r0
   21d8c:	e1a07002 	mov	r7, r2
   21d90:	da000073 	ble	21f64 <__ieee754_rem_pio2+0x1f8>
   21d94:	e59f3388 	ldr	r3, [pc, #904]	; 22124 <__ieee754_rem_pio2+0x3b8>
   21d98:	e1560003 	cmp	r6, r3
   21d9c:	ca000019 	bgt	21e08 <__ieee754_rem_pio2+0x9c>
   21da0:	e3500000 	cmp	r0, #0
   21da4:	e28f3fd9 	add	r3, pc, #868	; 0x364
   21da8:	e893000c 	ldm	r3, {r2, r3}
   21dac:	da00014b 	ble	222e0 <__ieee754_rem_pio2+0x574>
   21db0:	eb000a4f 	bl	246f4 <__aeabi_dsub>
   21db4:	e59f3388 	ldr	r3, [pc, #904]	; 22144 <__ieee754_rem_pio2+0x3d8>
   21db8:	e1560003 	cmp	r6, r3
   21dbc:	e1a04000 	mov	r4, r0
   21dc0:	e1a05001 	mov	r5, r1
   21dc4:	0a000077 	beq	21fa8 <__ieee754_rem_pio2+0x23c>
   21dc8:	e28f3d0e 	add	r3, pc, #896	; 0x380
   21dcc:	e893000c 	ldm	r3, {r2, r3}
   21dd0:	eb000a47 	bl	246f4 <__aeabi_dsub>
   21dd4:	e1a02000 	mov	r2, r0
   21dd8:	e1a03001 	mov	r3, r1
   21ddc:	e8870003 	stm	r7, {r0, r1}
   21de0:	e1a00004 	mov	r0, r4
   21de4:	e1a01005 	mov	r1, r5
   21de8:	eb000a41 	bl	246f4 <__aeabi_dsub>
   21dec:	e28f3fd7 	add	r3, pc, #860	; 0x35c
   21df0:	e893000c 	ldm	r3, {r2, r3}
   21df4:	eb000a3e 	bl	246f4 <__aeabi_dsub>
   21df8:	e3a04001 	mov	r4, #1
   21dfc:	e5870008 	str	r0, [r7, #8]
   21e00:	e587100c 	str	r1, [r7, #12]
   21e04:	ea00005c 	b	21f7c <__ieee754_rem_pio2+0x210>
   21e08:	e59f3318 	ldr	r3, [pc, #792]	; 22128 <__ieee754_rem_pio2+0x3bc>
   21e0c:	e1560003 	cmp	r6, r3
   21e10:	da000079 	ble	21ffc <__ieee754_rem_pio2+0x290>
   21e14:	e59f3310 	ldr	r3, [pc, #784]	; 2212c <__ieee754_rem_pio2+0x3c0>
   21e18:	e1560003 	cmp	r6, r3
   21e1c:	ca000059 	bgt	21f88 <__ieee754_rem_pio2+0x21c>
   21e20:	e1a09a46 	asr	r9, r6, #20
   21e24:	e2499e41 	sub	r9, r9, #1040	; 0x410
   21e28:	e2499006 	sub	r9, r9, #6
   21e2c:	e046aa09 	sub	sl, r6, r9, lsl #20
   21e30:	e1a0000a 	mov	r0, sl
   21e34:	e1a0b001 	mov	fp, r1
   21e38:	eb000c92 	bl	25088 <__aeabi_d2iz>
   21e3c:	eb000aef 	bl	24a00 <__aeabi_i2d>
   21e40:	e1a04000 	mov	r4, r0
   21e44:	e1a05001 	mov	r5, r1
   21e48:	e1a02000 	mov	r2, r0
   21e4c:	e1a03001 	mov	r3, r1
   21e50:	e1a0000a 	mov	r0, sl
   21e54:	e1a0100b 	mov	r1, fp
   21e58:	e58d4028 	str	r4, [sp, #40]	; 0x28
   21e5c:	e58d502c 	str	r5, [sp, #44]	; 0x2c
   21e60:	eb000a23 	bl	246f4 <__aeabi_dsub>
   21e64:	e59f22c4 	ldr	r2, [pc, #708]	; 22130 <__ieee754_rem_pio2+0x3c4>
   21e68:	e3a03000 	mov	r3, #0
   21e6c:	eb000b1e 	bl	24aec <__aeabi_dmul>
   21e70:	e1a04000 	mov	r4, r0
   21e74:	e1a05001 	mov	r5, r1
   21e78:	eb000c82 	bl	25088 <__aeabi_d2iz>
   21e7c:	eb000adf 	bl	24a00 <__aeabi_i2d>
   21e80:	e1a02000 	mov	r2, r0
   21e84:	e1a03001 	mov	r3, r1
   21e88:	e1a0a000 	mov	sl, r0
   21e8c:	e1a0b001 	mov	fp, r1
   21e90:	e1a00004 	mov	r0, r4
   21e94:	e1a01005 	mov	r1, r5
   21e98:	e58da030 	str	sl, [sp, #48]	; 0x30
   21e9c:	e58db034 	str	fp, [sp, #52]	; 0x34
   21ea0:	eb000a13 	bl	246f4 <__aeabi_dsub>
   21ea4:	e59f2284 	ldr	r2, [pc, #644]	; 22130 <__ieee754_rem_pio2+0x3c4>
   21ea8:	e3a03000 	mov	r3, #0
   21eac:	eb000b0e 	bl	24aec <__aeabi_dmul>
   21eb0:	e3a02000 	mov	r2, #0
   21eb4:	e3a03000 	mov	r3, #0
   21eb8:	e58d0038 	str	r0, [sp, #56]	; 0x38
   21ebc:	e58d103c 	str	r1, [sp, #60]	; 0x3c
   21ec0:	eb000c29 	bl	24f6c <__cmpdf2>
   21ec4:	e3500000 	cmp	r0, #0
   21ec8:	13a04003 	movne	r4, #3
   21ecc:	1a000010 	bne	21f14 <__ieee754_rem_pio2+0x1a8>
   21ed0:	e1a0000a 	mov	r0, sl
   21ed4:	e1a0100b 	mov	r1, fp
   21ed8:	e3a02000 	mov	r2, #0
   21edc:	e3a03000 	mov	r3, #0
   21ee0:	eb000c21 	bl	24f6c <__cmpdf2>
   21ee4:	e3a04003 	mov	r4, #3
   21ee8:	e3500000 	cmp	r0, #0
   21eec:	e28d5030 	add	r5, sp, #48	; 0x30
   21ef0:	e2444001 	sub	r4, r4, #1
   21ef4:	1a000006 	bne	21f14 <__ieee754_rem_pio2+0x1a8>
   21ef8:	e9350003 	ldmdb	r5!, {r0, r1}
   21efc:	e3a02000 	mov	r2, #0
   21f00:	e3a03000 	mov	r3, #0
   21f04:	eb000c18 	bl	24f6c <__cmpdf2>
   21f08:	e3500000 	cmp	r0, #0
   21f0c:	e2444001 	sub	r4, r4, #1
   21f10:	0afffff8 	beq	21ef8 <__ieee754_rem_pio2+0x18c>
   21f14:	e3a0c002 	mov	ip, #2
   21f18:	e58dc000 	str	ip, [sp]
   21f1c:	e59fc210 	ldr	ip, [pc, #528]	; 22134 <__ieee754_rem_pio2+0x3c8>
   21f20:	e1a03004 	mov	r3, r4
   21f24:	e28d0028 	add	r0, sp, #40	; 0x28
   21f28:	e1a01007 	mov	r1, r7
   21f2c:	e1a02009 	mov	r2, r9
   21f30:	e58dc004 	str	ip, [sp, #4]
   21f34:	eb000278 	bl	2291c <__kernel_rem_pio2>
   21f38:	e3580000 	cmp	r8, #0
   21f3c:	e1a04000 	mov	r4, r0
   21f40:	aa00000d 	bge	21f7c <__ieee754_rem_pio2+0x210>
   21f44:	e5972000 	ldr	r2, [r7]
   21f48:	e5973008 	ldr	r3, [r7, #8]
   21f4c:	e2822102 	add	r2, r2, #-2147483648	; 0x80000000
   21f50:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
   21f54:	e5872000 	str	r2, [r7]
   21f58:	e5873008 	str	r3, [r7, #8]
   21f5c:	e2604000 	rsb	r4, r0, #0
   21f60:	ea000005 	b	21f7c <__ieee754_rem_pio2+0x210>
   21f64:	e8820030 	stm	r2, {r4, r5}
   21f68:	e3a03000 	mov	r3, #0
   21f6c:	e3a02000 	mov	r2, #0
   21f70:	e5872008 	str	r2, [r7, #8]
   21f74:	e587300c 	str	r3, [r7, #12]
   21f78:	e3a04000 	mov	r4, #0
   21f7c:	e1a00004 	mov	r0, r4
   21f80:	e28dd040 	add	sp, sp, #64	; 0x40
   21f84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f88:	e1a02000 	mov	r2, r0
   21f8c:	e1a03001 	mov	r3, r1
   21f90:	eb0009d7 	bl	246f4 <__aeabi_dsub>
   21f94:	e3a04000 	mov	r4, #0
   21f98:	e5870008 	str	r0, [r7, #8]
   21f9c:	e587100c 	str	r1, [r7, #12]
   21fa0:	e8870003 	stm	r7, {r0, r1}
   21fa4:	eafffff4 	b	21f7c <__ieee754_rem_pio2+0x210>
   21fa8:	e28f3f6a 	add	r3, pc, #424	; 0x1a8
   21fac:	e893000c 	ldm	r3, {r2, r3}
   21fb0:	eb0009cf 	bl	246f4 <__aeabi_dsub>
   21fb4:	e28f3f69 	add	r3, pc, #420	; 0x1a4
   21fb8:	e893000c 	ldm	r3, {r2, r3}
   21fbc:	e1a04000 	mov	r4, r0
   21fc0:	e1a05001 	mov	r5, r1
   21fc4:	eb0009ca 	bl	246f4 <__aeabi_dsub>
   21fc8:	e1a02000 	mov	r2, r0
   21fcc:	e1a03001 	mov	r3, r1
   21fd0:	e8870003 	stm	r7, {r0, r1}
   21fd4:	e1a00004 	mov	r0, r4
   21fd8:	e1a01005 	mov	r1, r5
   21fdc:	eb0009c4 	bl	246f4 <__aeabi_dsub>
   21fe0:	e28f3f5e 	add	r3, pc, #376	; 0x178
   21fe4:	e893000c 	ldm	r3, {r2, r3}
   21fe8:	eb0009c1 	bl	246f4 <__aeabi_dsub>
   21fec:	e3a04001 	mov	r4, #1
   21ff0:	e5870008 	str	r0, [r7, #8]
   21ff4:	e587100c 	str	r1, [r7, #12]
   21ff8:	eaffffdf 	b	21f7c <__ieee754_rem_pio2+0x210>
   21ffc:	eb000805 	bl	24018 <fabs>
   22000:	e28f3e11 	add	r3, pc, #272	; 0x110
   22004:	e893000c 	ldm	r3, {r2, r3}
   22008:	e1a0a000 	mov	sl, r0
   2200c:	e1a0b001 	mov	fp, r1
   22010:	eb000ab5 	bl	24aec <__aeabi_dmul>
   22014:	e59f211c 	ldr	r2, [pc, #284]	; 22138 <__ieee754_rem_pio2+0x3cc>
   22018:	e3a03000 	mov	r3, #0
   2201c:	eb0009b5 	bl	246f8 <__adddf3>
   22020:	eb000c18 	bl	25088 <__aeabi_d2iz>
   22024:	e1a04000 	mov	r4, r0
   22028:	eb000a74 	bl	24a00 <__aeabi_i2d>
   2202c:	e28f30dc 	add	r3, pc, #220	; 0xdc
   22030:	e893000c 	ldm	r3, {r2, r3}
   22034:	e58d0018 	str	r0, [sp, #24]
   22038:	e58d101c 	str	r1, [sp, #28]
   2203c:	eb000aaa 	bl	24aec <__aeabi_dmul>
   22040:	e1a02000 	mov	r2, r0
   22044:	e1a03001 	mov	r3, r1
   22048:	e1a0000a 	mov	r0, sl
   2204c:	e1a0100b 	mov	r1, fp
   22050:	eb0009a7 	bl	246f4 <__aeabi_dsub>
   22054:	e28f30f4 	add	r3, pc, #244	; 0xf4
   22058:	e893000c 	ldm	r3, {r2, r3}
   2205c:	e58d0008 	str	r0, [sp, #8]
   22060:	e58d100c 	str	r1, [sp, #12]
   22064:	e28d1018 	add	r1, sp, #24
   22068:	e8910003 	ldm	r1, {r0, r1}
   2206c:	eb000a9e 	bl	24aec <__aeabi_dmul>
   22070:	e354001f 	cmp	r4, #31
   22074:	e58d0010 	str	r0, [sp, #16]
   22078:	e58d1014 	str	r1, [sp, #20]
   2207c:	e28d1008 	add	r1, sp, #8
   22080:	e8910003 	ldm	r1, {r0, r1}
   22084:	ca000037 	bgt	22168 <__ieee754_rem_pio2+0x3fc>
   22088:	e59f30ac 	ldr	r3, [pc, #172]	; 2213c <__ieee754_rem_pio2+0x3d0>
   2208c:	e2442001 	sub	r2, r4, #1
   22090:	e7933102 	ldr	r3, [r3, r2, lsl #2]
   22094:	e1530006 	cmp	r3, r6
   22098:	0a000032 	beq	22168 <__ieee754_rem_pio2+0x3fc>
   2209c:	e28d3010 	add	r3, sp, #16
   220a0:	e893000c 	ldm	r3, {r2, r3}
   220a4:	eb000992 	bl	246f4 <__aeabi_dsub>
   220a8:	e1a02000 	mov	r2, r0
   220ac:	e1a03001 	mov	r3, r1
   220b0:	e887000c 	stm	r7, {r2, r3}
   220b4:	e1a05000 	mov	r5, r0
   220b8:	e1a0a001 	mov	sl, r1
   220bc:	e1a02005 	mov	r2, r5
   220c0:	e1a0300a 	mov	r3, sl
   220c4:	e28d1008 	add	r1, sp, #8
   220c8:	e8910003 	ldm	r1, {r0, r1}
   220cc:	eb000988 	bl	246f4 <__aeabi_dsub>
   220d0:	e28d3010 	add	r3, sp, #16
   220d4:	e893000c 	ldm	r3, {r2, r3}
   220d8:	eb000985 	bl	246f4 <__aeabi_dsub>
   220dc:	e3580000 	cmp	r8, #0
   220e0:	e1a02000 	mov	r2, r0
   220e4:	e1a03001 	mov	r3, r1
   220e8:	e5872008 	str	r2, [r7, #8]
   220ec:	e587300c 	str	r3, [r7, #12]
   220f0:	aaffffa1 	bge	21f7c <__ieee754_rem_pio2+0x210>
   220f4:	e2855102 	add	r5, r5, #-2147483648	; 0x80000000
   220f8:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
   220fc:	e8870420 	stm	r7, {r5, sl}
   22100:	e5870008 	str	r0, [r7, #8]
   22104:	e587100c 	str	r1, [r7, #12]
   22108:	e2644000 	rsb	r4, r4, #0
   2210c:	eaffff9a 	b	21f7c <__ieee754_rem_pio2+0x210>
   22110:	3ff921fb 	.word	0x3ff921fb
   22114:	54400000 	.word	0x54400000
   22118:	3fe45f30 	.word	0x3fe45f30
   2211c:	6dc9c883 	.word	0x6dc9c883
   22120:	3fe921fb 	.word	0x3fe921fb
   22124:	4002d97b 	.word	0x4002d97b
   22128:	413921fb 	.word	0x413921fb
   2212c:	7fefffff 	.word	0x7fefffff
   22130:	41700000 	.word	0x41700000
   22134:	00025c20 	.word	0x00025c20
   22138:	3fe00000 	.word	0x3fe00000
   2213c:	00025ba0 	.word	0x00025ba0
   22140:	3ba3198a 	.word	0x3ba3198a
   22144:	3ff921fb 	.word	0x3ff921fb
   22148:	397b839a 	.word	0x397b839a
   2214c:	252049c1 	.word	0x252049c1
   22150:	3dd0b461 	.word	0x3dd0b461
   22154:	1a626331 	.word	0x1a626331
   22158:	3dd0b461 	.word	0x3dd0b461
   2215c:	1a600000 	.word	0x1a600000
   22160:	3ba3198a 	.word	0x3ba3198a
   22164:	2e037073 	.word	0x2e037073
   22168:	e28d3010 	add	r3, sp, #16
   2216c:	e893000c 	ldm	r3, {r2, r3}
   22170:	eb00095f 	bl	246f4 <__aeabi_dsub>
   22174:	e1a05000 	mov	r5, r0
   22178:	e1a06a46 	asr	r6, r6, #20
   2217c:	e1a03085 	lsl	r3, r5, #1
   22180:	e0463aa3 	sub	r3, r6, r3, lsr #21
   22184:	e3530010 	cmp	r3, #16
   22188:	e1a0a001 	mov	sl, r1
   2218c:	e8870003 	stm	r7, {r0, r1}
   22190:	daffffc9 	ble	220bc <__ieee754_rem_pio2+0x350>
   22194:	e24f3044 	sub	r3, pc, #68	; 0x44
   22198:	e893000c 	ldm	r3, {r2, r3}
   2219c:	e28d1018 	add	r1, sp, #24
   221a0:	e8910003 	ldm	r1, {r0, r1}
   221a4:	eb000a50 	bl	24aec <__aeabi_dmul>
   221a8:	e1a0a000 	mov	sl, r0
   221ac:	e1a0b001 	mov	fp, r1
   221b0:	e1a0200a 	mov	r2, sl
   221b4:	e1a0300b 	mov	r3, fp
   221b8:	e28d1008 	add	r1, sp, #8
   221bc:	e8910003 	ldm	r1, {r0, r1}
   221c0:	eb00094b 	bl	246f4 <__aeabi_dsub>
   221c4:	e58d0020 	str	r0, [sp, #32]
   221c8:	e58d1024 	str	r1, [sp, #36]	; 0x24
   221cc:	e28d3020 	add	r3, sp, #32
   221d0:	e893000c 	ldm	r3, {r2, r3}
   221d4:	e28d1008 	add	r1, sp, #8
   221d8:	e8910003 	ldm	r1, {r0, r1}
   221dc:	eb000944 	bl	246f4 <__aeabi_dsub>
   221e0:	e1a0200a 	mov	r2, sl
   221e4:	e1a0300b 	mov	r3, fp
   221e8:	eb000941 	bl	246f4 <__aeabi_dsub>
   221ec:	e24f3094 	sub	r3, pc, #148	; 0x94
   221f0:	e893000c 	ldm	r3, {r2, r3}
   221f4:	e1a0a000 	mov	sl, r0
   221f8:	e1a0b001 	mov	fp, r1
   221fc:	e28d1018 	add	r1, sp, #24
   22200:	e8910003 	ldm	r1, {r0, r1}
   22204:	eb000a38 	bl	24aec <__aeabi_dmul>
   22208:	e1a0200a 	mov	r2, sl
   2220c:	e1a0300b 	mov	r3, fp
   22210:	eb000937 	bl	246f4 <__aeabi_dsub>
   22214:	e58d0010 	str	r0, [sp, #16]
   22218:	e58d1014 	str	r1, [sp, #20]
   2221c:	e28d3010 	add	r3, sp, #16
   22220:	e893000c 	ldm	r3, {r2, r3}
   22224:	e28d1020 	add	r1, sp, #32
   22228:	e8910003 	ldm	r1, {r0, r1}
   2222c:	eb000930 	bl	246f4 <__aeabi_dsub>
   22230:	e1a03080 	lsl	r3, r0, #1
   22234:	e0466aa3 	sub	r6, r6, r3, lsr #21
   22238:	e3560031 	cmp	r6, #49	; 0x31
   2223c:	e1a05000 	mov	r5, r0
   22240:	e1a0a001 	mov	sl, r1
   22244:	e8870003 	stm	r7, {r0, r1}
   22248:	da00004f 	ble	2238c <__ieee754_rem_pio2+0x620>
   2224c:	e51f2114 	ldr	r2, [pc, #-276]	; 22140 <__ieee754_rem_pio2+0x3d4>
   22250:	e3a0342e 	mov	r3, #771751936	; 0x2e000000
   22254:	e28d1018 	add	r1, sp, #24
   22258:	e8910003 	ldm	r1, {r0, r1}
   2225c:	eb000a22 	bl	24aec <__aeabi_dmul>
   22260:	e1a0a000 	mov	sl, r0
   22264:	e1a0b001 	mov	fp, r1
   22268:	e1a0200a 	mov	r2, sl
   2226c:	e1a0300b 	mov	r3, fp
   22270:	e28d1020 	add	r1, sp, #32
   22274:	e8910003 	ldm	r1, {r0, r1}
   22278:	eb00091d 	bl	246f4 <__aeabi_dsub>
   2227c:	e58d0008 	str	r0, [sp, #8]
   22280:	e58d100c 	str	r1, [sp, #12]
   22284:	e28d3008 	add	r3, sp, #8
   22288:	e893000c 	ldm	r3, {r2, r3}
   2228c:	e28d1020 	add	r1, sp, #32
   22290:	e8910003 	ldm	r1, {r0, r1}
   22294:	eb000916 	bl	246f4 <__aeabi_dsub>
   22298:	e1a0200a 	mov	r2, sl
   2229c:	e1a0300b 	mov	r3, fp
   222a0:	eb000913 	bl	246f4 <__aeabi_dsub>
   222a4:	e24f3f59 	sub	r3, pc, #356	; 0x164
   222a8:	e893000c 	ldm	r3, {r2, r3}
   222ac:	e1a0a000 	mov	sl, r0
   222b0:	e1a0b001 	mov	fp, r1
   222b4:	e28d1018 	add	r1, sp, #24
   222b8:	e8910003 	ldm	r1, {r0, r1}
   222bc:	eb000a0a 	bl	24aec <__aeabi_dmul>
   222c0:	e1a0200a 	mov	r2, sl
   222c4:	e1a0300b 	mov	r3, fp
   222c8:	eb000909 	bl	246f4 <__aeabi_dsub>
   222cc:	e58d0010 	str	r0, [sp, #16]
   222d0:	e58d1014 	str	r1, [sp, #20]
   222d4:	e28d1008 	add	r1, sp, #8
   222d8:	e8910003 	ldm	r1, {r0, r1}
   222dc:	eaffff6e 	b	2209c <__ieee754_rem_pio2+0x330>
   222e0:	eb000904 	bl	246f8 <__adddf3>
   222e4:	e51f31a8 	ldr	r3, [pc, #-424]	; 22144 <__ieee754_rem_pio2+0x3d8>
   222e8:	e1560003 	cmp	r6, r3
   222ec:	e1a04000 	mov	r4, r0
   222f0:	e1a05001 	mov	r5, r1
   222f4:	0a00000f 	beq	22338 <__ieee754_rem_pio2+0x5cc>
   222f8:	e24f3e1b 	sub	r3, pc, #432	; 0x1b0
   222fc:	e893000c 	ldm	r3, {r2, r3}
   22300:	eb0008fc 	bl	246f8 <__adddf3>
   22304:	e1a02000 	mov	r2, r0
   22308:	e1a03001 	mov	r3, r1
   2230c:	e8870003 	stm	r7, {r0, r1}
   22310:	e1a00004 	mov	r0, r4
   22314:	e1a01005 	mov	r1, r5
   22318:	eb0008f5 	bl	246f4 <__aeabi_dsub>
   2231c:	e24f3f75 	sub	r3, pc, #468	; 0x1d4
   22320:	e893000c 	ldm	r3, {r2, r3}
   22324:	eb0008f3 	bl	246f8 <__adddf3>
   22328:	e3e04000 	mvn	r4, #0
   2232c:	e5870008 	str	r0, [r7, #8]
   22330:	e587100c 	str	r1, [r7, #12]
   22334:	eaffff10 	b	21f7c <__ieee754_rem_pio2+0x210>
   22338:	e24f3f7a 	sub	r3, pc, #488	; 0x1e8
   2233c:	e893000c 	ldm	r3, {r2, r3}
   22340:	eb0008ec 	bl	246f8 <__adddf3>
   22344:	e24f3f7b 	sub	r3, pc, #492	; 0x1ec
   22348:	e893000c 	ldm	r3, {r2, r3}
   2234c:	e1a04000 	mov	r4, r0
   22350:	e1a05001 	mov	r5, r1
   22354:	eb0008e7 	bl	246f8 <__adddf3>
   22358:	e1a02000 	mov	r2, r0
   2235c:	e1a03001 	mov	r3, r1
   22360:	e8870003 	stm	r7, {r0, r1}
   22364:	e1a00004 	mov	r0, r4
   22368:	e1a01005 	mov	r1, r5
   2236c:	eb0008e0 	bl	246f4 <__aeabi_dsub>
   22370:	e24f3f86 	sub	r3, pc, #536	; 0x218
   22374:	e893000c 	ldm	r3, {r2, r3}
   22378:	eb0008de 	bl	246f8 <__adddf3>
   2237c:	e3e04000 	mvn	r4, #0
   22380:	e5870008 	str	r0, [r7, #8]
   22384:	e587100c 	str	r1, [r7, #12]
   22388:	eafffefb 	b	21f7c <__ieee754_rem_pio2+0x210>
   2238c:	e28d3020 	add	r3, sp, #32
   22390:	e893000c 	ldm	r3, {r2, r3}
   22394:	e58d2008 	str	r2, [sp, #8]
   22398:	e58d300c 	str	r3, [sp, #12]
   2239c:	eaffff46 	b	220bc <__ieee754_rem_pio2+0x350>

000223a0 <__ieee754_sqrt>:
   223a0:	e59f222c 	ldr	r2, [pc, #556]	; 225d4 <__ieee754_sqrt+0x234>
   223a4:	e59fc228 	ldr	ip, [pc, #552]	; 225d4 <__ieee754_sqrt+0x234>
   223a8:	e0002002 	and	r2, r0, r2
   223ac:	e152000c 	cmp	r2, ip
   223b0:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
   223b4:	e1a03000 	mov	r3, r0
   223b8:	e1a04000 	mov	r4, r0
   223bc:	e1a05001 	mov	r5, r1
   223c0:	e1a06000 	mov	r6, r0
   223c4:	e1a07001 	mov	r7, r1
   223c8:	e1a02001 	mov	r2, r1
   223cc:	0a00006a 	beq	2257c <__ieee754_sqrt+0x1dc>
   223d0:	e3500000 	cmp	r0, #0
   223d4:	da00004f 	ble	22518 <__ieee754_sqrt+0x178>
   223d8:	e1b06a40 	asrs	r6, r0, #20
   223dc:	0a000057 	beq	22540 <__ieee754_sqrt+0x1a0>
   223e0:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
   223e4:	e3160001 	tst	r6, #1
   223e8:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
   223ec:	01a01fa2 	lsreq	r1, r2, #31
   223f0:	e3833601 	orr	r3, r3, #1048576	; 0x100000
   223f4:	01a02082 	lsleq	r2, r2, #1
   223f8:	e2465fff 	sub	r5, r6, #1020	; 0x3fc
   223fc:	00813083 	addeq	r3, r1, r3, lsl #1
   22400:	e2455003 	sub	r5, r5, #3
   22404:	e1a01fa2 	lsr	r1, r2, #31
   22408:	e3a07000 	mov	r7, #0
   2240c:	e0813083 	add	r3, r1, r3, lsl #1
   22410:	e1a050c5 	asr	r5, r5, #1
   22414:	e1a02082 	lsl	r2, r2, #1
   22418:	e3a0c016 	mov	ip, #22
   2241c:	e1a00007 	mov	r0, r7
   22420:	e3a01602 	mov	r1, #2097152	; 0x200000
   22424:	e0804001 	add	r4, r0, r1
   22428:	e1540003 	cmp	r4, r3
   2242c:	e1a06fa2 	lsr	r6, r2, #31
   22430:	d0840001 	addle	r0, r4, r1
   22434:	d0643003 	rsble	r3, r4, r3
   22438:	d0877001 	addle	r7, r7, r1
   2243c:	e25cc001 	subs	ip, ip, #1
   22440:	e0863083 	add	r3, r6, r3, lsl #1
   22444:	e1a02082 	lsl	r2, r2, #1
   22448:	e1a010a1 	lsr	r1, r1, #1
   2244c:	1afffff4 	bne	22424 <__ieee754_sqrt+0x84>
   22450:	e3a06020 	mov	r6, #32
   22454:	e1a0800c 	mov	r8, ip
   22458:	e3a01102 	mov	r1, #-2147483648	; 0x80000000
   2245c:	e1500003 	cmp	r0, r3
   22460:	e0814008 	add	r4, r1, r8
   22464:	ba000002 	blt	22474 <__ieee754_sqrt+0xd4>
   22468:	e1540002 	cmp	r4, r2
   2246c:	91530000 	cmpls	r3, r0
   22470:	1a00000a 	bne	224a0 <__ieee754_sqrt+0x100>
   22474:	e2048102 	and	r8, r4, #-2147483648	; 0x80000000
   22478:	e3580102 	cmp	r8, #-2147483648	; 0x80000000
   2247c:	e0848001 	add	r8, r4, r1
   22480:	0a00001a 	beq	224f0 <__ieee754_sqrt+0x150>
   22484:	e1a0a000 	mov	sl, r0
   22488:	e1540002 	cmp	r4, r2
   2248c:	e0603003 	rsb	r3, r0, r3
   22490:	82433001 	subhi	r3, r3, #1
   22494:	e0642002 	rsb	r2, r4, r2
   22498:	e08cc001 	add	ip, ip, r1
   2249c:	e1a0000a 	mov	r0, sl
   224a0:	e1a04fa2 	lsr	r4, r2, #31
   224a4:	e2566001 	subs	r6, r6, #1
   224a8:	e0843083 	add	r3, r4, r3, lsl #1
   224ac:	e1a02082 	lsl	r2, r2, #1
   224b0:	e1a010a1 	lsr	r1, r1, #1
   224b4:	1affffe8 	bne	2245c <__ieee754_sqrt+0xbc>
   224b8:	e1923003 	orrs	r3, r2, r3
   224bc:	1a00000f 	bne	22500 <__ieee754_sqrt+0x160>
   224c0:	e1a060ac 	lsr	r6, ip, #1
   224c4:	e1a010c7 	asr	r1, r7, #1
   224c8:	e28115ff 	add	r1, r1, #1069547520	; 0x3fc00000
   224cc:	e3170001 	tst	r7, #1
   224d0:	e2811602 	add	r1, r1, #2097152	; 0x200000
   224d4:	e0812a05 	add	r2, r1, r5, lsl #20
   224d8:	13866102 	orrne	r6, r6, #-2147483648	; 0x80000000
   224dc:	e1a04002 	mov	r4, r2
   224e0:	e1a05006 	mov	r5, r6
   224e4:	e1a00004 	mov	r0, r4
   224e8:	e1a01005 	mov	r1, r5
   224ec:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
   224f0:	e3580000 	cmp	r8, #0
   224f4:	a280a001 	addge	sl, r0, #1
   224f8:	aaffffe2 	bge	22488 <__ieee754_sqrt+0xe8>
   224fc:	eaffffe0 	b	22484 <__ieee754_sqrt+0xe4>
   22500:	e37c0001 	cmn	ip, #1
   22504:	02877001 	addeq	r7, r7, #1
   22508:	0affffed 	beq	224c4 <__ieee754_sqrt+0x124>
   2250c:	e20c3001 	and	r3, ip, #1
   22510:	e083c00c 	add	ip, r3, ip
   22514:	eaffffe9 	b	224c0 <__ieee754_sqrt+0x120>
   22518:	e3c0c102 	bic	ip, r0, #-2147483648	; 0x80000000
   2251c:	e19cc001 	orrs	ip, ip, r1
   22520:	0affffef 	beq	224e4 <__ieee754_sqrt+0x144>
   22524:	e3500000 	cmp	r0, #0
   22528:	1a000020 	bne	225b0 <__ieee754_sqrt+0x210>
   2252c:	e1a035a2 	lsr	r3, r2, #11
   22530:	e3530000 	cmp	r3, #0
   22534:	e2466015 	sub	r6, r6, #21
   22538:	e1a02a82 	lsl	r2, r2, #21
   2253c:	0afffffa 	beq	2252c <__ieee754_sqrt+0x18c>
   22540:	e2131601 	ands	r1, r3, #1048576	; 0x100000
   22544:	13a0c020 	movne	ip, #32
   22548:	13a00001 	movne	r0, #1
   2254c:	13a01000 	movne	r1, #0
   22550:	1a000005 	bne	2256c <__ieee754_sqrt+0x1cc>
   22554:	e1a03083 	lsl	r3, r3, #1
   22558:	e3130601 	tst	r3, #1048576	; 0x100000
   2255c:	e2811001 	add	r1, r1, #1
   22560:	0afffffb 	beq	22554 <__ieee754_sqrt+0x1b4>
   22564:	e2610001 	rsb	r0, r1, #1
   22568:	e261c020 	rsb	ip, r1, #32
   2256c:	e1833c32 	orr	r3, r3, r2, lsr ip
   22570:	e0866000 	add	r6, r6, r0
   22574:	e1a02112 	lsl	r2, r2, r1
   22578:	eaffff98 	b	223e0 <__ieee754_sqrt+0x40>
   2257c:	e1a02000 	mov	r2, r0
   22580:	e1a03001 	mov	r3, r1
   22584:	eb000958 	bl	24aec <__aeabi_dmul>
   22588:	e1a02000 	mov	r2, r0
   2258c:	e1a03001 	mov	r3, r1
   22590:	e1a00004 	mov	r0, r4
   22594:	e1a01005 	mov	r1, r5
   22598:	eb000856 	bl	246f8 <__adddf3>
   2259c:	e1a04000 	mov	r4, r0
   225a0:	e1a05001 	mov	r5, r1
   225a4:	e1a00004 	mov	r0, r4
   225a8:	e1a01005 	mov	r1, r5
   225ac:	e8bd85f0 	pop	{r4, r5, r6, r7, r8, sl, pc}
   225b0:	e1a02000 	mov	r2, r0
   225b4:	e1a03001 	mov	r3, r1
   225b8:	eb00084d 	bl	246f4 <__aeabi_dsub>
   225bc:	e1a02000 	mov	r2, r0
   225c0:	e1a03001 	mov	r3, r1
   225c4:	eb0009e3 	bl	24d58 <__aeabi_ddiv>
   225c8:	e1a04000 	mov	r4, r0
   225cc:	e1a05001 	mov	r5, r1
   225d0:	eaffffc3 	b	224e4 <__ieee754_sqrt+0x144>
   225d4:	7ff00000 	.word	0x7ff00000

000225d8 <__kernel_cos>:
   225d8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225dc:	e3c04102 	bic	r4, r0, #-2147483648	; 0x80000000
   225e0:	e24dd018 	sub	sp, sp, #24
   225e4:	e35405f9 	cmp	r4, #1044381696	; 0x3e400000
   225e8:	e1a08000 	mov	r8, r0
   225ec:	e1a09001 	mov	r9, r1
   225f0:	e1a05001 	mov	r5, r1
   225f4:	e88d000c 	stm	sp, {r2, r3}
   225f8:	aa00004e 	bge	22738 <__kernel_cos+0x160>
   225fc:	eb000aa1 	bl	25088 <__aeabi_d2iz>
   22600:	e3500000 	cmp	r0, #0
   22604:	0a0000af 	beq	228c8 <__kernel_cos+0x2f0>
   22608:	e1a02008 	mov	r2, r8
   2260c:	e1a03009 	mov	r3, r9
   22610:	e1a00008 	mov	r0, r8
   22614:	e1a01009 	mov	r1, r9
   22618:	eb000933 	bl	24aec <__aeabi_dmul>
   2261c:	e28f3e2b 	add	r3, pc, #688	; 0x2b0
   22620:	e893000c 	ldm	r3, {r2, r3}
   22624:	e1a06000 	mov	r6, r0
   22628:	e1a07001 	mov	r7, r1
   2262c:	eb00092e 	bl	24aec <__aeabi_dmul>
   22630:	e28f3fa9 	add	r3, pc, #676	; 0x2a4
   22634:	e893000c 	ldm	r3, {r2, r3}
   22638:	eb00082e 	bl	246f8 <__adddf3>
   2263c:	e1a02006 	mov	r2, r6
   22640:	e1a03007 	mov	r3, r7
   22644:	eb000928 	bl	24aec <__aeabi_dmul>
   22648:	e28f3fa5 	add	r3, pc, #660	; 0x294
   2264c:	e893000c 	ldm	r3, {r2, r3}
   22650:	eb000827 	bl	246f4 <__aeabi_dsub>
   22654:	e1a02006 	mov	r2, r6
   22658:	e1a03007 	mov	r3, r7
   2265c:	eb000922 	bl	24aec <__aeabi_dmul>
   22660:	e28f3fa1 	add	r3, pc, #644	; 0x284
   22664:	e893000c 	ldm	r3, {r2, r3}
   22668:	eb000822 	bl	246f8 <__adddf3>
   2266c:	e1a02006 	mov	r2, r6
   22670:	e1a03007 	mov	r3, r7
   22674:	eb00091c 	bl	24aec <__aeabi_dmul>
   22678:	e28f3f9d 	add	r3, pc, #628	; 0x274
   2267c:	e893000c 	ldm	r3, {r2, r3}
   22680:	eb00081b 	bl	246f4 <__aeabi_dsub>
   22684:	e1a02006 	mov	r2, r6
   22688:	e1a03007 	mov	r3, r7
   2268c:	eb000916 	bl	24aec <__aeabi_dmul>
   22690:	e28f3f99 	add	r3, pc, #612	; 0x264
   22694:	e893000c 	ldm	r3, {r2, r3}
   22698:	eb000816 	bl	246f8 <__adddf3>
   2269c:	e1a02006 	mov	r2, r6
   226a0:	e1a03007 	mov	r3, r7
   226a4:	eb000910 	bl	24aec <__aeabi_dmul>
   226a8:	e1a0a000 	mov	sl, r0
   226ac:	e1a0b001 	mov	fp, r1
   226b0:	e1a00006 	mov	r0, r6
   226b4:	e1a01007 	mov	r1, r7
   226b8:	e59f2244 	ldr	r2, [pc, #580]	; 22904 <__kernel_cos+0x32c>
   226bc:	e3a03000 	mov	r3, #0
   226c0:	eb000909 	bl	24aec <__aeabi_dmul>
   226c4:	e1a0200a 	mov	r2, sl
   226c8:	e58d0008 	str	r0, [sp, #8]
   226cc:	e58d100c 	str	r1, [sp, #12]
   226d0:	e1a0300b 	mov	r3, fp
   226d4:	e1a00006 	mov	r0, r6
   226d8:	e1a01007 	mov	r1, r7
   226dc:	eb000902 	bl	24aec <__aeabi_dmul>
   226e0:	e89d000c 	ldm	sp, {r2, r3}
   226e4:	e1a04000 	mov	r4, r0
   226e8:	e1a05001 	mov	r5, r1
   226ec:	e1a00008 	mov	r0, r8
   226f0:	e1a01009 	mov	r1, r9
   226f4:	eb0008fc 	bl	24aec <__aeabi_dmul>
   226f8:	e1a02000 	mov	r2, r0
   226fc:	e1a03001 	mov	r3, r1
   22700:	e1a00004 	mov	r0, r4
   22704:	e1a01005 	mov	r1, r5
   22708:	eb0007f9 	bl	246f4 <__aeabi_dsub>
   2270c:	e1a02000 	mov	r2, r0
   22710:	e1a03001 	mov	r3, r1
   22714:	e28d1008 	add	r1, sp, #8
   22718:	e8910003 	ldm	r1, {r0, r1}
   2271c:	eb0007f4 	bl	246f4 <__aeabi_dsub>
   22720:	e1a02000 	mov	r2, r0
   22724:	e1a03001 	mov	r3, r1
   22728:	e59f01d8 	ldr	r0, [pc, #472]	; 22908 <__kernel_cos+0x330>
   2272c:	e3a01000 	mov	r1, #0
   22730:	eb0007ef 	bl	246f4 <__aeabi_dsub>
   22734:	ea00005a 	b	228a4 <__kernel_cos+0x2cc>
   22738:	e1a02000 	mov	r2, r0
   2273c:	e1a03001 	mov	r3, r1
   22740:	eb0008e9 	bl	24aec <__aeabi_dmul>
   22744:	e28f3f62 	add	r3, pc, #392	; 0x188
   22748:	e893000c 	ldm	r3, {r2, r3}
   2274c:	e1a06000 	mov	r6, r0
   22750:	e1a07001 	mov	r7, r1
   22754:	eb0008e4 	bl	24aec <__aeabi_dmul>
   22758:	e28f3f5f 	add	r3, pc, #380	; 0x17c
   2275c:	e893000c 	ldm	r3, {r2, r3}
   22760:	eb0007e4 	bl	246f8 <__adddf3>
   22764:	e1a02006 	mov	r2, r6
   22768:	e1a03007 	mov	r3, r7
   2276c:	eb0008de 	bl	24aec <__aeabi_dmul>
   22770:	e28f3f5b 	add	r3, pc, #364	; 0x16c
   22774:	e893000c 	ldm	r3, {r2, r3}
   22778:	eb0007dd 	bl	246f4 <__aeabi_dsub>
   2277c:	e1a02006 	mov	r2, r6
   22780:	e1a03007 	mov	r3, r7
   22784:	eb0008d8 	bl	24aec <__aeabi_dmul>
   22788:	e28f3f57 	add	r3, pc, #348	; 0x15c
   2278c:	e893000c 	ldm	r3, {r2, r3}
   22790:	eb0007d8 	bl	246f8 <__adddf3>
   22794:	e1a02006 	mov	r2, r6
   22798:	e1a03007 	mov	r3, r7
   2279c:	eb0008d2 	bl	24aec <__aeabi_dmul>
   227a0:	e28f3f53 	add	r3, pc, #332	; 0x14c
   227a4:	e893000c 	ldm	r3, {r2, r3}
   227a8:	eb0007d1 	bl	246f4 <__aeabi_dsub>
   227ac:	e1a02006 	mov	r2, r6
   227b0:	e1a03007 	mov	r3, r7
   227b4:	eb0008cc 	bl	24aec <__aeabi_dmul>
   227b8:	e28f3f4f 	add	r3, pc, #316	; 0x13c
   227bc:	e893000c 	ldm	r3, {r2, r3}
   227c0:	eb0007cc 	bl	246f8 <__adddf3>
   227c4:	e1a03007 	mov	r3, r7
   227c8:	e1a02006 	mov	r2, r6
   227cc:	eb0008c6 	bl	24aec <__aeabi_dmul>
   227d0:	e59f3134 	ldr	r3, [pc, #308]	; 2290c <__kernel_cos+0x334>
   227d4:	e1540003 	cmp	r4, r3
   227d8:	e1a0a000 	mov	sl, r0
   227dc:	e1a0b001 	mov	fp, r1
   227e0:	daffffb2 	ble	226b0 <__kernel_cos+0xd8>
   227e4:	e59f3124 	ldr	r3, [pc, #292]	; 22910 <__kernel_cos+0x338>
   227e8:	e1540003 	cmp	r4, r3
   227ec:	ca00002e 	bgt	228ac <__kernel_cos+0x2d4>
   227f0:	e2442602 	sub	r2, r4, #2097152	; 0x200000
   227f4:	e3a03000 	mov	r3, #0
   227f8:	e59f0108 	ldr	r0, [pc, #264]	; 22908 <__kernel_cos+0x330>
   227fc:	e3a01000 	mov	r1, #0
   22800:	e1a04002 	mov	r4, r2
   22804:	e1a05003 	mov	r5, r3
   22808:	eb0007b9 	bl	246f4 <__aeabi_dsub>
   2280c:	e58d0010 	str	r0, [sp, #16]
   22810:	e58d1014 	str	r1, [sp, #20]
   22814:	e59f20e8 	ldr	r2, [pc, #232]	; 22904 <__kernel_cos+0x32c>
   22818:	e3a03000 	mov	r3, #0
   2281c:	e1a00006 	mov	r0, r6
   22820:	e1a01007 	mov	r1, r7
   22824:	eb0008b0 	bl	24aec <__aeabi_dmul>
   22828:	e1a02004 	mov	r2, r4
   2282c:	e1a03005 	mov	r3, r5
   22830:	eb0007af 	bl	246f4 <__aeabi_dsub>
   22834:	e1a0200a 	mov	r2, sl
   22838:	e58d0008 	str	r0, [sp, #8]
   2283c:	e58d100c 	str	r1, [sp, #12]
   22840:	e1a0300b 	mov	r3, fp
   22844:	e1a00006 	mov	r0, r6
   22848:	e1a01007 	mov	r1, r7
   2284c:	eb0008a6 	bl	24aec <__aeabi_dmul>
   22850:	e89d000c 	ldm	sp, {r2, r3}
   22854:	e1a04000 	mov	r4, r0
   22858:	e1a05001 	mov	r5, r1
   2285c:	e1a00008 	mov	r0, r8
   22860:	e1a01009 	mov	r1, r9
   22864:	eb0008a0 	bl	24aec <__aeabi_dmul>
   22868:	e1a02000 	mov	r2, r0
   2286c:	e1a03001 	mov	r3, r1
   22870:	e1a00004 	mov	r0, r4
   22874:	e1a01005 	mov	r1, r5
   22878:	eb00079d 	bl	246f4 <__aeabi_dsub>
   2287c:	e1a02000 	mov	r2, r0
   22880:	e1a03001 	mov	r3, r1
   22884:	e28d1008 	add	r1, sp, #8
   22888:	e8910003 	ldm	r1, {r0, r1}
   2288c:	eb000798 	bl	246f4 <__aeabi_dsub>
   22890:	e1a02000 	mov	r2, r0
   22894:	e1a03001 	mov	r3, r1
   22898:	e28d1010 	add	r1, sp, #16
   2289c:	e8910003 	ldm	r1, {r0, r1}
   228a0:	eb000793 	bl	246f4 <__aeabi_dsub>
   228a4:	e28dd018 	add	sp, sp, #24
   228a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228ac:	e59f3060 	ldr	r3, [pc, #96]	; 22914 <__kernel_cos+0x33c>
   228b0:	e3a04000 	mov	r4, #0
   228b4:	e58d3010 	str	r3, [sp, #16]
   228b8:	e58d4014 	str	r4, [sp, #20]
   228bc:	e3a05000 	mov	r5, #0
   228c0:	e59f4050 	ldr	r4, [pc, #80]	; 22918 <__kernel_cos+0x340>
   228c4:	eaffffd2 	b	22814 <__kernel_cos+0x23c>
   228c8:	e59f0038 	ldr	r0, [pc, #56]	; 22908 <__kernel_cos+0x330>
   228cc:	e3a01000 	mov	r1, #0
   228d0:	eafffff3 	b	228a4 <__kernel_cos+0x2cc>
   228d4:	bda8fae9 	.word	0xbda8fae9
   228d8:	be8838d4 	.word	0xbe8838d4
   228dc:	3e21ee9e 	.word	0x3e21ee9e
   228e0:	bdb4b1c4 	.word	0xbdb4b1c4
   228e4:	3e927e4f 	.word	0x3e927e4f
   228e8:	809c52ad 	.word	0x809c52ad
   228ec:	3efa01a0 	.word	0x3efa01a0
   228f0:	19cb1590 	.word	0x19cb1590
   228f4:	3f56c16c 	.word	0x3f56c16c
   228f8:	16c15177 	.word	0x16c15177
   228fc:	3fa55555 	.word	0x3fa55555
   22900:	5555554c 	.word	0x5555554c
   22904:	3fe00000 	.word	0x3fe00000
   22908:	3ff00000 	.word	0x3ff00000
   2290c:	3fd33332 	.word	0x3fd33332
   22910:	3fe90000 	.word	0x3fe90000
   22914:	3fe70000 	.word	0x3fe70000
   22918:	3fd20000 	.word	0x3fd20000

0002291c <__kernel_rem_pio2>:
   2291c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22920:	e59feb1c 	ldr	lr, [pc, #2844]	; 23444 <__kernel_rem_pio2+0xb28>
   22924:	e242c003 	sub	ip, r2, #3
   22928:	e0ce4e9c 	smull	r4, lr, ip, lr
   2292c:	e1a0cfcc 	asr	ip, ip, #31
   22930:	e24ddf99 	sub	sp, sp, #612	; 0x264
   22934:	e06cc14e 	rsb	ip, ip, lr, asr #2
   22938:	e1a07003 	mov	r7, r3
   2293c:	e59d4288 	ldr	r4, [sp, #648]	; 0x288
   22940:	e1cccfcc 	bic	ip, ip, ip, asr #31
   22944:	e59f3afc 	ldr	r3, [pc, #2812]	; 23448 <__kernel_rem_pio2+0xb2c>
   22948:	e58dc024 	str	ip, [sp, #36]	; 0x24
   2294c:	e7933104 	ldr	r3, [r3, r4, lsl #2]
   22950:	e247c001 	sub	ip, r7, #1
   22954:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
   22958:	e58dc00c 	str	ip, [sp, #12]
   2295c:	e1e0c004 	mvn	ip, r4
   22960:	e59d400c 	ldr	r4, [sp, #12]
   22964:	e08cc08c 	add	ip, ip, ip, lsl #1
   22968:	e58d3020 	str	r3, [sp, #32]
   2296c:	e082c18c 	add	ip, r2, ip, lsl #3
   22970:	e0943003 	adds	r3, r4, r3
   22974:	e58d0014 	str	r0, [sp, #20]
   22978:	e58d101c 	str	r1, [sp, #28]
   2297c:	e58dc018 	str	ip, [sp, #24]
   22980:	4a000011 	bmi	229cc <__kernel_rem_pio2+0xb0>
   22984:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   22988:	e064500c 	rsb	r5, r4, ip
   2298c:	e59dc28c 	ldr	ip, [sp, #652]	; 0x28c
   22990:	e2833001 	add	r3, r3, #1
   22994:	e28d6034 	add	r6, sp, #52	; 0x34
   22998:	e1a08103 	lsl	r8, r3, #2
   2299c:	e3a04000 	mov	r4, #0
   229a0:	e08ca105 	add	sl, ip, r5, lsl #2
   229a4:	e3550000 	cmp	r5, #0
   229a8:	b3a00000 	movlt	r0, #0
   229ac:	b3a01000 	movlt	r1, #0
   229b0:	a79a0004 	ldrge	r0, [sl, r4]
   229b4:	ab000811 	blge	24a00 <__aeabi_i2d>
   229b8:	e2844004 	add	r4, r4, #4
   229bc:	e1540008 	cmp	r4, r8
   229c0:	e8a60003 	stmia	r6!, {r0, r1}
   229c4:	e2855001 	add	r5, r5, #1
   229c8:	1afffff5 	bne	229a4 <__kernel_rem_pio2+0x88>
   229cc:	e59d4020 	ldr	r4, [sp, #32]
   229d0:	e3540000 	cmp	r4, #0
   229d4:	ba000022 	blt	22a64 <__kernel_rem_pio2+0x148>
   229d8:	e59d4020 	ldr	r4, [sp, #32]
   229dc:	e28dcf5f 	add	ip, sp, #380	; 0x17c
   229e0:	e08cc184 	add	ip, ip, r4, lsl #3
   229e4:	e58dc000 	str	ip, [sp]
   229e8:	e28daf5d 	add	sl, sp, #372	; 0x174
   229ec:	e1a0b007 	mov	fp, r7
   229f0:	e59dc00c 	ldr	ip, [sp, #12]
   229f4:	e35c0000 	cmp	ip, #0
   229f8:	b3a08000 	movlt	r8, #0
   229fc:	b3a09000 	movlt	r9, #0
   22a00:	ba000012 	blt	22a50 <__kernel_rem_pio2+0x134>
   22a04:	e28de034 	add	lr, sp, #52	; 0x34
   22a08:	e59d5014 	ldr	r5, [sp, #20]
   22a0c:	e08e618b 	add	r6, lr, fp, lsl #3
   22a10:	e3a08000 	mov	r8, #0
   22a14:	e3a09000 	mov	r9, #0
   22a18:	e3a04000 	mov	r4, #0
   22a1c:	e936000c 	ldmdb	r6!, {r2, r3}
   22a20:	e8b50003 	ldm	r5!, {r0, r1}
   22a24:	eb000830 	bl	24aec <__aeabi_dmul>
   22a28:	e1a02000 	mov	r2, r0
   22a2c:	e1a03001 	mov	r3, r1
   22a30:	e1a00008 	mov	r0, r8
   22a34:	e1a01009 	mov	r1, r9
   22a38:	eb00072e 	bl	246f8 <__adddf3>
   22a3c:	e2844001 	add	r4, r4, #1
   22a40:	e1540007 	cmp	r4, r7
   22a44:	e1a08000 	mov	r8, r0
   22a48:	e1a09001 	mov	r9, r1
   22a4c:	1afffff2 	bne	22a1c <__kernel_rem_pio2+0x100>
   22a50:	e8aa0300 	stmia	sl!, {r8, r9}
   22a54:	e59dc000 	ldr	ip, [sp]
   22a58:	e15a000c 	cmp	sl, ip
   22a5c:	e28bb001 	add	fp, fp, #1
   22a60:	1affffe2 	bne	229f0 <__kernel_rem_pio2+0xd4>
   22a64:	e59d4020 	ldr	r4, [sp, #32]
   22a68:	e28dcf85 	add	ip, sp, #532	; 0x214
   22a6c:	e2443001 	sub	r3, r4, #1
   22a70:	e1a03103 	lsl	r3, r3, #2
   22a74:	e08cc104 	add	ip, ip, r4, lsl #2
   22a78:	e58d4000 	str	r4, [sp]
   22a7c:	e28d4f99 	add	r4, sp, #612	; 0x264
   22a80:	e0844003 	add	r4, r4, r3
   22a84:	e58d3028 	str	r3, [sp, #40]	; 0x28
   22a88:	e58dc02c 	str	ip, [sp, #44]	; 0x2c
   22a8c:	e58d4030 	str	r4, [sp, #48]	; 0x30
   22a90:	e59dc000 	ldr	ip, [sp]
   22a94:	e28def99 	add	lr, sp, #612	; 0x264
   22a98:	e1a0418c 	lsl	r4, ip, #3
   22a9c:	e08e3004 	add	r3, lr, r4
   22aa0:	e35c0000 	cmp	ip, #0
   22aa4:	e24390f0 	sub	r9, r3, #240	; 0xf0
   22aa8:	e8990300 	ldm	r9, {r8, r9}
   22aac:	da00001d 	ble	22b28 <__kernel_rem_pio2+0x20c>
   22ab0:	e28d6f5d 	add	r6, sp, #372	; 0x174
   22ab4:	e28d5e21 	add	r5, sp, #528	; 0x210
   22ab8:	e0864004 	add	r4, r6, r4
   22abc:	e59f2988 	ldr	r2, [pc, #2440]	; 2344c <__kernel_rem_pio2+0xb30>
   22ac0:	e3a03000 	mov	r3, #0
   22ac4:	e1a00008 	mov	r0, r8
   22ac8:	e1a01009 	mov	r1, r9
   22acc:	eb000806 	bl	24aec <__aeabi_dmul>
   22ad0:	eb00096c 	bl	25088 <__aeabi_d2iz>
   22ad4:	eb0007c9 	bl	24a00 <__aeabi_i2d>
   22ad8:	e59f2970 	ldr	r2, [pc, #2416]	; 23450 <__kernel_rem_pio2+0xb34>
   22adc:	e3a03000 	mov	r3, #0
   22ae0:	e1a0a000 	mov	sl, r0
   22ae4:	e1a0b001 	mov	fp, r1
   22ae8:	eb0007ff 	bl	24aec <__aeabi_dmul>
   22aec:	e1a02000 	mov	r2, r0
   22af0:	e1a03001 	mov	r3, r1
   22af4:	e1a00008 	mov	r0, r8
   22af8:	e1a01009 	mov	r1, r9
   22afc:	eb0006fc 	bl	246f4 <__aeabi_dsub>
   22b00:	eb000960 	bl	25088 <__aeabi_d2iz>
   22b04:	e1a0200a 	mov	r2, sl
   22b08:	e5a50004 	str	r0, [r5, #4]!
   22b0c:	e1a0300b 	mov	r3, fp
   22b10:	e9340003 	ldmdb	r4!, {r0, r1}
   22b14:	eb0006f7 	bl	246f8 <__adddf3>
   22b18:	e1540006 	cmp	r4, r6
   22b1c:	e1a08000 	mov	r8, r0
   22b20:	e1a09001 	mov	r9, r1
   22b24:	1affffe4 	bne	22abc <__kernel_rem_pio2+0x1a0>
   22b28:	e59d2018 	ldr	r2, [sp, #24]
   22b2c:	e1a00008 	mov	r0, r8
   22b30:	e1a01009 	mov	r1, r9
   22b34:	eb0005ab 	bl	241e8 <scalbn>
   22b38:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
   22b3c:	e3a03000 	mov	r3, #0
   22b40:	e1a04000 	mov	r4, r0
   22b44:	e1a05001 	mov	r5, r1
   22b48:	eb0007e7 	bl	24aec <__aeabi_dmul>
   22b4c:	eb000533 	bl	24020 <floor>
   22b50:	e59f28fc 	ldr	r2, [pc, #2300]	; 23454 <__kernel_rem_pio2+0xb38>
   22b54:	e3a03000 	mov	r3, #0
   22b58:	eb0007e3 	bl	24aec <__aeabi_dmul>
   22b5c:	e1a02000 	mov	r2, r0
   22b60:	e1a03001 	mov	r3, r1
   22b64:	e1a00004 	mov	r0, r4
   22b68:	e1a01005 	mov	r1, r5
   22b6c:	eb0006e0 	bl	246f4 <__aeabi_dsub>
   22b70:	e1a04000 	mov	r4, r0
   22b74:	e1a05001 	mov	r5, r1
   22b78:	eb000942 	bl	25088 <__aeabi_d2iz>
   22b7c:	e1a06000 	mov	r6, r0
   22b80:	eb00079e 	bl	24a00 <__aeabi_i2d>
   22b84:	e1a02000 	mov	r2, r0
   22b88:	e1a03001 	mov	r3, r1
   22b8c:	e1a00004 	mov	r0, r4
   22b90:	e1a01005 	mov	r1, r5
   22b94:	eb0006d6 	bl	246f4 <__aeabi_dsub>
   22b98:	e59d4018 	ldr	r4, [sp, #24]
   22b9c:	e3540000 	cmp	r4, #0
   22ba0:	e1a08000 	mov	r8, r0
   22ba4:	e1a09001 	mov	r9, r1
   22ba8:	da0000de 	ble	22f28 <__kernel_rem_pio2+0x60c>
   22bac:	e59dc000 	ldr	ip, [sp]
   22bb0:	e28def99 	add	lr, sp, #612	; 0x264
   22bb4:	e24c2001 	sub	r2, ip, #1
   22bb8:	e08e2102 	add	r2, lr, r2, lsl #2
   22bbc:	e5120050 	ldr	r0, [r2, #-80]	; 0x50
   22bc0:	e2643018 	rsb	r3, r4, #24
   22bc4:	e1a01350 	asr	r1, r0, r3
   22bc8:	e0403311 	sub	r3, r0, r1, lsl r3
   22bcc:	e2645017 	rsb	r5, r4, #23
   22bd0:	e1a05553 	asr	r5, r3, r5
   22bd4:	e5023050 	str	r3, [r2, #-80]	; 0x50
   22bd8:	e0866001 	add	r6, r6, r1
   22bdc:	e3550000 	cmp	r5, #0
   22be0:	da000028 	ble	22c88 <__kernel_rem_pio2+0x36c>
   22be4:	e59d4000 	ldr	r4, [sp]
   22be8:	e3540000 	cmp	r4, #0
   22bec:	e2866001 	add	r6, r6, #1
   22bf0:	d3a04000 	movle	r4, #0
   22bf4:	da000012 	ble	22c44 <__kernel_rem_pio2+0x328>
   22bf8:	e28d3f85 	add	r3, sp, #532	; 0x214
   22bfc:	e0831104 	add	r1, r3, r4, lsl #2
   22c00:	e3a04000 	mov	r4, #0
   22c04:	ea000005 	b	22c20 <__kernel_rem_pio2+0x304>
   22c08:	e3520000 	cmp	r2, #0
   22c0c:	12622401 	rsbne	r2, r2, #16777216	; 0x1000000
   22c10:	15032004 	strne	r2, [r3, #-4]
   22c14:	13a04001 	movne	r4, #1
   22c18:	e1530001 	cmp	r3, r1
   22c1c:	0a000008 	beq	22c44 <__kernel_rem_pio2+0x328>
   22c20:	e3540000 	cmp	r4, #0
   22c24:	e4932004 	ldr	r2, [r3], #4
   22c28:	0afffff6 	beq	22c08 <__kernel_rem_pio2+0x2ec>
   22c2c:	e3e004ff 	mvn	r0, #-16777216	; 0xff000000
   22c30:	e0620000 	rsb	r0, r2, r0
   22c34:	e1530001 	cmp	r3, r1
   22c38:	e5030004 	str	r0, [r3, #-4]
   22c3c:	e3a04001 	mov	r4, #1
   22c40:	1afffff6 	bne	22c20 <__kernel_rem_pio2+0x304>
   22c44:	e59dc018 	ldr	ip, [sp, #24]
   22c48:	e35c0000 	cmp	ip, #0
   22c4c:	da00000b 	ble	22c80 <__kernel_rem_pio2+0x364>
   22c50:	e35c0001 	cmp	ip, #1
   22c54:	0a0000ba 	beq	22f44 <__kernel_rem_pio2+0x628>
   22c58:	e35c0002 	cmp	ip, #2
   22c5c:	1a000007 	bne	22c80 <__kernel_rem_pio2+0x364>
   22c60:	e59dc000 	ldr	ip, [sp]
   22c64:	e28def99 	add	lr, sp, #612	; 0x264
   22c68:	e24c3001 	sub	r3, ip, #1
   22c6c:	e08e3103 	add	r3, lr, r3, lsl #2
   22c70:	e5132050 	ldr	r2, [r3, #-80]	; 0x50
   22c74:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
   22c78:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
   22c7c:	e5032050 	str	r2, [r3, #-80]	; 0x50
   22c80:	e3550002 	cmp	r5, #2
   22c84:	0a00005c 	beq	22dfc <__kernel_rem_pio2+0x4e0>
   22c88:	e1a00008 	mov	r0, r8
   22c8c:	e1a01009 	mov	r1, r9
   22c90:	e3a02000 	mov	r2, #0
   22c94:	e3a03000 	mov	r3, #0
   22c98:	eb0008b3 	bl	24f6c <__cmpdf2>
   22c9c:	e3500000 	cmp	r0, #0
   22ca0:	1a000070 	bne	22e68 <__kernel_rem_pio2+0x54c>
   22ca4:	e59d4000 	ldr	r4, [sp]
   22ca8:	e59dc020 	ldr	ip, [sp, #32]
   22cac:	e2440001 	sub	r0, r4, #1
   22cb0:	e15c0000 	cmp	ip, r0
   22cb4:	ca000009 	bgt	22ce0 <__kernel_rem_pio2+0x3c4>
   22cb8:	e28def85 	add	lr, sp, #532	; 0x214
   22cbc:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
   22cc0:	e08e3104 	add	r3, lr, r4, lsl #2
   22cc4:	e3a02000 	mov	r2, #0
   22cc8:	e5331004 	ldr	r1, [r3, #-4]!
   22ccc:	e153000c 	cmp	r3, ip
   22cd0:	e1822001 	orr	r2, r2, r1
   22cd4:	1afffffb 	bne	22cc8 <__kernel_rem_pio2+0x3ac>
   22cd8:	e3520000 	cmp	r2, #0
   22cdc:	1a0000a9 	bne	22f88 <__kernel_rem_pio2+0x66c>
   22ce0:	e59d4030 	ldr	r4, [sp, #48]	; 0x30
   22ce4:	e5143050 	ldr	r3, [r4, #-80]	; 0x50
   22ce8:	e3530000 	cmp	r3, #0
   22cec:	13a03001 	movne	r3, #1
   22cf0:	1a000007 	bne	22d14 <__kernel_rem_pio2+0x3f8>
   22cf4:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
   22cf8:	e28def85 	add	lr, sp, #532	; 0x214
   22cfc:	e08e200c 	add	r2, lr, ip
   22d00:	e3a03001 	mov	r3, #1
   22d04:	e5321004 	ldr	r1, [r2, #-4]!
   22d08:	e3510000 	cmp	r1, #0
   22d0c:	e2833001 	add	r3, r3, #1
   22d10:	0afffffb 	beq	22d04 <__kernel_rem_pio2+0x3e8>
   22d14:	e59d4000 	ldr	r4, [sp]
   22d18:	e0843003 	add	r3, r4, r3
   22d1c:	e284a001 	add	sl, r4, #1
   22d20:	e15a0003 	cmp	sl, r3
   22d24:	e58d3010 	str	r3, [sp, #16]
   22d28:	ca000030 	bgt	22df0 <__kernel_rem_pio2+0x4d4>
   22d2c:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
   22d30:	e084b00c 	add	fp, r4, ip
   22d34:	e59d400c 	ldr	r4, [sp, #12]
   22d38:	e59dc28c 	ldr	ip, [sp, #652]	; 0x28c
   22d3c:	e084300a 	add	r3, r4, sl
   22d40:	e08cb10b 	add	fp, ip, fp, lsl #2
   22d44:	e28d4034 	add	r4, sp, #52	; 0x34
   22d48:	e28dcf5d 	add	ip, sp, #372	; 0x174
   22d4c:	e0844183 	add	r4, r4, r3, lsl #3
   22d50:	e08cc18a 	add	ip, ip, sl, lsl #3
   22d54:	e58d4000 	str	r4, [sp]
   22d58:	e58dc004 	str	ip, [sp, #4]
   22d5c:	e5bb0004 	ldr	r0, [fp, #4]!
   22d60:	eb000726 	bl	24a00 <__aeabi_i2d>
   22d64:	e59dc000 	ldr	ip, [sp]
   22d68:	e59d400c 	ldr	r4, [sp, #12]
   22d6c:	e8ac0003 	stmia	ip!, {r0, r1}
   22d70:	e3540000 	cmp	r4, #0
   22d74:	e58dc000 	str	ip, [sp]
   22d78:	b3a08000 	movlt	r8, #0
   22d7c:	b3a09000 	movlt	r9, #0
   22d80:	ba000013 	blt	22dd4 <__kernel_rem_pio2+0x4b8>
   22d84:	e08a6007 	add	r6, sl, r7
   22d88:	e28de034 	add	lr, sp, #52	; 0x34
   22d8c:	e59d5014 	ldr	r5, [sp, #20]
   22d90:	e08e6186 	add	r6, lr, r6, lsl #3
   22d94:	e3a08000 	mov	r8, #0
   22d98:	e3a09000 	mov	r9, #0
   22d9c:	e3a04000 	mov	r4, #0
   22da0:	e936000c 	ldmdb	r6!, {r2, r3}
   22da4:	e8b50003 	ldm	r5!, {r0, r1}
   22da8:	eb00074f 	bl	24aec <__aeabi_dmul>
   22dac:	e1a02000 	mov	r2, r0
   22db0:	e1a03001 	mov	r3, r1
   22db4:	e1a00008 	mov	r0, r8
   22db8:	e1a01009 	mov	r1, r9
   22dbc:	eb00064d 	bl	246f8 <__adddf3>
   22dc0:	e2844001 	add	r4, r4, #1
   22dc4:	e1540007 	cmp	r4, r7
   22dc8:	e1a08000 	mov	r8, r0
   22dcc:	e1a09001 	mov	r9, r1
   22dd0:	1afffff2 	bne	22da0 <__kernel_rem_pio2+0x484>
   22dd4:	e59dc004 	ldr	ip, [sp, #4]
   22dd8:	e59d4010 	ldr	r4, [sp, #16]
   22ddc:	e8ac0300 	stmia	ip!, {r8, r9}
   22de0:	e28aa001 	add	sl, sl, #1
   22de4:	e15a0004 	cmp	sl, r4
   22de8:	e58dc004 	str	ip, [sp, #4]
   22dec:	daffffda 	ble	22d5c <__kernel_rem_pio2+0x440>
   22df0:	e59d4010 	ldr	r4, [sp, #16]
   22df4:	e58d4000 	str	r4, [sp]
   22df8:	eaffff24 	b	22a90 <__kernel_rem_pio2+0x174>
   22dfc:	e1a02008 	mov	r2, r8
   22e00:	e1a03009 	mov	r3, r9
   22e04:	e59f064c 	ldr	r0, [pc, #1612]	; 23458 <__kernel_rem_pio2+0xb3c>
   22e08:	e3a01000 	mov	r1, #0
   22e0c:	eb000638 	bl	246f4 <__aeabi_dsub>
   22e10:	e3540000 	cmp	r4, #0
   22e14:	e1a08000 	mov	r8, r0
   22e18:	e1a09001 	mov	r9, r1
   22e1c:	0affff99 	beq	22c88 <__kernel_rem_pio2+0x36c>
   22e20:	e59d2018 	ldr	r2, [sp, #24]
   22e24:	e59f062c 	ldr	r0, [pc, #1580]	; 23458 <__kernel_rem_pio2+0xb3c>
   22e28:	e3a01000 	mov	r1, #0
   22e2c:	eb0004ed 	bl	241e8 <scalbn>
   22e30:	e1a02000 	mov	r2, r0
   22e34:	e1a03001 	mov	r3, r1
   22e38:	e1a00008 	mov	r0, r8
   22e3c:	e1a01009 	mov	r1, r9
   22e40:	eb00062b 	bl	246f4 <__aeabi_dsub>
   22e44:	e1a08000 	mov	r8, r0
   22e48:	e1a09001 	mov	r9, r1
   22e4c:	e1a00008 	mov	r0, r8
   22e50:	e1a01009 	mov	r1, r9
   22e54:	e3a02000 	mov	r2, #0
   22e58:	e3a03000 	mov	r3, #0
   22e5c:	eb000842 	bl	24f6c <__cmpdf2>
   22e60:	e3500000 	cmp	r0, #0
   22e64:	0affff8e 	beq	22ca4 <__kernel_rem_pio2+0x388>
   22e68:	e59dc018 	ldr	ip, [sp, #24]
   22e6c:	e1a00008 	mov	r0, r8
   22e70:	e26c2000 	rsb	r2, ip, #0
   22e74:	e1a01009 	mov	r1, r9
   22e78:	e58d500c 	str	r5, [sp, #12]
   22e7c:	e58d6010 	str	r6, [sp, #16]
   22e80:	eb0004d8 	bl	241e8 <scalbn>
   22e84:	e59f25c4 	ldr	r2, [pc, #1476]	; 23450 <__kernel_rem_pio2+0xb34>
   22e88:	e3a03000 	mov	r3, #0
   22e8c:	e1a04000 	mov	r4, r0
   22e90:	e1a05001 	mov	r5, r1
   22e94:	eb000830 	bl	24f5c <__gedf2>
   22e98:	e3500000 	cmp	r0, #0
   22e9c:	ba000160 	blt	23424 <__kernel_rem_pio2+0xb08>
   22ea0:	e59f25a4 	ldr	r2, [pc, #1444]	; 2344c <__kernel_rem_pio2+0xb30>
   22ea4:	e3a03000 	mov	r3, #0
   22ea8:	e1a00004 	mov	r0, r4
   22eac:	e1a01005 	mov	r1, r5
   22eb0:	eb00070d 	bl	24aec <__aeabi_dmul>
   22eb4:	eb000873 	bl	25088 <__aeabi_d2iz>
   22eb8:	eb0006d0 	bl	24a00 <__aeabi_i2d>
   22ebc:	e59f258c 	ldr	r2, [pc, #1420]	; 23450 <__kernel_rem_pio2+0xb34>
   22ec0:	e3a03000 	mov	r3, #0
   22ec4:	e1a06000 	mov	r6, r0
   22ec8:	e1a07001 	mov	r7, r1
   22ecc:	eb000706 	bl	24aec <__aeabi_dmul>
   22ed0:	e1a02000 	mov	r2, r0
   22ed4:	e1a03001 	mov	r3, r1
   22ed8:	e1a00004 	mov	r0, r4
   22edc:	e1a01005 	mov	r1, r5
   22ee0:	eb000603 	bl	246f4 <__aeabi_dsub>
   22ee4:	eb000867 	bl	25088 <__aeabi_d2iz>
   22ee8:	e59d4000 	ldr	r4, [sp]
   22eec:	e28dcf99 	add	ip, sp, #612	; 0x264
   22ef0:	e08c3104 	add	r3, ip, r4, lsl #2
   22ef4:	e5030050 	str	r0, [r3, #-80]	; 0x50
   22ef8:	e1a01007 	mov	r1, r7
   22efc:	e1a00006 	mov	r0, r6
   22f00:	eb000860 	bl	25088 <__aeabi_d2iz>
   22f04:	e2844001 	add	r4, r4, #1
   22f08:	e28def99 	add	lr, sp, #612	; 0x264
   22f0c:	e08e3104 	add	r3, lr, r4, lsl #2
   22f10:	e58d4000 	str	r4, [sp]
   22f14:	e59d4018 	ldr	r4, [sp, #24]
   22f18:	e2844018 	add	r4, r4, #24
   22f1c:	e58d4018 	str	r4, [sp, #24]
   22f20:	e5030050 	str	r0, [r3, #-80]	; 0x50
   22f24:	ea00002f 	b	22fe8 <__kernel_rem_pio2+0x6cc>
   22f28:	1a00000e 	bne	22f68 <__kernel_rem_pio2+0x64c>
   22f2c:	e59d4000 	ldr	r4, [sp]
   22f30:	e28dcf99 	add	ip, sp, #612	; 0x264
   22f34:	e08c3104 	add	r3, ip, r4, lsl #2
   22f38:	e5135054 	ldr	r5, [r3, #-84]	; 0x54
   22f3c:	e1a05bc5 	asr	r5, r5, #23
   22f40:	eaffff25 	b	22bdc <__kernel_rem_pio2+0x2c0>
   22f44:	e59dc000 	ldr	ip, [sp]
   22f48:	e28def99 	add	lr, sp, #612	; 0x264
   22f4c:	e24c3001 	sub	r3, ip, #1
   22f50:	e08e3103 	add	r3, lr, r3, lsl #2
   22f54:	e5132050 	ldr	r2, [r3, #-80]	; 0x50
   22f58:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
   22f5c:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
   22f60:	e5032050 	str	r2, [r3, #-80]	; 0x50
   22f64:	eaffff45 	b	22c80 <__kernel_rem_pio2+0x364>
   22f68:	e59f24ec 	ldr	r2, [pc, #1260]	; 2345c <__kernel_rem_pio2+0xb40>
   22f6c:	e3a03000 	mov	r3, #0
   22f70:	eb0007f9 	bl	24f5c <__gedf2>
   22f74:	e3500000 	cmp	r0, #0
   22f78:	b3a05000 	movlt	r5, #0
   22f7c:	baffff41 	blt	22c88 <__kernel_rem_pio2+0x36c>
   22f80:	e3a05002 	mov	r5, #2
   22f84:	eaffff16 	b	22be4 <__kernel_rem_pio2+0x2c8>
   22f88:	e1a03100 	lsl	r3, r0, #2
   22f8c:	e28def99 	add	lr, sp, #612	; 0x264
   22f90:	e08e2003 	add	r2, lr, r3
   22f94:	e59d4018 	ldr	r4, [sp, #24]
   22f98:	e5122050 	ldr	r2, [r2, #-80]	; 0x50
   22f9c:	e2444018 	sub	r4, r4, #24
   22fa0:	e3520000 	cmp	r2, #0
   22fa4:	e58d6010 	str	r6, [sp, #16]
   22fa8:	e58d500c 	str	r5, [sp, #12]
   22fac:	e58d4018 	str	r4, [sp, #24]
   22fb0:	158d0000 	strne	r0, [sp]
   22fb4:	1a00000b 	bne	22fe8 <__kernel_rem_pio2+0x6cc>
   22fb8:	e28dcf85 	add	ip, sp, #532	; 0x214
   22fbc:	e58d0000 	str	r0, [sp]
   22fc0:	e08c3003 	add	r3, ip, r3
   22fc4:	e1a02000 	mov	r2, r0
   22fc8:	e1a01004 	mov	r1, r4
   22fcc:	e5330004 	ldr	r0, [r3, #-4]!
   22fd0:	e3500000 	cmp	r0, #0
   22fd4:	e2422001 	sub	r2, r2, #1
   22fd8:	e2411018 	sub	r1, r1, #24
   22fdc:	0afffffa 	beq	22fcc <__kernel_rem_pio2+0x6b0>
   22fe0:	e58d2000 	str	r2, [sp]
   22fe4:	e58d1018 	str	r1, [sp, #24]
   22fe8:	e59f0468 	ldr	r0, [pc, #1128]	; 23458 <__kernel_rem_pio2+0xb3c>
   22fec:	e3a01000 	mov	r1, #0
   22ff0:	e59d2018 	ldr	r2, [sp, #24]
   22ff4:	eb00047b 	bl	241e8 <scalbn>
   22ff8:	e59d4000 	ldr	r4, [sp]
   22ffc:	e3540000 	cmp	r4, #0
   23000:	e1a06000 	mov	r6, r0
   23004:	e1a07001 	mov	r7, r1
   23008:	ba00003b 	blt	230fc <__kernel_rem_pio2+0x7e0>
   2300c:	e2844001 	add	r4, r4, #1
   23010:	e28dbf5d 	add	fp, sp, #372	; 0x174
   23014:	e28dcf85 	add	ip, sp, #532	; 0x214
   23018:	e08c5104 	add	r5, ip, r4, lsl #2
   2301c:	e08b4184 	add	r4, fp, r4, lsl #3
   23020:	e5350004 	ldr	r0, [r5, #-4]!
   23024:	eb000675 	bl	24a00 <__aeabi_i2d>
   23028:	e1a02006 	mov	r2, r6
   2302c:	e1a03007 	mov	r3, r7
   23030:	eb0006ad 	bl	24aec <__aeabi_dmul>
   23034:	e59f2410 	ldr	r2, [pc, #1040]	; 2344c <__kernel_rem_pio2+0xb30>
   23038:	e9240003 	stmdb	r4!, {r0, r1}
   2303c:	e3a03000 	mov	r3, #0
   23040:	e1a00006 	mov	r0, r6
   23044:	e1a01007 	mov	r1, r7
   23048:	eb0006a7 	bl	24aec <__aeabi_dmul>
   2304c:	e154000b 	cmp	r4, fp
   23050:	e1a06000 	mov	r6, r0
   23054:	e1a07001 	mov	r7, r1
   23058:	1afffff0 	bne	23020 <__kernel_rem_pio2+0x704>
   2305c:	e59da000 	ldr	sl, [sp]
   23060:	e59d8020 	ldr	r8, [sp, #32]
   23064:	e58da004 	str	sl, [sp, #4]
   23068:	e3a07000 	mov	r7, #0
   2306c:	e3580000 	cmp	r8, #0
   23070:	b3a09000 	movlt	r9, #0
   23074:	b3a0a000 	movlt	sl, #0
   23078:	ba000015 	blt	230d4 <__kernel_rem_pio2+0x7b8>
   2307c:	e59d4004 	ldr	r4, [sp, #4]
   23080:	e59f53d8 	ldr	r5, [pc, #984]	; 23460 <__kernel_rem_pio2+0xb44>
   23084:	e08b6184 	add	r6, fp, r4, lsl #3
   23088:	e3a09000 	mov	r9, #0
   2308c:	e3a0a000 	mov	sl, #0
   23090:	e3a04000 	mov	r4, #0
   23094:	ea000001 	b	230a0 <__kernel_rem_pio2+0x784>
   23098:	e1540007 	cmp	r4, r7
   2309c:	ca00000c 	bgt	230d4 <__kernel_rem_pio2+0x7b8>
   230a0:	e8b6000c 	ldm	r6!, {r2, r3}
   230a4:	e8b50003 	ldm	r5!, {r0, r1}
   230a8:	eb00068f 	bl	24aec <__aeabi_dmul>
   230ac:	e1a02000 	mov	r2, r0
   230b0:	e1a03001 	mov	r3, r1
   230b4:	e1a00009 	mov	r0, r9
   230b8:	e1a0100a 	mov	r1, sl
   230bc:	eb00058d 	bl	246f8 <__adddf3>
   230c0:	e2844001 	add	r4, r4, #1
   230c4:	e1580004 	cmp	r8, r4
   230c8:	e1a09000 	mov	r9, r0
   230cc:	e1a0a001 	mov	sl, r1
   230d0:	aafffff0 	bge	23098 <__kernel_rem_pio2+0x77c>
   230d4:	e59d4004 	ldr	r4, [sp, #4]
   230d8:	e28dcf99 	add	ip, sp, #612	; 0x264
   230dc:	e2444001 	sub	r4, r4, #1
   230e0:	e08c3187 	add	r3, ip, r7, lsl #3
   230e4:	e3740001 	cmn	r4, #1
   230e8:	e58d4004 	str	r4, [sp, #4]
   230ec:	e5039190 	str	r9, [r3, #-400]	; 0x190
   230f0:	e503a18c 	str	sl, [r3, #-396]	; 0x18c
   230f4:	e2877001 	add	r7, r7, #1
   230f8:	1affffdb 	bne	2306c <__kernel_rem_pio2+0x750>
   230fc:	e59dc288 	ldr	ip, [sp, #648]	; 0x288
   23100:	e35c0003 	cmp	ip, #3
   23104:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
   23108:	ea000015 	b	23164 <__kernel_rem_pio2+0x848>
   2310c:	000233b8 	.word	0x000233b8
   23110:	000232d8 	.word	0x000232d8
   23114:	000232d8 	.word	0x000232d8
   23118:	00023174 	.word	0x00023174
   2311c:	e59d400c 	ldr	r4, [sp, #12]
   23120:	e3a03000 	mov	r3, #0
   23124:	e3540000 	cmp	r4, #0
   23128:	e1a02003 	mov	r2, r3
   2312c:	0a00005c 	beq	232a4 <__kernel_rem_pio2+0x988>
   23130:	e59d00d4 	ldr	r0, [sp, #212]	; 0xd4
   23134:	e59d401c 	ldr	r4, [sp, #28]
   23138:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
   2313c:	e59d10dc 	ldr	r1, [sp, #220]	; 0xdc
   23140:	e5840000 	str	r0, [r4]
   23144:	e59d00d8 	ldr	r0, [sp, #216]	; 0xd8
   23148:	e2811102 	add	r1, r1, #-2147483648	; 0x80000000
   2314c:	e9840003 	stmib	r4, {r0, r1}
   23150:	e59d10e0 	ldr	r1, [sp, #224]	; 0xe0
   23154:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
   23158:	e584100c 	str	r1, [r4, #12]
   2315c:	e5843010 	str	r3, [r4, #16]
   23160:	e5842014 	str	r2, [r4, #20]
   23164:	e59dc010 	ldr	ip, [sp, #16]
   23168:	e20c0007 	and	r0, ip, #7
   2316c:	e28ddf99 	add	sp, sp, #612	; 0x264
   23170:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23174:	e59d4000 	ldr	r4, [sp]
   23178:	e3540000 	cmp	r4, #0
   2317c:	daffffe6 	ble	2311c <__kernel_rem_pio2+0x800>
   23180:	e59d4000 	ldr	r4, [sp]
   23184:	e28d60d4 	add	r6, sp, #212	; 0xd4
   23188:	e0865184 	add	r5, r6, r4, lsl #3
   2318c:	e1a04005 	mov	r4, r5
   23190:	e9340300 	ldmdb	r4!, {r8, r9}
   23194:	e284b008 	add	fp, r4, #8
   23198:	e89b0c00 	ldm	fp, {sl, fp}
   2319c:	e1a00008 	mov	r0, r8
   231a0:	e1a0200a 	mov	r2, sl
   231a4:	e1a0300b 	mov	r3, fp
   231a8:	e1a01009 	mov	r1, r9
   231ac:	eb000551 	bl	246f8 <__adddf3>
   231b0:	e98d0003 	stmib	sp, {r0, r1}
   231b4:	e99d000c 	ldmib	sp, {r2, r3}
   231b8:	e1a00008 	mov	r0, r8
   231bc:	e1a01009 	mov	r1, r9
   231c0:	eb00054b 	bl	246f4 <__aeabi_dsub>
   231c4:	e1a02000 	mov	r2, r0
   231c8:	e1a03001 	mov	r3, r1
   231cc:	e1a0000a 	mov	r0, sl
   231d0:	e1a0100b 	mov	r1, fp
   231d4:	eb000547 	bl	246f8 <__adddf3>
   231d8:	e5840008 	str	r0, [r4, #8]
   231dc:	e584100c 	str	r1, [r4, #12]
   231e0:	e99d0003 	ldmib	sp, {r0, r1}
   231e4:	e1540006 	cmp	r4, r6
   231e8:	e8840003 	stm	r4, {r0, r1}
   231ec:	1affffe7 	bne	23190 <__kernel_rem_pio2+0x874>
   231f0:	e59d4000 	ldr	r4, [sp]
   231f4:	e3540001 	cmp	r4, #1
   231f8:	daffffc7 	ble	2311c <__kernel_rem_pio2+0x800>
   231fc:	e2864008 	add	r4, r6, #8
   23200:	e9350300 	ldmdb	r5!, {r8, r9}
   23204:	e285b008 	add	fp, r5, #8
   23208:	e89b0c00 	ldm	fp, {sl, fp}
   2320c:	e1a00008 	mov	r0, r8
   23210:	e1a0200a 	mov	r2, sl
   23214:	e1a0300b 	mov	r3, fp
   23218:	e1a01009 	mov	r1, r9
   2321c:	eb000535 	bl	246f8 <__adddf3>
   23220:	e98d0003 	stmib	sp, {r0, r1}
   23224:	e99d000c 	ldmib	sp, {r2, r3}
   23228:	e1a00008 	mov	r0, r8
   2322c:	e1a01009 	mov	r1, r9
   23230:	eb00052f 	bl	246f4 <__aeabi_dsub>
   23234:	e1a02000 	mov	r2, r0
   23238:	e1a03001 	mov	r3, r1
   2323c:	e1a0000a 	mov	r0, sl
   23240:	e1a0100b 	mov	r1, fp
   23244:	eb00052b 	bl	246f8 <__adddf3>
   23248:	e5850008 	str	r0, [r5, #8]
   2324c:	e585100c 	str	r1, [r5, #12]
   23250:	e99d0003 	ldmib	sp, {r0, r1}
   23254:	e1550004 	cmp	r5, r4
   23258:	e8850003 	stm	r5, {r0, r1}
   2325c:	1affffe7 	bne	23200 <__kernel_rem_pio2+0x8e4>
   23260:	e59dc000 	ldr	ip, [sp]
   23264:	e3a03000 	mov	r3, #0
   23268:	e28c4001 	add	r4, ip, #1
   2326c:	e0864184 	add	r4, r6, r4, lsl #3
   23270:	e1a02003 	mov	r2, r3
   23274:	e2866010 	add	r6, r6, #16
   23278:	e1a00003 	mov	r0, r3
   2327c:	e1a01002 	mov	r1, r2
   23280:	e934000c 	ldmdb	r4!, {r2, r3}
   23284:	eb00051b 	bl	246f8 <__adddf3>
   23288:	e1540006 	cmp	r4, r6
   2328c:	e1a03000 	mov	r3, r0
   23290:	e1a02001 	mov	r2, r1
   23294:	1afffff7 	bne	23278 <__kernel_rem_pio2+0x95c>
   23298:	e59d400c 	ldr	r4, [sp, #12]
   2329c:	e3540000 	cmp	r4, #0
   232a0:	1affffa2 	bne	23130 <__kernel_rem_pio2+0x814>
   232a4:	e59dc01c 	ldr	ip, [sp, #28]
   232a8:	e1a00003 	mov	r0, r3
   232ac:	e1a01002 	mov	r1, r2
   232b0:	e28d30d4 	add	r3, sp, #212	; 0xd4
   232b4:	e893000c 	ldm	r3, {r2, r3}
   232b8:	e88c000c 	stm	ip, {r2, r3}
   232bc:	e28d30dc 	add	r3, sp, #220	; 0xdc
   232c0:	e893000c 	ldm	r3, {r2, r3}
   232c4:	e58c0010 	str	r0, [ip, #16]
   232c8:	e58c1014 	str	r1, [ip, #20]
   232cc:	e58c2008 	str	r2, [ip, #8]
   232d0:	e58c300c 	str	r3, [ip, #12]
   232d4:	eaffffa2 	b	23164 <__kernel_rem_pio2+0x848>
   232d8:	e59dc000 	ldr	ip, [sp]
   232dc:	e35c0000 	cmp	ip, #0
   232e0:	b3a02000 	movlt	r2, #0
   232e4:	b1a03002 	movlt	r3, r2
   232e8:	ba00000d 	blt	23324 <__kernel_rem_pio2+0xa08>
   232ec:	e59dc000 	ldr	ip, [sp]
   232f0:	e28d50d4 	add	r5, sp, #212	; 0xd4
   232f4:	e28c4001 	add	r4, ip, #1
   232f8:	e3a02000 	mov	r2, #0
   232fc:	e0854184 	add	r4, r5, r4, lsl #3
   23300:	e1a03002 	mov	r3, r2
   23304:	e1a00002 	mov	r0, r2
   23308:	e1a01003 	mov	r1, r3
   2330c:	e934000c 	ldmdb	r4!, {r2, r3}
   23310:	eb0004f8 	bl	246f8 <__adddf3>
   23314:	e1540005 	cmp	r4, r5
   23318:	e1a02000 	mov	r2, r0
   2331c:	e1a03001 	mov	r3, r1
   23320:	1afffff7 	bne	23304 <__kernel_rem_pio2+0x9e8>
   23324:	e59d400c 	ldr	r4, [sp, #12]
   23328:	e3540000 	cmp	r4, #0
   2332c:	1282c102 	addne	ip, r2, #-2147483648	; 0x80000000
   23330:	01a0c002 	moveq	ip, r2
   23334:	e1a0000c 	mov	r0, ip
   23338:	e59dc01c 	ldr	ip, [sp, #28]
   2333c:	e1a01003 	mov	r1, r3
   23340:	e88c0003 	stm	ip, {r0, r1}
   23344:	e28d10d4 	add	r1, sp, #212	; 0xd4
   23348:	e8910003 	ldm	r1, {r0, r1}
   2334c:	e1a05003 	mov	r5, r3
   23350:	eb0004e7 	bl	246f4 <__aeabi_dsub>
   23354:	e59d4000 	ldr	r4, [sp]
   23358:	e3540000 	cmp	r4, #0
   2335c:	e1a03000 	mov	r3, r0
   23360:	e1a02001 	mov	r2, r1
   23364:	da00000a 	ble	23394 <__kernel_rem_pio2+0xa78>
   23368:	e59dc000 	ldr	ip, [sp]
   2336c:	e28d40dc 	add	r4, sp, #220	; 0xdc
   23370:	e084518c 	add	r5, r4, ip, lsl #3
   23374:	e1a00003 	mov	r0, r3
   23378:	e1a01002 	mov	r1, r2
   2337c:	e8b4000c 	ldm	r4!, {r2, r3}
   23380:	eb0004dc 	bl	246f8 <__adddf3>
   23384:	e1540005 	cmp	r4, r5
   23388:	e1a03000 	mov	r3, r0
   2338c:	e1a02001 	mov	r2, r1
   23390:	1afffff7 	bne	23374 <__kernel_rem_pio2+0xa58>
   23394:	e59d400c 	ldr	r4, [sp, #12]
   23398:	e3540000 	cmp	r4, #0
   2339c:	12833102 	addne	r3, r3, #-2147483648	; 0x80000000
   233a0:	e59dc01c 	ldr	ip, [sp, #28]
   233a4:	e1a00003 	mov	r0, r3
   233a8:	e1a01002 	mov	r1, r2
   233ac:	e58c0008 	str	r0, [ip, #8]
   233b0:	e58c100c 	str	r1, [ip, #12]
   233b4:	eaffff6a 	b	23164 <__kernel_rem_pio2+0x848>
   233b8:	e59d4000 	ldr	r4, [sp]
   233bc:	e3540000 	cmp	r4, #0
   233c0:	b3a03000 	movlt	r3, #0
   233c4:	b1a02003 	movlt	r2, r3
   233c8:	ba00000d 	blt	23404 <__kernel_rem_pio2+0xae8>
   233cc:	e59dc000 	ldr	ip, [sp]
   233d0:	e28d40d4 	add	r4, sp, #212	; 0xd4
   233d4:	e28c5001 	add	r5, ip, #1
   233d8:	e3a03000 	mov	r3, #0
   233dc:	e0845185 	add	r5, r4, r5, lsl #3
   233e0:	e1a02003 	mov	r2, r3
   233e4:	e1a00003 	mov	r0, r3
   233e8:	e1a01002 	mov	r1, r2
   233ec:	e935000c 	ldmdb	r5!, {r2, r3}
   233f0:	eb0004c0 	bl	246f8 <__adddf3>
   233f4:	e1550004 	cmp	r5, r4
   233f8:	e1a03000 	mov	r3, r0
   233fc:	e1a02001 	mov	r2, r1
   23400:	1afffff7 	bne	233e4 <__kernel_rem_pio2+0xac8>
   23404:	e59d400c 	ldr	r4, [sp, #12]
   23408:	e3540000 	cmp	r4, #0
   2340c:	12833102 	addne	r3, r3, #-2147483648	; 0x80000000
   23410:	e59dc01c 	ldr	ip, [sp, #28]
   23414:	e1a00003 	mov	r0, r3
   23418:	e1a01002 	mov	r1, r2
   2341c:	e88c0003 	stm	ip, {r0, r1}
   23420:	eaffff4f 	b	23164 <__kernel_rem_pio2+0x848>
   23424:	e1a00004 	mov	r0, r4
   23428:	e1a01005 	mov	r1, r5
   2342c:	eb000715 	bl	25088 <__aeabi_d2iz>
   23430:	e59dc000 	ldr	ip, [sp]
   23434:	e28def99 	add	lr, sp, #612	; 0x264
   23438:	e08e310c 	add	r3, lr, ip, lsl #2
   2343c:	e5030050 	str	r0, [r3, #-80]	; 0x50
   23440:	eafffee8 	b	22fe8 <__kernel_rem_pio2+0x6cc>
   23444:	2aaaaaab 	.word	0x2aaaaaab
   23448:	00025d28 	.word	0x00025d28
   2344c:	3e700000 	.word	0x3e700000
   23450:	41700000 	.word	0x41700000
   23454:	40200000 	.word	0x40200000
   23458:	3ff00000 	.word	0x3ff00000
   2345c:	3fe00000 	.word	0x3fe00000
   23460:	00025d38 	.word	0x00025d38

00023464 <__kernel_sin>:
   23464:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23468:	e3c04102 	bic	r4, r0, #-2147483648	; 0x80000000
   2346c:	e35405f9 	cmp	r4, #1044381696	; 0x3e400000
   23470:	e24dd010 	sub	sp, sp, #16
   23474:	e1a06000 	mov	r6, r0
   23478:	e1a07001 	mov	r7, r1
   2347c:	e1a05001 	mov	r5, r1
   23480:	e1a08002 	mov	r8, r2
   23484:	e1a09003 	mov	r9, r3
   23488:	aa000002 	bge	23498 <__kernel_sin+0x34>
   2348c:	eb0006fd 	bl	25088 <__aeabi_d2iz>
   23490:	e3500000 	cmp	r0, #0
   23494:	0a000052 	beq	235e4 <__kernel_sin+0x180>
   23498:	e1a02006 	mov	r2, r6
   2349c:	e1a03007 	mov	r3, r7
   234a0:	e1a00006 	mov	r0, r6
   234a4:	e1a01007 	mov	r1, r7
   234a8:	eb00058f 	bl	24aec <__aeabi_dmul>
   234ac:	e1a02006 	mov	r2, r6
   234b0:	e1a03007 	mov	r3, r7
   234b4:	e1a04000 	mov	r4, r0
   234b8:	e1a05001 	mov	r5, r1
   234bc:	eb00058a 	bl	24aec <__aeabi_dmul>
   234c0:	e28f3f5e 	add	r3, pc, #376	; 0x178
   234c4:	e893000c 	ldm	r3, {r2, r3}
   234c8:	e1a0a000 	mov	sl, r0
   234cc:	e1a0b001 	mov	fp, r1
   234d0:	e1a00004 	mov	r0, r4
   234d4:	e1a01005 	mov	r1, r5
   234d8:	eb000583 	bl	24aec <__aeabi_dmul>
   234dc:	e28f3f59 	add	r3, pc, #356	; 0x164
   234e0:	e893000c 	ldm	r3, {r2, r3}
   234e4:	eb000482 	bl	246f4 <__aeabi_dsub>
   234e8:	e1a02004 	mov	r2, r4
   234ec:	e1a03005 	mov	r3, r5
   234f0:	eb00057d 	bl	24aec <__aeabi_dmul>
   234f4:	e28f3f55 	add	r3, pc, #340	; 0x154
   234f8:	e893000c 	ldm	r3, {r2, r3}
   234fc:	eb00047d 	bl	246f8 <__adddf3>
   23500:	e1a02004 	mov	r2, r4
   23504:	e1a03005 	mov	r3, r5
   23508:	eb000577 	bl	24aec <__aeabi_dmul>
   2350c:	e28f3f51 	add	r3, pc, #324	; 0x144
   23510:	e893000c 	ldm	r3, {r2, r3}
   23514:	eb000476 	bl	246f4 <__aeabi_dsub>
   23518:	e1a02004 	mov	r2, r4
   2351c:	e1a03005 	mov	r3, r5
   23520:	eb000571 	bl	24aec <__aeabi_dmul>
   23524:	e28f3f4d 	add	r3, pc, #308	; 0x134
   23528:	e893000c 	ldm	r3, {r2, r3}
   2352c:	eb000471 	bl	246f8 <__adddf3>
   23530:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
   23534:	e3530000 	cmp	r3, #0
   23538:	e88d0003 	stm	sp, {r0, r1}
   2353c:	0a00002c 	beq	235f4 <__kernel_sin+0x190>
   23540:	e59f2128 	ldr	r2, [pc, #296]	; 23670 <__kernel_sin+0x20c>
   23544:	e3a03000 	mov	r3, #0
   23548:	e1a00008 	mov	r0, r8
   2354c:	e1a01009 	mov	r1, r9
   23550:	eb000565 	bl	24aec <__aeabi_dmul>
   23554:	e89d000c 	ldm	sp, {r2, r3}
   23558:	e58d0008 	str	r0, [sp, #8]
   2355c:	e58d100c 	str	r1, [sp, #12]
   23560:	e1a0000a 	mov	r0, sl
   23564:	e1a0100b 	mov	r1, fp
   23568:	eb00055f 	bl	24aec <__aeabi_dmul>
   2356c:	e1a02000 	mov	r2, r0
   23570:	e1a03001 	mov	r3, r1
   23574:	e28d1008 	add	r1, sp, #8
   23578:	e8910003 	ldm	r1, {r0, r1}
   2357c:	eb00045c 	bl	246f4 <__aeabi_dsub>
   23580:	e1a02004 	mov	r2, r4
   23584:	e1a03005 	mov	r3, r5
   23588:	eb000557 	bl	24aec <__aeabi_dmul>
   2358c:	e1a02008 	mov	r2, r8
   23590:	e1a03009 	mov	r3, r9
   23594:	eb000456 	bl	246f4 <__aeabi_dsub>
   23598:	e28f30c8 	add	r3, pc, #200	; 0xc8
   2359c:	e893000c 	ldm	r3, {r2, r3}
   235a0:	e1a04000 	mov	r4, r0
   235a4:	e1a05001 	mov	r5, r1
   235a8:	e1a0000a 	mov	r0, sl
   235ac:	e1a0100b 	mov	r1, fp
   235b0:	eb00054d 	bl	24aec <__aeabi_dmul>
   235b4:	e1a02000 	mov	r2, r0
   235b8:	e1a03001 	mov	r3, r1
   235bc:	e1a00004 	mov	r0, r4
   235c0:	e1a01005 	mov	r1, r5
   235c4:	eb00044b 	bl	246f8 <__adddf3>
   235c8:	e1a02000 	mov	r2, r0
   235cc:	e1a03001 	mov	r3, r1
   235d0:	e1a00006 	mov	r0, r6
   235d4:	e1a01007 	mov	r1, r7
   235d8:	eb000445 	bl	246f4 <__aeabi_dsub>
   235dc:	e1a06000 	mov	r6, r0
   235e0:	e1a07001 	mov	r7, r1
   235e4:	e1a00006 	mov	r0, r6
   235e8:	e1a01007 	mov	r1, r7
   235ec:	e28dd010 	add	sp, sp, #16
   235f0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   235f4:	e1a02000 	mov	r2, r0
   235f8:	e1a03001 	mov	r3, r1
   235fc:	e1a00004 	mov	r0, r4
   23600:	e1a01005 	mov	r1, r5
   23604:	eb000538 	bl	24aec <__aeabi_dmul>
   23608:	e28f3058 	add	r3, pc, #88	; 0x58
   2360c:	e893000c 	ldm	r3, {r2, r3}
   23610:	eb000437 	bl	246f4 <__aeabi_dsub>
   23614:	e1a0200a 	mov	r2, sl
   23618:	e1a0300b 	mov	r3, fp
   2361c:	eb000532 	bl	24aec <__aeabi_dmul>
   23620:	e1a02000 	mov	r2, r0
   23624:	e1a03001 	mov	r3, r1
   23628:	e1a00006 	mov	r0, r6
   2362c:	e1a01007 	mov	r1, r7
   23630:	eb000430 	bl	246f8 <__adddf3>
   23634:	e1a06000 	mov	r6, r0
   23638:	e1a07001 	mov	r7, r1
   2363c:	eaffffe8 	b	235e4 <__kernel_sin+0x180>
   23640:	3de5d93a 	.word	0x3de5d93a
   23644:	5acfd57c 	.word	0x5acfd57c
   23648:	3e5ae5e6 	.word	0x3e5ae5e6
   2364c:	8a2b9ceb 	.word	0x8a2b9ceb
   23650:	3ec71de3 	.word	0x3ec71de3
   23654:	57b1fe7d 	.word	0x57b1fe7d
   23658:	3f2a01a0 	.word	0x3f2a01a0
   2365c:	19c161d5 	.word	0x19c161d5
   23660:	3f811111 	.word	0x3f811111
   23664:	1110f8a6 	.word	0x1110f8a6
   23668:	3fc55555 	.word	0x3fc55555
   2366c:	55555549 	.word	0x55555549
   23670:	3fe00000 	.word	0x3fe00000

00023674 <__kernel_tan>:
   23674:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23678:	e3c09102 	bic	r9, r0, #-2147483648	; 0x80000000
   2367c:	e1a06000 	mov	r6, r0
   23680:	e1a0b000 	mov	fp, r0
   23684:	e59f0418 	ldr	r0, [pc, #1048]	; 23aa4 <__kernel_tan+0x430>
   23688:	e1590000 	cmp	r9, r0
   2368c:	e24dd018 	sub	sp, sp, #24
   23690:	e1a07001 	mov	r7, r1
   23694:	e1a08002 	mov	r8, r2
   23698:	e1a0a003 	mov	sl, r3
   2369c:	ca000013 	bgt	236f0 <__kernel_tan+0x7c>
   236a0:	e1a00006 	mov	r0, r6
   236a4:	eb000677 	bl	25088 <__aeabi_d2iz>
   236a8:	e3500000 	cmp	r0, #0
   236ac:	1a00002a 	bne	2375c <__kernel_tan+0xe8>
   236b0:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   236b4:	e1899007 	orr	r9, r9, r7
   236b8:	e2823001 	add	r3, r2, #1
   236bc:	e1993003 	orrs	r3, r9, r3
   236c0:	0a00012b 	beq	23b74 <__kernel_tan+0x500>
   236c4:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
   236c8:	e3530001 	cmp	r3, #1
   236cc:	0a0000d2 	beq	23a1c <__kernel_tan+0x3a8>
   236d0:	e1a02006 	mov	r2, r6
   236d4:	e1a03007 	mov	r3, r7
   236d8:	e59f03c8 	ldr	r0, [pc, #968]	; 23aa8 <__kernel_tan+0x434>
   236dc:	e3a01000 	mov	r1, #0
   236e0:	eb00059c 	bl	24d58 <__aeabi_ddiv>
   236e4:	e1a06000 	mov	r6, r0
   236e8:	e1a07001 	mov	r7, r1
   236ec:	ea0000ca 	b	23a1c <__kernel_tan+0x3a8>
   236f0:	e59f33b4 	ldr	r3, [pc, #948]	; 23aac <__kernel_tan+0x438>
   236f4:	e1590003 	cmp	r9, r3
   236f8:	da000017 	ble	2375c <__kernel_tan+0xe8>
   236fc:	e3560000 	cmp	r6, #0
   23700:	b2866102 	addlt	r6, r6, #-2147483648	; 0x80000000
   23704:	b2828102 	addlt	r8, r2, #-2147483648	; 0x80000000
   23708:	e1a03001 	mov	r3, r1
   2370c:	e1a02006 	mov	r2, r6
   23710:	e28f1fc5 	add	r1, pc, #788	; 0x314
   23714:	e8910003 	ldm	r1, {r0, r1}
   23718:	eb0003f5 	bl	246f4 <__aeabi_dsub>
   2371c:	e1a02008 	mov	r2, r8
   23720:	e1a0300a 	mov	r3, sl
   23724:	e1a04000 	mov	r4, r0
   23728:	e1a05001 	mov	r5, r1
   2372c:	e28f1c03 	add	r1, pc, #768	; 0x300
   23730:	e8910003 	ldm	r1, {r0, r1}
   23734:	eb0003ee 	bl	246f4 <__aeabi_dsub>
   23738:	e1a02000 	mov	r2, r0
   2373c:	e1a03001 	mov	r3, r1
   23740:	e1a00004 	mov	r0, r4
   23744:	e1a01005 	mov	r1, r5
   23748:	eb0003ea 	bl	246f8 <__adddf3>
   2374c:	e3a08000 	mov	r8, #0
   23750:	e1a06000 	mov	r6, r0
   23754:	e1a07001 	mov	r7, r1
   23758:	e1a0a008 	mov	sl, r8
   2375c:	e1a02006 	mov	r2, r6
   23760:	e1a03007 	mov	r3, r7
   23764:	e1a00006 	mov	r0, r6
   23768:	e1a01007 	mov	r1, r7
   2376c:	eb0004de 	bl	24aec <__aeabi_dmul>
   23770:	e1a02000 	mov	r2, r0
   23774:	e1a03001 	mov	r3, r1
   23778:	e88d0003 	stm	sp, {r0, r1}
   2377c:	eb0004da 	bl	24aec <__aeabi_dmul>
   23780:	e1a02006 	mov	r2, r6
   23784:	e1a04000 	mov	r4, r0
   23788:	e1a05001 	mov	r5, r1
   2378c:	e1a03007 	mov	r3, r7
   23790:	e89d0003 	ldm	sp, {r0, r1}
   23794:	eb0004d4 	bl	24aec <__aeabi_dmul>
   23798:	e28f3fa7 	add	r3, pc, #668	; 0x29c
   2379c:	e893000c 	ldm	r3, {r2, r3}
   237a0:	e58d0008 	str	r0, [sp, #8]
   237a4:	e58d100c 	str	r1, [sp, #12]
   237a8:	e1a00004 	mov	r0, r4
   237ac:	e1a01005 	mov	r1, r5
   237b0:	eb0004cd 	bl	24aec <__aeabi_dmul>
   237b4:	e28f3fa2 	add	r3, pc, #648	; 0x288
   237b8:	e893000c 	ldm	r3, {r2, r3}
   237bc:	eb0003cd 	bl	246f8 <__adddf3>
   237c0:	e1a02004 	mov	r2, r4
   237c4:	e1a03005 	mov	r3, r5
   237c8:	eb0004c7 	bl	24aec <__aeabi_dmul>
   237cc:	e28f3f9e 	add	r3, pc, #632	; 0x278
   237d0:	e893000c 	ldm	r3, {r2, r3}
   237d4:	eb0003c7 	bl	246f8 <__adddf3>
   237d8:	e1a02004 	mov	r2, r4
   237dc:	e1a03005 	mov	r3, r5
   237e0:	eb0004c1 	bl	24aec <__aeabi_dmul>
   237e4:	e28f3f9a 	add	r3, pc, #616	; 0x268
   237e8:	e893000c 	ldm	r3, {r2, r3}
   237ec:	eb0003c1 	bl	246f8 <__adddf3>
   237f0:	e1a02004 	mov	r2, r4
   237f4:	e1a03005 	mov	r3, r5
   237f8:	eb0004bb 	bl	24aec <__aeabi_dmul>
   237fc:	e28f3f96 	add	r3, pc, #600	; 0x258
   23800:	e893000c 	ldm	r3, {r2, r3}
   23804:	eb0003bb 	bl	246f8 <__adddf3>
   23808:	e1a02004 	mov	r2, r4
   2380c:	e1a03005 	mov	r3, r5
   23810:	eb0004b5 	bl	24aec <__aeabi_dmul>
   23814:	e28f3f92 	add	r3, pc, #584	; 0x248
   23818:	e893000c 	ldm	r3, {r2, r3}
   2381c:	eb0003b5 	bl	246f8 <__adddf3>
   23820:	e28f3f91 	add	r3, pc, #580	; 0x244
   23824:	e893000c 	ldm	r3, {r2, r3}
   23828:	e58d0010 	str	r0, [sp, #16]
   2382c:	e58d1014 	str	r1, [sp, #20]
   23830:	e1a00004 	mov	r0, r4
   23834:	e1a01005 	mov	r1, r5
   23838:	eb0004ab 	bl	24aec <__aeabi_dmul>
   2383c:	e28f3e23 	add	r3, pc, #560	; 0x230
   23840:	e893000c 	ldm	r3, {r2, r3}
   23844:	eb0003ab 	bl	246f8 <__adddf3>
   23848:	e1a02004 	mov	r2, r4
   2384c:	e1a03005 	mov	r3, r5
   23850:	eb0004a5 	bl	24aec <__aeabi_dmul>
   23854:	e28f3e22 	add	r3, pc, #544	; 0x220
   23858:	e893000c 	ldm	r3, {r2, r3}
   2385c:	eb0003a5 	bl	246f8 <__adddf3>
   23860:	e1a02004 	mov	r2, r4
   23864:	e1a03005 	mov	r3, r5
   23868:	eb00049f 	bl	24aec <__aeabi_dmul>
   2386c:	e28f3e21 	add	r3, pc, #528	; 0x210
   23870:	e893000c 	ldm	r3, {r2, r3}
   23874:	eb00039f 	bl	246f8 <__adddf3>
   23878:	e1a02004 	mov	r2, r4
   2387c:	e1a03005 	mov	r3, r5
   23880:	eb000499 	bl	24aec <__aeabi_dmul>
   23884:	e28f3c02 	add	r3, pc, #512	; 0x200
   23888:	e893000c 	ldm	r3, {r2, r3}
   2388c:	eb000399 	bl	246f8 <__adddf3>
   23890:	e1a02004 	mov	r2, r4
   23894:	e1a03005 	mov	r3, r5
   23898:	eb000493 	bl	24aec <__aeabi_dmul>
   2389c:	e28f3e1f 	add	r3, pc, #496	; 0x1f0
   238a0:	e893000c 	ldm	r3, {r2, r3}
   238a4:	eb000393 	bl	246f8 <__adddf3>
   238a8:	e89d000c 	ldm	sp, {r2, r3}
   238ac:	eb00048e 	bl	24aec <__aeabi_dmul>
   238b0:	e1a02000 	mov	r2, r0
   238b4:	e1a03001 	mov	r3, r1
   238b8:	e28d1010 	add	r1, sp, #16
   238bc:	e8910003 	ldm	r1, {r0, r1}
   238c0:	eb00038c 	bl	246f8 <__adddf3>
   238c4:	e28d3008 	add	r3, sp, #8
   238c8:	e893000c 	ldm	r3, {r2, r3}
   238cc:	eb000486 	bl	24aec <__aeabi_dmul>
   238d0:	e1a02008 	mov	r2, r8
   238d4:	e1a0300a 	mov	r3, sl
   238d8:	eb000386 	bl	246f8 <__adddf3>
   238dc:	e89d000c 	ldm	sp, {r2, r3}
   238e0:	eb000481 	bl	24aec <__aeabi_dmul>
   238e4:	e1a02008 	mov	r2, r8
   238e8:	e1a0300a 	mov	r3, sl
   238ec:	eb000381 	bl	246f8 <__adddf3>
   238f0:	e28f3f69 	add	r3, pc, #420	; 0x1a4
   238f4:	e893000c 	ldm	r3, {r2, r3}
   238f8:	e1a04000 	mov	r4, r0
   238fc:	e1a05001 	mov	r5, r1
   23900:	e28d1008 	add	r1, sp, #8
   23904:	e8910003 	ldm	r1, {r0, r1}
   23908:	eb000477 	bl	24aec <__aeabi_dmul>
   2390c:	e1a02004 	mov	r2, r4
   23910:	e1a03005 	mov	r3, r5
   23914:	eb000377 	bl	246f8 <__adddf3>
   23918:	e88d0003 	stm	sp, {r0, r1}
   2391c:	e89d000c 	ldm	sp, {r2, r3}
   23920:	e1a00006 	mov	r0, r6
   23924:	e1a01007 	mov	r1, r7
   23928:	eb000372 	bl	246f8 <__adddf3>
   2392c:	e59f3178 	ldr	r3, [pc, #376]	; 23aac <__kernel_tan+0x438>
   23930:	e1590003 	cmp	r9, r3
   23934:	e1a04000 	mov	r4, r0
   23938:	e1a05001 	mov	r5, r1
   2393c:	ca00005c 	bgt	23ab4 <__kernel_tan+0x440>
   23940:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
   23944:	e3520001 	cmp	r2, #1
   23948:	01a06000 	moveq	r6, r0
   2394c:	01a07001 	moveq	r7, r1
   23950:	0a000031 	beq	23a1c <__kernel_tan+0x3a8>
   23954:	e1a02000 	mov	r2, r0
   23958:	e1a03001 	mov	r3, r1
   2395c:	e59f0144 	ldr	r0, [pc, #324]	; 23aa8 <__kernel_tan+0x434>
   23960:	e3a01000 	mov	r1, #0
   23964:	eb0004fb 	bl	24d58 <__aeabi_ddiv>
   23968:	e3a09000 	mov	r9, #0
   2396c:	e1a08004 	mov	r8, r4
   23970:	e58d0008 	str	r0, [sp, #8]
   23974:	e58d100c 	str	r1, [sp, #12]
   23978:	e1a02006 	mov	r2, r6
   2397c:	e1a03007 	mov	r3, r7
   23980:	e1a0a004 	mov	sl, r4
   23984:	e1a01009 	mov	r1, r9
   23988:	e1a04000 	mov	r4, r0
   2398c:	e1a00008 	mov	r0, r8
   23990:	eb000357 	bl	246f4 <__aeabi_dsub>
   23994:	e1a02000 	mov	r2, r0
   23998:	e1a03001 	mov	r3, r1
   2399c:	e89d0003 	ldm	sp, {r0, r1}
   239a0:	eb000353 	bl	246f4 <__aeabi_dsub>
   239a4:	e1a02000 	mov	r2, r0
   239a8:	e1a03001 	mov	r3, r1
   239ac:	e1a00004 	mov	r0, r4
   239b0:	e1a01009 	mov	r1, r9
   239b4:	eb00044c 	bl	24aec <__aeabi_dmul>
   239b8:	e1a02008 	mov	r2, r8
   239bc:	e1a06000 	mov	r6, r0
   239c0:	e1a07001 	mov	r7, r1
   239c4:	e1a03009 	mov	r3, r9
   239c8:	e1a00004 	mov	r0, r4
   239cc:	e1a01009 	mov	r1, r9
   239d0:	eb000445 	bl	24aec <__aeabi_dmul>
   239d4:	e59f20d4 	ldr	r2, [pc, #212]	; 23ab0 <__kernel_tan+0x43c>
   239d8:	e3a03000 	mov	r3, #0
   239dc:	eb000345 	bl	246f8 <__adddf3>
   239e0:	e1a02000 	mov	r2, r0
   239e4:	e1a03001 	mov	r3, r1
   239e8:	e1a00006 	mov	r0, r6
   239ec:	e1a01007 	mov	r1, r7
   239f0:	eb000340 	bl	246f8 <__adddf3>
   239f4:	e28d3008 	add	r3, sp, #8
   239f8:	e893000c 	ldm	r3, {r2, r3}
   239fc:	eb00043a 	bl	24aec <__aeabi_dmul>
   23a00:	e1a02004 	mov	r2, r4
   23a04:	e1a03009 	mov	r3, r9
   23a08:	eb00033a 	bl	246f8 <__adddf3>
   23a0c:	e1a0b009 	mov	fp, r9
   23a10:	e1a05009 	mov	r5, r9
   23a14:	e1a06000 	mov	r6, r0
   23a18:	e1a07001 	mov	r7, r1
   23a1c:	e1a00006 	mov	r0, r6
   23a20:	e1a01007 	mov	r1, r7
   23a24:	e28dd018 	add	sp, sp, #24
   23a28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a2c:	3fe921fb 	.word	0x3fe921fb
   23a30:	54442d18 	.word	0x54442d18
   23a34:	3c81a626 	.word	0x3c81a626
   23a38:	33145c07 	.word	0x33145c07
   23a3c:	bef375cb 	.word	0xbef375cb
   23a40:	db605373 	.word	0xdb605373
   23a44:	3f147e88 	.word	0x3f147e88
   23a48:	a03792a6 	.word	0xa03792a6
   23a4c:	3f4344d8 	.word	0x3f4344d8
   23a50:	f2f26501 	.word	0xf2f26501
   23a54:	3f6d6d22 	.word	0x3f6d6d22
   23a58:	c9560328 	.word	0xc9560328
   23a5c:	3f9664f4 	.word	0x3f9664f4
   23a60:	8406d637 	.word	0x8406d637
   23a64:	3fc11111 	.word	0x3fc11111
   23a68:	1110fe7a 	.word	0x1110fe7a
   23a6c:	3efb2a70 	.word	0x3efb2a70
   23a70:	74bf7ad4 	.word	0x74bf7ad4
   23a74:	3f12b80f 	.word	0x3f12b80f
   23a78:	32f0a7e9 	.word	0x32f0a7e9
   23a7c:	3f3026f7 	.word	0x3f3026f7
   23a80:	1a8d1068 	.word	0x1a8d1068
   23a84:	3f57dbc8 	.word	0x3f57dbc8
   23a88:	fee08315 	.word	0xfee08315
   23a8c:	3f8226e3 	.word	0x3f8226e3
   23a90:	e96e8493 	.word	0xe96e8493
   23a94:	3faba1ba 	.word	0x3faba1ba
   23a98:	1bb341fe 	.word	0x1bb341fe
   23a9c:	3fd55555 	.word	0x3fd55555
   23aa0:	55555563 	.word	0x55555563
   23aa4:	3e2fffff 	.word	0x3e2fffff
   23aa8:	bff00000 	.word	0xbff00000
   23aac:	3fe59427 	.word	0x3fe59427
   23ab0:	3ff00000 	.word	0x3ff00000
   23ab4:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   23ab8:	eb0003d0 	bl	24a00 <__aeabi_i2d>
   23abc:	e1a02004 	mov	r2, r4
   23ac0:	e58d0008 	str	r0, [sp, #8]
   23ac4:	e58d100c 	str	r1, [sp, #12]
   23ac8:	e1a03005 	mov	r3, r5
   23acc:	e1a00004 	mov	r0, r4
   23ad0:	e1a01005 	mov	r1, r5
   23ad4:	eb000404 	bl	24aec <__aeabi_dmul>
   23ad8:	e28d3008 	add	r3, sp, #8
   23adc:	e893000c 	ldm	r3, {r2, r3}
   23ae0:	e1a08000 	mov	r8, r0
   23ae4:	e1a09001 	mov	r9, r1
   23ae8:	e1a00004 	mov	r0, r4
   23aec:	e1a01005 	mov	r1, r5
   23af0:	eb000300 	bl	246f8 <__adddf3>
   23af4:	e1a02000 	mov	r2, r0
   23af8:	e1a03001 	mov	r3, r1
   23afc:	e1a00008 	mov	r0, r8
   23b00:	e1a01009 	mov	r1, r9
   23b04:	eb000493 	bl	24d58 <__aeabi_ddiv>
   23b08:	e89d000c 	ldm	sp, {r2, r3}
   23b0c:	eb0002f8 	bl	246f4 <__aeabi_dsub>
   23b10:	e1a02000 	mov	r2, r0
   23b14:	e1a03001 	mov	r3, r1
   23b18:	e1a00006 	mov	r0, r6
   23b1c:	e1a01007 	mov	r1, r7
   23b20:	eb0002f3 	bl	246f4 <__aeabi_dsub>
   23b24:	e1a02000 	mov	r2, r0
   23b28:	e1a03001 	mov	r3, r1
   23b2c:	eb0002f1 	bl	246f8 <__adddf3>
   23b30:	e1a02000 	mov	r2, r0
   23b34:	e1a03001 	mov	r3, r1
   23b38:	e28d1008 	add	r1, sp, #8
   23b3c:	e8910003 	ldm	r1, {r0, r1}
   23b40:	eb0002eb 	bl	246f4 <__aeabi_dsub>
   23b44:	e1a0bf4b 	asr	fp, fp, #30
   23b48:	e1a04000 	mov	r4, r0
   23b4c:	e20b0002 	and	r0, fp, #2
   23b50:	e1a05001 	mov	r5, r1
   23b54:	e2600001 	rsb	r0, r0, #1
   23b58:	eb0003a8 	bl	24a00 <__aeabi_i2d>
   23b5c:	e1a02004 	mov	r2, r4
   23b60:	e1a03005 	mov	r3, r5
   23b64:	eb0003e0 	bl	24aec <__aeabi_dmul>
   23b68:	e1a06000 	mov	r6, r0
   23b6c:	e1a07001 	mov	r7, r1
   23b70:	eaffffa9 	b	23a1c <__kernel_tan+0x3a8>
   23b74:	e1a00006 	mov	r0, r6
   23b78:	e1a01007 	mov	r1, r7
   23b7c:	eb000125 	bl	24018 <fabs>
   23b80:	e1a02000 	mov	r2, r0
   23b84:	e1a03001 	mov	r3, r1
   23b88:	e51f00e0 	ldr	r0, [pc, #-224]	; 23ab0 <__kernel_tan+0x43c>
   23b8c:	e3a01000 	mov	r1, #0
   23b90:	eb000470 	bl	24d58 <__aeabi_ddiv>
   23b94:	e1a06000 	mov	r6, r0
   23b98:	e1a07001 	mov	r7, r1
   23b9c:	eaffff9e 	b	23a1c <__kernel_tan+0x3a8>

00023ba0 <atan>:
   23ba0:	e92d4df0 	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23ba4:	e59f343c 	ldr	r3, [pc, #1084]	; 23fe8 <atan+0x448>
   23ba8:	e3c06102 	bic	r6, r0, #-2147483648	; 0x80000000
   23bac:	e1560003 	cmp	r6, r3
   23bb0:	e24dd00c 	sub	sp, sp, #12
   23bb4:	e1a04000 	mov	r4, r0
   23bb8:	e1a08000 	mov	r8, r0
   23bbc:	e1a05001 	mov	r5, r1
   23bc0:	da00000f 	ble	23c04 <atan+0x64>
   23bc4:	e59f2420 	ldr	r2, [pc, #1056]	; 23fec <atan+0x44c>
   23bc8:	e1560002 	cmp	r6, r2
   23bcc:	ca000079 	bgt	23db8 <atan+0x218>
   23bd0:	13a02000 	movne	r2, #0
   23bd4:	03a02001 	moveq	r2, #1
   23bd8:	e3510000 	cmp	r1, #0
   23bdc:	03a03000 	moveq	r3, #0
   23be0:	12023001 	andne	r3, r2, #1
   23be4:	e3530000 	cmp	r3, #0
   23be8:	1a000072 	bne	23db8 <atan+0x218>
   23bec:	e59f33fc 	ldr	r3, [pc, #1020]	; 23ff0 <atan+0x450>
   23bf0:	e3500000 	cmp	r0, #0
   23bf4:	e59f43f8 	ldr	r4, [pc, #1016]	; 23ff4 <atan+0x454>
   23bf8:	e59f53f8 	ldr	r5, [pc, #1016]	; 23ff8 <atan+0x458>
   23bfc:	c1a04003 	movgt	r4, r3
   23c00:	ea000073 	b	23dd4 <atan+0x234>
   23c04:	e59f33f0 	ldr	r3, [pc, #1008]	; 23ffc <atan+0x45c>
   23c08:	e1560003 	cmp	r6, r3
   23c0c:	ca00007d 	bgt	23e08 <atan+0x268>
   23c10:	e243376f 	sub	r3, r3, #29097984	; 0x1bc0000
   23c14:	e1560003 	cmp	r6, r3
   23c18:	da000071 	ble	23de4 <atan+0x244>
   23c1c:	e3e0a000 	mvn	sl, #0
   23c20:	e1a02004 	mov	r2, r4
   23c24:	e1a03005 	mov	r3, r5
   23c28:	e1a00004 	mov	r0, r4
   23c2c:	e1a01005 	mov	r1, r5
   23c30:	eb0003ad 	bl	24aec <__aeabi_dmul>
   23c34:	e1a02000 	mov	r2, r0
   23c38:	e1a03001 	mov	r3, r1
   23c3c:	e1a0b000 	mov	fp, r0
   23c40:	e58d1000 	str	r1, [sp]
   23c44:	eb0003a8 	bl	24aec <__aeabi_dmul>
   23c48:	e28f3fce 	add	r3, pc, #824	; 0x338
   23c4c:	e893000c 	ldm	r3, {r2, r3}
   23c50:	e1a06000 	mov	r6, r0
   23c54:	e1a07001 	mov	r7, r1
   23c58:	eb0003a3 	bl	24aec <__aeabi_dmul>
   23c5c:	e28f3fcb 	add	r3, pc, #812	; 0x32c
   23c60:	e893000c 	ldm	r3, {r2, r3}
   23c64:	eb0002a3 	bl	246f8 <__adddf3>
   23c68:	e1a02006 	mov	r2, r6
   23c6c:	e1a03007 	mov	r3, r7
   23c70:	eb00039d 	bl	24aec <__aeabi_dmul>
   23c74:	e28f3fc7 	add	r3, pc, #796	; 0x31c
   23c78:	e893000c 	ldm	r3, {r2, r3}
   23c7c:	eb00029d 	bl	246f8 <__adddf3>
   23c80:	e1a02006 	mov	r2, r6
   23c84:	e1a03007 	mov	r3, r7
   23c88:	eb000397 	bl	24aec <__aeabi_dmul>
   23c8c:	e28f3fc3 	add	r3, pc, #780	; 0x30c
   23c90:	e893000c 	ldm	r3, {r2, r3}
   23c94:	eb000297 	bl	246f8 <__adddf3>
   23c98:	e1a02006 	mov	r2, r6
   23c9c:	e1a03007 	mov	r3, r7
   23ca0:	eb000391 	bl	24aec <__aeabi_dmul>
   23ca4:	e28f3fbf 	add	r3, pc, #764	; 0x2fc
   23ca8:	e893000c 	ldm	r3, {r2, r3}
   23cac:	eb000291 	bl	246f8 <__adddf3>
   23cb0:	e1a02006 	mov	r2, r6
   23cb4:	e1a03007 	mov	r3, r7
   23cb8:	eb00038b 	bl	24aec <__aeabi_dmul>
   23cbc:	e28f3fbb 	add	r3, pc, #748	; 0x2ec
   23cc0:	e893000c 	ldm	r3, {r2, r3}
   23cc4:	eb00028b 	bl	246f8 <__adddf3>
   23cc8:	e59dc000 	ldr	ip, [sp]
   23ccc:	e1a0200b 	mov	r2, fp
   23cd0:	e1a0300c 	mov	r3, ip
   23cd4:	eb000384 	bl	24aec <__aeabi_dmul>
   23cd8:	e28f3fb6 	add	r3, pc, #728	; 0x2d8
   23cdc:	e893000c 	ldm	r3, {r2, r3}
   23ce0:	e98d0003 	stmib	sp, {r0, r1}
   23ce4:	e1a00006 	mov	r0, r6
   23ce8:	e1a01007 	mov	r1, r7
   23cec:	eb00037e 	bl	24aec <__aeabi_dmul>
   23cf0:	e28f3fb2 	add	r3, pc, #712	; 0x2c8
   23cf4:	e893000c 	ldm	r3, {r2, r3}
   23cf8:	eb00027d 	bl	246f4 <__aeabi_dsub>
   23cfc:	e1a02006 	mov	r2, r6
   23d00:	e1a03007 	mov	r3, r7
   23d04:	eb000378 	bl	24aec <__aeabi_dmul>
   23d08:	e28f3fae 	add	r3, pc, #696	; 0x2b8
   23d0c:	e893000c 	ldm	r3, {r2, r3}
   23d10:	eb000277 	bl	246f4 <__aeabi_dsub>
   23d14:	e1a02006 	mov	r2, r6
   23d18:	e1a03007 	mov	r3, r7
   23d1c:	eb000372 	bl	24aec <__aeabi_dmul>
   23d20:	e28f3faa 	add	r3, pc, #680	; 0x2a8
   23d24:	e893000c 	ldm	r3, {r2, r3}
   23d28:	eb000271 	bl	246f4 <__aeabi_dsub>
   23d2c:	e1a02006 	mov	r2, r6
   23d30:	e1a03007 	mov	r3, r7
   23d34:	eb00036c 	bl	24aec <__aeabi_dmul>
   23d38:	e28f3fa6 	add	r3, pc, #664	; 0x298
   23d3c:	e893000c 	ldm	r3, {r2, r3}
   23d40:	eb00026b 	bl	246f4 <__aeabi_dsub>
   23d44:	e1a02006 	mov	r2, r6
   23d48:	e1a03007 	mov	r3, r7
   23d4c:	eb000366 	bl	24aec <__aeabi_dmul>
   23d50:	e37a0001 	cmn	sl, #1
   23d54:	e1a02000 	mov	r2, r0
   23d58:	e1a03001 	mov	r3, r1
   23d5c:	e99d0003 	ldmib	sp, {r0, r1}
   23d60:	0a000047 	beq	23e84 <atan+0x2e4>
   23d64:	e59f6294 	ldr	r6, [pc, #660]	; 24000 <atan+0x460>
   23d68:	eb000262 	bl	246f8 <__adddf3>
   23d6c:	e086618a 	add	r6, r6, sl, lsl #3
   23d70:	e1a02004 	mov	r2, r4
   23d74:	e1a03005 	mov	r3, r5
   23d78:	eb00035b 	bl	24aec <__aeabi_dmul>
   23d7c:	e2863020 	add	r3, r6, #32
   23d80:	e893000c 	ldm	r3, {r2, r3}
   23d84:	eb00025a 	bl	246f4 <__aeabi_dsub>
   23d88:	e1a02004 	mov	r2, r4
   23d8c:	e1a03005 	mov	r3, r5
   23d90:	eb000257 	bl	246f4 <__aeabi_dsub>
   23d94:	e1a02000 	mov	r2, r0
   23d98:	e1a03001 	mov	r3, r1
   23d9c:	e8960003 	ldm	r6, {r0, r1}
   23da0:	eb000253 	bl	246f4 <__aeabi_dsub>
   23da4:	e3580000 	cmp	r8, #0
   23da8:	e1a05001 	mov	r5, r1
   23dac:	b2804102 	addlt	r4, r0, #-2147483648	; 0x80000000
   23db0:	a1a04000 	movge	r4, r0
   23db4:	ea000006 	b	23dd4 <atan+0x234>
   23db8:	e1a00004 	mov	r0, r4
   23dbc:	e1a02004 	mov	r2, r4
   23dc0:	e1a01005 	mov	r1, r5
   23dc4:	e1a03005 	mov	r3, r5
   23dc8:	eb00024a 	bl	246f8 <__adddf3>
   23dcc:	e1a04000 	mov	r4, r0
   23dd0:	e1a05001 	mov	r5, r1
   23dd4:	e1a00004 	mov	r0, r4
   23dd8:	e1a01005 	mov	r1, r5
   23ddc:	e28dd00c 	add	sp, sp, #12
   23de0:	e8bd8df0 	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23de4:	e28f3f7d 	add	r3, pc, #500	; 0x1f4
   23de8:	e893000c 	ldm	r3, {r2, r3}
   23dec:	eb000241 	bl	246f8 <__adddf3>
   23df0:	e59f220c 	ldr	r2, [pc, #524]	; 24004 <atan+0x464>
   23df4:	e3a03000 	mov	r3, #0
   23df8:	eb000457 	bl	24f5c <__gedf2>
   23dfc:	e3500000 	cmp	r0, #0
   23e00:	daffff85 	ble	23c1c <atan+0x7c>
   23e04:	eafffff2 	b	23dd4 <atan+0x234>
   23e08:	eb000082 	bl	24018 <fabs>
   23e0c:	e59f31f4 	ldr	r3, [pc, #500]	; 24008 <atan+0x468>
   23e10:	e1560003 	cmp	r6, r3
   23e14:	e1a04000 	mov	r4, r0
   23e18:	e1a05001 	mov	r5, r1
   23e1c:	ca000024 	bgt	23eb4 <atan+0x314>
   23e20:	e243380d 	sub	r3, r3, #851968	; 0xd0000
   23e24:	e1560003 	cmp	r6, r3
   23e28:	ca000043 	bgt	23f3c <atan+0x39c>
   23e2c:	e1a02000 	mov	r2, r0
   23e30:	e1a03001 	mov	r3, r1
   23e34:	eb00022f 	bl	246f8 <__adddf3>
   23e38:	e59f21c4 	ldr	r2, [pc, #452]	; 24004 <atan+0x464>
   23e3c:	e3a03000 	mov	r3, #0
   23e40:	eb00022b 	bl	246f4 <__aeabi_dsub>
   23e44:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   23e48:	e1a06000 	mov	r6, r0
   23e4c:	e1a07001 	mov	r7, r1
   23e50:	e1a00004 	mov	r0, r4
   23e54:	e1a01005 	mov	r1, r5
   23e58:	e3a03000 	mov	r3, #0
   23e5c:	eb000225 	bl	246f8 <__adddf3>
   23e60:	e1a02000 	mov	r2, r0
   23e64:	e1a03001 	mov	r3, r1
   23e68:	e1a00006 	mov	r0, r6
   23e6c:	e1a01007 	mov	r1, r7
   23e70:	eb0003b8 	bl	24d58 <__aeabi_ddiv>
   23e74:	e3a0a000 	mov	sl, #0
   23e78:	e1a04000 	mov	r4, r0
   23e7c:	e1a05001 	mov	r5, r1
   23e80:	eaffff66 	b	23c20 <atan+0x80>
   23e84:	eb00021b 	bl	246f8 <__adddf3>
   23e88:	e1a02004 	mov	r2, r4
   23e8c:	e1a03005 	mov	r3, r5
   23e90:	eb000315 	bl	24aec <__aeabi_dmul>
   23e94:	e1a02000 	mov	r2, r0
   23e98:	e1a03001 	mov	r3, r1
   23e9c:	e1a00004 	mov	r0, r4
   23ea0:	e1a01005 	mov	r1, r5
   23ea4:	eb000212 	bl	246f4 <__aeabi_dsub>
   23ea8:	e1a04000 	mov	r4, r0
   23eac:	e1a05001 	mov	r5, r1
   23eb0:	eaffffc7 	b	23dd4 <atan+0x234>
   23eb4:	e59f3150 	ldr	r3, [pc, #336]	; 2400c <atan+0x46c>
   23eb8:	e1560003 	cmp	r6, r3
   23ebc:	ca000015 	bgt	23f18 <atan+0x378>
   23ec0:	e59f2148 	ldr	r2, [pc, #328]	; 24010 <atan+0x470>
   23ec4:	e3a03000 	mov	r3, #0
   23ec8:	eb000209 	bl	246f4 <__aeabi_dsub>
   23ecc:	e59f213c 	ldr	r2, [pc, #316]	; 24010 <atan+0x470>
   23ed0:	e1a06000 	mov	r6, r0
   23ed4:	e1a07001 	mov	r7, r1
   23ed8:	e1a00004 	mov	r0, r4
   23edc:	e1a01005 	mov	r1, r5
   23ee0:	e3a03000 	mov	r3, #0
   23ee4:	eb000300 	bl	24aec <__aeabi_dmul>
   23ee8:	e59f2114 	ldr	r2, [pc, #276]	; 24004 <atan+0x464>
   23eec:	e3a03000 	mov	r3, #0
   23ef0:	eb000200 	bl	246f8 <__adddf3>
   23ef4:	e1a02000 	mov	r2, r0
   23ef8:	e1a03001 	mov	r3, r1
   23efc:	e1a00006 	mov	r0, r6
   23f00:	e1a01007 	mov	r1, r7
   23f04:	eb000393 	bl	24d58 <__aeabi_ddiv>
   23f08:	e3a0a002 	mov	sl, #2
   23f0c:	e1a04000 	mov	r4, r0
   23f10:	e1a05001 	mov	r5, r1
   23f14:	eaffff41 	b	23c20 <atan+0x80>
   23f18:	e1a02004 	mov	r2, r4
   23f1c:	e1a03005 	mov	r3, r5
   23f20:	e59f00ec 	ldr	r0, [pc, #236]	; 24014 <atan+0x474>
   23f24:	e3a01000 	mov	r1, #0
   23f28:	eb00038a 	bl	24d58 <__aeabi_ddiv>
   23f2c:	e3a0a003 	mov	sl, #3
   23f30:	e1a04000 	mov	r4, r0
   23f34:	e1a05001 	mov	r5, r1
   23f38:	eaffff38 	b	23c20 <atan+0x80>
   23f3c:	e59f20c0 	ldr	r2, [pc, #192]	; 24004 <atan+0x464>
   23f40:	e3a03000 	mov	r3, #0
   23f44:	eb0001ea 	bl	246f4 <__aeabi_dsub>
   23f48:	e59f20b4 	ldr	r2, [pc, #180]	; 24004 <atan+0x464>
   23f4c:	e1a06000 	mov	r6, r0
   23f50:	e1a07001 	mov	r7, r1
   23f54:	e1a00004 	mov	r0, r4
   23f58:	e1a01005 	mov	r1, r5
   23f5c:	e3a03000 	mov	r3, #0
   23f60:	eb0001e4 	bl	246f8 <__adddf3>
   23f64:	e1a02000 	mov	r2, r0
   23f68:	e1a03001 	mov	r3, r1
   23f6c:	e1a00006 	mov	r0, r6
   23f70:	e1a01007 	mov	r1, r7
   23f74:	eb000377 	bl	24d58 <__aeabi_ddiv>
   23f78:	e3a0a001 	mov	sl, #1
   23f7c:	e1a04000 	mov	r4, r0
   23f80:	e1a05001 	mov	r5, r1
   23f84:	eaffff25 	b	23c20 <atan+0x80>
   23f88:	3f90ad3a 	.word	0x3f90ad3a
   23f8c:	e322da11 	.word	0xe322da11
   23f90:	3fa97b4b 	.word	0x3fa97b4b
   23f94:	24760deb 	.word	0x24760deb
   23f98:	3fb10d66 	.word	0x3fb10d66
   23f9c:	a0d03d51 	.word	0xa0d03d51
   23fa0:	3fb745cd 	.word	0x3fb745cd
   23fa4:	c54c206e 	.word	0xc54c206e
   23fa8:	3fc24924 	.word	0x3fc24924
   23fac:	920083ff 	.word	0x920083ff
   23fb0:	3fd55555 	.word	0x3fd55555
   23fb4:	5555550d 	.word	0x5555550d
   23fb8:	bfa2b444 	.word	0xbfa2b444
   23fbc:	2c6a6c2f 	.word	0x2c6a6c2f
   23fc0:	3fadde2d 	.word	0x3fadde2d
   23fc4:	52defd9a 	.word	0x52defd9a
   23fc8:	3fb3b0f2 	.word	0x3fb3b0f2
   23fcc:	af749a6d 	.word	0xaf749a6d
   23fd0:	3fbc71c6 	.word	0x3fbc71c6
   23fd4:	fe231671 	.word	0xfe231671
   23fd8:	3fc99999 	.word	0x3fc99999
   23fdc:	9998ebc4 	.word	0x9998ebc4
   23fe0:	7e37e43c 	.word	0x7e37e43c
   23fe4:	8800759c 	.word	0x8800759c
   23fe8:	440fffff 	.word	0x440fffff
   23fec:	7ff00000 	.word	0x7ff00000
   23ff0:	3ff921fb 	.word	0x3ff921fb
   23ff4:	bff921fb 	.word	0xbff921fb
   23ff8:	54442d18 	.word	0x54442d18
   23ffc:	3fdbffff 	.word	0x3fdbffff
   24000:	00025d78 	.word	0x00025d78
   24004:	3ff00000 	.word	0x3ff00000
   24008:	3ff2ffff 	.word	0x3ff2ffff
   2400c:	40037fff 	.word	0x40037fff
   24010:	3ff80000 	.word	0x3ff80000
   24014:	bff00000 	.word	0xbff00000

00024018 <fabs>:
   24018:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   2401c:	e12fff1e 	bx	lr

00024020 <floor>:
   24020:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24024:	e1a06080 	lsl	r6, r0, #1
   24028:	e1a06aa6 	lsr	r6, r6, #21
   2402c:	e2464fff 	sub	r4, r6, #1020	; 0x3fc
   24030:	e2444003 	sub	r4, r4, #3
   24034:	e3540013 	cmp	r4, #19
   24038:	e24dd004 	sub	sp, sp, #4
   2403c:	e1a0a000 	mov	sl, r0
   24040:	e1a0b001 	mov	fp, r1
   24044:	e1a08000 	mov	r8, r0
   24048:	e1a09001 	mov	r9, r1
   2404c:	e1a05000 	mov	r5, r0
   24050:	e1a07001 	mov	r7, r1
   24054:	ca000018 	bgt	240bc <floor+0x9c>
   24058:	e3540000 	cmp	r4, #0
   2405c:	ba000035 	blt	24138 <floor+0x118>
   24060:	e59f3170 	ldr	r3, [pc, #368]	; 241d8 <floor+0x1b8>
   24064:	e1a06453 	asr	r6, r3, r4
   24068:	e0065000 	and	r5, r6, r0
   2406c:	e1955001 	orrs	r5, r5, r1
   24070:	0a00000d 	beq	240ac <floor+0x8c>
   24074:	e28f3f55 	add	r3, pc, #340	; 0x154
   24078:	e893000c 	ldm	r3, {r2, r3}
   2407c:	e58d0000 	str	r0, [sp]
   24080:	eb00019c 	bl	246f8 <__adddf3>
   24084:	e3a02000 	mov	r2, #0
   24088:	e3a03000 	mov	r3, #0
   2408c:	eb0003b2 	bl	24f5c <__gedf2>
   24090:	e3500000 	cmp	r0, #0
   24094:	e59dc000 	ldr	ip, [sp]
   24098:	ca000039 	bgt	24184 <floor+0x164>
   2409c:	e1a0c008 	mov	ip, r8
   240a0:	e1a05009 	mov	r5, r9
   240a4:	e1a0a00c 	mov	sl, ip
   240a8:	e1a0b005 	mov	fp, r5
   240ac:	e1a0000a 	mov	r0, sl
   240b0:	e1a0100b 	mov	r1, fp
   240b4:	e28dd004 	add	sp, sp, #4
   240b8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240bc:	e3540033 	cmp	r4, #51	; 0x33
   240c0:	da000007 	ble	240e4 <floor+0xc4>
   240c4:	e3540b01 	cmp	r4, #1024	; 0x400
   240c8:	1afffff7 	bne	240ac <floor+0x8c>
   240cc:	e1a02000 	mov	r2, r0
   240d0:	e1a03001 	mov	r3, r1
   240d4:	eb000187 	bl	246f8 <__adddf3>
   240d8:	e1a0a000 	mov	sl, r0
   240dc:	e1a0b001 	mov	fp, r1
   240e0:	eafffff1 	b	240ac <floor+0x8c>
   240e4:	e2463e41 	sub	r3, r6, #1040	; 0x410
   240e8:	e2433003 	sub	r3, r3, #3
   240ec:	e3e02000 	mvn	r2, #0
   240f0:	e1a05332 	lsr	r5, r2, r3
   240f4:	e1150001 	tst	r5, r1
   240f8:	0affffeb 	beq	240ac <floor+0x8c>
   240fc:	e28f30cc 	add	r3, pc, #204	; 0xcc
   24100:	e893000c 	ldm	r3, {r2, r3}
   24104:	e58d0000 	str	r0, [sp]
   24108:	eb00017a 	bl	246f8 <__adddf3>
   2410c:	e3a02000 	mov	r2, #0
   24110:	e3a03000 	mov	r3, #0
   24114:	eb000390 	bl	24f5c <__gedf2>
   24118:	e3500000 	cmp	r0, #0
   2411c:	e59dc000 	ldr	ip, [sp]
   24120:	daffffdd 	ble	2409c <floor+0x7c>
   24124:	e35c0000 	cmp	ip, #0
   24128:	ba00001b 	blt	2419c <floor+0x17c>
   2412c:	e1a03009 	mov	r3, r9
   24130:	e1c35005 	bic	r5, r3, r5
   24134:	eaffffda 	b	240a4 <floor+0x84>
   24138:	e28f3090 	add	r3, pc, #144	; 0x90
   2413c:	e893000c 	ldm	r3, {r2, r3}
   24140:	eb00016c 	bl	246f8 <__adddf3>
   24144:	e3a02000 	mov	r2, #0
   24148:	e3a03000 	mov	r3, #0
   2414c:	eb000382 	bl	24f5c <__gedf2>
   24150:	e3500000 	cmp	r0, #0
   24154:	daffffd0 	ble	2409c <floor+0x7c>
   24158:	e35a0000 	cmp	sl, #0
   2415c:	a3a05000 	movge	r5, #0
   24160:	a1a0c005 	movge	ip, r5
   24164:	aaffffce 	bge	240a4 <floor+0x84>
   24168:	e3c55102 	bic	r5, r5, #-2147483648	; 0x80000000
   2416c:	e185500b 	orr	r5, r5, fp
   24170:	e59fc064 	ldr	ip, [pc, #100]	; 241dc <floor+0x1bc>
   24174:	e3550000 	cmp	r5, #0
   24178:	01a0c00a 	moveq	ip, sl
   2417c:	13a05000 	movne	r5, #0
   24180:	eaffffc7 	b	240a4 <floor+0x84>
   24184:	e35c0000 	cmp	ip, #0
   24188:	b3a03601 	movlt	r3, #1048576	; 0x100000
   2418c:	b08cc453 	addlt	ip, ip, r3, asr r4
   24190:	e3a05000 	mov	r5, #0
   24194:	e1ccc006 	bic	ip, ip, r6
   24198:	eaffffc1 	b	240a4 <floor+0x84>
   2419c:	e3540014 	cmp	r4, #20
   241a0:	0a000007 	beq	241c4 <floor+0x1a4>
   241a4:	e2663e43 	rsb	r3, r6, #1072	; 0x430
   241a8:	e3a02001 	mov	r2, #1
   241ac:	e2833003 	add	r3, r3, #3
   241b0:	e08b3312 	add	r3, fp, r2, lsl r3
   241b4:	e15b0003 	cmp	fp, r3
   241b8:	808cc002 	addhi	ip, ip, r2
   241bc:	e1c35005 	bic	r5, r3, r5
   241c0:	eaffffb7 	b	240a4 <floor+0x84>
   241c4:	e28cc001 	add	ip, ip, #1
   241c8:	e1a03009 	mov	r3, r9
   241cc:	eaffffd7 	b	24130 <floor+0x110>
   241d0:	7e37e43c 	.word	0x7e37e43c
   241d4:	8800759c 	.word	0x8800759c
   241d8:	000fffff 	.word	0x000fffff
   241dc:	bff00000 	.word	0xbff00000

000241e0 <matherr>:
   241e0:	e3a00000 	mov	r0, #0
   241e4:	e12fff1e 	bx	lr

000241e8 <scalbn>:
   241e8:	e59f3184 	ldr	r3, [pc, #388]	; 24374 <scalbn+0x18c>
   241ec:	e0003003 	and	r3, r0, r3
   241f0:	e1b03a43 	asrs	r3, r3, #20
   241f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   241f8:	e1a0c000 	mov	ip, r0
   241fc:	e1a04000 	mov	r4, r0
   24200:	e1a05001 	mov	r5, r1
   24204:	e1a07001 	mov	r7, r1
   24208:	e1a06002 	mov	r6, r2
   2420c:	1a000020 	bne	24294 <scalbn+0xac>
   24210:	e3c0c102 	bic	ip, r0, #-2147483648	; 0x80000000
   24214:	e19cc001 	orrs	ip, ip, r1
   24218:	0a00001a 	beq	24288 <scalbn+0xa0>
   2421c:	e3a03000 	mov	r3, #0
   24220:	e59f2150 	ldr	r2, [pc, #336]	; 24378 <scalbn+0x190>
   24224:	eb000230 	bl	24aec <__aeabi_dmul>
   24228:	e59f314c 	ldr	r3, [pc, #332]	; 2437c <scalbn+0x194>
   2422c:	e1560003 	cmp	r6, r3
   24230:	e1a04000 	mov	r4, r0
   24234:	e1a05001 	mov	r5, r1
   24238:	ba00002d 	blt	242f4 <scalbn+0x10c>
   2423c:	e59f3130 	ldr	r3, [pc, #304]	; 24374 <scalbn+0x18c>
   24240:	e0003003 	and	r3, r0, r3
   24244:	e1a03a43 	asr	r3, r3, #20
   24248:	e59f2130 	ldr	r2, [pc, #304]	; 24380 <scalbn+0x198>
   2424c:	e2433036 	sub	r3, r3, #54	; 0x36
   24250:	e0833006 	add	r3, r3, r6
   24254:	e1530002 	cmp	r3, r2
   24258:	e1a0c000 	mov	ip, r0
   2425c:	c1a02004 	movgt	r2, r4
   24260:	c1a03005 	movgt	r3, r5
   24264:	da000013 	ble	242b8 <scalbn+0xd0>
   24268:	e28f10f4 	add	r1, pc, #244	; 0xf4
   2426c:	e8910003 	ldm	r1, {r0, r1}
   24270:	eb000046 	bl	24390 <copysign>
   24274:	e28f30e8 	add	r3, pc, #232	; 0xe8
   24278:	e893000c 	ldm	r3, {r2, r3}
   2427c:	eb00021a 	bl	24aec <__aeabi_dmul>
   24280:	e1a04000 	mov	r4, r0
   24284:	e1a05001 	mov	r5, r1
   24288:	e1a00004 	mov	r0, r4
   2428c:	e1a01005 	mov	r1, r5
   24290:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24294:	e59f20e8 	ldr	r2, [pc, #232]	; 24384 <scalbn+0x19c>
   24298:	e1530002 	cmp	r3, r2
   2429c:	0a00001c 	beq	24314 <scalbn+0x12c>
   242a0:	e59f20d8 	ldr	r2, [pc, #216]	; 24380 <scalbn+0x198>
   242a4:	e0833006 	add	r3, r3, r6
   242a8:	e1530002 	cmp	r3, r2
   242ac:	c1a02004 	movgt	r2, r4
   242b0:	c1a03005 	movgt	r3, r5
   242b4:	caffffeb 	bgt	24268 <scalbn+0x80>
   242b8:	e3530000 	cmp	r3, #0
   242bc:	c3ccc47f 	bicgt	ip, ip, #2130706432	; 0x7f000000
   242c0:	c3ccc60f 	bicgt	ip, ip, #15728640	; 0xf00000
   242c4:	c18c4a03 	orrgt	r4, ip, r3, lsl #20
   242c8:	caffffee 	bgt	24288 <scalbn+0xa0>
   242cc:	e3730035 	cmn	r3, #53	; 0x35
   242d0:	aa000017 	bge	24334 <scalbn+0x14c>
   242d4:	e59f30ac 	ldr	r3, [pc, #172]	; 24388 <scalbn+0x1a0>
   242d8:	e1560003 	cmp	r6, r3
   242dc:	e1a02004 	mov	r2, r4
   242e0:	e1a03005 	mov	r3, r5
   242e4:	caffffdf 	bgt	24268 <scalbn+0x80>
   242e8:	e28f107c 	add	r1, pc, #124	; 0x7c
   242ec:	e8910003 	ldm	r1, {r0, r1}
   242f0:	eb000026 	bl	24390 <copysign>
   242f4:	e28f3070 	add	r3, pc, #112	; 0x70
   242f8:	e893000c 	ldm	r3, {r2, r3}
   242fc:	eb0001fa 	bl	24aec <__aeabi_dmul>
   24300:	e1a04000 	mov	r4, r0
   24304:	e1a05001 	mov	r5, r1
   24308:	e1a00004 	mov	r0, r4
   2430c:	e1a01005 	mov	r1, r5
   24310:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24314:	e1a02000 	mov	r2, r0
   24318:	e1a03001 	mov	r3, r1
   2431c:	eb0000f5 	bl	246f8 <__adddf3>
   24320:	e1a04000 	mov	r4, r0
   24324:	e1a05001 	mov	r5, r1
   24328:	e1a00004 	mov	r0, r4
   2432c:	e1a01005 	mov	r1, r5
   24330:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   24334:	e3ccc47f 	bic	ip, ip, #2130706432	; 0x7f000000
   24338:	e2833036 	add	r3, r3, #54	; 0x36
   2433c:	e3ccc60f 	bic	ip, ip, #15728640	; 0xf00000
   24340:	e18c4a03 	orr	r4, ip, r3, lsl #20
   24344:	e1a00004 	mov	r0, r4
   24348:	e1a01005 	mov	r1, r5
   2434c:	e59f2038 	ldr	r2, [pc, #56]	; 2438c <scalbn+0x1a4>
   24350:	e3a03000 	mov	r3, #0
   24354:	eb0001e4 	bl	24aec <__aeabi_dmul>
   24358:	e1a04000 	mov	r4, r0
   2435c:	e1a05001 	mov	r5, r1
   24360:	eaffffc8 	b	24288 <scalbn+0xa0>
   24364:	7e37e43c 	.word	0x7e37e43c
   24368:	8800759c 	.word	0x8800759c
   2436c:	01a56e1f 	.word	0x01a56e1f
   24370:	c2f8f359 	.word	0xc2f8f359
   24374:	7ff00000 	.word	0x7ff00000
   24378:	43500000 	.word	0x43500000
   2437c:	ffff3cb0 	.word	0xffff3cb0
   24380:	000007fe 	.word	0x000007fe
   24384:	000007ff 	.word	0x000007ff
   24388:	0000c350 	.word	0x0000c350
   2438c:	3c900000 	.word	0x3c900000

00024390 <copysign>:
   24390:	e92d0030 	push	{r4, r5}
   24394:	e2022102 	and	r2, r2, #-2147483648	; 0x80000000
   24398:	e3c04102 	bic	r4, r0, #-2147483648	; 0x80000000
   2439c:	e1a05001 	mov	r5, r1
   243a0:	e1820004 	orr	r0, r2, r4
   243a4:	e8bd0030 	pop	{r4, r5}
   243a8:	e12fff1e 	bx	lr

000243ac <__errno>:
   243ac:	e59f3004 	ldr	r3, [pc, #4]	; 243b8 <__errno+0xc>
   243b0:	e5930000 	ldr	r0, [r3]
   243b4:	e12fff1e 	bx	lr
   243b8:	400004b4 	.word	0x400004b4

000243bc <__aeabi_uidiv>:
   243bc:	e2512001 	subs	r2, r1, #1
   243c0:	012fff1e 	bxeq	lr
   243c4:	3a000036 	bcc	244a4 <__aeabi_uidiv+0xe8>
   243c8:	e1500001 	cmp	r0, r1
   243cc:	9a000022 	bls	2445c <__aeabi_uidiv+0xa0>
   243d0:	e1110002 	tst	r1, r2
   243d4:	0a000023 	beq	24468 <__aeabi_uidiv+0xac>
   243d8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   243dc:	01a01181 	lsleq	r1, r1, #3
   243e0:	03a03008 	moveq	r3, #8
   243e4:	13a03001 	movne	r3, #1
   243e8:	e3510201 	cmp	r1, #268435456	; 0x10000000
   243ec:	31510000 	cmpcc	r1, r0
   243f0:	31a01201 	lslcc	r1, r1, #4
   243f4:	31a03203 	lslcc	r3, r3, #4
   243f8:	3afffffa 	bcc	243e8 <__aeabi_uidiv+0x2c>
   243fc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   24400:	31510000 	cmpcc	r1, r0
   24404:	31a01081 	lslcc	r1, r1, #1
   24408:	31a03083 	lslcc	r3, r3, #1
   2440c:	3afffffa 	bcc	243fc <__aeabi_uidiv+0x40>
   24410:	e3a02000 	mov	r2, #0
   24414:	e1500001 	cmp	r0, r1
   24418:	20400001 	subcs	r0, r0, r1
   2441c:	21822003 	orrcs	r2, r2, r3
   24420:	e15000a1 	cmp	r0, r1, lsr #1
   24424:	204000a1 	subcs	r0, r0, r1, lsr #1
   24428:	218220a3 	orrcs	r2, r2, r3, lsr #1
   2442c:	e1500121 	cmp	r0, r1, lsr #2
   24430:	20400121 	subcs	r0, r0, r1, lsr #2
   24434:	21822123 	orrcs	r2, r2, r3, lsr #2
   24438:	e15001a1 	cmp	r0, r1, lsr #3
   2443c:	204001a1 	subcs	r0, r0, r1, lsr #3
   24440:	218221a3 	orrcs	r2, r2, r3, lsr #3
   24444:	e3500000 	cmp	r0, #0
   24448:	11b03223 	lsrsne	r3, r3, #4
   2444c:	11a01221 	lsrne	r1, r1, #4
   24450:	1affffef 	bne	24414 <__aeabi_uidiv+0x58>
   24454:	e1a00002 	mov	r0, r2
   24458:	e12fff1e 	bx	lr
   2445c:	03a00001 	moveq	r0, #1
   24460:	13a00000 	movne	r0, #0
   24464:	e12fff1e 	bx	lr
   24468:	e3510801 	cmp	r1, #65536	; 0x10000
   2446c:	21a01821 	lsrcs	r1, r1, #16
   24470:	23a02010 	movcs	r2, #16
   24474:	33a02000 	movcc	r2, #0
   24478:	e3510c01 	cmp	r1, #256	; 0x100
   2447c:	21a01421 	lsrcs	r1, r1, #8
   24480:	22822008 	addcs	r2, r2, #8
   24484:	e3510010 	cmp	r1, #16
   24488:	21a01221 	lsrcs	r1, r1, #4
   2448c:	22822004 	addcs	r2, r2, #4
   24490:	e3510004 	cmp	r1, #4
   24494:	82822003 	addhi	r2, r2, #3
   24498:	908220a1 	addls	r2, r2, r1, lsr #1
   2449c:	e1a00230 	lsr	r0, r0, r2
   244a0:	e12fff1e 	bx	lr
   244a4:	e52de008 	str	lr, [sp, #-8]!
   244a8:	eb00008e 	bl	246e8 <__div0>
   244ac:	e3a00000 	mov	r0, #0
   244b0:	e49df008 	ldr	pc, [sp], #8

000244b4 <__aeabi_uidivmod>:
   244b4:	e3510000 	cmp	r1, #0
   244b8:	0afffff9 	beq	244a4 <__aeabi_uidiv+0xe8>
   244bc:	e92d4003 	push	{r0, r1, lr}
   244c0:	ebffffbd 	bl	243bc <__aeabi_uidiv>
   244c4:	e8bd4006 	pop	{r1, r2, lr}
   244c8:	e0030092 	mul	r3, r2, r0
   244cc:	e0411003 	sub	r1, r1, r3
   244d0:	e12fff1e 	bx	lr

000244d4 <__aeabi_idiv>:
   244d4:	e3510000 	cmp	r1, #0
   244d8:	0a000043 	beq	245ec <.divsi3_skip_div0_test+0x110>

000244dc <.divsi3_skip_div0_test>:
   244dc:	e020c001 	eor	ip, r0, r1
   244e0:	42611000 	rsbmi	r1, r1, #0
   244e4:	e2512001 	subs	r2, r1, #1
   244e8:	0a000027 	beq	2458c <.divsi3_skip_div0_test+0xb0>
   244ec:	e1b03000 	movs	r3, r0
   244f0:	42603000 	rsbmi	r3, r0, #0
   244f4:	e1530001 	cmp	r3, r1
   244f8:	9a000026 	bls	24598 <.divsi3_skip_div0_test+0xbc>
   244fc:	e1110002 	tst	r1, r2
   24500:	0a000028 	beq	245a8 <.divsi3_skip_div0_test+0xcc>
   24504:	e311020e 	tst	r1, #-536870912	; 0xe0000000
   24508:	01a01181 	lsleq	r1, r1, #3
   2450c:	03a02008 	moveq	r2, #8
   24510:	13a02001 	movne	r2, #1
   24514:	e3510201 	cmp	r1, #268435456	; 0x10000000
   24518:	31510003 	cmpcc	r1, r3
   2451c:	31a01201 	lslcc	r1, r1, #4
   24520:	31a02202 	lslcc	r2, r2, #4
   24524:	3afffffa 	bcc	24514 <.divsi3_skip_div0_test+0x38>
   24528:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   2452c:	31510003 	cmpcc	r1, r3
   24530:	31a01081 	lslcc	r1, r1, #1
   24534:	31a02082 	lslcc	r2, r2, #1
   24538:	3afffffa 	bcc	24528 <.divsi3_skip_div0_test+0x4c>
   2453c:	e3a00000 	mov	r0, #0
   24540:	e1530001 	cmp	r3, r1
   24544:	20433001 	subcs	r3, r3, r1
   24548:	21800002 	orrcs	r0, r0, r2
   2454c:	e15300a1 	cmp	r3, r1, lsr #1
   24550:	204330a1 	subcs	r3, r3, r1, lsr #1
   24554:	218000a2 	orrcs	r0, r0, r2, lsr #1
   24558:	e1530121 	cmp	r3, r1, lsr #2
   2455c:	20433121 	subcs	r3, r3, r1, lsr #2
   24560:	21800122 	orrcs	r0, r0, r2, lsr #2
   24564:	e15301a1 	cmp	r3, r1, lsr #3
   24568:	204331a1 	subcs	r3, r3, r1, lsr #3
   2456c:	218001a2 	orrcs	r0, r0, r2, lsr #3
   24570:	e3530000 	cmp	r3, #0
   24574:	11b02222 	lsrsne	r2, r2, #4
   24578:	11a01221 	lsrne	r1, r1, #4
   2457c:	1affffef 	bne	24540 <.divsi3_skip_div0_test+0x64>
   24580:	e35c0000 	cmp	ip, #0
   24584:	42600000 	rsbmi	r0, r0, #0
   24588:	e12fff1e 	bx	lr
   2458c:	e13c0000 	teq	ip, r0
   24590:	42600000 	rsbmi	r0, r0, #0
   24594:	e12fff1e 	bx	lr
   24598:	33a00000 	movcc	r0, #0
   2459c:	01a00fcc 	asreq	r0, ip, #31
   245a0:	03800001 	orreq	r0, r0, #1
   245a4:	e12fff1e 	bx	lr
   245a8:	e3510801 	cmp	r1, #65536	; 0x10000
   245ac:	21a01821 	lsrcs	r1, r1, #16
   245b0:	23a02010 	movcs	r2, #16
   245b4:	33a02000 	movcc	r2, #0
   245b8:	e3510c01 	cmp	r1, #256	; 0x100
   245bc:	21a01421 	lsrcs	r1, r1, #8
   245c0:	22822008 	addcs	r2, r2, #8
   245c4:	e3510010 	cmp	r1, #16
   245c8:	21a01221 	lsrcs	r1, r1, #4
   245cc:	22822004 	addcs	r2, r2, #4
   245d0:	e3510004 	cmp	r1, #4
   245d4:	82822003 	addhi	r2, r2, #3
   245d8:	908220a1 	addls	r2, r2, r1, lsr #1
   245dc:	e35c0000 	cmp	ip, #0
   245e0:	e1a00233 	lsr	r0, r3, r2
   245e4:	42600000 	rsbmi	r0, r0, #0
   245e8:	e12fff1e 	bx	lr
   245ec:	e52de008 	str	lr, [sp, #-8]!
   245f0:	eb00003c 	bl	246e8 <__div0>
   245f4:	e3a00000 	mov	r0, #0
   245f8:	e49df008 	ldr	pc, [sp], #8

000245fc <__aeabi_idivmod>:
   245fc:	e3510000 	cmp	r1, #0
   24600:	0afffff9 	beq	245ec <.divsi3_skip_div0_test+0x110>
   24604:	e92d4003 	push	{r0, r1, lr}
   24608:	ebffffb3 	bl	244dc <.divsi3_skip_div0_test>
   2460c:	e8bd4006 	pop	{r1, r2, lr}
   24610:	e0030092 	mul	r3, r2, r0
   24614:	e0411003 	sub	r1, r1, r3
   24618:	e12fff1e 	bx	lr

0002461c <__umodsi3>:
   2461c:	e2512001 	subs	r2, r1, #1
   24620:	3a00002c 	bcc	246d8 <__umodsi3+0xbc>
   24624:	11500001 	cmpne	r0, r1
   24628:	03a00000 	moveq	r0, #0
   2462c:	81110002 	tsthi	r1, r2
   24630:	00000002 	andeq	r0, r0, r2
   24634:	912fff1e 	bxls	lr
   24638:	e3a02000 	mov	r2, #0
   2463c:	e3510201 	cmp	r1, #268435456	; 0x10000000
   24640:	31510000 	cmpcc	r1, r0
   24644:	31a01201 	lslcc	r1, r1, #4
   24648:	32822004 	addcc	r2, r2, #4
   2464c:	3afffffa 	bcc	2463c <__umodsi3+0x20>
   24650:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   24654:	31510000 	cmpcc	r1, r0
   24658:	31a01081 	lslcc	r1, r1, #1
   2465c:	32822001 	addcc	r2, r2, #1
   24660:	3afffffa 	bcc	24650 <__umodsi3+0x34>
   24664:	e2522003 	subs	r2, r2, #3
   24668:	ba00000e 	blt	246a8 <__umodsi3+0x8c>
   2466c:	e1500001 	cmp	r0, r1
   24670:	20400001 	subcs	r0, r0, r1
   24674:	e15000a1 	cmp	r0, r1, lsr #1
   24678:	204000a1 	subcs	r0, r0, r1, lsr #1
   2467c:	e1500121 	cmp	r0, r1, lsr #2
   24680:	20400121 	subcs	r0, r0, r1, lsr #2
   24684:	e15001a1 	cmp	r0, r1, lsr #3
   24688:	204001a1 	subcs	r0, r0, r1, lsr #3
   2468c:	e3500001 	cmp	r0, #1
   24690:	e1a01221 	lsr	r1, r1, #4
   24694:	a2522004 	subsge	r2, r2, #4
   24698:	aafffff3 	bge	2466c <__umodsi3+0x50>
   2469c:	e3120003 	tst	r2, #3
   246a0:	13300000 	teqne	r0, #0
   246a4:	0a00000a 	beq	246d4 <__umodsi3+0xb8>
   246a8:	e3720002 	cmn	r2, #2
   246ac:	ba000006 	blt	246cc <__umodsi3+0xb0>
   246b0:	0a000002 	beq	246c0 <__umodsi3+0xa4>
   246b4:	e1500001 	cmp	r0, r1
   246b8:	20400001 	subcs	r0, r0, r1
   246bc:	e1a010a1 	lsr	r1, r1, #1
   246c0:	e1500001 	cmp	r0, r1
   246c4:	20400001 	subcs	r0, r0, r1
   246c8:	e1a010a1 	lsr	r1, r1, #1
   246cc:	e1500001 	cmp	r0, r1
   246d0:	20400001 	subcs	r0, r0, r1
   246d4:	e12fff1e 	bx	lr
   246d8:	e52de008 	str	lr, [sp, #-8]!
   246dc:	eb000001 	bl	246e8 <__div0>
   246e0:	e3a00000 	mov	r0, #0
   246e4:	e49df008 	ldr	pc, [sp], #8

000246e8 <__div0>:
   246e8:	e12fff1e 	bx	lr

000246ec <__aeabi_drsub>:
   246ec:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
   246f0:	ea000000 	b	246f8 <__adddf3>

000246f4 <__aeabi_dsub>:
   246f4:	e2222102 	eor	r2, r2, #-2147483648	; 0x80000000

000246f8 <__adddf3>:
   246f8:	e92d4030 	push	{r4, r5, lr}
   246fc:	e1a04080 	lsl	r4, r0, #1
   24700:	e1a05082 	lsl	r5, r2, #1
   24704:	e1340005 	teq	r4, r5
   24708:	01310003 	teqeq	r1, r3
   2470c:	1194c001 	orrsne	ip, r4, r1
   24710:	1195c003 	orrsne	ip, r5, r3
   24714:	11f0cac4 	mvnsne	ip, r4, asr #21
   24718:	11f0cac5 	mvnsne	ip, r5, asr #21
   2471c:	0a000086 	beq	2493c <__adddf3+0x244>
   24720:	e1a04aa4 	lsr	r4, r4, #21
   24724:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
   24728:	b2655000 	rsblt	r5, r5, #0
   2472c:	da000006 	ble	2474c <__adddf3+0x54>
   24730:	e0844005 	add	r4, r4, r5
   24734:	e0213003 	eor	r3, r1, r3
   24738:	e0202002 	eor	r2, r0, r2
   2473c:	e0231001 	eor	r1, r3, r1
   24740:	e0220000 	eor	r0, r2, r0
   24744:	e0213003 	eor	r3, r1, r3
   24748:	e0202002 	eor	r2, r0, r2
   2474c:	e3550036 	cmp	r5, #54	; 0x36
   24750:	88bd8030 	pophi	{r4, r5, pc}
   24754:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   24758:	e1a00600 	lsl	r0, r0, #12
   2475c:	e3a0c601 	mov	ip, #1048576	; 0x100000
   24760:	e18c0620 	orr	r0, ip, r0, lsr #12
   24764:	0a000001 	beq	24770 <__adddf3+0x78>
   24768:	e2711000 	rsbs	r1, r1, #0
   2476c:	e2e00000 	rsc	r0, r0, #0
   24770:	e3120102 	tst	r2, #-2147483648	; 0x80000000
   24774:	e1a02602 	lsl	r2, r2, #12
   24778:	e18c2622 	orr	r2, ip, r2, lsr #12
   2477c:	0a000001 	beq	24788 <__adddf3+0x90>
   24780:	e2733000 	rsbs	r3, r3, #0
   24784:	e2e22000 	rsc	r2, r2, #0
   24788:	e1340005 	teq	r4, r5
   2478c:	0a000064 	beq	24924 <__adddf3+0x22c>
   24790:	e2444001 	sub	r4, r4, #1
   24794:	e275e020 	rsbs	lr, r5, #32
   24798:	ba000005 	blt	247b4 <__adddf3+0xbc>
   2479c:	e1a0ce13 	lsl	ip, r3, lr
   247a0:	e0911533 	adds	r1, r1, r3, lsr r5
   247a4:	e2a00000 	adc	r0, r0, #0
   247a8:	e0911e12 	adds	r1, r1, r2, lsl lr
   247ac:	e0b00552 	adcs	r0, r0, r2, asr r5
   247b0:	ea000006 	b	247d0 <__adddf3+0xd8>
   247b4:	e2455020 	sub	r5, r5, #32
   247b8:	e28ee020 	add	lr, lr, #32
   247bc:	e3530001 	cmp	r3, #1
   247c0:	e1a0ce12 	lsl	ip, r2, lr
   247c4:	238cc002 	orrcs	ip, ip, #2
   247c8:	e0911552 	adds	r1, r1, r2, asr r5
   247cc:	e0b00fc2 	adcs	r0, r0, r2, asr #31
   247d0:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
   247d4:	5a000002 	bpl	247e4 <__adddf3+0xec>
   247d8:	e27cc000 	rsbs	ip, ip, #0
   247dc:	e2f11000 	rscs	r1, r1, #0
   247e0:	e2e00000 	rsc	r0, r0, #0
   247e4:	e3500601 	cmp	r0, #1048576	; 0x100000
   247e8:	3a00000e 	bcc	24828 <__adddf3+0x130>
   247ec:	e3500602 	cmp	r0, #2097152	; 0x200000
   247f0:	3a000006 	bcc	24810 <__adddf3+0x118>
   247f4:	e1b000a0 	lsrs	r0, r0, #1
   247f8:	e1b01061 	rrxs	r1, r1
   247fc:	e1a0c06c 	rrx	ip, ip
   24800:	e2844001 	add	r4, r4, #1
   24804:	e1a02a84 	lsl	r2, r4, #21
   24808:	e3720501 	cmn	r2, #4194304	; 0x400000
   2480c:	2a000062 	bcs	2499c <__adddf3+0x2a4>
   24810:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
   24814:	01b0c0a1 	lsrseq	ip, r1, #1
   24818:	e2b11000 	adcs	r1, r1, #0
   2481c:	e0a00a04 	adc	r0, r0, r4, lsl #20
   24820:	e1800005 	orr	r0, r0, r5
   24824:	e8bd8030 	pop	{r4, r5, pc}
   24828:	e1b0c08c 	lsls	ip, ip, #1
   2482c:	e0b11001 	adcs	r1, r1, r1
   24830:	e0a00000 	adc	r0, r0, r0
   24834:	e3100601 	tst	r0, #1048576	; 0x100000
   24838:	e2444001 	sub	r4, r4, #1
   2483c:	1afffff3 	bne	24810 <__adddf3+0x118>
   24840:	e3300000 	teq	r0, #0
   24844:	13a03014 	movne	r3, #20
   24848:	03a03034 	moveq	r3, #52	; 0x34
   2484c:	01a00001 	moveq	r0, r1
   24850:	03a01000 	moveq	r1, #0
   24854:	e1a02000 	mov	r2, r0
   24858:	e3520801 	cmp	r2, #65536	; 0x10000
   2485c:	21a02822 	lsrcs	r2, r2, #16
   24860:	22433010 	subcs	r3, r3, #16
   24864:	e3520c01 	cmp	r2, #256	; 0x100
   24868:	21a02422 	lsrcs	r2, r2, #8
   2486c:	22433008 	subcs	r3, r3, #8
   24870:	e3520010 	cmp	r2, #16
   24874:	21a02222 	lsrcs	r2, r2, #4
   24878:	22433004 	subcs	r3, r3, #4
   2487c:	e3520004 	cmp	r2, #4
   24880:	22433002 	subcs	r3, r3, #2
   24884:	304330a2 	subcc	r3, r3, r2, lsr #1
   24888:	e04331a2 	sub	r3, r3, r2, lsr #3
   2488c:	e2532020 	subs	r2, r3, #32
   24890:	aa000007 	bge	248b4 <__adddf3+0x1bc>
   24894:	e292200c 	adds	r2, r2, #12
   24898:	da000004 	ble	248b0 <__adddf3+0x1b8>
   2489c:	e282c014 	add	ip, r2, #20
   248a0:	e262200c 	rsb	r2, r2, #12
   248a4:	e1a01c10 	lsl	r1, r0, ip
   248a8:	e1a00230 	lsr	r0, r0, r2
   248ac:	ea000004 	b	248c4 <__adddf3+0x1cc>
   248b0:	e2822014 	add	r2, r2, #20
   248b4:	d262c020 	rsble	ip, r2, #32
   248b8:	e1a00210 	lsl	r0, r0, r2
   248bc:	d1800c31 	orrle	r0, r0, r1, lsr ip
   248c0:	d1a01211 	lslle	r1, r1, r2
   248c4:	e0544003 	subs	r4, r4, r3
   248c8:	a0800a04 	addge	r0, r0, r4, lsl #20
   248cc:	a1800005 	orrge	r0, r0, r5
   248d0:	a8bd8030 	popge	{r4, r5, pc}
   248d4:	e1e04004 	mvn	r4, r4
   248d8:	e254401f 	subs	r4, r4, #31
   248dc:	aa00000d 	bge	24918 <__adddf3+0x220>
   248e0:	e294400c 	adds	r4, r4, #12
   248e4:	ca000005 	bgt	24900 <__adddf3+0x208>
   248e8:	e2844014 	add	r4, r4, #20
   248ec:	e2642020 	rsb	r2, r4, #32
   248f0:	e1a01431 	lsr	r1, r1, r4
   248f4:	e1811210 	orr	r1, r1, r0, lsl r2
   248f8:	e1850430 	orr	r0, r5, r0, lsr r4
   248fc:	e8bd8030 	pop	{r4, r5, pc}
   24900:	e264400c 	rsb	r4, r4, #12
   24904:	e2642020 	rsb	r2, r4, #32
   24908:	e1a01231 	lsr	r1, r1, r2
   2490c:	e1811410 	orr	r1, r1, r0, lsl r4
   24910:	e1a00005 	mov	r0, r5
   24914:	e8bd8030 	pop	{r4, r5, pc}
   24918:	e1a01430 	lsr	r1, r0, r4
   2491c:	e1a00005 	mov	r0, r5
   24920:	e8bd8030 	pop	{r4, r5, pc}
   24924:	e3340000 	teq	r4, #0
   24928:	e2222601 	eor	r2, r2, #1048576	; 0x100000
   2492c:	02200601 	eoreq	r0, r0, #1048576	; 0x100000
   24930:	02844001 	addeq	r4, r4, #1
   24934:	12455001 	subne	r5, r5, #1
   24938:	eaffff94 	b	24790 <__adddf3+0x98>
   2493c:	e1f0cac4 	mvns	ip, r4, asr #21
   24940:	11f0cac5 	mvnsne	ip, r5, asr #21
   24944:	0a000018 	beq	249ac <__adddf3+0x2b4>
   24948:	e1340005 	teq	r4, r5
   2494c:	01310003 	teqeq	r1, r3
   24950:	0a000003 	beq	24964 <__adddf3+0x26c>
   24954:	e194c001 	orrs	ip, r4, r1
   24958:	01a00002 	moveq	r0, r2
   2495c:	01a01003 	moveq	r1, r3
   24960:	e8bd8030 	pop	{r4, r5, pc}
   24964:	e1300002 	teq	r0, r2
   24968:	13a00000 	movne	r0, #0
   2496c:	13a01000 	movne	r1, #0
   24970:	18bd8030 	popne	{r4, r5, pc}
   24974:	e1b0caa4 	lsrs	ip, r4, #21
   24978:	1a000003 	bne	2498c <__adddf3+0x294>
   2497c:	e1b01081 	lsls	r1, r1, #1
   24980:	e0b00000 	adcs	r0, r0, r0
   24984:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
   24988:	e8bd8030 	pop	{r4, r5, pc}
   2498c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
   24990:	32800601 	addcc	r0, r0, #1048576	; 0x100000
   24994:	38bd8030 	popcc	{r4, r5, pc}
   24998:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
   2499c:	e385047f 	orr	r0, r5, #2130706432	; 0x7f000000
   249a0:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
   249a4:	e3a01000 	mov	r1, #0
   249a8:	e8bd8030 	pop	{r4, r5, pc}
   249ac:	e1f0cac4 	mvns	ip, r4, asr #21
   249b0:	11a00002 	movne	r0, r2
   249b4:	11a01003 	movne	r1, r3
   249b8:	01f0cac5 	mvnseq	ip, r5, asr #21
   249bc:	11a02000 	movne	r2, r0
   249c0:	11a03001 	movne	r3, r1
   249c4:	e1914600 	orrs	r4, r1, r0, lsl #12
   249c8:	01935602 	orrseq	r5, r3, r2, lsl #12
   249cc:	01300002 	teqeq	r0, r2
   249d0:	13800702 	orrne	r0, r0, #524288	; 0x80000
   249d4:	e8bd8030 	pop	{r4, r5, pc}

000249d8 <__aeabi_ui2d>:
   249d8:	e3300000 	teq	r0, #0
   249dc:	03a01000 	moveq	r1, #0
   249e0:	012fff1e 	bxeq	lr
   249e4:	e92d4030 	push	{r4, r5, lr}
   249e8:	e3a04b01 	mov	r4, #1024	; 0x400
   249ec:	e2844032 	add	r4, r4, #50	; 0x32
   249f0:	e3a05000 	mov	r5, #0
   249f4:	e1a01000 	mov	r1, r0
   249f8:	e3a00000 	mov	r0, #0
   249fc:	eaffff8f 	b	24840 <__adddf3+0x148>

00024a00 <__aeabi_i2d>:
   24a00:	e3300000 	teq	r0, #0
   24a04:	03a01000 	moveq	r1, #0
   24a08:	012fff1e 	bxeq	lr
   24a0c:	e92d4030 	push	{r4, r5, lr}
   24a10:	e3a04b01 	mov	r4, #1024	; 0x400
   24a14:	e2844032 	add	r4, r4, #50	; 0x32
   24a18:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
   24a1c:	42600000 	rsbmi	r0, r0, #0
   24a20:	e1a01000 	mov	r1, r0
   24a24:	e3a00000 	mov	r0, #0
   24a28:	eaffff84 	b	24840 <__adddf3+0x148>

00024a2c <__aeabi_f2d>:
   24a2c:	e1b02080 	lsls	r2, r0, #1
   24a30:	e1a001c2 	asr	r0, r2, #3
   24a34:	e1a00060 	rrx	r0, r0
   24a38:	e1a01e02 	lsl	r1, r2, #28
   24a3c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
   24a40:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   24a44:	1220030e 	eorne	r0, r0, #939524096	; 0x38000000
   24a48:	112fff1e 	bxne	lr
   24a4c:	e3320000 	teq	r2, #0
   24a50:	133304ff 	teqne	r3, #-16777216	; 0xff000000
   24a54:	012fff1e 	bxeq	lr
   24a58:	e92d4030 	push	{r4, r5, lr}
   24a5c:	e3a04d0e 	mov	r4, #896	; 0x380
   24a60:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
   24a64:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   24a68:	eaffff74 	b	24840 <__adddf3+0x148>

00024a6c <__aeabi_ul2d>:
   24a6c:	e1902001 	orrs	r2, r0, r1
   24a70:	012fff1e 	bxeq	lr
   24a74:	e92d4030 	push	{r4, r5, lr}
   24a78:	e3a05000 	mov	r5, #0
   24a7c:	ea000006 	b	24a9c <__aeabi_l2d+0x1c>

00024a80 <__aeabi_l2d>:
   24a80:	e1902001 	orrs	r2, r0, r1
   24a84:	012fff1e 	bxeq	lr
   24a88:	e92d4030 	push	{r4, r5, lr}
   24a8c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
   24a90:	5a000001 	bpl	24a9c <__aeabi_l2d+0x1c>
   24a94:	e2700000 	rsbs	r0, r0, #0
   24a98:	e2e11000 	rsc	r1, r1, #0
   24a9c:	e3a04b01 	mov	r4, #1024	; 0x400
   24aa0:	e2844032 	add	r4, r4, #50	; 0x32
   24aa4:	e1a0c000 	mov	ip, r0
   24aa8:	e1a00001 	mov	r0, r1
   24aac:	e1a0100c 	mov	r1, ip
   24ab0:	e1b0cb20 	lsrs	ip, r0, #22
   24ab4:	0affff4a 	beq	247e4 <__adddf3+0xec>
   24ab8:	e3a02003 	mov	r2, #3
   24abc:	e1b0c1ac 	lsrs	ip, ip, #3
   24ac0:	12822003 	addne	r2, r2, #3
   24ac4:	e1b0c1ac 	lsrs	ip, ip, #3
   24ac8:	12822003 	addne	r2, r2, #3
   24acc:	e08221ac 	add	r2, r2, ip, lsr #3
   24ad0:	e2623020 	rsb	r3, r2, #32
   24ad4:	e1a0c311 	lsl	ip, r1, r3
   24ad8:	e1a01231 	lsr	r1, r1, r2
   24adc:	e1811310 	orr	r1, r1, r0, lsl r3
   24ae0:	e1a00230 	lsr	r0, r0, r2
   24ae4:	e0844002 	add	r4, r4, r2
   24ae8:	eaffff3d 	b	247e4 <__adddf3+0xec>

00024aec <__aeabi_dmul>:
   24aec:	e92d4070 	push	{r4, r5, r6, lr}
   24af0:	e3a0c0ff 	mov	ip, #255	; 0xff
   24af4:	e38ccc07 	orr	ip, ip, #1792	; 0x700
   24af8:	e01c4a20 	ands	r4, ip, r0, lsr #20
   24afc:	101c5a22 	andsne	r5, ip, r2, lsr #20
   24b00:	1134000c 	teqne	r4, ip
   24b04:	1135000c 	teqne	r5, ip
   24b08:	0b00006f 	bleq	24ccc <__aeabi_dmul+0x1e0>
   24b0c:	e0844005 	add	r4, r4, r5
   24b10:	e0206002 	eor	r6, r0, r2
   24b14:	e1c00a8c 	bic	r0, r0, ip, lsl #21
   24b18:	e1c22a8c 	bic	r2, r2, ip, lsl #21
   24b1c:	e1915600 	orrs	r5, r1, r0, lsl #12
   24b20:	11935602 	orrsne	r5, r3, r2, lsl #12
   24b24:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   24b28:	e3822601 	orr	r2, r2, #1048576	; 0x100000
   24b2c:	0a00001c 	beq	24ba4 <__aeabi_dmul+0xb8>
   24b30:	e08ec391 	umull	ip, lr, r1, r3
   24b34:	e3a05000 	mov	r5, #0
   24b38:	e0a5e390 	umlal	lr, r5, r0, r3
   24b3c:	e2063102 	and	r3, r6, #-2147483648	; 0x80000000
   24b40:	e0a5e291 	umlal	lr, r5, r1, r2
   24b44:	e3a06000 	mov	r6, #0
   24b48:	e0a65290 	umlal	r5, r6, r0, r2
   24b4c:	e33c0000 	teq	ip, #0
   24b50:	138ee001 	orrne	lr, lr, #1
   24b54:	e24440ff 	sub	r4, r4, #255	; 0xff
   24b58:	e3560c02 	cmp	r6, #512	; 0x200
   24b5c:	e2c44c03 	sbc	r4, r4, #768	; 0x300
   24b60:	2a000002 	bcs	24b70 <__aeabi_dmul+0x84>
   24b64:	e1b0e08e 	lsls	lr, lr, #1
   24b68:	e0b55005 	adcs	r5, r5, r5
   24b6c:	e0a66006 	adc	r6, r6, r6
   24b70:	e1830586 	orr	r0, r3, r6, lsl #11
   24b74:	e1800aa5 	orr	r0, r0, r5, lsr #21
   24b78:	e1a01585 	lsl	r1, r5, #11
   24b7c:	e1811aae 	orr	r1, r1, lr, lsr #21
   24b80:	e1a0e58e 	lsl	lr, lr, #11
   24b84:	e254c0fd 	subs	ip, r4, #253	; 0xfd
   24b88:	835c0c07 	cmphi	ip, #1792	; 0x700
   24b8c:	8a00000f 	bhi	24bd0 <__aeabi_dmul+0xe4>
   24b90:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
   24b94:	01b0e0a1 	lsrseq	lr, r1, #1
   24b98:	e2b11000 	adcs	r1, r1, #0
   24b9c:	e0a00a04 	adc	r0, r0, r4, lsl #20
   24ba0:	e8bd8070 	pop	{r4, r5, r6, pc}
   24ba4:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
   24ba8:	e1860000 	orr	r0, r6, r0
   24bac:	e1811003 	orr	r1, r1, r3
   24bb0:	e0200002 	eor	r0, r0, r2
   24bb4:	e05440ac 	subs	r4, r4, ip, lsr #1
   24bb8:	c074500c 	rsbsgt	r5, r4, ip
   24bbc:	c1800a04 	orrgt	r0, r0, r4, lsl #20
   24bc0:	c8bd8070 	popgt	{r4, r5, r6, pc}
   24bc4:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   24bc8:	e3a0e000 	mov	lr, #0
   24bcc:	e2544001 	subs	r4, r4, #1
   24bd0:	ca000058 	bgt	24d38 <__aeabi_dmul+0x24c>
   24bd4:	e3740036 	cmn	r4, #54	; 0x36
   24bd8:	d3a01000 	movle	r1, #0
   24bdc:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
   24be0:	d8bd8070 	pople	{r4, r5, r6, pc}
   24be4:	e2644000 	rsb	r4, r4, #0
   24be8:	e2544020 	subs	r4, r4, #32
   24bec:	aa000018 	bge	24c54 <__aeabi_dmul+0x168>
   24bf0:	e294400c 	adds	r4, r4, #12
   24bf4:	ca00000b 	bgt	24c28 <__aeabi_dmul+0x13c>
   24bf8:	e2844014 	add	r4, r4, #20
   24bfc:	e2645020 	rsb	r5, r4, #32
   24c00:	e1a03511 	lsl	r3, r1, r5
   24c04:	e1a01431 	lsr	r1, r1, r4
   24c08:	e1811510 	orr	r1, r1, r0, lsl r5
   24c0c:	e2002102 	and	r2, r0, #-2147483648	; 0x80000000
   24c10:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   24c14:	e0911fa3 	adds	r1, r1, r3, lsr #31
   24c18:	e0a20430 	adc	r0, r2, r0, lsr r4
   24c1c:	e19ee083 	orrs	lr, lr, r3, lsl #1
   24c20:	01c11fa3 	biceq	r1, r1, r3, lsr #31
   24c24:	e8bd8070 	pop	{r4, r5, r6, pc}
   24c28:	e264400c 	rsb	r4, r4, #12
   24c2c:	e2645020 	rsb	r5, r4, #32
   24c30:	e1a03411 	lsl	r3, r1, r4
   24c34:	e1a01531 	lsr	r1, r1, r5
   24c38:	e1811410 	orr	r1, r1, r0, lsl r4
   24c3c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   24c40:	e0911fa3 	adds	r1, r1, r3, lsr #31
   24c44:	e2a00000 	adc	r0, r0, #0
   24c48:	e19ee083 	orrs	lr, lr, r3, lsl #1
   24c4c:	01c11fa3 	biceq	r1, r1, r3, lsr #31
   24c50:	e8bd8070 	pop	{r4, r5, r6, pc}
   24c54:	e2645020 	rsb	r5, r4, #32
   24c58:	e18ee511 	orr	lr, lr, r1, lsl r5
   24c5c:	e1a03431 	lsr	r3, r1, r4
   24c60:	e1833510 	orr	r3, r3, r0, lsl r5
   24c64:	e1a01430 	lsr	r1, r0, r4
   24c68:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   24c6c:	e1c11430 	bic	r1, r1, r0, lsr r4
   24c70:	e0811fa3 	add	r1, r1, r3, lsr #31
   24c74:	e19ee083 	orrs	lr, lr, r3, lsl #1
   24c78:	01c11fa3 	biceq	r1, r1, r3, lsr #31
   24c7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   24c80:	e3340000 	teq	r4, #0
   24c84:	1a000008 	bne	24cac <__aeabi_dmul+0x1c0>
   24c88:	e2006102 	and	r6, r0, #-2147483648	; 0x80000000
   24c8c:	e1b01081 	lsls	r1, r1, #1
   24c90:	e0a00000 	adc	r0, r0, r0
   24c94:	e3100601 	tst	r0, #1048576	; 0x100000
   24c98:	02444001 	subeq	r4, r4, #1
   24c9c:	0afffffa 	beq	24c8c <__aeabi_dmul+0x1a0>
   24ca0:	e1800006 	orr	r0, r0, r6
   24ca4:	e3350000 	teq	r5, #0
   24ca8:	112fff1e 	bxne	lr
   24cac:	e2026102 	and	r6, r2, #-2147483648	; 0x80000000
   24cb0:	e1b03083 	lsls	r3, r3, #1
   24cb4:	e0a22002 	adc	r2, r2, r2
   24cb8:	e3120601 	tst	r2, #1048576	; 0x100000
   24cbc:	02455001 	subeq	r5, r5, #1
   24cc0:	0afffffa 	beq	24cb0 <__aeabi_dmul+0x1c4>
   24cc4:	e1822006 	orr	r2, r2, r6
   24cc8:	e12fff1e 	bx	lr
   24ccc:	e134000c 	teq	r4, ip
   24cd0:	e00c5a22 	and	r5, ip, r2, lsr #20
   24cd4:	1135000c 	teqne	r5, ip
   24cd8:	0a000006 	beq	24cf8 <__aeabi_dmul+0x20c>
   24cdc:	e1916080 	orrs	r6, r1, r0, lsl #1
   24ce0:	11936082 	orrsne	r6, r3, r2, lsl #1
   24ce4:	1affffe5 	bne	24c80 <__aeabi_dmul+0x194>
   24ce8:	e0200002 	eor	r0, r0, r2
   24cec:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   24cf0:	e3a01000 	mov	r1, #0
   24cf4:	e8bd8070 	pop	{r4, r5, r6, pc}
   24cf8:	e1916080 	orrs	r6, r1, r0, lsl #1
   24cfc:	01a01003 	moveq	r1, r3
   24d00:	01a00002 	moveq	r0, r2
   24d04:	11936082 	orrsne	r6, r3, r2, lsl #1
   24d08:	0a00000f 	beq	24d4c <__aeabi_dmul+0x260>
   24d0c:	e134000c 	teq	r4, ip
   24d10:	1a000001 	bne	24d1c <__aeabi_dmul+0x230>
   24d14:	e1916600 	orrs	r6, r1, r0, lsl #12
   24d18:	1a00000b 	bne	24d4c <__aeabi_dmul+0x260>
   24d1c:	e135000c 	teq	r5, ip
   24d20:	1a000003 	bne	24d34 <__aeabi_dmul+0x248>
   24d24:	e1936602 	orrs	r6, r3, r2, lsl #12
   24d28:	11a01003 	movne	r1, r3
   24d2c:	11a00002 	movne	r0, r2
   24d30:	1a000005 	bne	24d4c <__aeabi_dmul+0x260>
   24d34:	e0200002 	eor	r0, r0, r2
   24d38:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   24d3c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   24d40:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
   24d44:	e3a01000 	mov	r1, #0
   24d48:	e8bd8070 	pop	{r4, r5, r6, pc}
   24d4c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   24d50:	e380073e 	orr	r0, r0, #16252928	; 0xf80000
   24d54:	e8bd8070 	pop	{r4, r5, r6, pc}

00024d58 <__aeabi_ddiv>:
   24d58:	e92d4070 	push	{r4, r5, r6, lr}
   24d5c:	e3a0c0ff 	mov	ip, #255	; 0xff
   24d60:	e38ccc07 	orr	ip, ip, #1792	; 0x700
   24d64:	e01c4a20 	ands	r4, ip, r0, lsr #20
   24d68:	101c5a22 	andsne	r5, ip, r2, lsr #20
   24d6c:	1134000c 	teqne	r4, ip
   24d70:	1135000c 	teqne	r5, ip
   24d74:	0b00005c 	bleq	24eec <__aeabi_ddiv+0x194>
   24d78:	e0444005 	sub	r4, r4, r5
   24d7c:	e020e002 	eor	lr, r0, r2
   24d80:	e1935602 	orrs	r5, r3, r2, lsl #12
   24d84:	e1a00600 	lsl	r0, r0, #12
   24d88:	0a00004b 	beq	24ebc <__aeabi_ddiv+0x164>
   24d8c:	e1a02602 	lsl	r2, r2, #12
   24d90:	e3a05201 	mov	r5, #268435456	; 0x10000000
   24d94:	e1852222 	orr	r2, r5, r2, lsr #4
   24d98:	e1822c23 	orr	r2, r2, r3, lsr #24
   24d9c:	e1a03403 	lsl	r3, r3, #8
   24da0:	e1855220 	orr	r5, r5, r0, lsr #4
   24da4:	e1855c21 	orr	r5, r5, r1, lsr #24
   24da8:	e1a06401 	lsl	r6, r1, #8
   24dac:	e20e0102 	and	r0, lr, #-2147483648	; 0x80000000
   24db0:	e1550002 	cmp	r5, r2
   24db4:	01560003 	cmpeq	r6, r3
   24db8:	e2a440fd 	adc	r4, r4, #253	; 0xfd
   24dbc:	e2844c03 	add	r4, r4, #768	; 0x300
   24dc0:	2a000001 	bcs	24dcc <__aeabi_ddiv+0x74>
   24dc4:	e1b020a2 	lsrs	r2, r2, #1
   24dc8:	e1a03063 	rrx	r3, r3
   24dcc:	e0566003 	subs	r6, r6, r3
   24dd0:	e0c55002 	sbc	r5, r5, r2
   24dd4:	e1b020a2 	lsrs	r2, r2, #1
   24dd8:	e1a03063 	rrx	r3, r3
   24ddc:	e3a01601 	mov	r1, #1048576	; 0x100000
   24de0:	e3a0c702 	mov	ip, #524288	; 0x80000
   24de4:	e056e003 	subs	lr, r6, r3
   24de8:	e0d5e002 	sbcs	lr, r5, r2
   24dec:	20466003 	subcs	r6, r6, r3
   24df0:	21a0500e 	movcs	r5, lr
   24df4:	2181100c 	orrcs	r1, r1, ip
   24df8:	e1b020a2 	lsrs	r2, r2, #1
   24dfc:	e1a03063 	rrx	r3, r3
   24e00:	e056e003 	subs	lr, r6, r3
   24e04:	e0d5e002 	sbcs	lr, r5, r2
   24e08:	20466003 	subcs	r6, r6, r3
   24e0c:	21a0500e 	movcs	r5, lr
   24e10:	218110ac 	orrcs	r1, r1, ip, lsr #1
   24e14:	e1b020a2 	lsrs	r2, r2, #1
   24e18:	e1a03063 	rrx	r3, r3
   24e1c:	e056e003 	subs	lr, r6, r3
   24e20:	e0d5e002 	sbcs	lr, r5, r2
   24e24:	20466003 	subcs	r6, r6, r3
   24e28:	21a0500e 	movcs	r5, lr
   24e2c:	2181112c 	orrcs	r1, r1, ip, lsr #2
   24e30:	e1b020a2 	lsrs	r2, r2, #1
   24e34:	e1a03063 	rrx	r3, r3
   24e38:	e056e003 	subs	lr, r6, r3
   24e3c:	e0d5e002 	sbcs	lr, r5, r2
   24e40:	20466003 	subcs	r6, r6, r3
   24e44:	21a0500e 	movcs	r5, lr
   24e48:	218111ac 	orrcs	r1, r1, ip, lsr #3
   24e4c:	e195e006 	orrs	lr, r5, r6
   24e50:	0a00000d 	beq	24e8c <__aeabi_ddiv+0x134>
   24e54:	e1a05205 	lsl	r5, r5, #4
   24e58:	e1855e26 	orr	r5, r5, r6, lsr #28
   24e5c:	e1a06206 	lsl	r6, r6, #4
   24e60:	e1a02182 	lsl	r2, r2, #3
   24e64:	e1822ea3 	orr	r2, r2, r3, lsr #29
   24e68:	e1a03183 	lsl	r3, r3, #3
   24e6c:	e1b0c22c 	lsrs	ip, ip, #4
   24e70:	1affffdb 	bne	24de4 <__aeabi_ddiv+0x8c>
   24e74:	e3100601 	tst	r0, #1048576	; 0x100000
   24e78:	1a000006 	bne	24e98 <__aeabi_ddiv+0x140>
   24e7c:	e1800001 	orr	r0, r0, r1
   24e80:	e3a01000 	mov	r1, #0
   24e84:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
   24e88:	eaffffd5 	b	24de4 <__aeabi_ddiv+0x8c>
   24e8c:	e3100601 	tst	r0, #1048576	; 0x100000
   24e90:	01800001 	orreq	r0, r0, r1
   24e94:	03a01000 	moveq	r1, #0
   24e98:	e254c0fd 	subs	ip, r4, #253	; 0xfd
   24e9c:	835c0c07 	cmphi	ip, #1792	; 0x700
   24ea0:	8affff4a 	bhi	24bd0 <__aeabi_dmul+0xe4>
   24ea4:	e055c002 	subs	ip, r5, r2
   24ea8:	0056c003 	subseq	ip, r6, r3
   24eac:	01b0c0a1 	lsrseq	ip, r1, #1
   24eb0:	e2b11000 	adcs	r1, r1, #0
   24eb4:	e0a00a04 	adc	r0, r0, r4, lsl #20
   24eb8:	e8bd8070 	pop	{r4, r5, r6, pc}
   24ebc:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
   24ec0:	e18e0620 	orr	r0, lr, r0, lsr #12
   24ec4:	e09440ac 	adds	r4, r4, ip, lsr #1
   24ec8:	c074500c 	rsbsgt	r5, r4, ip
   24ecc:	c1800a04 	orrgt	r0, r0, r4, lsl #20
   24ed0:	c8bd8070 	popgt	{r4, r5, r6, pc}
   24ed4:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   24ed8:	e3a0e000 	mov	lr, #0
   24edc:	e2544001 	subs	r4, r4, #1
   24ee0:	eaffff3a 	b	24bd0 <__aeabi_dmul+0xe4>
   24ee4:	e185e006 	orr	lr, r5, r6
   24ee8:	eaffff38 	b	24bd0 <__aeabi_dmul+0xe4>
   24eec:	e00c5a22 	and	r5, ip, r2, lsr #20
   24ef0:	e134000c 	teq	r4, ip
   24ef4:	0135000c 	teqeq	r5, ip
   24ef8:	0affff93 	beq	24d4c <__aeabi_dmul+0x260>
   24efc:	e134000c 	teq	r4, ip
   24f00:	1a000006 	bne	24f20 <__aeabi_ddiv+0x1c8>
   24f04:	e1914600 	orrs	r4, r1, r0, lsl #12
   24f08:	1affff8f 	bne	24d4c <__aeabi_dmul+0x260>
   24f0c:	e135000c 	teq	r5, ip
   24f10:	1affff87 	bne	24d34 <__aeabi_dmul+0x248>
   24f14:	e1a01003 	mov	r1, r3
   24f18:	e1a00002 	mov	r0, r2
   24f1c:	eaffff8a 	b	24d4c <__aeabi_dmul+0x260>
   24f20:	e135000c 	teq	r5, ip
   24f24:	1a000004 	bne	24f3c <__aeabi_ddiv+0x1e4>
   24f28:	e1935602 	orrs	r5, r3, r2, lsl #12
   24f2c:	0affff6d 	beq	24ce8 <__aeabi_dmul+0x1fc>
   24f30:	e1a01003 	mov	r1, r3
   24f34:	e1a00002 	mov	r0, r2
   24f38:	eaffff83 	b	24d4c <__aeabi_dmul+0x260>
   24f3c:	e1916080 	orrs	r6, r1, r0, lsl #1
   24f40:	11936082 	orrsne	r6, r3, r2, lsl #1
   24f44:	1affff4d 	bne	24c80 <__aeabi_dmul+0x194>
   24f48:	e1914080 	orrs	r4, r1, r0, lsl #1
   24f4c:	1affff78 	bne	24d34 <__aeabi_dmul+0x248>
   24f50:	e1935082 	orrs	r5, r3, r2, lsl #1
   24f54:	1affff63 	bne	24ce8 <__aeabi_dmul+0x1fc>
   24f58:	eaffff7b 	b	24d4c <__aeabi_dmul+0x260>

00024f5c <__gedf2>:
   24f5c:	e3e0c000 	mvn	ip, #0
   24f60:	ea000002 	b	24f70 <__cmpdf2+0x4>

00024f64 <__ledf2>:
   24f64:	e3a0c001 	mov	ip, #1
   24f68:	ea000000 	b	24f70 <__cmpdf2+0x4>

00024f6c <__cmpdf2>:
   24f6c:	e3a0c001 	mov	ip, #1
   24f70:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
   24f74:	e1a0c080 	lsl	ip, r0, #1
   24f78:	e1f0cacc 	mvns	ip, ip, asr #21
   24f7c:	e1a0c082 	lsl	ip, r2, #1
   24f80:	11f0cacc 	mvnsne	ip, ip, asr #21
   24f84:	0a00000e 	beq	24fc4 <__cmpdf2+0x58>
   24f88:	e28dd004 	add	sp, sp, #4
   24f8c:	e191c080 	orrs	ip, r1, r0, lsl #1
   24f90:	0193c082 	orrseq	ip, r3, r2, lsl #1
   24f94:	11300002 	teqne	r0, r2
   24f98:	01310003 	teqeq	r1, r3
   24f9c:	03a00000 	moveq	r0, #0
   24fa0:	012fff1e 	bxeq	lr
   24fa4:	e3700000 	cmn	r0, #0
   24fa8:	e1300002 	teq	r0, r2
   24fac:	51500002 	cmppl	r0, r2
   24fb0:	01510003 	cmpeq	r1, r3
   24fb4:	21a00fc2 	asrcs	r0, r2, #31
   24fb8:	31e00fc2 	mvncc	r0, r2, asr #31
   24fbc:	e3800001 	orr	r0, r0, #1
   24fc0:	e12fff1e 	bx	lr
   24fc4:	e1a0c080 	lsl	ip, r0, #1
   24fc8:	e1f0cacc 	mvns	ip, ip, asr #21
   24fcc:	1a000001 	bne	24fd8 <__cmpdf2+0x6c>
   24fd0:	e191c600 	orrs	ip, r1, r0, lsl #12
   24fd4:	1a000004 	bne	24fec <__cmpdf2+0x80>
   24fd8:	e1a0c082 	lsl	ip, r2, #1
   24fdc:	e1f0cacc 	mvns	ip, ip, asr #21
   24fe0:	1affffe8 	bne	24f88 <__cmpdf2+0x1c>
   24fe4:	e193c602 	orrs	ip, r3, r2, lsl #12
   24fe8:	0affffe6 	beq	24f88 <__cmpdf2+0x1c>
   24fec:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   24ff0:	e12fff1e 	bx	lr

00024ff4 <__aeabi_cdrcmple>:
   24ff4:	e1a0c000 	mov	ip, r0
   24ff8:	e1a00002 	mov	r0, r2
   24ffc:	e1a0200c 	mov	r2, ip
   25000:	e1a0c001 	mov	ip, r1
   25004:	e1a01003 	mov	r1, r3
   25008:	e1a0300c 	mov	r3, ip
   2500c:	eaffffff 	b	25010 <__aeabi_cdcmpeq>

00025010 <__aeabi_cdcmpeq>:
   25010:	e92d4001 	push	{r0, lr}
   25014:	ebffffd4 	bl	24f6c <__cmpdf2>
   25018:	e3500000 	cmp	r0, #0
   2501c:	43700000 	cmnmi	r0, #0
   25020:	e8bd8001 	pop	{r0, pc}

00025024 <__aeabi_dcmpeq>:
   25024:	e52de008 	str	lr, [sp, #-8]!
   25028:	ebfffff8 	bl	25010 <__aeabi_cdcmpeq>
   2502c:	03a00001 	moveq	r0, #1
   25030:	13a00000 	movne	r0, #0
   25034:	e49df008 	ldr	pc, [sp], #8

00025038 <__aeabi_dcmplt>:
   25038:	e52de008 	str	lr, [sp, #-8]!
   2503c:	ebfffff3 	bl	25010 <__aeabi_cdcmpeq>
   25040:	33a00001 	movcc	r0, #1
   25044:	23a00000 	movcs	r0, #0
   25048:	e49df008 	ldr	pc, [sp], #8

0002504c <__aeabi_dcmple>:
   2504c:	e52de008 	str	lr, [sp, #-8]!
   25050:	ebffffee 	bl	25010 <__aeabi_cdcmpeq>
   25054:	93a00001 	movls	r0, #1
   25058:	83a00000 	movhi	r0, #0
   2505c:	e49df008 	ldr	pc, [sp], #8

00025060 <__aeabi_dcmpge>:
   25060:	e52de008 	str	lr, [sp, #-8]!
   25064:	ebffffe2 	bl	24ff4 <__aeabi_cdrcmple>
   25068:	93a00001 	movls	r0, #1
   2506c:	83a00000 	movhi	r0, #0
   25070:	e49df008 	ldr	pc, [sp], #8

00025074 <__aeabi_dcmpgt>:
   25074:	e52de008 	str	lr, [sp, #-8]!
   25078:	ebffffdd 	bl	24ff4 <__aeabi_cdrcmple>
   2507c:	33a00001 	movcc	r0, #1
   25080:	23a00000 	movcs	r0, #0
   25084:	e49df008 	ldr	pc, [sp], #8

00025088 <__aeabi_d2iz>:
   25088:	e1a02080 	lsl	r2, r0, #1
   2508c:	e2922602 	adds	r2, r2, #2097152	; 0x200000
   25090:	2a00000c 	bcs	250c8 <__aeabi_d2iz+0x40>
   25094:	5a000009 	bpl	250c0 <__aeabi_d2iz+0x38>
   25098:	e3e03e3e 	mvn	r3, #992	; 0x3e0
   2509c:	e0532ac2 	subs	r2, r3, r2, asr #21
   250a0:	9a00000a 	bls	250d0 <__aeabi_d2iz+0x48>
   250a4:	e1a03580 	lsl	r3, r0, #11
   250a8:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   250ac:	e1833aa1 	orr	r3, r3, r1, lsr #21
   250b0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   250b4:	e1a00233 	lsr	r0, r3, r2
   250b8:	12600000 	rsbne	r0, r0, #0
   250bc:	e12fff1e 	bx	lr
   250c0:	e3a00000 	mov	r0, #0
   250c4:	e12fff1e 	bx	lr
   250c8:	e1911600 	orrs	r1, r1, r0, lsl #12
   250cc:	1a000002 	bne	250dc <__aeabi_d2iz+0x54>
   250d0:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
   250d4:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
   250d8:	e12fff1e 	bx	lr
   250dc:	e3a00000 	mov	r0, #0
   250e0:	e12fff1e 	bx	lr

000250e4 <__aeabi_d2uiz>:
   250e4:	e1b02080 	lsls	r2, r0, #1
   250e8:	2a00000a 	bcs	25118 <__aeabi_d2uiz+0x34>
   250ec:	e2922602 	adds	r2, r2, #2097152	; 0x200000
   250f0:	2a00000a 	bcs	25120 <__aeabi_d2uiz+0x3c>
   250f4:	5a000007 	bpl	25118 <__aeabi_d2uiz+0x34>
   250f8:	e3e03e3e 	mvn	r3, #992	; 0x3e0
   250fc:	e0532ac2 	subs	r2, r3, r2, asr #21
   25100:	4a000008 	bmi	25128 <__aeabi_d2uiz+0x44>
   25104:	e1a03580 	lsl	r3, r0, #11
   25108:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   2510c:	e1833aa1 	orr	r3, r3, r1, lsr #21
   25110:	e1a00233 	lsr	r0, r3, r2
   25114:	e12fff1e 	bx	lr
   25118:	e3a00000 	mov	r0, #0
   2511c:	e12fff1e 	bx	lr
   25120:	e1911600 	orrs	r1, r1, r0, lsl #12
   25124:	1a000001 	bne	25130 <__aeabi_d2uiz+0x4c>
   25128:	e3e00000 	mvn	r0, #0
   2512c:	e12fff1e 	bx	lr
   25130:	e3a00000 	mov	r0, #0
   25134:	e12fff1e 	bx	lr

00025138 <__aeabi_d2f>:
   25138:	e1a02080 	lsl	r2, r0, #1
   2513c:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
   25140:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
   25144:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   25148:	9a000006 	bls	25168 <__aeabi_d2f+0x30>
   2514c:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
   25150:	e1a02181 	lsl	r2, r1, #3
   25154:	e18c1ea1 	orr	r1, ip, r1, lsr #29
   25158:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
   2515c:	e0a10103 	adc	r0, r1, r3, lsl #2
   25160:	03c00001 	biceq	r0, r0, #1
   25164:	e12fff1e 	bx	lr
   25168:	e3100101 	tst	r0, #1073741824	; 0x40000000
   2516c:	1a00000f 	bne	251b0 <__aeabi_d2f+0x78>
   25170:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
   25174:	b2000102 	andlt	r0, r0, #-2147483648	; 0x80000000
   25178:	b12fff1e 	bxlt	lr
   2517c:	e3800601 	orr	r0, r0, #1048576	; 0x100000
   25180:	e1a02aa2 	lsr	r2, r2, #21
   25184:	e2622018 	rsb	r2, r2, #24
   25188:	e262c020 	rsb	ip, r2, #32
   2518c:	e1b03c11 	lsls	r3, r1, ip
   25190:	e1a01231 	lsr	r1, r1, r2
   25194:	13811001 	orrne	r1, r1, #1
   25198:	e1a03580 	lsl	r3, r0, #11
   2519c:	e1a035a3 	lsr	r3, r3, #11
   251a0:	e1811c13 	orr	r1, r1, r3, lsl ip
   251a4:	e1a03233 	lsr	r3, r3, r2
   251a8:	e1a03083 	lsl	r3, r3, #1
   251ac:	eaffffe6 	b	2514c <__aeabi_d2f+0x14>
   251b0:	e1f03ac2 	mvns	r3, r2, asr #21
   251b4:	1a000003 	bne	251c8 <__aeabi_d2f+0x90>
   251b8:	e1913600 	orrs	r3, r1, r0, lsl #12
   251bc:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
   251c0:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
   251c4:	112fff1e 	bxne	lr
   251c8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   251cc:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   251d0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   251d4:	e12fff1e 	bx	lr

000251d8 <__aeabi_frsub>:
   251d8:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
   251dc:	ea000000 	b	251e4 <__addsf3>

000251e0 <__aeabi_fsub>:
   251e0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

000251e4 <__addsf3>:
   251e4:	e1b02080 	lsls	r2, r0, #1
   251e8:	11b03081 	lslsne	r3, r1, #1
   251ec:	11320003 	teqne	r2, r3
   251f0:	11f0cc42 	mvnsne	ip, r2, asr #24
   251f4:	11f0cc43 	mvnsne	ip, r3, asr #24
   251f8:	0a000047 	beq	2531c <__addsf3+0x138>
   251fc:	e1a02c22 	lsr	r2, r2, #24
   25200:	e0723c23 	rsbs	r3, r2, r3, lsr #24
   25204:	c0822003 	addgt	r2, r2, r3
   25208:	c0201001 	eorgt	r1, r0, r1
   2520c:	c0210000 	eorgt	r0, r1, r0
   25210:	c0201001 	eorgt	r1, r0, r1
   25214:	b2633000 	rsblt	r3, r3, #0
   25218:	e3530019 	cmp	r3, #25
   2521c:	812fff1e 	bxhi	lr
   25220:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   25224:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   25228:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
   2522c:	12600000 	rsbne	r0, r0, #0
   25230:	e3110102 	tst	r1, #-2147483648	; 0x80000000
   25234:	e3811502 	orr	r1, r1, #8388608	; 0x800000
   25238:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
   2523c:	12611000 	rsbne	r1, r1, #0
   25240:	e1320003 	teq	r2, r3
   25244:	0a00002e 	beq	25304 <__addsf3+0x120>
   25248:	e2422001 	sub	r2, r2, #1
   2524c:	e0900351 	adds	r0, r0, r1, asr r3
   25250:	e2633020 	rsb	r3, r3, #32
   25254:	e1a01311 	lsl	r1, r1, r3
   25258:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
   2525c:	5a000001 	bpl	25268 <__addsf3+0x84>
   25260:	e2711000 	rsbs	r1, r1, #0
   25264:	e2e00000 	rsc	r0, r0, #0
   25268:	e3500502 	cmp	r0, #8388608	; 0x800000
   2526c:	3a00000b 	bcc	252a0 <__addsf3+0xbc>
   25270:	e3500401 	cmp	r0, #16777216	; 0x1000000
   25274:	3a000004 	bcc	2528c <__addsf3+0xa8>
   25278:	e1b000a0 	lsrs	r0, r0, #1
   2527c:	e1a01061 	rrx	r1, r1
   25280:	e2822001 	add	r2, r2, #1
   25284:	e35200fe 	cmp	r2, #254	; 0xfe
   25288:	2a000038 	bcs	25370 <__addsf3+0x18c>
   2528c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
   25290:	e0a00b82 	adc	r0, r0, r2, lsl #23
   25294:	03c00001 	biceq	r0, r0, #1
   25298:	e1800003 	orr	r0, r0, r3
   2529c:	e12fff1e 	bx	lr
   252a0:	e1b01081 	lsls	r1, r1, #1
   252a4:	e0a00000 	adc	r0, r0, r0
   252a8:	e3100502 	tst	r0, #8388608	; 0x800000
   252ac:	e2422001 	sub	r2, r2, #1
   252b0:	1afffff5 	bne	2528c <__addsf3+0xa8>
   252b4:	e1b0c620 	lsrs	ip, r0, #12
   252b8:	01a00600 	lsleq	r0, r0, #12
   252bc:	0242200c 	subeq	r2, r2, #12
   252c0:	e31008ff 	tst	r0, #16711680	; 0xff0000
   252c4:	01a00400 	lsleq	r0, r0, #8
   252c8:	02422008 	subeq	r2, r2, #8
   252cc:	e310060f 	tst	r0, #15728640	; 0xf00000
   252d0:	01a00200 	lsleq	r0, r0, #4
   252d4:	02422004 	subeq	r2, r2, #4
   252d8:	e3100503 	tst	r0, #12582912	; 0xc00000
   252dc:	01a00100 	lsleq	r0, r0, #2
   252e0:	02422002 	subeq	r2, r2, #2
   252e4:	e3500502 	cmp	r0, #8388608	; 0x800000
   252e8:	31a00080 	lslcc	r0, r0, #1
   252ec:	e2d22000 	sbcs	r2, r2, #0
   252f0:	a0800b82 	addge	r0, r0, r2, lsl #23
   252f4:	b2622000 	rsblt	r2, r2, #0
   252f8:	a1800003 	orrge	r0, r0, r3
   252fc:	b1830230 	orrlt	r0, r3, r0, lsr r2
   25300:	e12fff1e 	bx	lr
   25304:	e3320000 	teq	r2, #0
   25308:	e2211502 	eor	r1, r1, #8388608	; 0x800000
   2530c:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
   25310:	02822001 	addeq	r2, r2, #1
   25314:	12433001 	subne	r3, r3, #1
   25318:	eaffffca 	b	25248 <__addsf3+0x64>
   2531c:	e1a03081 	lsl	r3, r1, #1
   25320:	e1f0cc42 	mvns	ip, r2, asr #24
   25324:	11f0cc43 	mvnsne	ip, r3, asr #24
   25328:	0a000013 	beq	2537c <__addsf3+0x198>
   2532c:	e1320003 	teq	r2, r3
   25330:	0a000002 	beq	25340 <__addsf3+0x15c>
   25334:	e3320000 	teq	r2, #0
   25338:	01a00001 	moveq	r0, r1
   2533c:	e12fff1e 	bx	lr
   25340:	e1300001 	teq	r0, r1
   25344:	13a00000 	movne	r0, #0
   25348:	112fff1e 	bxne	lr
   2534c:	e31204ff 	tst	r2, #-16777216	; 0xff000000
   25350:	1a000002 	bne	25360 <__addsf3+0x17c>
   25354:	e1b00080 	lsls	r0, r0, #1
   25358:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
   2535c:	e12fff1e 	bx	lr
   25360:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
   25364:	32800502 	addcc	r0, r0, #8388608	; 0x800000
   25368:	312fff1e 	bxcc	lr
   2536c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
   25370:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
   25374:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   25378:	e12fff1e 	bx	lr
   2537c:	e1f02c42 	mvns	r2, r2, asr #24
   25380:	11a00001 	movne	r0, r1
   25384:	01f03c43 	mvnseq	r3, r3, asr #24
   25388:	11a01000 	movne	r1, r0
   2538c:	e1b02480 	lsls	r2, r0, #9
   25390:	01b03481 	lslseq	r3, r1, #9
   25394:	01300001 	teqeq	r0, r1
   25398:	13800501 	orrne	r0, r0, #4194304	; 0x400000
   2539c:	e12fff1e 	bx	lr

000253a0 <__aeabi_ui2f>:
   253a0:	e3a03000 	mov	r3, #0
   253a4:	ea000001 	b	253b0 <__aeabi_i2f+0x8>

000253a8 <__aeabi_i2f>:
   253a8:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
   253ac:	42600000 	rsbmi	r0, r0, #0
   253b0:	e1b0c000 	movs	ip, r0
   253b4:	012fff1e 	bxeq	lr
   253b8:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
   253bc:	e1a01000 	mov	r1, r0
   253c0:	e3a00000 	mov	r0, #0
   253c4:	ea00000f 	b	25408 <__aeabi_l2f+0x30>

000253c8 <__aeabi_ul2f>:
   253c8:	e1902001 	orrs	r2, r0, r1
   253cc:	012fff1e 	bxeq	lr
   253d0:	e3a03000 	mov	r3, #0
   253d4:	ea000005 	b	253f0 <__aeabi_l2f+0x18>

000253d8 <__aeabi_l2f>:
   253d8:	e1902001 	orrs	r2, r0, r1
   253dc:	012fff1e 	bxeq	lr
   253e0:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
   253e4:	5a000001 	bpl	253f0 <__aeabi_l2f+0x18>
   253e8:	e2700000 	rsbs	r0, r0, #0
   253ec:	e2e11000 	rsc	r1, r1, #0
   253f0:	e1b0c001 	movs	ip, r1
   253f4:	01a0c000 	moveq	ip, r0
   253f8:	01a01000 	moveq	r1, r0
   253fc:	03a00000 	moveq	r0, #0
   25400:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
   25404:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
   25408:	e2433502 	sub	r3, r3, #8388608	; 0x800000
   2540c:	e3a02017 	mov	r2, #23
   25410:	e35c0801 	cmp	ip, #65536	; 0x10000
   25414:	21a0c82c 	lsrcs	ip, ip, #16
   25418:	22422010 	subcs	r2, r2, #16
   2541c:	e35c0c01 	cmp	ip, #256	; 0x100
   25420:	21a0c42c 	lsrcs	ip, ip, #8
   25424:	22422008 	subcs	r2, r2, #8
   25428:	e35c0010 	cmp	ip, #16
   2542c:	21a0c22c 	lsrcs	ip, ip, #4
   25430:	22422004 	subcs	r2, r2, #4
   25434:	e35c0004 	cmp	ip, #4
   25438:	22422002 	subcs	r2, r2, #2
   2543c:	304220ac 	subcc	r2, r2, ip, lsr #1
   25440:	e05221ac 	subs	r2, r2, ip, lsr #3
   25444:	e0433b82 	sub	r3, r3, r2, lsl #23
   25448:	ba000006 	blt	25468 <__aeabi_l2f+0x90>
   2544c:	e0833211 	add	r3, r3, r1, lsl r2
   25450:	e1a0c210 	lsl	ip, r0, r2
   25454:	e2622020 	rsb	r2, r2, #32
   25458:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
   2545c:	e0a30230 	adc	r0, r3, r0, lsr r2
   25460:	03c00001 	biceq	r0, r0, #1
   25464:	e12fff1e 	bx	lr
   25468:	e2822020 	add	r2, r2, #32
   2546c:	e1a0c211 	lsl	ip, r1, r2
   25470:	e2622020 	rsb	r2, r2, #32
   25474:	e190008c 	orrs	r0, r0, ip, lsl #1
   25478:	e0a30231 	adc	r0, r3, r1, lsr r2
   2547c:	01c00fac 	biceq	r0, r0, ip, lsr #31
   25480:	e12fff1e 	bx	lr

00025484 <__aeabi_fmul>:
   25484:	e3a0c0ff 	mov	ip, #255	; 0xff
   25488:	e01c2ba0 	ands	r2, ip, r0, lsr #23
   2548c:	101c3ba1 	andsne	r3, ip, r1, lsr #23
   25490:	1132000c 	teqne	r2, ip
   25494:	1133000c 	teqne	r3, ip
   25498:	0a00003e 	beq	25598 <__aeabi_fmul+0x114>
   2549c:	e0822003 	add	r2, r2, r3
   254a0:	e020c001 	eor	ip, r0, r1
   254a4:	e1b00480 	lsls	r0, r0, #9
   254a8:	11b01481 	lslsne	r1, r1, #9
   254ac:	0a000010 	beq	254f4 <__aeabi_fmul+0x70>
   254b0:	e3a03302 	mov	r3, #134217728	; 0x8000000
   254b4:	e18302a0 	orr	r0, r3, r0, lsr #5
   254b8:	e18312a1 	orr	r1, r3, r1, lsr #5
   254bc:	e0813190 	umull	r3, r1, r0, r1
   254c0:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
   254c4:	e3510502 	cmp	r1, #8388608	; 0x800000
   254c8:	31a01081 	lslcc	r1, r1, #1
   254cc:	31811fa3 	orrcc	r1, r1, r3, lsr #31
   254d0:	31a03083 	lslcc	r3, r3, #1
   254d4:	e1800001 	orr	r0, r0, r1
   254d8:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
   254dc:	e35200fd 	cmp	r2, #253	; 0xfd
   254e0:	8a00000f 	bhi	25524 <__aeabi_fmul+0xa0>
   254e4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   254e8:	e0a00b82 	adc	r0, r0, r2, lsl #23
   254ec:	03c00001 	biceq	r0, r0, #1
   254f0:	e12fff1e 	bx	lr
   254f4:	e3300000 	teq	r0, #0
   254f8:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
   254fc:	01a01481 	lsleq	r1, r1, #9
   25500:	e18c04a0 	orr	r0, ip, r0, lsr #9
   25504:	e18004a1 	orr	r0, r0, r1, lsr #9
   25508:	e252207f 	subs	r2, r2, #127	; 0x7f
   2550c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
   25510:	c1800b82 	orrgt	r0, r0, r2, lsl #23
   25514:	c12fff1e 	bxgt	lr
   25518:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   2551c:	e3a03000 	mov	r3, #0
   25520:	e2522001 	subs	r2, r2, #1
   25524:	ca000035 	bgt	25600 <__aeabi_fmul+0x17c>
   25528:	e3720019 	cmn	r2, #25
   2552c:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
   25530:	d12fff1e 	bxle	lr
   25534:	e2622000 	rsb	r2, r2, #0
   25538:	e1b01080 	lsls	r1, r0, #1
   2553c:	e1a01231 	lsr	r1, r1, r2
   25540:	e2622020 	rsb	r2, r2, #32
   25544:	e1a0c210 	lsl	ip, r0, r2
   25548:	e1b00061 	rrxs	r0, r1
   2554c:	e2a00000 	adc	r0, r0, #0
   25550:	e193308c 	orrs	r3, r3, ip, lsl #1
   25554:	01c00fac 	biceq	r0, r0, ip, lsr #31
   25558:	e12fff1e 	bx	lr
   2555c:	e3320000 	teq	r2, #0
   25560:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
   25564:	01a00080 	lsleq	r0, r0, #1
   25568:	03100502 	tsteq	r0, #8388608	; 0x800000
   2556c:	02422001 	subeq	r2, r2, #1
   25570:	0afffffb 	beq	25564 <__aeabi_fmul+0xe0>
   25574:	e180000c 	orr	r0, r0, ip
   25578:	e3330000 	teq	r3, #0
   2557c:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
   25580:	01a01081 	lsleq	r1, r1, #1
   25584:	03110502 	tsteq	r1, #8388608	; 0x800000
   25588:	02433001 	subeq	r3, r3, #1
   2558c:	0afffffb 	beq	25580 <__aeabi_fmul+0xfc>
   25590:	e181100c 	orr	r1, r1, ip
   25594:	eaffffc0 	b	2549c <__aeabi_fmul+0x18>
   25598:	e00c3ba1 	and	r3, ip, r1, lsr #23
   2559c:	e132000c 	teq	r2, ip
   255a0:	1133000c 	teqne	r3, ip
   255a4:	0a000005 	beq	255c0 <__aeabi_fmul+0x13c>
   255a8:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
   255ac:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
   255b0:	1affffe9 	bne	2555c <__aeabi_fmul+0xd8>
   255b4:	e0200001 	eor	r0, r0, r1
   255b8:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   255bc:	e12fff1e 	bx	lr
   255c0:	e3300000 	teq	r0, #0
   255c4:	13300102 	teqne	r0, #-2147483648	; 0x80000000
   255c8:	01a00001 	moveq	r0, r1
   255cc:	13310000 	teqne	r1, #0
   255d0:	13310102 	teqne	r1, #-2147483648	; 0x80000000
   255d4:	0a00000d 	beq	25610 <__aeabi_fmul+0x18c>
   255d8:	e132000c 	teq	r2, ip
   255dc:	1a000001 	bne	255e8 <__aeabi_fmul+0x164>
   255e0:	e1b02480 	lsls	r2, r0, #9
   255e4:	1a000009 	bne	25610 <__aeabi_fmul+0x18c>
   255e8:	e133000c 	teq	r3, ip
   255ec:	1a000002 	bne	255fc <__aeabi_fmul+0x178>
   255f0:	e1b03481 	lsls	r3, r1, #9
   255f4:	11a00001 	movne	r0, r1
   255f8:	1a000004 	bne	25610 <__aeabi_fmul+0x18c>
   255fc:	e0200001 	eor	r0, r0, r1
   25600:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
   25604:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   25608:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   2560c:	e12fff1e 	bx	lr
   25610:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
   25614:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
   25618:	e12fff1e 	bx	lr

0002561c <__aeabi_fdiv>:
   2561c:	e3a0c0ff 	mov	ip, #255	; 0xff
   25620:	e01c2ba0 	ands	r2, ip, r0, lsr #23
   25624:	101c3ba1 	andsne	r3, ip, r1, lsr #23
   25628:	1132000c 	teqne	r2, ip
   2562c:	1133000c 	teqne	r3, ip
   25630:	0a00003a 	beq	25720 <__aeabi_fdiv+0x104>
   25634:	e0422003 	sub	r2, r2, r3
   25638:	e020c001 	eor	ip, r0, r1
   2563c:	e1b01481 	lsls	r1, r1, #9
   25640:	e1a00480 	lsl	r0, r0, #9
   25644:	0a00001c 	beq	256bc <__aeabi_fdiv+0xa0>
   25648:	e3a03201 	mov	r3, #268435456	; 0x10000000
   2564c:	e1831221 	orr	r1, r3, r1, lsr #4
   25650:	e1833220 	orr	r3, r3, r0, lsr #4
   25654:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
   25658:	e1530001 	cmp	r3, r1
   2565c:	31a03083 	lslcc	r3, r3, #1
   25660:	e2a2207d 	adc	r2, r2, #125	; 0x7d
   25664:	e3a0c502 	mov	ip, #8388608	; 0x800000
   25668:	e1530001 	cmp	r3, r1
   2566c:	20433001 	subcs	r3, r3, r1
   25670:	2180000c 	orrcs	r0, r0, ip
   25674:	e15300a1 	cmp	r3, r1, lsr #1
   25678:	204330a1 	subcs	r3, r3, r1, lsr #1
   2567c:	218000ac 	orrcs	r0, r0, ip, lsr #1
   25680:	e1530121 	cmp	r3, r1, lsr #2
   25684:	20433121 	subcs	r3, r3, r1, lsr #2
   25688:	2180012c 	orrcs	r0, r0, ip, lsr #2
   2568c:	e15301a1 	cmp	r3, r1, lsr #3
   25690:	204331a1 	subcs	r3, r3, r1, lsr #3
   25694:	218001ac 	orrcs	r0, r0, ip, lsr #3
   25698:	e1b03203 	lsls	r3, r3, #4
   2569c:	11b0c22c 	lsrsne	ip, ip, #4
   256a0:	1afffff0 	bne	25668 <__aeabi_fdiv+0x4c>
   256a4:	e35200fd 	cmp	r2, #253	; 0xfd
   256a8:	8affff9d 	bhi	25524 <__aeabi_fmul+0xa0>
   256ac:	e1530001 	cmp	r3, r1
   256b0:	e0a00b82 	adc	r0, r0, r2, lsl #23
   256b4:	03c00001 	biceq	r0, r0, #1
   256b8:	e12fff1e 	bx	lr
   256bc:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
   256c0:	e18c04a0 	orr	r0, ip, r0, lsr #9
   256c4:	e292207f 	adds	r2, r2, #127	; 0x7f
   256c8:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
   256cc:	c1800b82 	orrgt	r0, r0, r2, lsl #23
   256d0:	c12fff1e 	bxgt	lr
   256d4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
   256d8:	e3a03000 	mov	r3, #0
   256dc:	e2522001 	subs	r2, r2, #1
   256e0:	eaffff8f 	b	25524 <__aeabi_fmul+0xa0>
   256e4:	e3320000 	teq	r2, #0
   256e8:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
   256ec:	01a00080 	lsleq	r0, r0, #1
   256f0:	03100502 	tsteq	r0, #8388608	; 0x800000
   256f4:	02422001 	subeq	r2, r2, #1
   256f8:	0afffffb 	beq	256ec <__aeabi_fdiv+0xd0>
   256fc:	e180000c 	orr	r0, r0, ip
   25700:	e3330000 	teq	r3, #0
   25704:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
   25708:	01a01081 	lsleq	r1, r1, #1
   2570c:	03110502 	tsteq	r1, #8388608	; 0x800000
   25710:	02433001 	subeq	r3, r3, #1
   25714:	0afffffb 	beq	25708 <__aeabi_fdiv+0xec>
   25718:	e181100c 	orr	r1, r1, ip
   2571c:	eaffffc4 	b	25634 <__aeabi_fdiv+0x18>
   25720:	e00c3ba1 	and	r3, ip, r1, lsr #23
   25724:	e132000c 	teq	r2, ip
   25728:	1a000005 	bne	25744 <__aeabi_fdiv+0x128>
   2572c:	e1b02480 	lsls	r2, r0, #9
   25730:	1affffb6 	bne	25610 <__aeabi_fmul+0x18c>
   25734:	e133000c 	teq	r3, ip
   25738:	1affffaf 	bne	255fc <__aeabi_fmul+0x178>
   2573c:	e1a00001 	mov	r0, r1
   25740:	eaffffb2 	b	25610 <__aeabi_fmul+0x18c>
   25744:	e133000c 	teq	r3, ip
   25748:	1a000003 	bne	2575c <__aeabi_fdiv+0x140>
   2574c:	e1b03481 	lsls	r3, r1, #9
   25750:	0affff97 	beq	255b4 <__aeabi_fmul+0x130>
   25754:	e1a00001 	mov	r0, r1
   25758:	eaffffac 	b	25610 <__aeabi_fmul+0x18c>
   2575c:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
   25760:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
   25764:	1affffde 	bne	256e4 <__aeabi_fdiv+0xc8>
   25768:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
   2576c:	1affffa2 	bne	255fc <__aeabi_fmul+0x178>
   25770:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
   25774:	1affff8e 	bne	255b4 <__aeabi_fmul+0x130>
   25778:	eaffffa4 	b	25610 <__aeabi_fmul+0x18c>

0002577c <__gesf2>:
   2577c:	e3e0c000 	mvn	ip, #0
   25780:	ea000002 	b	25790 <__cmpsf2+0x4>

00025784 <__lesf2>:
   25784:	e3a0c001 	mov	ip, #1
   25788:	ea000000 	b	25790 <__cmpsf2+0x4>

0002578c <__cmpsf2>:
   2578c:	e3a0c001 	mov	ip, #1
   25790:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
   25794:	e1a02080 	lsl	r2, r0, #1
   25798:	e1a03081 	lsl	r3, r1, #1
   2579c:	e1f0cc42 	mvns	ip, r2, asr #24
   257a0:	11f0cc43 	mvnsne	ip, r3, asr #24
   257a4:	0a000007 	beq	257c8 <__cmpsf2+0x3c>
   257a8:	e28dd004 	add	sp, sp, #4
   257ac:	e192c0a3 	orrs	ip, r2, r3, lsr #1
   257b0:	11300001 	teqne	r0, r1
   257b4:	50520003 	subspl	r0, r2, r3
   257b8:	81a00fc1 	asrhi	r0, r1, #31
   257bc:	31e00fc1 	mvncc	r0, r1, asr #31
   257c0:	13800001 	orrne	r0, r0, #1
   257c4:	e12fff1e 	bx	lr
   257c8:	e1f0cc42 	mvns	ip, r2, asr #24
   257cc:	1a000001 	bne	257d8 <__cmpsf2+0x4c>
   257d0:	e1b0c480 	lsls	ip, r0, #9
   257d4:	1a000003 	bne	257e8 <__cmpsf2+0x5c>
   257d8:	e1f0cc43 	mvns	ip, r3, asr #24
   257dc:	1afffff1 	bne	257a8 <__cmpsf2+0x1c>
   257e0:	e1b0c481 	lsls	ip, r1, #9
   257e4:	0affffef 	beq	257a8 <__cmpsf2+0x1c>
   257e8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   257ec:	e12fff1e 	bx	lr

000257f0 <__aeabi_cfrcmple>:
   257f0:	e1a0c000 	mov	ip, r0
   257f4:	e1a00001 	mov	r0, r1
   257f8:	e1a0100c 	mov	r1, ip
   257fc:	eaffffff 	b	25800 <__aeabi_cfcmpeq>

00025800 <__aeabi_cfcmpeq>:
   25800:	e92d400f 	push	{r0, r1, r2, r3, lr}
   25804:	ebffffe0 	bl	2578c <__cmpsf2>
   25808:	e3500000 	cmp	r0, #0
   2580c:	43700000 	cmnmi	r0, #0
   25810:	e8bd800f 	pop	{r0, r1, r2, r3, pc}

00025814 <__aeabi_fcmpeq>:
   25814:	e52de008 	str	lr, [sp, #-8]!
   25818:	ebfffff8 	bl	25800 <__aeabi_cfcmpeq>
   2581c:	03a00001 	moveq	r0, #1
   25820:	13a00000 	movne	r0, #0
   25824:	e49df008 	ldr	pc, [sp], #8

00025828 <__aeabi_fcmplt>:
   25828:	e52de008 	str	lr, [sp, #-8]!
   2582c:	ebfffff3 	bl	25800 <__aeabi_cfcmpeq>
   25830:	33a00001 	movcc	r0, #1
   25834:	23a00000 	movcs	r0, #0
   25838:	e49df008 	ldr	pc, [sp], #8

0002583c <__aeabi_fcmple>:
   2583c:	e52de008 	str	lr, [sp, #-8]!
   25840:	ebffffee 	bl	25800 <__aeabi_cfcmpeq>
   25844:	93a00001 	movls	r0, #1
   25848:	83a00000 	movhi	r0, #0
   2584c:	e49df008 	ldr	pc, [sp], #8

00025850 <__aeabi_fcmpge>:
   25850:	e52de008 	str	lr, [sp, #-8]!
   25854:	ebffffe5 	bl	257f0 <__aeabi_cfrcmple>
   25858:	93a00001 	movls	r0, #1
   2585c:	83a00000 	movhi	r0, #0
   25860:	e49df008 	ldr	pc, [sp], #8

00025864 <__aeabi_fcmpgt>:
   25864:	e52de008 	str	lr, [sp, #-8]!
   25868:	ebffffe0 	bl	257f0 <__aeabi_cfrcmple>
   2586c:	33a00001 	movcc	r0, #1
   25870:	23a00000 	movcs	r0, #0
   25874:	e49df008 	ldr	pc, [sp], #8

00025878 <__aeabi_f2iz>:
   25878:	e1a02080 	lsl	r2, r0, #1
   2587c:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
   25880:	3a000008 	bcc	258a8 <__aeabi_f2iz+0x30>
   25884:	e3a0309e 	mov	r3, #158	; 0x9e
   25888:	e0532c22 	subs	r2, r3, r2, lsr #24
   2588c:	9a000007 	bls	258b0 <__aeabi_f2iz+0x38>
   25890:	e1a03400 	lsl	r3, r0, #8
   25894:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
   25898:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   2589c:	e1a00233 	lsr	r0, r3, r2
   258a0:	12600000 	rsbne	r0, r0, #0
   258a4:	e12fff1e 	bx	lr
   258a8:	e3a00000 	mov	r0, #0
   258ac:	e12fff1e 	bx	lr
   258b0:	e3720061 	cmn	r2, #97	; 0x61
   258b4:	1a000001 	bne	258c0 <__aeabi_f2iz+0x48>
   258b8:	e1b02480 	lsls	r2, r0, #9
   258bc:	1a000002 	bne	258cc <__aeabi_f2iz+0x54>
   258c0:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
   258c4:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
   258c8:	e12fff1e 	bx	lr
   258cc:	e3a00000 	mov	r0, #0
   258d0:	e12fff1e 	bx	lr

000258d4 <abSense>:
   258d4:	00ff0070 0a000000 00000000 0000ffff     p...............
	...

000258e6 <abInquiry>:
   258e6:	02048000 0000001f 5543504c 20204253     ........LPCUSB  
   258f6:	7373614d 6f747320 65676172 20202020     Mass storage    
   25906:	20312e30 d2b20000                                0.1 ..

0002590c <tinytens>:
   2590c:	3c9cd2b2 97d889bc 3949f623 d5a8a733     ...<....#.I93...
   2591c:	32a50ffd 44f4a73d 255bba08 cf8c979d     ...2=..D..[%....
   2592c:	0e180628 64ac6f43                       (...Co.d

00025934 <blanks.3875>:
   25934:	20202020 20202020 20202020 20202020                     

00025944 <zeroes.3876>:
   25944:	30303030 30303030 30303030 30303030     0000000000000000

00025954 <_ctype_>:
   25954:	20202000 20202020 28282020 20282828     .         ((((( 
   25964:	20202020 20202020 20202020 20202020                     
   25974:	10108820 10101010 10101010 10101010      ...............
   25984:	04040410 04040404 10040404 10101010     ................
   25994:	41411010 41414141 01010101 01010101     ..AAAAAA........
   259a4:	01010101 01010101 01010101 10101010     ................
   259b4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   259c4:	02020202 02020202 02020202 10101010     ................
   259d4:	00000020 00000000 00000000 00000000      ...............
	...

00025a58 <_global_impure_ptr>:
   25a58:	400004b8                                ...@

00025a5c <p05.2397>:
   25a5c:	00000005 00000019 0000007d              ........}...

00025a68 <__mprec_tens>:
   25a68:	3ff00000 00000000 40240000 00000000     ...?......$@....
   25a78:	40590000 00000000 408f4000 00000000     ..Y@.....@.@....
   25a88:	40c38800 00000000 40f86a00 00000000     ...@.....j.@....
   25a98:	412e8480 00000000 416312d0 00000000     ...A......cA....
   25aa8:	4197d784 00000000 41cdcd65 00000000     ...A....e..A....
   25ab8:	4202a05f 20000000 42374876 e8000000     _..B... vH7B....
   25ac8:	426d1a94 a2000000 42a2309c e5400000     ..mB.....0.B..@.
   25ad8:	42d6bcc4 1e900000 430c6bf5 26340000     ...B.....k.C..4&
   25ae8:	4341c379 37e08000 43763457 85d8a000     y.AC...7W4vC....
   25af8:	43abc16d 674ec800 43e158e4 60913d00     m..C..Ng.X.C.=.`
   25b08:	4415af1d 78b58c40 444b1ae4 d6e2ef50     ...D@..x..KDP...
   25b18:	4480f0cf 064dd592 44b52d02 c7e14af6     ...D..M..-.D.J..
   25b28:	44ea7843 79d99db4                       Cx.D...y

00025b30 <__mprec_tinytens>:
   25b30:	3c9cd2b2 97d889bc 3949f623 d5a8a733     ...<....#.I93...
   25b40:	32a50ffd 44f4a73d 255bba08 cf8c979d     ...2=..D..[%....
   25b50:	0ac80628 64ac6f43                       (...Co.d

00025b58 <__mprec_bigtens>:
   25b58:	4341c379 37e08000 4693b8b5 b5056e17     y.AC...7...F.n..
   25b68:	4d384f03 e93ff9f5 5a827748 f9301d32     .O8M..?.Hw.Z2.0.
   25b78:	75154fdd 7f73bf3c                       .O.u<.s.

00025b80 <blanks.3819>:
   25b80:	20202020 20202020 20202020 20202020                     

00025b90 <zeroes.3820>:
   25b90:	30303030 30303030 30303030 30303030     0000000000000000

00025ba0 <npio2_hw>:
   25ba0:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   25bb0:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   25bc0:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   25bd0:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   25be0:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   25bf0:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   25c00:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   25c10:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

00025c20 <two_over_pi>:
   25c20:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   25c30:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   25c40:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   25c50:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   25c60:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   25c70:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   25c80:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   25c90:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   25ca0:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   25cb0:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   25cc0:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   25cd0:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   25ce0:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   25cf0:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   25d00:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   25d10:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   25d20:	0060e27b 00c08c6b                       {.`.k...

00025d28 <init_jk>:
   25d28:	00000002 00000003 00000004 00000006     ................

00025d38 <PIo2>:
   25d38:	3ff921fb 40000000 3e74442d 00000000     .!.?...@-Dt>....
   25d48:	3cf84698 80000000 3b78cc51 60000000     .F.<....Q.x;...`
   25d58:	39f01b83 80000000 387a2520 40000000     ...9.... %z8...@
   25d68:	36e38222 80000000 3569f31d 00000000     "..6......i5....

00025d78 <atanhi>:
   25d78:	3fddac67 0561bb4f 3fe921fb 54442d18     g..?O.a..!.?.-DT
   25d88:	3fef730b d281f69b 3ff921fb 54442d18     .s.?.....!.?.-DT

00025d98 <atanlo>:
   25d98:	3c7a2b7f 222f65e2 3c81a626 33145c07     .+z<.e/"&..<.\.3
   25da8:	3c700788 7af0cbbd 3c91a626 33145c07     ..p<...z&..<.\.3
   25db8:	52204453 4e205741 4120544f 4c494156     SD RAW NOT AVAIL
   25dc8:	454c4241 0a000d0a 7365720d 736e6f70     ABLE.....respons
   25dd8:	25203a65 000d0a64 203d2069 66377830     e: %d...i = 0x7f
   25de8:	0d0a6666 4f4c4200 53204b43 20455a49     ff...BLOCK SIZE 
   25df8:	20544553 20525245 73000d0a 61725f64     SET ERR ...sd_ra
   25e08:	65725f77 62206461 736b726f 6f000d0a     w_read borks...o
   25e18:	696e6570 7020676e 69747261 6e6f6974     pening partition
   25e28:	69616620 0a64656c 706f000d 6e696e65      failed...openin
   25e38:	69662067 7973656c 6d657473 69616620     g filesystem fai
   25e48:	0a64656c 002f000d 6e65706f 20676e69     led.../.opening 
   25e58:	746f6f72 72696420 6f746365 66207972     root directory f
   25e68:	656c6961 000d0a64 756e616d 20203a66     ailed...manuf:  
   25e78:	30257830 0d0a7832 6d656f00 2020203a     0x%02x...oem:   
   25e88:	0a732520 7270000d 203a646f 73252020      %s...prod:   %s
   25e98:	72000d0a 203a7665 25202020 0a783230     ...rev:    %02x.
   25ea8:	6573000d 6c616972 7830203a 6c383025     ..serial: 0x%08l
   25eb8:	000d0a78 65746164 2020203a 64323025     x...date:   %02d
   25ec8:	3230252f 000d0a64 657a6973 2020203a     /%02d...size:   
   25ed8:	0a646c25 6f63000d 203a7970 64252020     %ld...copy:   %d
   25ee8:	77000d0a 72702e72 25203a2e 64252f64     ...wr.pr.: %d/%d
   25ef8:	66000d0a 616d726f 25203a74 000d0a64     ...format: %d...
   25f08:	65657266 2020203a 2f646c25 0a646c25     free:   %ld/%ld.
   25f18:	414d000d 434f4c4c 49414620 0d0a534c     ..MALLOC FAILS..
   25f28:	69614600 2064656c 64616552 20676e69     .Failed Reading 
   25f38:	64616548 0d0a7265 696e4900 6c616974     Header...Initial
   25f48:	6e697369 53552067 74732042 0a6b6361     ising USB stack.
   25f58:	61745300 6e697472 53552067 6f632042     .Starting USB co
   25f68:	6e756d6d 74616369 0a6e6f69 67724100     mmunication..Arg
   25f78:	6e656d75 756f2074 666f2074 756f6220     ument out of bou
   25f88:	2e73646e 6441000a 73657264 756f2073     nds...Address ou
   25f98:	666f2074 756f6220 2e73646e 7245000a     t of bounds...Er
   25fa8:	20726f72 69727564 6520676e 65736172     ror during erase
   25fb8:	71657320 636e6575 000a2e65 20435243      sequence...CRC 
   25fc8:	6c696166 0a2e6465 6c6c4900 6c616765     failed...Illegal
   25fd8:	6d6f6320 646e616d 45000a2e 65736172      command...Erase
   25fe8:	73657220 28207465 20656573 446e6153      reset (see SanD
   25ff8:	206b7369 73636f64 2d357020 2e293331     isk docs p5-13).
   26008:	6e55000a 776f6e6b 7265206e 20726f72     ..Unknown error 
   26018:	78257830 65732820 61532065 7369446e     0x%x (see SanDis
   26028:	6f64206b 70207363 33312d35 000a2e29     k docs p5-13)...
   26038:	3a445343 30252000 72007832 3d707365     CSD:. %02x.resp=
   26048:	66667830 6572000a 3d217073 66667830     0xff..resp!=0xff
   26058:	6143000a 69206472 6f4c2073 64656b63     ..Card is Locked
   26068:	57000a2e 72452050 20657361 70696b53     ...WP Erase Skip
   26078:	6f4c202c 552f6b63 636f6c6e 6d43206b     , Lock/Unlock Cm
   26088:	61462064 64656c69 47000a2e 72656e65     d Failed...Gener
   26098:	2f206c61 6b6e5520 6e776f6e 72726520     al / Unknown err
   260a8:	2d20726f 6163202d 62206472 656b6f72     or -- card broke
   260b8:	0a2e3f6e 746e4900 616e7265 6163206c     n?...Internal ca
   260c8:	63206472 72746e6f 656c6c6f 72652072     rd controller er
   260d8:	2e726f72 6143000a 69206472 7265746e     ror...Card inter
   260e8:	206c616e 20434345 20736177 6c707061     nal ECC was appl
   260f8:	2c646569 74756220 69616620 2064656c     ied, but failed 
   26108:	63206f74 6572726f 74207463 64206568     to correct the d
   26118:	2e617461 7257000a 20657469 746f7270     ata...Write prot
   26128:	20746365 6c6f6976 6f697461 000a2e6e     ect violation...
   26138:	69206e41 6c61766e 73206469 63656c65     An invalid selec
   26148:	6e6f6974 6573202c 726f7463 6f662073     tion, sectors fo
   26158:	72652072 2e657361 754f000a 666f2074     r erase...Out of
   26168:	6e615220 202c6567 5f445343 7265764f      Range, CSD_Over
   26178:	74697277 000a2e65 6e6b6e55 206e776f     write...Unknown 
   26188:	6f727265 30203a72 20782578 65657328     error: 0x%x (see
   26198:	6e615320 6b736944 636f6420 35702073      SanDisk docs p5
   261a8:	2934312d 53000a2e 6e492044 64207469     -14)...SD Init d
   261b8:	2e656e6f 000a2e2e 64726143 64696420     one.....Card did
   261c8:	2074276e 75746572 74206e72 72206568     n't return the r
   261d8:	79646165 61747320 202c6574 61657262     eady state, brea
   261e8:	676e696b 2e707520 000a2e2e 49697073     king up.....spiI
   261f8:	2074696e 20726f66 28495053 000a2930     nit for SPI(0)..
   26208:	20535047 6c696146 002e6465 65636341     GPS Failed..Acce
   26218:	6146206c 64656c69 206f7420 676e6970     l Failed to ping
   26228:	72794700 6166206f 64656c69 206f7420     .Gyro failed to 
   26238:	676e6970 6d6f4300 73736170 69616620     ping.Compass fai
   26248:	2064656c 70206f74 00676e69 73736150     led to ping.Pass
   26258:	65540021 742e7473 53007478 61432044     !.Test.txt.SD Ca
   26268:	49206472 6974696e 7a696c61 6f697461     rd Initializatio
   26278:	6146206e 64656c69 73655400 676e6974     n Failed.Testing
   26288:	002e2e2e 666e6f63 72756769 6f697461     ....configuratio
   26298:	78742e6e 65530074 726f736e 73632e00     n.txt.Sensor..cs
   262a8:	4d4e0076 25004145 25000a73 646c3630     v.NMEA.%s..%06ld
   262b8:	2e35252c 252c6632 66322e35 2e35252c     ,%5.2f,%5.2f,%5.
   262c8:	252c6632 66322e35 2e35252c 252c6632     2f,%5.2f,%5.2f,%
   262d8:	66322e35 2e35252c 252c6632 66322e35     5.2f,%5.2f,%5.2f
   262e8:	2e35252c 0d0a6632 36302500 252c646c     ,%5.2f...%06ld,%
   262f8:	66322e35 2e35252c 252c6632 66322e35     5.2f,%5.2f,%5.2f
   26308:	25000d0a 6e490073 696c6176 6f632064     ...%s.Invalid co
   26318:	6769666e 74617275 2e6e6f69 20747874     nfiguration.txt 
   26328:	656c6966 002c3d00 73657250 20312073     file.=,.Press 1 
   26338:	65206f74 6c62616e 726f2065 74203020     to enable or 0 t
   26348:	6964206f 6c626173 000a2e65 000a6325     o disable...%c..
   26358:	5f676f6c 736e6573 253d726f 6f6c0a64     log_sensor=%d.lo
   26368:	70675f67 64253d73 6e61720a 615f6567     g_gps=%d.range_a
   26378:	6c656363 0a64253d 676e6172 6f635f65     ccel=%d.range_co
   26388:	7361706d 64253d73 67736d0a 64253d73     mpass=%d.msgs=%d
   26398:	2c64252c 252c6425 64252c64 0a64252c     ,%d,%d,%d,%d,%d.
   263a8:	656c7565 64253d72 7265730a 3d6c6169     euler=%d.serial=
   263b8:	000a6425 5f6c6163 253d7861 61630a64     %d..cal_ax=%d.ca
   263c8:	79615f6c 0a64253d 5f6c6163 253d7a61     l_ay=%d.cal_az=%
   263d8:	66322e35 6c61630a 3d78675f 630a6425     5.2f.cal_gx=%d.c
   263e8:	675f6c61 64253d79 6c61630a 3d7a675f     al_gy=%d.cal_gz=
   263f8:	000a6425 616e4528 64656c62 28000a29     %d..(Enabled)..(
   26408:	61736944 64656c62 2e32000a 6f4c2029     Disabled..2.) Lo
   26418:	50472067 61442053 00206174 73694428     g GPS Data .(Dis
   26428:	656c6261 000a2964 20292e33 65636341     abled)..3.) Acce
   26438:	6f72656c 6574656d 61522072 2065676e     lerometer Range 
   26448:	2d2f2b28 29673200 6734000a 38000a29     (+/-.2g)..4g)..8
   26458:	000a2967 29673631 2e34000a 6f432029     g)..16g)..4.) Co
   26468:	7361706d 61522073 2065676e 2d2f2b28     mpass Range (+/-
   26478:	372e3000 302e3100 352e3100 302e3200     .0.7.1.0.1.5.2.0
   26488:	322e3300 382e3300 352e3400 352e3600     .3.2.3.8.4.5.6.5
   26498:	29614700 2e35000a 50472029 654d2053     .Ga)..5.) GPS Me
   264a8:	67617373 28207365 41474700 4700202c     ssages (.GGA, .G
   264b8:	202c4c4c 41534700 4700202c 202c5653     LL, .GSA, .GSV, 
   264c8:	434d5200 5600202c 202c4754 292e3600     .RMC, .VTG, .6.)
   264d8:	6c614320 61726269 49206574 000a554d      Calibrate IMU..
   264e8:	20292e37 736e6553 4f20726f 75707475     7.) Sensor Outpu
   264f8:	00282074 656c7545 000a2972 29776152     t (.Euler)..Raw)
   26508:	2e38000a 65532029 6c616972 74754f20     ..8.) Serial Out
   26518:	20747570 7373654d 73656761 4e002820     put Messages (.N
   26528:	29656e6f 6553000a 726f736e 74614420     one)..Sensor Dat
   26538:	000a2961 20535047 61746144 53000a29     a)..GPS Data)..S
   26548:	6f736e65 6e612072 50472064 61642053     ensor and GPS da
   26558:	0a296174 292e3900 69784520 0a000a74     ta)..9.) Exit...
   26568:	656c6553 6f697463 00203a6e 0a0a6325     Selection: .%c..
   26578:	6f4c0a00 65532067 726f736e 74614420     ..Log Sensor Dat
   26588:	0a000a61 20676f4c 20535047 61746144     a...Log GPS Data
   26598:	410a000a 6c656363 6d6f7265 72657465     ...Accelerometer
   265a8:	6e615220 000a6567 656c6553 52207463      Range..Select R
   265b8:	65676e61 2e310a3a 0a673229 34292e32     ange:.1.)2g.2.)4
   265c8:	2e330a67 0a673829 31292e34 000a6736     g.3.)8g.4.)16g..
   265d8:	6d6f430a 73736170 6e615220 000a6567     .Compass Range..
   265e8:	656c6553 52207463 65676e61 2e310a3a     Select Range:.1.
   265f8:	2f2b2029 372e302d 320a6147 2b20292e     ) +/-0.7Ga.2.) +
   26608:	2e312d2f 0a614730 20292e33 312d2f2b     /-1.0Ga.3.) +/-1
   26618:	6147352e 2e34200a 2f2b2029 302e322d     .5Ga. 4.) +/-2.0
   26628:	000a6147 20292e35 332d2f2b 6147322e     Ga..5.) +/-3.2Ga
   26638:	292e360a 2d2f2b20 47382e33 2e370a61     .6.) +/-3.8Ga.7.
   26648:	2f2b2029 352e342d 380a6147 2b20292e     ) +/-4.5Ga.8.) +
   26658:	2e362d2f 0a614735 6f430a00 6769666e     /-6.5Ga...Config
   26668:	20657275 20535047 7373654d 73656761     ure GPS Messages
   26678:	4747000a 654d2041 67617373 00207365     ..GGA Messages .
   26688:	204c4c47 7373654d 73656761 53470020     GLL Messages .GS
   26698:	654d2041 67617373 00207365 20565347     A Messages .GSV 
   266a8:	7373654d 73656761 4d520020 654d2043     Messages .RMC Me
   266b8:	67617373 00207365 20475456 7373654d     ssages .VTG Mess
   266c8:	73656761 430a0020 62696c61 69746172     ages ..Calibrati
   266d8:	000a6e6f 20746553 20656874 20554d49     on..Set the IMU 
   266e8:	69206e69 20732774 6d726f6e 6f206c61     in it's normal o
   266f8:	6e656972 69746174 61206e6f 7020646e     rientation and p
   26708:	65746f72 69207463 72662074 61206d6f     rotect it from a
   26718:	6d20796e 6d65766f 2e746e65 7250000a     ny movement...Pr
   26728:	20737365 20796e61 2079656b 73206f74     ess any key to s
   26738:	74726174 6c616320 61726269 6e6f6974     tart calibration
   26748:	6857000a 63206e65 62696c61 69746172     ..When calibrati
   26758:	69206e6f 69662073 6873696e 202c6465     on is finished, 
   26768:	20656874 666e6f63 6d206769 20756e65     the config menu 
   26778:	6c6c6977 20656220 73657270 65746e65     will be presente
   26788:	6e612064 6f792064 616d2075 63000a79     d and you may..c
   26798:	69746e6f 2065756e 6d726f6e 6f206c61     ontinue normal o
   267a8:	61726570 6e6f6974 53000a2e 74726174     peration...Start
   267b8:	20676e69 696c6143 74617262 2c6e6f69     ing Calibration,
   267c8:	6e6f6420 6d207427 2065766f 20656874      don't move the 
   267d8:	69766564 0a216563 6e694600 65687369     device!..Finishe
   267e8:	000a2164 6f68430a 2065736f 616e6527     d!...Choose 'ena
   267f8:	27656c62 726f6620 6c754520 41207265     ble' for Euler A
   26808:	656c676e 74754f20 20747570 2720726f     ngle Output or '
   26818:	61736964 27656c62 726f6620 77615220     disable' for Raw
   26828:	74754f20 0a747570 74655300 676e6974      Output..Setting
   26838:	6c697720 7061206c 20796c70 74206f74      will apply to t
   26848:	6c206568 6620676f 20656c69 61746164     he log file data
   26858:	66692820 616e6520 64656c62 6e612029      (if enabled) an
   26868:	68742064 65732065 6c616972 74756f20     d the serial out
   26878:	20747570 20666928 62616e65 2964656c     put (if enabled)
   26888:	430a000a 736f6f68 68772065 20686369     ...Choose which 
   26898:	7373656d 73656761 206f7420 646e6573     messages to send
   268a8:	206f7420 20656874 69726573 70206c61      to the serial p
   268b8:	2e74726f 6143000a 6f697475 54203a6e     ort...Caution: T
   268c8:	6d206568 2065726f 7373656d 73656761     he more messages
   268d8:	61687420 72612074 6e652065 656c6261      that are enable
   268e8:	74202c64 73206568 65776f6c 68742072     d, the slower th
   268f8:	65732065 726f736e 72612073 70752065     e sensors are up
   26908:	65746164 000a2164 20292e31 6d206f4e     dated!..1.) No m
   26918:	61737365 0a736567 20292e32 736e6553     essages.2.) Sens
   26928:	4420726f 0a617461 20292e33 20535047     or Data.3.) GPS 
   26938:	61746144 292e340a 6e655320 20726f73     Data.4.) Sensor 
   26948:	20646e61 20535047 61746144 2d0a000a     and GPS Data...-
   26958:	746c5520 74616d69 4d492065 6f432055      Ultimate IMU Co
   26968:	6769666e 74617275 206e6f69 2d000a2d     nfiguration -..-
   26978:	72655620 6e6f6973 2e642520 2d206425      Version %d.%d -
   26988:	5f5f000a 5f5f5f5f 5f5f5f5f 5f5f5f5f     ..______________
   26998:	5f5f5f5f 5f5f5f5f 5f5f5f5f 5f5f5f5f     ________________
   269a8:	31000a5f 4c20292e 5320676f 6f736e65     _..1.) Log Senso
   269b8:	61442072 00206174 46525350 2c333031     r Data .PSRF103,
   269c8:	64323025 2c30302c 64323025 0031302c     %02d,00,%02d,01.
   269d8:	64333025 00000000 0000666e 74696e69     %03d....nf..init
   269e8:	00000079 00006e61 00464e49 00666e69     y...an..INF.inf.
   269f8:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   26a08:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   26a18:	37363534 62613938 66656463 00000000     456789abcdef....
   26a28:	6c756e28 0000296c 00000030 69666e49     (null)..0...Infi
   26a38:	7974696e 00000000 004e614e 44434241     nity....NaN.ABCD
   26a48:	00004645 64636261 00006665 33323130     EF..abcdef..0123
   26a58:	37363534 00003938 00000043 49534f50     456789..C...POSI
   26a68:	00000058 0000002e 74727173 00000000     X.......sqrt....
